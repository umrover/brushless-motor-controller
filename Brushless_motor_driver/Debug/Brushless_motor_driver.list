
Brushless_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fef4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  080100d8  080100d8  000200d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080107a0  080107a0  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  080107a0  080107a0  000207a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080107a8  080107a8  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080107a8  080107a8  000207a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080107b0  080107b0  000207b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080107b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  200001d8  0801098c  000301d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  0801098c  00030684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027431  00000000  00000000  00030247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004be7  00000000  00000000  00057678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e40  00000000  00000000  0005c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001746  00000000  00000000  0005e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c15  00000000  00000000  0005f7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ab3  00000000  00000000  000873fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101f30  00000000  00000000  000a7eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009df0  00000000  00000000  001a9de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001b3bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080100bc 	.word	0x080100bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	080100bc 	.word	0x080100bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_ZN14CurrSensDriver14counts_to_ampsEm>:

MovingAvgFilter CurrSensDriver::curr_A_filter(10);
MovingAvgFilter CurrSensDriver::curr_B_filter(10);
MovingAvgFilter CurrSensDriver::curr_C_filter(10);

double CurrSensDriver::counts_to_amps(uint32_t ADC_counts){
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

	double sense_out = ( ADC_counts * MAX_ADC_READ_VOLTAGE/MAX_ADC_COUNTS);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fa83 	bl	8000554 <__aeabi_ui2d>
 800104e:	a326      	add	r3, pc, #152	; (adr r3, 80010e8 <_ZN14CurrSensDriver14counts_to_ampsEm+0xa8>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff faf8 	bl	8000648 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <_ZN14CurrSensDriver14counts_to_ampsEm+0xa0>)
 8001066:	f7ff fc19 	bl	800089c <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double shifted_voltage = sense_out - AMPLIFIER_SHIFT;
 8001072:	a317      	add	r3, pc, #92	; (adr r3, 80010d0 <_ZN14CurrSensDriver14counts_to_ampsEm+0x90>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800107c:	f7ff f92c 	bl	80002d8 <__aeabi_dsub>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double scaled_voltage = shifted_voltage/AMPLIFIER_SCALE;
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <_ZN14CurrSensDriver14counts_to_ampsEm+0xa4>)
 800108e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001092:	f7ff fc03 	bl	800089c <__aeabi_ddiv>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double current = scaled_voltage/SHUNT_RESISTANCE;
 800109e:	a30e      	add	r3, pc, #56	; (adr r3, 80010d8 <_ZN14CurrSensDriver14counts_to_ampsEm+0x98>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010a8:	f7ff fbf8 	bl	800089c <__aeabi_ddiv>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return current;
 80010b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80010bc:	eeb0 0a47 	vmov.f32	s0, s14
 80010c0:	eef0 0a67 	vmov.f32	s1, s15
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	f3af 8000 	nop.w
 80010d0:	66666666 	.word	0x66666666
 80010d4:	3ffa6666 	.word	0x3ffa6666
 80010d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010dc:	3f40624d 	.word	0x3f40624d
 80010e0:	40b00000 	.word	0x40b00000
 80010e4:	40340000 	.word	0x40340000
 80010e8:	66666666 	.word	0x66666666
 80010ec:	400a6666 	.word	0x400a6666

080010f0 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>:


void CurrSensDriver::get_current_Amp(PhaseCurrents& currents){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start_DMA(ADC_handle, CurrSensDriver::ADCValues, 3);
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xbc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2203      	movs	r2, #3
 80010fe:	492c      	ldr	r1, [pc, #176]	; (80011b0 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8001100:	4618      	mov	r0, r3
 8001102:	f004 f80b 	bl	800511c <HAL_ADC_Start_DMA>
	curr_A_filter.add_new_element(counts_to_amps(ADCValues[0]));
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff98 	bl	8001040 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8001110:	eeb0 7a40 	vmov.f32	s14, s0
 8001114:	eef0 7a60 	vmov.f32	s15, s1
 8001118:	eeb0 0a47 	vmov.f32	s0, s14
 800111c:	eef0 0a67 	vmov.f32	s1, s15
 8001120:	4824      	ldr	r0, [pc, #144]	; (80011b4 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc4>)
 8001122:	f001 f844 	bl	80021ae <_ZN15MovingAvgFilter15add_new_elementEd>
	curr_B_filter.add_new_element(counts_to_amps(ADCValues[1]));
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff88 	bl	8001040 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8001130:	eeb0 7a40 	vmov.f32	s14, s0
 8001134:	eef0 7a60 	vmov.f32	s15, s1
 8001138:	eeb0 0a47 	vmov.f32	s0, s14
 800113c:	eef0 0a67 	vmov.f32	s1, s15
 8001140:	481d      	ldr	r0, [pc, #116]	; (80011b8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc8>)
 8001142:	f001 f834 	bl	80021ae <_ZN15MovingAvgFilter15add_new_elementEd>
	curr_C_filter.add_new_element(counts_to_amps(ADCValues[2]));
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff78 	bl	8001040 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8001150:	eeb0 7a40 	vmov.f32	s14, s0
 8001154:	eef0 7a60 	vmov.f32	s15, s1
 8001158:	eeb0 0a47 	vmov.f32	s0, s14
 800115c:	eef0 0a67 	vmov.f32	s1, s15
 8001160:	4816      	ldr	r0, [pc, #88]	; (80011bc <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xcc>)
 8001162:	f001 f824 	bl	80021ae <_ZN15MovingAvgFilter15add_new_elementEd>
	currents.iA = curr_A_filter.filtered_output();
 8001166:	4813      	ldr	r0, [pc, #76]	; (80011b4 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc4>)
 8001168:	f001 f869 	bl	800223e <_ZN15MovingAvgFilter15filtered_outputEv>
 800116c:	eeb0 7a40 	vmov.f32	s14, s0
 8001170:	eef0 7a60 	vmov.f32	s15, s1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	ed83 7b00 	vstr	d7, [r3]
	currents.iB = curr_B_filter.filtered_output();
 800117a:	480f      	ldr	r0, [pc, #60]	; (80011b8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc8>)
 800117c:	f001 f85f 	bl	800223e <_ZN15MovingAvgFilter15filtered_outputEv>
 8001180:	eeb0 7a40 	vmov.f32	s14, s0
 8001184:	eef0 7a60 	vmov.f32	s15, s1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	ed83 7b02 	vstr	d7, [r3, #8]
	currents.iC = curr_C_filter.filtered_output();
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xcc>)
 8001190:	f001 f855 	bl	800223e <_ZN15MovingAvgFilter15filtered_outputEv>
 8001194:	eeb0 7a40 	vmov.f32	s14, s0
 8001198:	eef0 7a60 	vmov.f32	s15, s1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	ed83 7b04 	vstr	d7, [r3, #16]
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200001f4 	.word	0x200001f4
 80011b0:	200001f8 	.word	0x200001f8
 80011b4:	20000208 	.word	0x20000208
 80011b8:	20000220 	.word	0x20000220
 80011bc:	20000238 	.word	0x20000238

080011c0 <_ZN15MovingAvgFilterD1Ev>:
#define INC_FILTER_H_

#include<vector>
#include<cstdint>

class MovingAvgFilter{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3304      	adds	r3, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f839 	bl	8001244 <_ZNSt6vectorIdSaIdEED1Ev>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_Z41__static_initialization_and_destruction_0ii>:
	return 0;
}

bool CurrSensDriver::set_voltage_V(PhaseType phase, double voltage){
	return true;
}
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d110      	bne.n	800120e <_Z41__static_initialization_and_destruction_0ii+0x32>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10b      	bne.n	800120e <_Z41__static_initialization_and_destruction_0ii+0x32>
MovingAvgFilter CurrSensDriver::curr_A_filter(10);
 80011f6:	210a      	movs	r1, #10
 80011f8:	480f      	ldr	r0, [pc, #60]	; (8001238 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80011fa:	f000 ffa9 	bl	8002150 <_ZN15MovingAvgFilterC1Eh>
MovingAvgFilter CurrSensDriver::curr_B_filter(10);
 80011fe:	210a      	movs	r1, #10
 8001200:	480e      	ldr	r0, [pc, #56]	; (800123c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001202:	f000 ffa5 	bl	8002150 <_ZN15MovingAvgFilterC1Eh>
MovingAvgFilter CurrSensDriver::curr_C_filter(10);
 8001206:	210a      	movs	r1, #10
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800120a:	f000 ffa1 	bl	8002150 <_ZN15MovingAvgFilterC1Eh>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10d      	bne.n	8001230 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121a:	4293      	cmp	r3, r2
 800121c:	d108      	bne.n	8001230 <_Z41__static_initialization_and_destruction_0ii+0x54>
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001220:	f7ff ffce 	bl	80011c0 <_ZN15MovingAvgFilterD1Ev>
MovingAvgFilter CurrSensDriver::curr_B_filter(10);
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001226:	f7ff ffcb 	bl	80011c0 <_ZN15MovingAvgFilterD1Ev>
MovingAvgFilter CurrSensDriver::curr_A_filter(10);
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800122c:	f7ff ffc8 	bl	80011c0 <_ZN15MovingAvgFilterD1Ev>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000208 	.word	0x20000208
 800123c:	20000220 	.word	0x20000220
 8001240:	20000238 	.word	0x20000238

08001244 <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681c      	ldr	r4, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f834 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800125c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800125e:	461a      	mov	r2, r3
 8001260:	4629      	mov	r1, r5
 8001262:	4620      	mov	r0, r4
 8001264:	f000 f839 	bl	80012da <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f811 	bl	8001292 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}

0800127a <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f837 	bl	80012f6 <_ZNSaIdED1Ev>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80012aa:	461a      	mov	r2, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f82e 	bl	800130e <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffe0 	bl	800127a <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 f823 	bl	8001334 <_ZSt8_DestroyIPdEvT_S1_>
    }
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZNSaIdED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f825 	bl	800134e <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
	if (__p)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f81c 	bl	8001364 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_ZSt8_DestroyIPdEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800133e:	6839      	ldr	r1, [r7, #0]
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f81e 	bl	8001382 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	68b9      	ldr	r1, [r7, #8]
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 f80f 	bl	8001398 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4619      	mov	r1, r3
 80013aa:	68b8      	ldr	r0, [r7, #8]
 80013ac:	f009 f9e8 	bl	800a780 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_GLOBAL__sub_I__ZN14CurrSensDriver10ADC_handleE>:
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013c0:	2001      	movs	r0, #1
 80013c2:	f7ff ff0b 	bl	80011dc <_Z41__static_initialization_and_destruction_0ii>
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_GLOBAL__sub_D__ZN14CurrSensDriver10ADC_handleE>:
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ff03 	bl	80011dc <_Z41__static_initialization_and_destruction_0ii>
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_TIM_PeriodElapsedCallback>:


extern motor_data data_values;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b092      	sub	sp, #72	; 0x48
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
	// check if it gets here
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fe6c 	bl	80010f0 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>

	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8001418:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800141c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001420:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8001424:	eeb0 2a45 	vmov.f32	s4, s10
 8001428:	eef0 2a65 	vmov.f32	s5, s11
 800142c:	eeb0 1a46 	vmov.f32	s2, s12
 8001430:	eef0 1a66 	vmov.f32	s3, s13
 8001434:	eeb0 0a47 	vmov.f32	s0, s14
 8001438:	eef0 0a67 	vmov.f32	s1, s15
 800143c:	f002 fdf0 	bl	8004020 <_Z9tf_clarkeddd>
 8001440:	eeb0 6a40 	vmov.f32	s12, s0
 8001444:	eef0 6a60 	vmov.f32	s13, s1
 8001448:	eeb0 7a41 	vmov.f32	s14, s2
 800144c:	eef0 7a61 	vmov.f32	s15, s3
 8001450:	ed87 6b06 	vstr	d6, [r7, #24]
 8001454:	ed87 7b08 	vstr	d7, [r7, #32]

	double theta_d =  HallEncoderDriver::get_thetad();
 8001458:	f002 f95a 	bl	8003710 <_ZN17HallEncoderDriver10get_thetadEv>
 800145c:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8001460:	ed97 7b06 	vldr	d7, [r7, #24]
 8001464:	ed97 6b08 	vldr	d6, [r7, #32]
	auto [curr_d, curr_q] = tf_park(curr_alpha, curr_beta, theta_d);
 8001468:	ed97 2b10 	vldr	d2, [r7, #64]	; 0x40
 800146c:	eeb0 1a46 	vmov.f32	s2, s12
 8001470:	eef0 1a66 	vmov.f32	s3, s13
 8001474:	eeb0 0a47 	vmov.f32	s0, s14
 8001478:	eef0 0a67 	vmov.f32	s1, s15
 800147c:	f002 fd62 	bl	8003f44 <_Z7tf_parkddd>
 8001480:	eeb0 6a40 	vmov.f32	s12, s0
 8001484:	eef0 6a60 	vmov.f32	s13, s1
 8001488:	eeb0 7a41 	vmov.f32	s14, s2
 800148c:	eef0 7a61 	vmov.f32	s15, s3
 8001490:	ed87 6b02 	vstr	d6, [r7, #8]
 8001494:	ed87 7b04 	vstr	d7, [r7, #16]

	return;
 8001498:	bf00      	nop
}
 800149a:	3748      	adds	r7, #72	; 0x48
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b097      	sub	sp, #92	; 0x5c
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	// increment position counts by one every time in the callback

	// Every time this callback is called, the angle in the
	//motor increases by delta theta

	volatile uint32_t* H1 = &TIM3->CCR1;
 80014a8:	4b5b      	ldr	r3, [pc, #364]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x178>)
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	volatile uint32_t* H2 = &TIM3->CCR2;
 80014ac:	4b5b      	ldr	r3, [pc, #364]	; (800161c <HAL_TIM_IC_CaptureCallback+0x17c>)
 80014ae:	64bb      	str	r3, [r7, #72]	; 0x48
	volatile uint32_t* H3 = &TIM3->CCR3;
 80014b0:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x180>)
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44

	std::vector<volatile uint32_t*> encoder_timer_readings(3);
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f8b9 	bl	8001630 <_ZNSaIPVmEC1Ev>
 80014be:	f107 0218 	add.w	r2, r7, #24
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	2103      	movs	r1, #3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f8c9 	bl	8001660 <_ZNSt6vectorIPVmSaIS1_EEC1EjRKS2_>
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f8b8 	bl	8001648 <_ZNSaIPVmED1Ev>
	encoder_timer_readings = {H1, H2, H3};
 80014d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
 80014dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
 80014e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	f107 000c 	add.w	r0, r7, #12
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014fa:	f000 f8e6 	bl	80016ca <_ZNSt6vectorIPVmSaIS1_EEaSESt16initializer_listIS1_E>
	uint32_t longest_CCR = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t hall_encoder_index = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	for (uint8_t i=0; i<encoder_timer_readings.size(); i++) {
 8001508:	2300      	movs	r3, #0
 800150a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800150e:	e027      	b.n	8001560 <HAL_TIM_IC_CaptureCallback+0xc0>
	    if(*(encoder_timer_readings[i]) > longest_CCR){
 8001510:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f900 	bl	8001720 <_ZNSt6vectorIPVmSaIS1_EEixEj>
 8001520:	4603      	mov	r3, r0
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001528:	429a      	cmp	r2, r3
 800152a:	bf34      	ite	cc
 800152c:	2301      	movcc	r3, #1
 800152e:	2300      	movcs	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00f      	beq.n	8001556 <HAL_TIM_IC_CaptureCallback+0xb6>
	    	longest_CCR = *(encoder_timer_readings[i]);
 8001536:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f8ed 	bl	8001720 <_ZNSt6vectorIPVmSaIS1_EEixEj>
 8001546:	4603      	mov	r3, r0
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	657b      	str	r3, [r7, #84]	; 0x54
	    	hall_encoder_index = i;
 800154e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001552:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	for (uint8_t i=0; i<encoder_timer_readings.size(); i++) {
 8001556:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800155a:	3301      	adds	r3, #1
 800155c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001560:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f8c9 	bl	8001700 <_ZNKSt6vectorIPVmSaIS1_EE4sizeEv>
 800156e:	4603      	mov	r3, r0
 8001570:	429c      	cmp	r4, r3
 8001572:	bf34      	ite	cc
 8001574:	2301      	movcc	r3, #1
 8001576:	2300      	movcs	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1c8      	bne.n	8001510 <HAL_TIM_IC_CaptureCallback+0x70>
	}


	// The longest CCR represents the amount of time taken for the motor to move delta theta
	// where delta theta is (360/number of poles)
	double time_per_count = double(TIM3->ARR)/(64000000.0);
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffe6 	bl	8000554 <__aeabi_ui2d>
 8001588:	a321      	add	r3, pc, #132	; (adr r3, 8001610 <HAL_TIM_IC_CaptureCallback+0x170>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7ff f985 	bl	800089c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double angular_velocity = DELTA_THETA/(longest_CCR*time_per_count); //degrees per second
 800159a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800159c:	f7fe ffda 	bl	8000554 <__aeabi_ui2d>
 80015a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015a4:	f7ff f850 	bl	8000648 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	491d      	ldr	r1, [pc, #116]	; (8001628 <HAL_TIM_IC_CaptureCallback+0x188>)
 80015b2:	f7ff f973 	bl	800089c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	data_values.motor_velocity = angular_velocity;
 80015be:	491b      	ldr	r1, [pc, #108]	; (800162c <HAL_TIM_IC_CaptureCallback+0x18c>)
 80015c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015c4:	e9c1 2300 	strd	r2, r3, [r1]
	data_values.motor_position += DELTA_THETA;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_TIM_IC_CaptureCallback+0x18c>)
 80015ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_TIM_IC_CaptureCallback+0x188>)
 80015d4:	f7fe fe82 	bl	80002dc <__adddf3>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4913      	ldr	r1, [pc, #76]	; (800162c <HAL_TIM_IC_CaptureCallback+0x18c>)
 80015de:	e9c1 2302 	strd	r2, r3, [r1, #8]
	longest_CCR = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	657b      	str	r3, [r7, #84]	; 0x54
	*encoder_timer_readings[hall_encoder_index] = 0;
 80015e6:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f895 	bl	8001720 <_ZNSt6vectorIPVmSaIS1_EEixEj>
 80015f6:	4603      	mov	r3, r0
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
}
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f846 	bl	8001694 <_ZNSt6vectorIPVmSaIS1_EED1Ev>
 8001608:	375c      	adds	r7, #92	; 0x5c
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}
 800160e:	bf00      	nop
 8001610:	00000000 	.word	0x00000000
 8001614:	418e8480 	.word	0x418e8480
 8001618:	40000434 	.word	0x40000434
 800161c:	40000438 	.word	0x40000438
 8001620:	4000043c 	.word	0x4000043c
 8001624:	40000400 	.word	0x40000400
 8001628:	40360000 	.word	0x40360000
 800162c:	20000518 	.word	0x20000518

08001630 <_ZNSaIPVmEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f881 	bl	8001740 <_ZN9__gnu_cxx13new_allocatorIPVmEC1Ev>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_ZNSaIPVmED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f880 	bl	8001756 <_ZN9__gnu_cxx13new_allocatorIPVmED1Ev>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZNSt6vectorIPVmSaIS1_EEC1EjRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 800166c:	68fc      	ldr	r4, [r7, #12]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f000 f87b 	bl	800176c <_ZNSt6vectorIPVmSaIS1_EE17_S_check_init_lenEjRKS2_>
 8001676:	4603      	mov	r3, r0
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4619      	mov	r1, r3
 800167c:	4620      	mov	r0, r4
 800167e:	f000 f8a9 	bl	80017d4 <_ZNSt12_Vector_baseIPVmSaIS1_EEC1EjRKS2_>
      { _M_default_initialize(__n); }
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f8d2 	bl	800182e <_ZNSt6vectorIPVmSaIS1_EE21_M_default_initializeEj>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}

08001694 <_ZNSt6vectorIPVmSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681c      	ldr	r4, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f8d9 	bl	800185e <_ZNSt12_Vector_baseIPVmSaIS1_EE19_M_get_Tp_allocatorEv>
 80016ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80016ae:	461a      	mov	r2, r3
 80016b0:	4629      	mov	r1, r5
 80016b2:	4620      	mov	r0, r4
 80016b4:	f000 f8de 	bl	8001874 <_ZSt8_DestroyIPPVmS1_EvT_S3_RSaIT0_E>
      }
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f89e 	bl	80017fc <_ZNSt12_Vector_baseIPVmSaIS1_EED1Ev>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bdb0      	pop	{r4, r5, r7, pc}

080016ca <_ZNSt6vectorIPVmSaIS1_EEaSESt16initializer_listIS1_E>:
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */
      vector&
      operator=(initializer_list<value_type> __l)
 80016ca:	b5b0      	push	{r4, r5, r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	this->_M_assign_aux(__l.begin(), __l.end(),
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f8d8 	bl	8001890 <_ZNKSt16initializer_listIPVmE5beginEv>
 80016e0:	4604      	mov	r4, r0
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f8df 	bl	80018a8 <_ZNKSt16initializer_listIPVmE3endEv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	462b      	mov	r3, r5
 80016ee:	4621      	mov	r1, r4
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 f8eb 	bl	80018cc <_ZNSt6vectorIPVmSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
			    random_access_iterator_tag());
	return *this;
 80016f6:	68fb      	ldr	r3, [r7, #12]
      }
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}

08001700 <_ZNKSt6vectorIPVmSaIS1_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	109b      	asrs	r3, r3, #2
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZNSt6vectorIPVmSaIS1_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
      }
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_ZN9__gnu_cxx13new_allocatorIPVmEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN9__gnu_cxx13new_allocatorIPVmED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_ZNSt6vectorIPVmSaIS1_EE17_S_check_init_lenEjRKS2_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	6839      	ldr	r1, [r7, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 f958 	bl	8001a32 <_ZNSaIPVmEC1ERKS1_>
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f939 	bl	80019fe <_ZNSt6vectorIPVmSaIS1_EE11_S_max_sizeERKS2_>
 800178c:	4602      	mov	r2, r0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4293      	cmp	r3, r2
 8001792:	bf8c      	ite	hi
 8001794:	2301      	movhi	r3, #1
 8001796:	2300      	movls	r3, #0
 8001798:	b2dc      	uxtb	r4, r3
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff52 	bl	8001648 <_ZNSaIPVmED1Ev>
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d002      	beq.n	80017ae <_ZNSt6vectorIPVmSaIS1_EE17_S_check_init_lenEjRKS2_+0x42>
	  __throw_length_error(
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <_ZNSt6vectorIPVmSaIS1_EE17_S_check_init_lenEjRKS2_+0x4c>)
 80017aa:	f009 f802 	bl	800a7b2 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 80017ae:	687b      	ldr	r3, [r7, #4]
      }
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	080100d8 	.word	0x080100d8

080017bc <_ZNSt12_Vector_baseIPVmSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff3f 	bl	8001648 <_ZNSaIPVmED1Ev>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_ZNSt12_Vector_baseIPVmSaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f932 	bl	8001a4e <_ZNSt12_Vector_baseIPVmSaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 f940 	bl	8001a72 <_ZNSt12_Vector_baseIPVmSaIS1_EE17_M_create_storageEj>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_ZNSt12_Vector_baseIPVmSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8001814:	461a      	mov	r2, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f946 	bl	8001aa8 <_ZNSt12_Vector_baseIPVmSaIS1_EE13_M_deallocateEPS1_j>
      }
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffcc 	bl	80017bc <_ZNSt12_Vector_baseIPVmSaIS1_EE12_Vector_implD1Ev>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZNSt6vectorIPVmSaIS1_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 800182e:	b590      	push	{r4, r7, lr}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f80d 	bl	800185e <_ZNSt12_Vector_baseIPVmSaIS1_EE19_M_get_Tp_allocatorEv>
 8001844:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001846:	461a      	mov	r2, r3
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	4620      	mov	r0, r4
 800184c:	f000 f93f 	bl	8001ace <_ZSt27__uninitialized_default_n_aIPPVmjS1_ET_S3_T0_RSaIT1_E>
 8001850:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	605a      	str	r2, [r3, #4]
      }
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}

0800185e <_ZNSt12_Vector_baseIPVmSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_ZSt8_DestroyIPPVmS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f932 	bl	8001aec <_ZSt8_DestroyIPPVmEvT_S3_>
    }
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZNKSt16initializer_listIPVmE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZNKSt16initializer_listIPVmE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffed 	bl	8001890 <_ZNKSt16initializer_listIPVmE5beginEv>
 80018b6:	4604      	mov	r4, r0
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f924 	bl	8001b06 <_ZNKSt16initializer_listIPVmE4sizeEv>
 80018be:	4603      	mov	r3, r0
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4423      	add	r3, r4
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}

080018cc <_ZNSt6vectorIPVmSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	68b8      	ldr	r0, [r7, #8]
 80018de:	f000 f91e 	bl	8001b1e <_ZSt8distanceIPKPVmENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 80018e2:	4603      	mov	r3, r0
 80018e4:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f92d 	bl	8001b46 <_ZNKSt6vectorIPVmSaIS1_EE8capacityEv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	bf8c      	ite	hi
 80018f4:	2301      	movhi	r3, #1
 80018f6:	2300      	movls	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d038      	beq.n	8001970 <_ZNSt6vectorIPVmSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xa4>
	  {
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ffac 	bl	800185e <_ZNSt12_Vector_baseIPVmSaIS1_EE19_M_get_Tp_allocatorEv>
 8001906:	4603      	mov	r3, r0
 8001908:	4619      	mov	r1, r3
 800190a:	69f8      	ldr	r0, [r7, #28]
 800190c:	f7ff ff2e 	bl	800176c <_ZNSt6vectorIPVmSaIS1_EE17_S_check_init_lenEjRKS2_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	69f9      	ldr	r1, [r7, #28]
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f925 	bl	8001b66 <_ZNSt6vectorIPVmSaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_jT_S8_>
 800191c:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681c      	ldr	r4, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff98 	bl	800185e <_ZNSt12_Vector_baseIPVmSaIS1_EE19_M_get_Tp_allocatorEv>
 800192e:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001930:	461a      	mov	r2, r3
 8001932:	4629      	mov	r1, r5
 8001934:	4620      	mov	r0, r4
 8001936:	f7ff ff9d 	bl	8001874 <_ZSt8_DestroyIPPVmS1_EvT_S3_RSaIT0_E>
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 800194c:	461a      	mov	r2, r3
 800194e:	f000 f8ab 	bl	8001aa8 <_ZNSt12_Vector_baseIPVmSaIS1_EE13_M_deallocateEPS1_j>
	    this->_M_impl._M_start = __tmp;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	441a      	add	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	609a      	str	r2, [r3, #8]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
 800196e:	e042      	b.n	80019f6 <_ZNSt6vectorIPVmSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x12a>
	else if (size() >= __len)
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fec5 	bl	8001700 <_ZNKSt6vectorIPVmSaIS1_EE4sizeEv>
 8001976:	4602      	mov	r2, r0
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4293      	cmp	r3, r2
 800197c:	bf94      	ite	ls
 800197e:	2301      	movls	r3, #1
 8001980:	2300      	movhi	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00c      	beq.n	80019a2 <_ZNSt6vectorIPVmSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xd6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f000 f925 	bl	8001be0 <_ZSt4copyIPKPVmPS1_ET0_T_S6_S5_>
 8001996:	4603      	mov	r3, r0
 8001998:	4619      	mov	r1, r3
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f8ff 	bl	8001b9e <_ZNSt6vectorIPVmSaIS1_EE15_M_erase_at_endEPS1_>
      }
 80019a0:	e029      	b.n	80019f6 <_ZNSt6vectorIPVmSaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x12a>
	    _ForwardIterator __mid = __first;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f7ff feaa 	bl	8001700 <_ZNKSt6vectorIPVmSaIS1_EE4sizeEv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f92b 	bl	8001c10 <_ZSt7advanceIPKPVmjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 80019ba:	6939      	ldr	r1, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	68b8      	ldr	r0, [r7, #8]
 80019c4:	f000 f90c 	bl	8001be0 <_ZSt4copyIPKPVmPS1_ET0_T_S6_S5_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff fe99 	bl	8001700 <_ZNKSt6vectorIPVmSaIS1_EE4sizeEv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 80019d6:	693c      	ldr	r4, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff3d 	bl	800185e <_ZNSt12_Vector_baseIPVmSaIS1_EE19_M_get_Tp_allocatorEv>
 80019e4:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 80019e6:	462a      	mov	r2, r5
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4620      	mov	r0, r4
 80019ec:	f000 f923 	bl	8001c36 <_ZSt22__uninitialized_copy_aIPKPVmPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 80019f0:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	605a      	str	r2, [r3, #4]
      }
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdb0      	pop	{r4, r5, r7, pc}

080019fe <_ZNSt6vectorIPVmSaIS1_EE11_S_max_sizeERKS2_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8001a06:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8001a0a:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f923 	bl	8001c58 <_ZNSt16allocator_traitsISaIPVmEE8max_sizeERKS2_>
 8001a12:	4603      	mov	r3, r0
 8001a14:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001a16:	f107 0208 	add.w	r2, r7, #8
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 f925 	bl	8001c70 <_ZSt3minIjERKT_S2_S2_>
 8001a26:	4603      	mov	r3, r0
 8001a28:	681b      	ldr	r3, [r3, #0]
      }
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_ZNSaIPVmEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001a3c:	6839      	ldr	r1, [r7, #0]
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f92a 	bl	8001c98 <_ZN9__gnu_cxx13new_allocatorIPVmEC1ERKS3_>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_ZNSt12_Vector_baseIPVmSaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffe9 	bl	8001a32 <_ZNSaIPVmEC1ERKS1_>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f924 	bl	8001cb0 <_ZNSt12_Vector_baseIPVmSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_ZNSt12_Vector_baseIPVmSaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8001a7c:	6839      	ldr	r1, [r7, #0]
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f92a 	bl	8001cd8 <_ZNSt12_Vector_baseIPVmSaIS1_EE11_M_allocateEj>
 8001a84:	4602      	mov	r2, r0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	441a      	add	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
      }
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_ZNSt12_Vector_baseIPVmSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	if (__p)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <_ZNSt12_Vector_baseIPVmSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f91d 	bl	8001d00 <_ZNSt16allocator_traitsISaIPVmEE10deallocateERS2_PS1_j>
      }
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_ZSt27__uninitialized_default_n_aIPPVmjS1_ET_S3_T0_RSaIT1_E>:

  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f91e 	bl	8001d1e <_ZSt25__uninitialized_default_nIPPVmjET_S3_T0_>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_ZSt8_DestroyIPPVmEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001af6:	6839      	ldr	r1, [r7, #0]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f920 	bl	8001d3e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPVmEEvT_S5_>
    }
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_ZNKSt16initializer_listIPVmE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_ZSt8distanceIPKPVmENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001b1e:	b5b0      	push	{r4, r5, r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001b28:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f911 	bl	8001d54 <_ZSt19__iterator_categoryIPKPVmENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 8001b32:	462a      	mov	r2, r5
 8001b34:	6839      	ldr	r1, [r7, #0]
 8001b36:	4620      	mov	r0, r4
 8001b38:	f000 f917 	bl	8001d6a <_ZSt10__distanceIPKPVmENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8001b3c:	4603      	mov	r3, r0
    }
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bdb0      	pop	{r4, r5, r7, pc}

08001b46 <_ZNKSt6vectorIPVmSaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	109b      	asrs	r3, r3, #2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <_ZNSt6vectorIPVmSaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f8ad 	bl	8001cd8 <_ZNSt12_Vector_baseIPVmSaIS1_EE11_M_allocateEj>
 8001b7e:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fe6b 	bl	800185e <_ZNSt12_Vector_baseIPVmSaIS1_EE19_M_get_Tp_allocatorEv>
 8001b88:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f851 	bl	8001c36 <_ZSt22__uninitialized_copy_aIPKPVmPS1_S1_ET0_T_S6_S5_RSaIT1_E>
	      return __result;
 8001b94:	697b      	ldr	r3, [r7, #20]
	}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_ZNSt6vectorIPVmSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001b9e:	b590      	push	{r4, r7, lr}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	109b      	asrs	r3, r3, #2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00e      	beq.n	8001bd8 <_ZNSt6vectorIPVmSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe4c 	bl	800185e <_ZNSt12_Vector_baseIPVmSaIS1_EE19_M_get_Tp_allocatorEv>
 8001bc6:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f7ff fe51 	bl	8001874 <_ZSt8_DestroyIPPVmS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <_ZSt4copyIPKPVmPS1_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f8cc 	bl	8001d8a <_ZSt12__miter_baseIPKPVmET_S4_>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	68b8      	ldr	r0, [r7, #8]
 8001bf6:	f000 f8c8 	bl	8001d8a <_ZSt12__miter_baseIPKPVmET_S4_>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4620      	mov	r0, r4
 8001c02:	f000 f8cd 	bl	8001da0 <_ZSt13__copy_move_aILb0EPKPVmPS1_ET1_T0_S6_S5_>
 8001c06:	4603      	mov	r3, r0
    }
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd90      	pop	{r4, r7, pc}

08001c10 <_ZSt7advanceIPKPVmjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f898 	bl	8001d54 <_ZSt19__iterator_categoryIPKPVmENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8001c24:	4622      	mov	r2, r4
 8001c26:	68f9      	ldr	r1, [r7, #12]
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8dc 	bl	8001de6 <_ZSt9__advanceIPKPVmiEvRT_T0_St26random_access_iterator_tag>
    }
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}

08001c36 <_ZSt22__uninitialized_copy_aIPKPVmPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f8df 	bl	8001e0c <_ZSt18uninitialized_copyIPKPVmPS1_ET0_T_S6_S5_>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_ZNSt16allocator_traitsISaIPVmEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8e5 	bl	8001e30 <_ZNK9__gnu_cxx13new_allocatorIPVmE8max_sizeEv>
 8001c66:	4603      	mov	r3, r0
      }
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d201      	bcs.n	8001c8a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	e000      	b.n	8001c8c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001c8a:	687b      	ldr	r3, [r7, #4]
    }
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_ZN9__gnu_cxx13new_allocatorIPVmEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_ZNSt12_Vector_baseIPVmSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
	{ }
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_ZNSt12_Vector_baseIPVmSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <_ZNSt12_Vector_baseIPVmSaIS1_EE11_M_allocateEj+0x1e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6839      	ldr	r1, [r7, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f8ab 	bl	8001e48 <_ZNSt16allocator_traitsISaIPVmEE8allocateERS2_j>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	e000      	b.n	8001cf8 <_ZNSt12_Vector_baseIPVmSaIS1_EE11_M_allocateEj+0x20>
 8001cf6:	2300      	movs	r3, #0
      }
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_ZNSt16allocator_traitsISaIPVmEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 f8a8 	bl	8001e66 <_ZN9__gnu_cxx13new_allocatorIPVmE10deallocateEPS2_j>
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZSt25__uninitialized_default_nIPPVmjET_S3_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8001d2c:	6839      	ldr	r1, [r7, #0]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8b4 	bl	8001e9c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPVmjEET_S5_T0_>
 8001d34:	4603      	mov	r3, r0
    }
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPVmEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_ZSt19__iterator_categoryIPKPVmENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001d5c:	bf00      	nop
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_ZSt10__distanceIPKPVmENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	109b      	asrs	r3, r3, #2
    }
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_ZSt12__miter_baseIPKPVmET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_ZSt13__copy_move_aILb0EPKPVmPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f894 	bl	8001eda <_ZSt12__niter_baseIPKPVmET_S4_>
 8001db2:	4604      	mov	r4, r0
 8001db4:	68b8      	ldr	r0, [r7, #8]
 8001db6:	f000 f890 	bl	8001eda <_ZSt12__niter_baseIPKPVmET_S4_>
 8001dba:	4605      	mov	r5, r0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f896 	bl	8001ef0 <_ZSt12__niter_baseIPPVmET_S3_>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4629      	mov	r1, r5
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f000 f89b 	bl	8001f06 <_ZSt14__copy_move_a1ILb0EPKPVmPS1_ET1_T0_S6_S5_>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f8a5 	bl	8001f26 <_ZSt12__niter_wrapIPPVmET_RKS3_S3_>
 8001ddc:	4603      	mov	r3, r0
    }
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdb0      	pop	{r4, r5, r7, pc}

08001de6 <_ZSt9__advanceIPKPVmiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	441a      	add	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	601a      	str	r2, [r3, #0]
    }
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_ZSt18uninitialized_copyIPKPVmPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f88c 	bl	8001f3e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPVmPS3_EET0_T_S8_S7_>
 8001e26:	4603      	mov	r3, r0
    }
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_ZNK9__gnu_cxx13new_allocatorIPVmE8max_sizeEv>:

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f890 	bl	8001f5e <_ZNK9__gnu_cxx13new_allocatorIPVmE11_M_max_sizeEv>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_ZNSt16allocator_traitsISaIPVmEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001e52:	2200      	movs	r2, #0
 8001e54:	6839      	ldr	r1, [r7, #0]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f88d 	bl	8001f76 <_ZN9__gnu_cxx13new_allocatorIPVmE8allocateEjPKv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_ZN9__gnu_cxx13new_allocatorIPVmE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4619      	mov	r1, r3
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f008 fc81 	bl	800a780 <_ZdlPvj>
      }
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_ZSt11__addressofIPVmEPT_RS2_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPVmjEET_S5_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	  if (__n > 0)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d011      	beq.n	8001ed0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPVmjEET_S5_T0_+0x34>
		= std::__addressof(*__first);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffea 	bl	8001e86 <_ZSt11__addressofIPVmEPT_RS2_>
 8001eb2:	60f8      	str	r0, [r7, #12]
	      std::_Construct(__val);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f887 	bl	8001fc8 <_ZSt10_ConstructIPVmJEEvPT_DpOT0_>
	      ++__first;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	607b      	str	r3, [r7, #4]
	      __first = std::fill_n(__first, __n - 1, *__val);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f88d 	bl	8001fe8 <_ZSt6fill_nIPPVmjS1_ET_S3_T0_RKT1_>
 8001ece:	6078      	str	r0, [r7, #4]
	  return __first;
 8001ed0:	687b      	ldr	r3, [r7, #4]
	}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_ZSt12__niter_baseIPKPVmET_S4_>:
    __niter_base(_Iterator __it)
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_ZSt12__niter_baseIPPVmET_S3_>:
    __niter_base(_Iterator __it)
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_ZSt14__copy_move_a1ILb0EPKPVmPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f881 	bl	800201e <_ZSt14__copy_move_a2ILb0EPKPVmPS1_ET1_T0_S6_S5_>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_ZSt12__niter_wrapIPPVmET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKPVmPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f7ff fe46 	bl	8001be0 <_ZSt4copyIPKPVmPS1_ET0_T_S6_S5_>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_ZNK9__gnu_cxx13new_allocatorIPVmE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001f66:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_ZN9__gnu_cxx13new_allocatorIPVmE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f7ff ffeb 	bl	8001f5e <_ZNK9__gnu_cxx13new_allocatorIPVmE11_M_max_sizeEv>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	bf8c      	ite	hi
 8001f90:	2301      	movhi	r3, #1
 8001f92:	2300      	movls	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <_ZN9__gnu_cxx13new_allocatorIPVmE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d301      	bcc.n	8001fb0 <_ZN9__gnu_cxx13new_allocatorIPVmE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001fac:	f008 fbfe 	bl	800a7ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001fb0:	f008 fbf9 	bl	800a7a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f008 fbe3 	bl	800a784 <_Znwj>
 8001fbe:	4603      	mov	r3, r0
      }
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZSt10_ConstructIPVmJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	2004      	movs	r0, #4
 8001fd6:	f7ff fa0a 	bl	80013ee <_ZnwjPv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
    }
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_ZSt6fill_nIPPVmjS1_ET_S3_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8001ff4:	68fc      	ldr	r4, [r7, #12]
 8001ff6:	68b8      	ldr	r0, [r7, #8]
 8001ff8:	f7ff f9ee 	bl	80013d8 <_ZSt17__size_to_integerj>
 8001ffc:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f81b 	bl	800203e <_ZSt19__iterator_categoryIPPVmENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8002008:	4633      	mov	r3, r6
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4629      	mov	r1, r5
 800200e:	4620      	mov	r0, r4
 8002010:	f000 f820 	bl	8002054 <_ZSt10__fill_n_aIPPVmjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
 8002014:	4603      	mov	r3, r0
    }
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201e <_ZSt14__copy_move_a2ILb0EPKPVmPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f82d 	bl	800208e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPVmEEPT_PKS5_S8_S6_>
 8002034:	4603      	mov	r3, r0
    }
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZSt19__iterator_categoryIPPVmENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002046:	bf00      	nop
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_ZSt10__fill_n_aIPPVmjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <_ZSt10__fill_n_aIPPVmjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	e00c      	b.n	8002086 <_ZSt10__fill_n_aIPPVmjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4619      	mov	r1, r3
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f825 	bl	80020c8 <_ZSt8__fill_aIPPVmS1_EvT_S3_RKT0_>
      return __first + __n;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4413      	add	r3, r2
    }
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPVmEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	109b      	asrs	r3, r3, #2
 80020a2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPVmEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	461a      	mov	r2, r3
 80020b0:	68f9      	ldr	r1, [r7, #12]
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f00a fc7f 	bl	800c9b6 <memmove>
	  return __result + _Num;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
	}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_ZSt8__fill_aIPPVmS1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f804 	bl	80020e6 <_ZSt9__fill_a1IPPVmS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_ZSt9__fill_a1IPPVmS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 80020e6:	b480      	push	{r7}
 80020e8:	b087      	sub	sp, #28
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 80020f8:	e005      	b.n	8002106 <_ZSt9__fill_a1IPPVmS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x20>
	*__first = __tmp;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3304      	adds	r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d1f5      	bne.n	80020fa <_ZSt9__fill_a1IPPVmS1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x14>
    }
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      _Vector_base() = default;
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f8a6 	bl	8002278 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_ZNSt6vectorIdSaIdEEC1Ev>:
      vector() = default;
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ffeb 	bl	800211c <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_ZN15MovingAvgFilterC1Eh>:
 *      Author: Sashreek
 */
#include "main.h"
#include "filter.h"

MovingAvgFilter::MovingAvgFilter(uint8_t filter_size):filter_size(filter_size){
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3304      	adds	r3, #4
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ffe5 	bl	8002136 <_ZNSt6vectorIdSaIdEEC1Ev>
	cache.resize(filter_size, 0);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	1d18      	adds	r0, r3, #4
 8002170:	78f9      	ldrb	r1, [r7, #3]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	461a      	mov	r2, r3
 8002184:	f000 f888 	bl	8002298 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>
	cache.reserve(filter_size);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f8d3 	bl	800233c <_ZNSt6vectorIdSaIdEE7reserveEj>
	sum = 0;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_ZN15MovingAvgFilter15add_new_elementEd>:


void MovingAvgFilter::add_new_element(double item){
 80021ae:	b590      	push	{r4, r7, lr}
 80021b0:	b089      	sub	sp, #36	; 0x24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	ed87 0b00 	vstr	d0, [r7]
	double removed = cache.back();
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3304      	adds	r3, #4
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f93c 	bl	800243c <_ZNSt6vectorIdSaIdEE4backEv>
 80021c4:	4603      	mov	r3, r0
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
	cache.pop_back();
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3304      	adds	r3, #4
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f94d 	bl	8002472 <_ZNSt6vectorIdSaIdEE8pop_backEv>
	sum -= removed;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80021de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e2:	f7fe f879 	bl	80002d8 <__aeabi_dsub>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	68f9      	ldr	r1, [r7, #12]
 80021ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
	sum += item;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80021f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021fa:	f7fe f86f 	bl	80002dc <__adddf3>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	e9c1 2304 	strd	r2, r3, [r1, #16]
	cache.insert(cache.begin(), item);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1d1c      	adds	r4, r3, #4
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3304      	adds	r3, #4
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f943 	bl	800249c <_ZNSt6vectorIdSaIdEE5beginEv>
 8002216:	4603      	mov	r3, r0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	f107 0214 	add.w	r2, r7, #20
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f949 	bl	80024bc <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1IPdEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800222a:	463b      	mov	r3, r7
 800222c:	461a      	mov	r2, r3
 800222e:	6939      	ldr	r1, [r7, #16]
 8002230:	4620      	mov	r0, r4
 8002232:	f000 f954 	bl	80024de <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_>
}
 8002236:	bf00      	nop
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd90      	pop	{r4, r7, pc}

0800223e <_ZN15MovingAvgFilter15filtered_outputEv>:


double MovingAvgFilter::filtered_output(){
 800223e:	b5b0      	push	{r4, r5, r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
	return sum/filter_size;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f98f 	bl	8000574 <__aeabi_i2d>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe fb1d 	bl	800089c <__aeabi_ddiv>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	ec43 2b17 	vmov	d7, r2, r3
}
 800226a:	eeb0 0a47 	vmov.f32	s0, s14
 800226e:	eef0 0a67 	vmov.f32	s1, s15
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bdb0      	pop	{r4, r5, r7, pc}

08002278 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f9ce 	bl	8002622 <_ZNSaIdEC1Ev>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f9d6 	bl	800263a <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>:
      resize(size_type __new_size, const value_type& __x)
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
	if (__new_size > size())
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f9dc 	bl	8002662 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4293      	cmp	r3, r2
 80022b0:	bf8c      	ite	hi
 80022b2:	2301      	movhi	r3, #1
 80022b4:	2300      	movls	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00f      	beq.n	80022dc <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x44>
	  _M_fill_insert(end(), __new_size - size(), __x);
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fb21 	bl	8002904 <_ZNSt6vectorIdSaIdEE3endEv>
 80022c2:	4604      	mov	r4, r0
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f9cc 	bl	8002662 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1a9a      	subs	r2, r3, r2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4621      	mov	r1, r4
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f9d5 	bl	8002684 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd>
      }
 80022da:	e014      	b.n	8002306 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x6e>
	else if (__new_size < size())
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f9c0 	bl	8002662 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4293      	cmp	r3, r2
 80022e8:	bf34      	ite	cc
 80022ea:	2301      	movcc	r3, #1
 80022ec:	2300      	movcs	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x6e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fb10 	bl	8002926 <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd>
      }
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bd90      	pop	{r4, r7, pc}

0800230e <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>:
      _S_use_relocate()
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f805 	bl	8002324 <_ZNSt6vectorIdSaIdEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800231a:	4603      	mov	r3, r0
      }
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZNSt6vectorIdSaIdEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800232c:	2301      	movs	r3, #1
      }
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <_ZNSt6vectorIdSaIdEE7reserveEj>:
    vector<_Tp, _Alloc>::
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fb0e 	bl	8002968 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 800234c:	4602      	mov	r2, r0
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	4293      	cmp	r3, r2
 8002352:	bf8c      	ite	hi
 8002354:	2301      	movhi	r3, #1
 8002356:	2300      	movls	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <_ZNSt6vectorIdSaIdEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 800235e:	4836      	ldr	r0, [pc, #216]	; (8002438 <_ZNSt6vectorIdSaIdEE7reserveEj+0xfc>)
 8002360:	f008 fa27 	bl	800a7b2 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fb10 	bl	800298a <_ZNKSt6vectorIdSaIdEE8capacityEv>
 800236a:	4602      	mov	r2, r0
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4293      	cmp	r3, r2
 8002370:	bf8c      	ite	hi
 8002372:	2301      	movhi	r3, #1
 8002374:	2300      	movls	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d059      	beq.n	8002430 <_ZNSt6vectorIdSaIdEE7reserveEj+0xf4>
	  const size_type __old_size = size();
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f970 	bl	8002662 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8002382:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8002384:	f7ff ffc3 	bl	800230e <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d014      	beq.n	80023b8 <_ZNSt6vectorIdSaIdEE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6839      	ldr	r1, [r7, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fb09 	bl	80029aa <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8002398:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681c      	ldr	r4, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe ff8d 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80023aa:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4629      	mov	r1, r5
 80023b0:	4620      	mov	r0, r4
 80023b2:	f000 fb0e 	bl	80029d2 <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>
 80023b6:	e01f      	b.n	80023f8 <_ZNSt6vectorIdSaIdEE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fb1c 	bl	80029fa <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 80023c2:	4604      	mov	r4, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fb16 	bl	80029fa <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4622      	mov	r2, r4
 80023d2:	6839      	ldr	r1, [r7, #0]
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fb1f 	bl	8002a18 <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyISt13move_iteratorIPdEEES4_jT_S6_>
 80023da:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681c      	ldr	r4, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe ff6c 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80023ec:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023ee:	461a      	mov	r2, r3
 80023f0:	4629      	mov	r1, r5
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7fe ff71 	bl	80012da <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	10db      	asrs	r3, r3, #3
	  _M_deallocate(this->_M_impl._M_start,
 800240a:	461a      	mov	r2, r3
 800240c:	f7fe ff7f 	bl	800130e <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
	  this->_M_impl._M_start = __tmp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	441a      	add	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	441a      	add	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	609a      	str	r2, [r3, #8]
    }
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bdb0      	pop	{r4, r5, r7, pc}
 8002438:	0801010c 	.word	0x0801010c

0800243c <_ZNSt6vectorIdSaIdEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fa5d 	bl	8002904 <_ZNSt6vectorIdSaIdEE3endEv>
 800244a:	4603      	mov	r3, r0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fafb 	bl	8002a50 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEmiEi>
 800245a:	4603      	mov	r3, r0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fb0d 	bl	8002a82 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>
 8002468:	4603      	mov	r3, r0
      }
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_ZNSt6vectorIdSaIdEE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	--this->_M_impl._M_finish;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f1a3 0208 	sub.w	r2, r3, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f000 fb03 	bl	8002a9a <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
      }
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_ZNSt6vectorIdSaIdEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fb01 	bl	8002ab4 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1IPdEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 80024c6:	6838      	ldr	r0, [r7, #0]
 80024c8:	f000 fb04 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80024cc:	4603      	mov	r3, r0
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_>:
    vector<_Tp, _Alloc>::
 80024de:	b580      	push	{r7, lr}
 80024e0:	b092      	sub	sp, #72	; 0x48
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
      const size_type __n = __position - begin();
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f7ff ffd6 	bl	800249c <_ZNSt6vectorIdSaIdEE5beginEv>
 80024f0:	4603      	mov	r3, r0
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 faf3 	bl	8002aea <_ZN9__gnu_cxxmiIPKdPdSt6vectorIdSaIdEEEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8002504:	4603      	mov	r3, r0
 8002506:	647b      	str	r3, [r7, #68]	; 0x44
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	429a      	cmp	r2, r3
 8002512:	d054      	beq.n	80025be <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0xe0>
	if (__position == end())
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f9f5 	bl	8002904 <_ZNSt6vectorIdSaIdEE3endEv>
 800251a:	4603      	mov	r3, r0
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
 800251e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f000 faf3 	bl	8002b14 <_ZN9__gnu_cxxeqIPKdPdSt6vectorIdSaIdEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00d      	beq.n	8002550 <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0x72>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4619      	mov	r1, r3
 800253e:	f000 fb01 	bl	8002b44 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f103 0208 	add.w	r2, r3, #8
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e055      	b.n	80025fc <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0x11e>
	    const auto __pos = begin() + (__position - cbegin());
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7ff ffa3 	bl	800249c <_ZNSt6vectorIdSaIdEE5beginEv>
 8002556:	4603      	mov	r3, r0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fb05 	bl	8002b6a <_ZNKSt6vectorIdSaIdEE6cbeginEv>
 8002560:	4603      	mov	r3, r0
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
 8002564:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fb0b 	bl	8002b8a <_ZN9__gnu_cxxmiIPKdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8002574:	4602      	mov	r2, r0
 8002576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fb19 	bl	8002bb4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>
 8002582:	4603      	mov	r3, r0
 8002584:	623b      	str	r3, [r7, #32]
	    _Temporary_value __x_copy(this, __x);
 8002586:	f107 0310 	add.w	r3, r7, #16
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68f9      	ldr	r1, [r7, #12]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fb28 	bl	8002be4 <_ZNSt6vectorIdSaIdEE16_Temporary_valueC1IJRKdEEEPS1_DpOT_>
	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fb55 	bl	8002c48 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_valEv>
 800259e:	4603      	mov	r3, r0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fb5d 	bl	8002c60 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	6a39      	ldr	r1, [r7, #32]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fb62 	bl	8002c76 <_ZNSt6vectorIdSaIdEE13_M_insert_auxIdEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEOT_>
	  }
 80025b2:	f107 0310 	add.w	r3, r7, #16
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fb32 	bl	8002c20 <_ZNSt6vectorIdSaIdEE16_Temporary_valueD1Ev>
 80025bc:	e01e      	b.n	80025fc <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0x11e>
	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff ff6c 	bl	800249c <_ZNSt6vectorIdSaIdEE5beginEv>
 80025c4:	4603      	mov	r3, r0
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 face 	bl	8002b6a <_ZNKSt6vectorIdSaIdEE6cbeginEv>
 80025ce:	4603      	mov	r3, r0
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fad4 	bl	8002b8a <_ZN9__gnu_cxxmiIPKdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80025e2:	4602      	mov	r2, r0
 80025e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fae2 	bl	8002bb4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>
 80025f0:	4603      	mov	r3, r0
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4619      	mov	r1, r3
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fb7c 	bl	8002cf4 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>
      return iterator(this->_M_impl._M_start + __n);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	643b      	str	r3, [r7, #64]	; 0x40
 8002608:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800260c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fa4e 	bl	8002ab4 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8002618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800261a:	4618      	mov	r0, r3
 800261c:	3748      	adds	r7, #72	; 0x48
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fc1e 	bl	8002e6c <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
	{ }
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_ZNKSt6vectorIdSaIdEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	10db      	asrs	r3, r3, #3
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd>:
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8002684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002686:	b093      	sub	sp, #76	; 0x4c
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 812e 	beq.w	80028f6 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x272>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	10db      	asrs	r3, r3, #3
	  if (size_type(this->_M_impl._M_end_of_storage
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4293      	cmp	r3, r2
 80026ac:	f200 80a3 	bhi.w	80027f6 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x172>
	    {
#if __cplusplus < 201103L
	      value_type __x_copy = __x;
#else
	      _Temporary_value __tmp(this, __x);
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	68f9      	ldr	r1, [r7, #12]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fa93 	bl	8002be4 <_ZNSt6vectorIdSaIdEE16_Temporary_valueC1IJRKdEEEPS1_DpOT_>
	      value_type& __x_copy = __tmp._M_val();
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fac0 	bl	8002c48 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_valEv>
 80026c8:	6378      	str	r0, [r7, #52]	; 0x34
#endif
	      const size_type __elems_after = end() - __position;
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f91a 	bl	8002904 <_ZNSt6vectorIdSaIdEE3endEv>
 80026d0:	4603      	mov	r3, r0
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	f107 0208 	add.w	r2, r7, #8
 80026d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fbcf 	bl	8002e82 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80026e4:	4603      	mov	r3, r0
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
	      pointer __old_finish(this->_M_impl._M_finish);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__elems_after > __n)
 80026ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d941      	bls.n	800277a <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0xf6>
		{
		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	425b      	negs	r3, r3
 8002700:	18d4      	adds	r4, r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685d      	ldr	r5, [r3, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685e      	ldr	r6, [r3, #4]
					      this->_M_impl._M_finish,
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fdd9 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002712:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8002714:	4632      	mov	r2, r6
 8002716:	4629      	mov	r1, r5
 8002718:	4620      	mov	r0, r4
 800271a:	f000 fbc7 	bl	8002eac <_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __n;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	441a      	add	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f9cf 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002736:	4603      	mov	r3, r0
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	425b      	negs	r3, r3
 8002740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002742:	4413      	add	r3, r2
 8002744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002746:	4619      	mov	r1, r3
 8002748:	f000 fbc9 	bl	8002ede <_ZSt13move_backwardIPdS0_ET0_T_S2_S1_>
					  __old_finish - __n, __old_finish);
		  std::fill(__position.base(), __position.base() + __n,
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f9bf 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002756:	4603      	mov	r3, r0
 8002758:	681c      	ldr	r4, [r3, #0]
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f9b8 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002764:	4603      	mov	r3, r0
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002770:	4619      	mov	r1, r3
 8002772:	4620      	mov	r0, r4
 8002774:	f000 fbcb 	bl	8002f0e <_ZSt4fillIPddEvT_S1_RKT0_>
 8002778:	e037      	b.n	80027ea <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x166>
		}
	      else
		{
		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		  this->_M_impl._M_finish =
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685c      	ldr	r4, [r3, #4]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	1ad5      	subs	r5, r2, r3
						  __n - __elems_after,
						  __x_copy,
						  _M_get_Tp_allocator());
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fd9c 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800278c:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 800278e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002790:	4629      	mov	r1, r5
 8002792:	4620      	mov	r0, r4
 8002794:	f000 fbca 	bl	8002f2c <_ZSt24__uninitialized_fill_n_aIPdjddET_S1_T0_RKT1_RSaIT2_E>
 8002798:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f996 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80027a8:	4603      	mov	r3, r0
 80027aa:	681c      	ldr	r4, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685d      	ldr	r5, [r3, #4]
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fd86 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80027b8:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 80027ba:	462a      	mov	r2, r5
 80027bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027be:	4620      	mov	r0, r4
 80027c0:	f000 fb74 	bl	8002eac <_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	441a      	add	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);
		  std::fill(__position.base(), __old_finish, __x_copy);
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f97c 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80027dc:	4603      	mov	r3, r0
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fb92 	bl	8002f0e <_ZSt4fillIPddEvT_S1_RKT0_>
		}
	    }
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fa16 	bl	8002c20 <_ZNSt6vectorIdSaIdEE16_Temporary_valueD1Ev>
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 80027f4:	e07f      	b.n	80028f6 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x272>
		_M_check_len(__n, "vector::_M_fill_insert");
 80027f6:	4a42      	ldr	r2, [pc, #264]	; (8002900 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x27c>)
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fba7 	bl	8002f4e <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>
 8002800:	6478      	str	r0, [r7, #68]	; 0x44
	      const size_type __elems_before = __position - begin();
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff fe4a 	bl	800249c <_ZNSt6vectorIdSaIdEE5beginEv>
 8002808:	4603      	mov	r3, r0
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
 800280c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002810:	f107 0308 	add.w	r3, r7, #8
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fb33 	bl	8002e82 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800281c:	4603      	mov	r3, r0
 800281e:	643b      	str	r3, [r7, #64]	; 0x40
	      pointer __new_start(this->_M_allocate(__len));
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002824:	4618      	mov	r0, r3
 8002826:	f000 f8c0 	bl	80029aa <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 800282a:	63f8      	str	r0, [r7, #60]	; 0x3c
	      pointer __new_finish(__new_start);
 800282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8002830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002836:	18d4      	adds	r4, r2, r3
						_M_get_Tp_allocator());
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fd42 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002840:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4620      	mov	r0, r4
 8002848:	f000 fb70 	bl	8002f2c <_ZSt24__uninitialized_fill_n_aIPdjddET_S1_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 800284c:	2300      	movs	r3, #0
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
		    (this->_M_impl._M_start, __position.base(),
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681c      	ldr	r4, [r3, #0]
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f93b 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 800285e:	4603      	mov	r3, r0
 8002860:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fd2d 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800286a:	4603      	mov	r3, r0
		    (this->_M_impl._M_start, __position.base(),
 800286c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800286e:	4629      	mov	r1, r5
 8002870:	4620      	mov	r0, r4
 8002872:	f000 fbb3 	bl	8002fdc <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8002876:	63b8      	str	r0, [r7, #56]	; 0x38
		  __new_finish += __n;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800287e:	4413      	add	r3, r2
 8002880:	63bb      	str	r3, [r7, #56]	; 0x38
		    (__position.base(), this->_M_impl._M_finish,
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f924 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 800288c:	4603      	mov	r3, r0
 800288e:	681c      	ldr	r4, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fd14 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800289c:	4603      	mov	r3, r0
		    (__position.base(), this->_M_impl._M_finish,
 800289e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a0:	4629      	mov	r1, r5
 80028a2:	4620      	mov	r0, r4
 80028a4:	f000 fb9a 	bl	8002fdc <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 80028a8:	63b8      	str	r0, [r7, #56]	; 0x38
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681c      	ldr	r4, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fd05 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80028ba:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80028bc:	461a      	mov	r2, r3
 80028be:	4629      	mov	r1, r5
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7fe fd0a 	bl	80012da <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	10db      	asrs	r3, r3, #3
	      _M_deallocate(this->_M_impl._M_start,
 80028d8:	461a      	mov	r2, r3
 80028da:	f7fe fd18 	bl	800130e <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
	      this->_M_impl._M_start = __new_start;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028e2:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028e8:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80028ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028f0:	441a      	add	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	609a      	str	r2, [r3, #8]
    }
 80028f6:	bf00      	nop
 80028f8:	374c      	adds	r7, #76	; 0x4c
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028fe:	bf00      	nop
 8002900:	0801011c 	.word	0x0801011c

08002904 <_ZNSt6vectorIdSaIdEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	1d1a      	adds	r2, r3, #4
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f8cc 	bl	8002ab4 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002926:	b590      	push	{r4, r7, lr}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	10db      	asrs	r3, r3, #3
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00e      	beq.n	8002960 <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fcbb 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800294e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002950:	461a      	mov	r2, r3
 8002952:	4621      	mov	r1, r4
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	f7fe fcc0 	bl	80012da <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	605a      	str	r2, [r3, #4]
      }
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bd90      	pop	{r4, r7, pc}

08002968 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fb65 	bl	8003042 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002978:	4603      	mov	r3, r0
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fb47 	bl	800300e <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 8002980:	4603      	mov	r3, r0
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <_ZNKSt6vectorIdSaIdEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	10db      	asrs	r3, r3, #3
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6839      	ldr	r1, [r7, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fb4a 	bl	8003058 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 80029c4:	4603      	mov	r3, r0
 80029c6:	e000      	b.n	80029ca <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 80029c8:	2300      	movs	r3, #0
      }
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80029d2:	b590      	push	{r4, r7, lr}
 80029d4:	b087      	sub	sp, #28
 80029d6:	af02      	add	r7, sp, #8
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80029e0:	f88d 4000 	strb.w	r4, [sp]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fb43 	bl	8003076 <_ZNSt6vectorIdSaIdEE14_S_do_relocateEPdS2_S2_RS0_St17integral_constantIbLb1EE>
 80029f0:	4603      	mov	r3, r0
      }
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd90      	pop	{r4, r7, pc}

080029fa <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fb46 	bl	800309a <_ZNSt13move_iteratorIPdEC1ES0_>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyISt13move_iteratorIPdEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ffbd 	bl	80029aa <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8002a30:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fc45 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002a3a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6839      	ldr	r1, [r7, #0]
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fb3c 	bl	80030be <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8002a46:	697b      	ldr	r3, [r7, #20]
	}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	425b      	negs	r3, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	f107 020c 	add.w	r2, r7, #12
 8002a6c:	f107 0308 	add.w	r3, r7, #8
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f81e 	bl	8002ab4 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fb1a 	bl	80030e0 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>
	}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <_ZN9__gnu_cxxmiIPKdPdSt6vectorIdSaIdEEEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8002aea:	b590      	push	{r4, r7, lr}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fafe 	bl	80030f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8002afa:	4603      	mov	r3, r0
 8002afc:	681c      	ldr	r4, [r3, #0]
 8002afe:	6838      	ldr	r0, [r7, #0]
 8002b00:	f7ff ffe8 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002b04:	4603      	mov	r3, r0
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1ae3      	subs	r3, r4, r3
 8002b0a:	10db      	asrs	r3, r3, #3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}

08002b14 <_ZN9__gnu_cxxeqIPKdPdSt6vectorIdSaIdEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fae9 	bl	80030f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8002b24:	4603      	mov	r3, r0
 8002b26:	681c      	ldr	r4, [r3, #0]
 8002b28:	6838      	ldr	r0, [r7, #0]
 8002b2a:	f7ff ffd3 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	429c      	cmp	r4, r3
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}

08002b44 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fadb 	bl	800310c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fae0 	bl	8003122 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJRKdEEEvPT_DpOT0_>
	}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_ZNKSt6vectorIdSaIdEE6cbeginEv>:
      cbegin() const noexcept
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fae9 	bl	8003152 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1ERKS2_>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_ZN9__gnu_cxxmiIPKdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002b8a:	b590      	push	{r4, r7, lr}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 faae 	bl	80030f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	681c      	ldr	r4, [r3, #0]
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	f000 faa9 	bl	80030f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	1ae3      	subs	r3, r4, r3
 8002baa:	10db      	asrs	r3, r3, #3
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd90      	pop	{r4, r7, pc}

08002bb4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	f107 020c 	add.w	r2, r7, #12
 8002bce:	f107 0308 	add.w	r3, r7, #8
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff6d 	bl	8002ab4 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZNSt6vectorIdSaIdEE16_Temporary_valueC1IJRKdEEEPS1_DpOT_>:
	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	601a      	str	r2, [r3, #0]
	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fab8 	bl	8003172 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>
 8002c02:	4604      	mov	r4, r0
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fa81 	bl	800310c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4621      	mov	r1, r4
 8002c10:	4628      	mov	r0, r5
 8002c12:	f7ff ff97 	bl	8002b44 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
	  }
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bdb0      	pop	{r4, r5, r7, pc}

08002c20 <_ZNSt6vectorIdSaIdEE16_Temporary_valueD1Ev>:
	~_Temporary_value()
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461c      	mov	r4, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa9f 	bl	8003172 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4619      	mov	r1, r3
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7ff ff2e 	bl	8002a9a <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd90      	pop	{r4, r7, pc}

08002c48 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_valEv>:
	_M_val() { return *_M_ptr(); }
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fa8e 	bl	8003172 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <_ZNSt6vectorIdSaIdEE13_M_insert_auxIdEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEOT_>:
      vector<_Tp, _Alloc>::
 8002c76:	b5b0      	push	{r4, r5, r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002c82:	68fc      	ldr	r4, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685d      	ldr	r5, [r3, #4]
			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	3b08      	subs	r3, #8
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ffe6 	bl	8002c60 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 8002c94:	4603      	mov	r3, r0
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002c96:	461a      	mov	r2, r3
 8002c98:	4629      	mov	r1, r5
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f000 fa75 	bl	800318a <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>
      ++this->_M_impl._M_finish;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f103 0208 	add.w	r2, r3, #8
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	605a      	str	r2, [r3, #4]
      _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8002cac:	f107 0308 	add.w	r3, r7, #8
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff0f 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f1a3 0110 	sub.w	r1, r3, #16
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	3b08      	subs	r3, #8
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f000 f908 	bl	8002ede <_ZSt13move_backwardIPdS0_ET0_T_S2_S1_>
      *__position = std::forward<_Arg>(__arg);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa6e 	bl	80031b0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fed1 	bl	8002a82 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>
 8002ce0:	4601      	mov	r1, r0
 8002ce2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002ce6:	e9c1 2300 	strd	r2, r3, [r1]
    }
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002cf4 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8002cf4:	b5b0      	push	{r4, r5, r7, lr}
 8002cf6:	b08c      	sub	sp, #48	; 0x30
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8002d00:	4a59      	ldr	r2, [pc, #356]	; (8002e68 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x174>)
 8002d02:	2101      	movs	r1, #1
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f922 	bl	8002f4e <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>
 8002d0a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff fbbf 	bl	800249c <_ZNSt6vectorIdSaIdEE5beginEv>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	f107 0214 	add.w	r2, r7, #20
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f8a8 	bl	8002e82 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002d32:	4603      	mov	r3, r0
 8002d34:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fe35 	bl	80029aa <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8002d40:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8002d46:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	18d5      	adds	r5, r2, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f9db 	bl	800310c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff fef1 	bl	8002b44 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8002d62:	2300      	movs	r3, #0
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8002d66:	f7ff fad2 	bl	800230e <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d027      	beq.n	8002dc0 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002d70:	f107 0308 	add.w	r3, r7, #8
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fead 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fa9f 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002d86:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d8e:	f7ff fe20 	bl	80029d2 <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>
 8002d92:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	3308      	adds	r3, #8
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fe98 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002da4:	4603      	mov	r3, r0
 8002da6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fa8a 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002db0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff fe0b 	bl	80029d2 <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>
 8002dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002dbe:	e026      	b.n	8002e0e <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8002dc0:	f107 0308 	add.w	r3, r7, #8
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fe85 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fa77 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002dd6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4621      	mov	r1, r4
 8002ddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dde:	f000 f8fd 	bl	8002fdc <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8002de2:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	3308      	adds	r3, #8
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fe70 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002df4:	4603      	mov	r3, r0
 8002df6:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe fa62 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002e00:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8002e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e04:	6a39      	ldr	r1, [r7, #32]
 8002e06:	4620      	mov	r0, r4
 8002e08:	f000 f8e8 	bl	8002fdc <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8002e0c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8002e0e:	f7ff fa7e 	bl	800230e <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fa4f 	bl	80012c4 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6a39      	ldr	r1, [r7, #32]
 8002e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e2e:	f7fe fa54 	bl	80012da <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8002e32:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e42:	f7fe fa64 	bl	800130e <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      this->_M_impl._M_start = __new_start;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e50:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	441a      	add	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
    }
 8002e5e:	bf00      	nop
 8002e60:	3730      	adds	r7, #48	; 0x30
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdb0      	pop	{r4, r5, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	08010134 	.word	0x08010134

08002e6c <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002e82:	b590      	push	{r4, r7, lr}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fe21 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002e92:	4603      	mov	r3, r0
 8002e94:	681c      	ldr	r4, [r3, #0]
 8002e96:	6838      	ldr	r0, [r7, #0]
 8002e98:	f7ff fe1c 	bl	8002ad4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	1ae3      	subs	r3, r4, r3
 8002ea2:	10db      	asrs	r3, r3, #3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}

08002eac <_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f983 	bl	80031c6 <_ZSt18make_move_iteratorIPdESt13move_iteratorIT_ES2_>
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	68b8      	ldr	r0, [r7, #8]
 8002ec4:	f000 f97f 	bl	80031c6 <_ZSt18make_move_iteratorIPdESt13move_iteratorIT_ES2_>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f000 f8f5 	bl	80030be <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
 8002ed4:	4603      	mov	r3, r0
    }
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd90      	pop	{r4, r7, pc}

08002ede <_ZSt13move_backwardIPdS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8002ede:	b590      	push	{r4, r7, lr}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f980 	bl	80031f0 <_ZSt12__miter_baseIPdET_S1_>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	68b8      	ldr	r0, [r7, #8]
 8002ef4:	f000 f97c 	bl	80031f0 <_ZSt12__miter_baseIPdET_S1_>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4619      	mov	r1, r3
 8002efe:	4620      	mov	r0, r4
 8002f00:	f000 f981 	bl	8003206 <_ZSt22__copy_move_backward_aILb1EPdS0_ET1_T0_S2_S1_>
 8002f04:	4603      	mov	r3, r0
    }
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd90      	pop	{r4, r7, pc}

08002f0e <_ZSt4fillIPddEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __last, __value);
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f994 	bl	800324c <_ZSt8__fill_aIPddEvT_S1_RKT0_>
    }
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_ZSt24__uninitialized_fill_n_aIPdjddET_S1_T0_RKT1_RSaIT2_E>:
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f993 	bl	800326a <_ZSt20uninitialized_fill_nIPdjdET_S1_T0_RKT1_>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002f4e:	b590      	push	{r4, r7, lr}
 8002f50:	b087      	sub	sp, #28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff fd04 	bl	8002968 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 8002f60:	4604      	mov	r4, r0
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff fb7d 	bl	8002662 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	1ae2      	subs	r2, r4, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	bf34      	ite	cc
 8002f72:	2301      	movcc	r3, #1
 8002f74:	2300      	movcs	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f007 fc18 	bl	800a7b2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff fb6d 	bl	8002662 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8002f88:	4604      	mov	r4, r0
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f7ff fb69 	bl	8002662 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8002f90:	4603      	mov	r3, r0
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	f107 0208 	add.w	r2, r7, #8
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f975 	bl	800328e <_ZSt3maxIjERKT_S2_S2_>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4423      	add	r3, r4
 8002faa:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff fb58 	bl	8002662 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d306      	bcc.n	8002fc8 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x7a>
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff fcd4 	bl	8002968 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d904      	bls.n	8002fd2 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x84>
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff fccd 	bl	8002968 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	e000      	b.n	8002fd4 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x86>
 8002fd2:	697b      	ldr	r3, [r7, #20]
      }
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd90      	pop	{r4, r7, pc}

08002fdc <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff fd05 	bl	80029fa <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	68b8      	ldr	r0, [r7, #8]
 8002ff4:	f7ff fd01 	bl	80029fa <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4620      	mov	r0, r4
 8003000:	f000 f85d 	bl	80030be <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
 8003004:	4603      	mov	r3, r0
    }
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}

0800300e <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003016:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800301a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f94a 	bl	80032b6 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8003022:	4603      	mov	r3, r0
 8003024:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003026:	f107 0208 	add.w	r2, r7, #8
 800302a:	f107 030c 	add.w	r3, r7, #12
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fe1d 	bl	8001c70 <_ZSt3minIjERKT_S2_S2_>
 8003036:	4603      	mov	r3, r0
 8003038:	681b      	ldr	r3, [r3, #0]
      }
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003062:	2200      	movs	r2, #0
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f93d 	bl	80032e6 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 800306c:	4603      	mov	r3, r0
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <_ZNSt6vectorIdSaIdEE14_S_do_relocateEPdS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f954 	bl	8003338 <_ZSt12__relocate_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8003090:	4603      	mov	r3, r0
      }
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_ZNSt13move_iteratorIPdEC1ES0_>:
      move_iterator(iterator_type __i)
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80030a4:	463b      	mov	r3, r7
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f963 	bl	8003372 <_ZSt4moveIRPdEONSt16remove_referenceIT_E4typeEOS3_>
 80030ac:	4603      	mov	r3, r0
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f959 	bl	8003388 <_ZSt18uninitialized_copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>:
	destroy(_Up* __p)
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJRKdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003122:	b5b0      	push	{r4, r5, r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ffec 	bl	800310c <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8003134:	4603      	mov	r3, r0
 8003136:	e9d3 4500 	ldrd	r4, r5, [r3]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4619      	mov	r1, r3
 800313e:	2008      	movs	r0, #8
 8003140:	f7fe f955 	bl	80013ee <_ZnwjPv>
 8003144:	4603      	mov	r3, r0
 8003146:	e9c3 4500 	strd	r4, r5, [r3]
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bdb0      	pop	{r4, r5, r7, pc}

08003152 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>:
	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3308      	adds	r3, #8
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f80a 	bl	80031b0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f902 	bl	80033ac <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>
	}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <_ZSt18make_move_iteratorIPdESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 f8ce 	bl	8003372 <_ZSt4moveIRPdEONSt16remove_referenceIT_E4typeEOS3_>
 80031d6:	4603      	mov	r3, r0
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff5a 	bl	800309a <_ZNSt13move_iteratorIPdEC1ES0_>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <_ZSt12__miter_baseIPdET_S1_>:
    __miter_base(_Iterator __it)
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <_ZSt22__copy_move_backward_aILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003206:	b5b0      	push	{r4, r5, r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f8e2 	bl	80033dc <_ZSt12__niter_baseIPdET_S1_>
 8003218:	4604      	mov	r4, r0
 800321a:	68b8      	ldr	r0, [r7, #8]
 800321c:	f000 f8de 	bl	80033dc <_ZSt12__niter_baseIPdET_S1_>
 8003220:	4605      	mov	r5, r0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f8d9 	bl	80033dc <_ZSt12__niter_baseIPdET_S1_>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	4629      	mov	r1, r5
 8003230:	4620      	mov	r0, r4
 8003232:	f000 f8de 	bl	80033f2 <_ZSt23__copy_move_backward_a1ILb1EPdS0_ET1_T0_S2_S1_>
 8003236:	4602      	mov	r2, r0
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 f8e8 	bl	8003412 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8003242:	4603      	mov	r3, r0
    }
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bdb0      	pop	{r4, r5, r7, pc}

0800324c <_ZSt8__fill_aIPddEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f8e4 	bl	800342a <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <_ZSt20uninitialized_fill_nIPdjdET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
      constexpr bool __can_fill
 8003276:	2301      	movs	r3, #1
 8003278:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f8f2 	bl	8003468 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPdjdEET_S3_T0_RKT1_>
 8003284:	4603      	mov	r3, r0
    }
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d201      	bcs.n	80032a8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	e000      	b.n	80032aa <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80032a8:	687b      	ldr	r3, [r7, #4]
    }
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8e2 	bl	8003488 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 80032c4:	4603      	mov	r3, r0
      }
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80032d6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff ffeb 	bl	80032ce <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bf8c      	ite	hi
 8003300:	2301      	movhi	r3, #1
 8003302:	2300      	movls	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800331a:	d301      	bcc.n	8003320 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800331c:	f007 fa46 	bl	800a7ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003320:	f007 fa41 	bl	800a7a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4618      	mov	r0, r3
 800332a:	f007 fa2b 	bl	800a784 <_Znwj>
 800332e:	4603      	mov	r3, r0
      }
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_ZSt12__relocate_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003338:	b5b0      	push	{r4, r5, r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f848 	bl	80033dc <_ZSt12__niter_baseIPdET_S1_>
 800334c:	4604      	mov	r4, r0
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f000 f844 	bl	80033dc <_ZSt12__niter_baseIPdET_S1_>
 8003354:	4605      	mov	r5, r0
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f840 	bl	80033dc <_ZSt12__niter_baseIPdET_S1_>
 800335c:	4602      	mov	r2, r0
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	4629      	mov	r1, r5
 8003362:	4620      	mov	r0, r4
 8003364:	f000 f89c 	bl	80034a0 <_ZSt14__relocate_a_1IddENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8003368:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bdb0      	pop	{r4, r5, r7, pc}

08003372 <_ZSt4moveIRPdEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_ZSt18uninitialized_copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003394:	2301      	movs	r3, #1
 8003396:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f89d 	bl	80034dc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPdES3_EET0_T_S6_S5_>
 80033a2:	4603      	mov	r3, r0
    }
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fef9 	bl	80031b0 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 80033be:	4603      	mov	r3, r0
 80033c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4619      	mov	r1, r3
 80033c8:	2008      	movs	r0, #8
 80033ca:	f7fe f810 	bl	80013ee <_ZnwjPv>
 80033ce:	4603      	mov	r3, r0
 80033d0:	e9c3 4500 	strd	r4, r5, [r3]
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bdb0      	pop	{r4, r5, r7, pc}

080033dc <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <_ZSt23__copy_move_backward_a1ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f87a 	bl	80034fc <_ZSt23__copy_move_backward_a2ILb1EPdS0_ET1_T0_S2_S1_>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 800342a:	b480      	push	{r7}
 800342c:	b087      	sub	sp, #28
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (; __first != __last; ++__first)
 8003440:	e007      	b.n	8003452 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003448:	e9c1 2300 	strd	r2, r3, [r1]
      for (; __first != __last; ++__first)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3308      	adds	r3, #8
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	d1f3      	bne.n	8003442 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x18>
    }
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPdjdEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f84f 	bl	800351c <_ZSt6fill_nIPdjdET_S1_T0_RKT1_>
 800347e:	4603      	mov	r3, r0
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff1c 	bl	80032ce <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 8003496:	4603      	mov	r3, r0
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZSt14__relocate_a_1IddENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	10db      	asrs	r3, r3, #3
 80034b6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dd06      	ble.n	80034cc <_ZSt14__relocate_a_1IddENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	461a      	mov	r2, r3
 80034c4:	68f9      	ldr	r1, [r7, #12]
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f009 fa75 	bl	800c9b6 <memmove>
      return __result + __count;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
    }
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPdES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f830 	bl	8003552 <_ZSt4copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_ZSt23__copy_move_backward_a2ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f838 	bl	8003582 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_>
 8003512:	4603      	mov	r3, r0
    }
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZSt6fill_nIPdjdET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 800351c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8003528:	68fc      	ldr	r4, [r7, #12]
 800352a:	68b8      	ldr	r0, [r7, #8]
 800352c:	f7fd ff54 	bl	80013d8 <_ZSt17__size_to_integerj>
 8003530:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8003532:	f107 030c 	add.w	r3, r7, #12
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f845 	bl	80035c6 <_ZSt19__iterator_categoryIPdENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800353c:	4633      	mov	r3, r6
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4629      	mov	r1, r5
 8003542:	4620      	mov	r0, r4
 8003544:	f000 f84a 	bl	80035dc <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag>
 8003548:	4603      	mov	r3, r0
    }
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003552 <_ZSt4copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8003552:	b590      	push	{r4, r7, lr}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f859 	bl	8003616 <_ZSt12__miter_baseIPdEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003564:	4604      	mov	r4, r0
 8003566:	68b8      	ldr	r0, [r7, #8]
 8003568:	f000 f855 	bl	8003616 <_ZSt12__miter_baseIPdEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800356c:	4603      	mov	r3, r0
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4619      	mov	r1, r3
 8003572:	4620      	mov	r0, r4
 8003574:	f000 f860 	bl	8003638 <_ZSt13__copy_move_aILb1EPdS0_ET1_T0_S2_S1_>
 8003578:	4603      	mov	r3, r0
    }
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bd90      	pop	{r4, r7, pc}

08003582 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	10db      	asrs	r3, r3, #3
 8003596:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	425b      	negs	r3, r3
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	18d0      	adds	r0, r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	461a      	mov	r2, r3
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	f009 fa01 	bl	800c9b6 <memmove>
	  return __result - _Num;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	425b      	negs	r3, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4413      	add	r3, r2
	}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <_ZSt19__iterator_categoryIPdENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80035ce:	bf00      	nop
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	e00c      	b.n	800360e <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4413      	add	r3, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4619      	mov	r1, r3
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff fe23 	bl	800324c <_ZSt8__fill_aIPddEvT_S1_RKT0_>
      return __first + __n;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4413      	add	r3, r2
    }
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_ZSt12__miter_baseIPdEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f82c 	bl	800367e <_ZNKSt13move_iteratorIPdE4baseEv>
 8003626:	4603      	mov	r3, r0
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fde1 	bl	80031f0 <_ZSt12__miter_baseIPdET_S1_>
 800362e:	4603      	mov	r3, r0
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <_ZSt13__copy_move_aILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003638:	b5b0      	push	{r4, r5, r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff fec9 	bl	80033dc <_ZSt12__niter_baseIPdET_S1_>
 800364a:	4604      	mov	r4, r0
 800364c:	68b8      	ldr	r0, [r7, #8]
 800364e:	f7ff fec5 	bl	80033dc <_ZSt12__niter_baseIPdET_S1_>
 8003652:	4605      	mov	r5, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fec0 	bl	80033dc <_ZSt12__niter_baseIPdET_S1_>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	4629      	mov	r1, r5
 8003662:	4620      	mov	r0, r4
 8003664:	f000 f817 	bl	8003696 <_ZSt14__copy_move_a1ILb1EPdS0_ET1_T0_S2_S1_>
 8003668:	4602      	mov	r2, r0
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fecf 	bl	8003412 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8003674:	4603      	mov	r3, r0
    }
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bdb0      	pop	{r4, r5, r7, pc}

0800367e <_ZNKSt13move_iteratorIPdE4baseEv>:
      base() const
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <_ZSt14__copy_move_a1ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f805 	bl	80036b6 <_ZSt14__copy_move_a2ILb1EPdS0_ET1_T0_S2_S1_>
 80036ac:	4603      	mov	r3, r0
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_ZSt14__copy_move_a2ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f805 	bl	80036d6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 80036cc:	4603      	mov	r3, r0
    }
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b086      	sub	sp, #24
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	10db      	asrs	r3, r3, #3
 80036ea:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	461a      	mov	r2, r3
 80036f8:	68f9      	ldr	r1, [r7, #12]
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f009 f95b 	bl	800c9b6 <memmove>
	  return __result + _Num;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
	}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_ZN17HallEncoderDriver10get_thetadEv>:
 */
#include "hall_encoder.h"



double HallEncoderDriver::get_thetad(){
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
	return 0;
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003720:	eeb0 0a47 	vmov.f32	s0, s14
 8003724:	eef0 0a67 	vmov.f32	s1, s15
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TIM2->CCR1 = 17895697;
 8003734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003738:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <main+0x40>)
 800373a:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800373c:	f001 f851 	bl	80047e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003740:	f000 f818 	bl	8003774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003744:	f000 fb18 	bl	8003d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8003748:	f000 faec 	bl	8003d24 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800374c:	f000 f95c 	bl	8003a08 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 8003750:	f000 f85c 	bl	800380c <MX_ADC1_Init>
  MX_TIM3_Init();
 8003754:	f000 fa12 	bl	8003b7c <MX_TIM3_Init>
  MX_ADC2_Init();
 8003758:	f000 f8f0 	bl	800393c <MX_ADC2_Init>
  MX_TIM2_Init();
 800375c:	f000 f99a 	bl	8003a94 <MX_TIM2_Init>
  MX_UART4_Init();
 8003760:	f000 fa94 	bl	8003c8c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8003764:	f000 fb7c 	bl	8003e60 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8003768:	f000 fbbe 	bl	8003ee8 <loop>
 800376c:	e7fc      	b.n	8003768 <main+0x38>
 800376e:	bf00      	nop
 8003770:	01111111 	.word	0x01111111

08003774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b094      	sub	sp, #80	; 0x50
 8003778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800377a:	f107 0318 	add.w	r3, r7, #24
 800377e:	2238      	movs	r2, #56	; 0x38
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f009 f931 	bl	800c9ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003788:	1d3b      	adds	r3, r7, #4
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800379a:	f003 fbe5 	bl	8006f68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800379e:	2302      	movs	r3, #2
 80037a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037a8:	2340      	movs	r3, #64	; 0x40
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ac:	2302      	movs	r3, #2
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037b0:	2302      	movs	r3, #2
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80037b4:	2301      	movs	r3, #1
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80037b8:	2308      	movs	r3, #8
 80037ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037bc:	2302      	movs	r3, #2
 80037be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037c0:	2302      	movs	r3, #2
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037c4:	2302      	movs	r3, #2
 80037c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c8:	f107 0318 	add.w	r3, r7, #24
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 fc7f 	bl	80070d0 <HAL_RCC_OscConfig>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80037d8:	f000 fb3c 	bl	8003e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037dc:	230f      	movs	r3, #15
 80037de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037e0:	2303      	movs	r3, #3
 80037e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	2102      	movs	r1, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 ff83 	bl	8007700 <HAL_RCC_ClockConfig>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003800:	f000 fb28 	bl	8003e54 <Error_Handler>
  }
}
 8003804:	bf00      	nop
 8003806:	3750      	adds	r7, #80	; 0x50
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08c      	sub	sp, #48	; 0x30
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	2220      	movs	r2, #32
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f009 f8e0 	bl	800c9ea <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800382a:	4b40      	ldr	r3, [pc, #256]	; (800392c <MX_ADC1_Init+0x120>)
 800382c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003830:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003832:	4b3e      	ldr	r3, [pc, #248]	; (800392c <MX_ADC1_Init+0x120>)
 8003834:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003838:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800383a:	4b3c      	ldr	r3, [pc, #240]	; (800392c <MX_ADC1_Init+0x120>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003840:	4b3a      	ldr	r3, [pc, #232]	; (800392c <MX_ADC1_Init+0x120>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <MX_ADC1_Init+0x120>)
 8003848:	2200      	movs	r2, #0
 800384a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800384c:	4b37      	ldr	r3, [pc, #220]	; (800392c <MX_ADC1_Init+0x120>)
 800384e:	2201      	movs	r2, #1
 8003850:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <MX_ADC1_Init+0x120>)
 8003854:	2208      	movs	r2, #8
 8003856:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003858:	4b34      	ldr	r3, [pc, #208]	; (800392c <MX_ADC1_Init+0x120>)
 800385a:	2200      	movs	r2, #0
 800385c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800385e:	4b33      	ldr	r3, [pc, #204]	; (800392c <MX_ADC1_Init+0x120>)
 8003860:	2201      	movs	r2, #1
 8003862:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8003864:	4b31      	ldr	r3, [pc, #196]	; (800392c <MX_ADC1_Init+0x120>)
 8003866:	2203      	movs	r2, #3
 8003868:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800386a:	4b30      	ldr	r3, [pc, #192]	; (800392c <MX_ADC1_Init+0x120>)
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003872:	4b2e      	ldr	r3, [pc, #184]	; (800392c <MX_ADC1_Init+0x120>)
 8003874:	2200      	movs	r2, #0
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003878:	4b2c      	ldr	r3, [pc, #176]	; (800392c <MX_ADC1_Init+0x120>)
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800387e:	4b2b      	ldr	r3, [pc, #172]	; (800392c <MX_ADC1_Init+0x120>)
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003886:	4b29      	ldr	r3, [pc, #164]	; (800392c <MX_ADC1_Init+0x120>)
 8003888:	2200      	movs	r2, #0
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <MX_ADC1_Init+0x120>)
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003894:	4825      	ldr	r0, [pc, #148]	; (800392c <MX_ADC1_Init+0x120>)
 8003896:	f001 fa7f 	bl	8004d98 <HAL_ADC_Init>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80038a0:	f000 fad8 	bl	8003e54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80038a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ac:	4619      	mov	r1, r3
 80038ae:	481f      	ldr	r0, [pc, #124]	; (800392c <MX_ADC1_Init+0x120>)
 80038b0:	f002 fb70 	bl	8005f94 <HAL_ADCEx_MultiModeConfigChannel>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80038ba:	f000 facb 	bl	8003e54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <MX_ADC1_Init+0x124>)
 80038c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038c2:	2306      	movs	r3, #6
 80038c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80038c6:	2302      	movs	r3, #2
 80038c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038ca:	237f      	movs	r3, #127	; 0x7f
 80038cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038ce:	2304      	movs	r3, #4
 80038d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4814      	ldr	r0, [pc, #80]	; (800392c <MX_ADC1_Init+0x120>)
 80038dc:	f001 fd10 	bl	8005300 <HAL_ADC_ConfigChannel>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80038e6:	f000 fab5 	bl	8003e54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <MX_ADC1_Init+0x128>)
 80038ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038ee:	230c      	movs	r3, #12
 80038f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	480d      	ldr	r0, [pc, #52]	; (800392c <MX_ADC1_Init+0x120>)
 80038f8:	f001 fd02 	bl	8005300 <HAL_ADC_ConfigChannel>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8003902:	f000 faa7 	bl	8003e54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <MX_ADC1_Init+0x12c>)
 8003908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800390a:	2312      	movs	r3, #18
 800390c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4806      	ldr	r0, [pc, #24]	; (800392c <MX_ADC1_Init+0x120>)
 8003914:	f001 fcf4 	bl	8005300 <HAL_ADC_ConfigChannel>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800391e:	f000 fa99 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003922:	bf00      	nop
 8003924:	3730      	adds	r7, #48	; 0x30
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000250 	.word	0x20000250
 8003930:	19200040 	.word	0x19200040
 8003934:	1d500080 	.word	0x1d500080
 8003938:	21800100 	.word	0x21800100

0800393c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003942:	463b      	mov	r3, r7
 8003944:	2220      	movs	r2, #32
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f009 f84e 	bl	800c9ea <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800394e:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <MX_ADC2_Init+0xc0>)
 8003950:	4a2b      	ldr	r2, [pc, #172]	; (8003a00 <MX_ADC2_Init+0xc4>)
 8003952:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003954:	4b29      	ldr	r3, [pc, #164]	; (80039fc <MX_ADC2_Init+0xc0>)
 8003956:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800395a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800395c:	4b27      	ldr	r3, [pc, #156]	; (80039fc <MX_ADC2_Init+0xc0>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <MX_ADC2_Init+0xc0>)
 8003964:	2200      	movs	r2, #0
 8003966:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <MX_ADC2_Init+0xc0>)
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800396e:	4b23      	ldr	r3, [pc, #140]	; (80039fc <MX_ADC2_Init+0xc0>)
 8003970:	2200      	movs	r2, #0
 8003972:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <MX_ADC2_Init+0xc0>)
 8003976:	2204      	movs	r2, #4
 8003978:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <MX_ADC2_Init+0xc0>)
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <MX_ADC2_Init+0xc0>)
 8003982:	2200      	movs	r2, #0
 8003984:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <MX_ADC2_Init+0xc0>)
 8003988:	2201      	movs	r2, #1
 800398a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <MX_ADC2_Init+0xc0>)
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <MX_ADC2_Init+0xc0>)
 8003996:	2200      	movs	r2, #0
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <MX_ADC2_Init+0xc0>)
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <MX_ADC2_Init+0xc0>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <MX_ADC2_Init+0xc0>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80039ae:	4b13      	ldr	r3, [pc, #76]	; (80039fc <MX_ADC2_Init+0xc0>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80039b6:	4811      	ldr	r0, [pc, #68]	; (80039fc <MX_ADC2_Init+0xc0>)
 80039b8:	f001 f9ee 	bl	8004d98 <HAL_ADC_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80039c2:	f000 fa47 	bl	8003e54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <MX_ADC2_Init+0xc8>)
 80039c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039ca:	2306      	movs	r3, #6
 80039cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80039d2:	237f      	movs	r3, #127	; 0x7f
 80039d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039d6:	2304      	movs	r3, #4
 80039d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80039de:	463b      	mov	r3, r7
 80039e0:	4619      	mov	r1, r3
 80039e2:	4806      	ldr	r0, [pc, #24]	; (80039fc <MX_ADC2_Init+0xc0>)
 80039e4:	f001 fc8c 	bl	8005300 <HAL_ADC_ConfigChannel>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80039ee:	f000 fa31 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80039f2:	bf00      	nop
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200002bc 	.word	0x200002bc
 8003a00:	50000100 	.word	0x50000100
 8003a04:	2e300800 	.word	0x2e300800

08003a08 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003a0c:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a0e:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <MX_FDCAN1_Init+0x88>)
 8003a10:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003a12:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003a24:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003a2a:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003a30:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a38:	2210      	movs	r2, #16
 8003a3a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003a3c:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a44:	2202      	movs	r2, #2
 8003a46:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003a54:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003a78:	4804      	ldr	r0, [pc, #16]	; (8003a8c <MX_FDCAN1_Init+0x84>)
 8003a7a:	f002 ff15 	bl	80068a8 <HAL_FDCAN_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003a84:	f000 f9e6 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000388 	.word	0x20000388
 8003a90:	40006400 	.word	0x40006400

08003a94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08e      	sub	sp, #56	; 0x38
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa8:	f107 031c 	add.w	r3, r7, #28
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	60da      	str	r2, [r3, #12]
 8003ac0:	611a      	str	r2, [r3, #16]
 8003ac2:	615a      	str	r2, [r3, #20]
 8003ac4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7.1582788E7;
 8003ada:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <MX_TIM2_Init+0xe4>)
 8003ade:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae0:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae6:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003aec:	4821      	ldr	r0, [pc, #132]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003aee:	f004 fa71 	bl	8007fd4 <HAL_TIM_Base_Init>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003af8:	f000 f9ac 	bl	8003e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b06:	4619      	mov	r1, r3
 8003b08:	481a      	ldr	r0, [pc, #104]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003b0a:	f004 ffdb 	bl	8008ac4 <HAL_TIM_ConfigClockSource>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003b14:	f000 f99e 	bl	8003e54 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003b18:	4816      	ldr	r0, [pc, #88]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003b1a:	f004 fb2b 	bl	8008174 <HAL_TIM_OC_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003b24:	f000 f996 	bl	8003e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4619      	mov	r1, r3
 8003b36:	480f      	ldr	r0, [pc, #60]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003b38:	f005 feac 	bl	8009894 <HAL_TIMEx_MasterConfigSynchronization>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003b42:	f000 f987 	bl	8003e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003b46:	2300      	movs	r3, #0
 8003b48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b56:	463b      	mov	r3, r7
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4805      	ldr	r0, [pc, #20]	; (8003b74 <MX_TIM2_Init+0xe0>)
 8003b5e:	f004 fe9b 	bl	8008898 <HAL_TIM_OC_ConfigChannel>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003b68:	f000 f974 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b6c:	bf00      	nop
 8003b6e:	3738      	adds	r7, #56	; 0x38
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200003ec 	.word	0x200003ec
 8003b78:	04444444 	.word	0x04444444

08003b7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08c      	sub	sp, #48	; 0x30
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b82:	f107 0320 	add.w	r3, r7, #32
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b90:	f107 0314 	add.w	r3, r7, #20
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ba8:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003baa:	4a37      	ldr	r2, [pc, #220]	; (8003c88 <MX_TIM3_Init+0x10c>)
 8003bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003bae:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb4:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003bba:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc2:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc8:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bce:	482d      	ldr	r0, [pc, #180]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003bd0:	f004 fa00 	bl	8007fd4 <HAL_TIM_Base_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003bda:	f000 f93b 	bl	8003e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003be4:	f107 0320 	add.w	r3, r7, #32
 8003be8:	4619      	mov	r1, r3
 8003bea:	4826      	ldr	r0, [pc, #152]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003bec:	f004 ff6a 	bl	8008ac4 <HAL_TIM_ConfigClockSource>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003bf6:	f000 f92d 	bl	8003e54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003bfa:	4822      	ldr	r0, [pc, #136]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003bfc:	f004 fb1b 	bl	8008236 <HAL_TIM_IC_Init>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003c06:	f000 f925 	bl	8003e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c12:	f107 0314 	add.w	r3, r7, #20
 8003c16:	4619      	mov	r1, r3
 8003c18:	481a      	ldr	r0, [pc, #104]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003c1a:	f005 fe3b 	bl	8009894 <HAL_TIMEx_MasterConfigSynchronization>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003c24:	f000 f916 	bl	8003e54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003c28:	230a      	movs	r3, #10
 8003c2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4811      	ldr	r0, [pc, #68]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003c40:	f004 fea4 	bl	800898c <HAL_TIM_IC_ConfigChannel>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003c4a:	f000 f903 	bl	8003e54 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	2204      	movs	r2, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	480b      	ldr	r0, [pc, #44]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003c56:	f004 fe99 	bl	800898c <HAL_TIM_IC_ConfigChannel>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8003c60:	f000 f8f8 	bl	8003e54 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003c64:	1d3b      	adds	r3, r7, #4
 8003c66:	2208      	movs	r2, #8
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4806      	ldr	r0, [pc, #24]	; (8003c84 <MX_TIM3_Init+0x108>)
 8003c6c:	f004 fe8e 	bl	800898c <HAL_TIM_IC_ConfigChannel>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8003c76:	f000 f8ed 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c7a:	bf00      	nop
 8003c7c:	3730      	adds	r7, #48	; 0x30
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000438 	.word	0x20000438
 8003c88:	40000400 	.word	0x40000400

08003c8c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003c90:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <MX_UART4_Init+0x90>)
 8003c92:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <MX_UART4_Init+0x94>)
 8003c94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003c96:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <MX_UART4_Init+0x90>)
 8003c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <MX_UART4_Init+0x90>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <MX_UART4_Init+0x90>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003caa:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <MX_UART4_Init+0x90>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <MX_UART4_Init+0x90>)
 8003cb2:	220c      	movs	r2, #12
 8003cb4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cb6:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <MX_UART4_Init+0x90>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <MX_UART4_Init+0x90>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cc2:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <MX_UART4_Init+0x90>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <MX_UART4_Init+0x90>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <MX_UART4_Init+0x90>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003cd4:	4811      	ldr	r0, [pc, #68]	; (8003d1c <MX_UART4_Init+0x90>)
 8003cd6:	f005 feb9 	bl	8009a4c <HAL_UART_Init>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003ce0:	f000 f8b8 	bl	8003e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	480d      	ldr	r0, [pc, #52]	; (8003d1c <MX_UART4_Init+0x90>)
 8003ce8:	f006 fc80 	bl	800a5ec <HAL_UARTEx_SetTxFifoThreshold>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003cf2:	f000 f8af 	bl	8003e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4808      	ldr	r0, [pc, #32]	; (8003d1c <MX_UART4_Init+0x90>)
 8003cfa:	f006 fcb5 	bl	800a668 <HAL_UARTEx_SetRxFifoThreshold>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003d04:	f000 f8a6 	bl	8003e54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003d08:	4804      	ldr	r0, [pc, #16]	; (8003d1c <MX_UART4_Init+0x90>)
 8003d0a:	f006 fc36 	bl	800a57a <HAL_UARTEx_DisableFifoMode>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003d14:	f000 f89e 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000484 	.word	0x20000484
 8003d20:	40004c00 	.word	0x40004c00

08003d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <MX_DMA_Init+0x50>)
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	4a11      	ldr	r2, [pc, #68]	; (8003d74 <MX_DMA_Init+0x50>)
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	6493      	str	r3, [r2, #72]	; 0x48
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <MX_DMA_Init+0x50>)
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <MX_DMA_Init+0x50>)
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	4a0b      	ldr	r2, [pc, #44]	; (8003d74 <MX_DMA_Init+0x50>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6493      	str	r3, [r2, #72]	; 0x48
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <MX_DMA_Init+0x50>)
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	200b      	movs	r0, #11
 8003d60:	f002 fafb 	bl	800635a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003d64:	200b      	movs	r0, #11
 8003d66:	f002 fb12 	bl	800638e <HAL_NVIC_EnableIRQ>

}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000

08003d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7e:	f107 0314 	add.w	r3, r7, #20
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	4a2e      	ldr	r2, [pc, #184]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d9a:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da6:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003dc4:	f043 0308 	orr.w	r3, r3, #8
 8003dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003de2:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <MX_GPIO_Init+0xd4>)
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 8003dee:	2200      	movs	r2, #0
 8003df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003df8:	f003 f89e 	bl	8006f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2147      	movs	r1, #71	; 0x47
 8003e00:	4813      	ldr	r0, [pc, #76]	; (8003e50 <MX_GPIO_Init+0xd8>)
 8003e02:	f003 f899 	bl	8006f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 8003e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e14:	2300      	movs	r3, #0
 8003e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e22:	f002 ff07 	bl	8006c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_OUTPUT_Pin H2_OUTPUT_Pin H3_OUTPUT_Pin PD6 */
  GPIO_InitStruct.Pin = H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6;
 8003e26:	2347      	movs	r3, #71	; 0x47
 8003e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e36:	f107 0314 	add.w	r3, r7, #20
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4804      	ldr	r0, [pc, #16]	; (8003e50 <MX_GPIO_Init+0xd8>)
 8003e3e:	f002 fef9 	bl	8006c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e42:	bf00      	nop
 8003e44:	3728      	adds	r7, #40	; 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	48000c00 	.word	0x48000c00

08003e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e58:	b672      	cpsid	i
}
 8003e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e5c:	e7fe      	b.n	8003e5c <Error_Handler+0x8>
	...

08003e60 <setup>:

uint64_t ADC_count = 0;

motor_data data_values;

void setup() {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0

	CurrSensDriver::ADC_handle = &hadc1;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <setup+0x74>)
 8003e66:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <setup+0x78>)
 8003e68:	601a      	str	r2, [r3, #0]
	HAL_ADCEx_Calibration_Start(CurrSensDriver::ADC_handle, ADC_SINGLE_ENDED);
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <setup+0x74>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	217f      	movs	r1, #127	; 0x7f
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 f82d 	bl	8005ed0 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8003e76:	4819      	ldr	r0, [pc, #100]	; (8003edc <setup+0x7c>)
 8003e78:	f004 f904 	bl	8008084 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4817      	ldr	r0, [pc, #92]	; (8003edc <setup+0x7c>)
 8003e80:	f004 fa3a 	bl	80082f8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8003e84:	2104      	movs	r1, #4
 8003e86:	4815      	ldr	r0, [pc, #84]	; (8003edc <setup+0x7c>)
 8003e88:	f004 fa36 	bl	80082f8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8003e8c:	2108      	movs	r1, #8
 8003e8e:	4813      	ldr	r0, [pc, #76]	; (8003edc <setup+0x7c>)
 8003e90:	f004 fa32 	bl	80082f8 <HAL_TIM_IC_Start_IT>
	// Enable the gate driver
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8003e94:	2201      	movs	r2, #1
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	4811      	ldr	r0, [pc, #68]	; (8003ee0 <setup+0x80>)
 8003e9a:	f003 f84d 	bl	8006f38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003e9e:	200a      	movs	r0, #10
 8003ea0:	f000 fd10 	bl	80048c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	480d      	ldr	r0, [pc, #52]	; (8003ee0 <setup+0x80>)
 8003eaa:	f003 f845 	bl	8006f38 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8003eae:	200a      	movs	r0, #10
 8003eb0:	f000 fd08 	bl	80048c4 <HAL_Delay>
	data_values.motor_position = 0;
 8003eb4:	490b      	ldr	r1, [pc, #44]	; (8003ee4 <setup+0x84>)
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data_values.motor_velocity = 0;
 8003ec2:	4908      	ldr	r1, [pc, #32]	; (8003ee4 <setup+0x84>)
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9c1 2300 	strd	r2, r3, [r1]

}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200001f4 	.word	0x200001f4
 8003ed8:	20000250 	.word	0x20000250
 8003edc:	20000438 	.word	0x20000438
 8003ee0:	48000c00 	.word	0x48000c00
 8003ee4:	20000518 	.word	0x20000518

08003ee8 <loop>:

void loop() {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b09a      	sub	sp, #104	; 0x68
 8003eec:	af00      	add	r7, sp, #0

//	HAL_ADC_Start_IT(CurrSensDriver::ADC_handle);
	char str[80] = {};
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	f107 031c 	add.w	r3, r7, #28
 8003ef6:	224c      	movs	r2, #76	; 0x4c
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f008 fd75 	bl	800c9ea <memset>
	sprintf(str, "angle = %f\r\n", data_values.motor_position);
 8003f00:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <loop+0x50>)
 8003f02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f06:	f107 0018 	add.w	r0, r7, #24
 8003f0a:	490c      	ldr	r1, [pc, #48]	; (8003f3c <loop+0x54>)
 8003f0c:	f008 fcf0 	bl	800c8f0 <siprintf>
	HAL_UART_Transmit (&huart4, reinterpret_cast<uint8_t*>(&str[0]), sizeof(str), 10);
 8003f10:	f107 0118 	add.w	r1, r7, #24
 8003f14:	230a      	movs	r3, #10
 8003f16:	2250      	movs	r2, #80	; 0x50
 8003f18:	4809      	ldr	r0, [pc, #36]	; (8003f40 <loop+0x58>)
 8003f1a:	f005 fde7 	bl	8009aec <HAL_UART_Transmit>
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 8003f1e:	463b      	mov	r3, r7
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd f8e5 	bl	80010f0 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>

	HAL_Delay(1000);
 8003f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f2a:	f000 fccb 	bl	80048c4 <HAL_Delay>
}
 8003f2e:	bf00      	nop
 8003f30:	3768      	adds	r7, #104	; 0x68
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000518 	.word	0x20000518
 8003f3c:	08010150 	.word	0x08010150
 8003f40:	20000484 	.word	0x20000484

08003f44 <_Z7tf_parkddd>:
 *      Author: Sashreek and Jonah
 */
#include "math_utils.h"
#include <cmath>

ParkOut tf_park (double ialpha, double ibeta, double theta_d){
 8003f44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f48:	b092      	sub	sp, #72	; 0x48
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	ed87 0b08 	vstr	d0, [r7, #32]
 8003f50:	ed87 1b06 	vstr	d1, [r7, #24]
 8003f54:	ed87 2b04 	vstr	d2, [r7, #16]
	ParkOut output;
	output.id = ialpha * cos(theta_d) + ibeta * sin(theta_d);
 8003f58:	ed97 0b04 	vldr	d0, [r7, #16]
 8003f5c:	f006 fc38 	bl	800a7d0 <cos>
 8003f60:	ec51 0b10 	vmov	r0, r1, d0
 8003f64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f68:	f7fc fb6e 	bl	8000648 <__aeabi_dmul>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4690      	mov	r8, r2
 8003f72:	4699      	mov	r9, r3
 8003f74:	ed97 0b04 	vldr	d0, [r7, #16]
 8003f78:	f006 fc7e 	bl	800a878 <sin>
 8003f7c:	ec51 0b10 	vmov	r0, r1, d0
 8003f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f84:	f7fc fb60 	bl	8000648 <__aeabi_dmul>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	4649      	mov	r1, r9
 8003f90:	f7fc f9a4 	bl	80002dc <__adddf3>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.iq = -ialpha * sin(theta_d) + ibeta * cos(theta_d);
 8003f9c:	6a3c      	ldr	r4, [r7, #32]
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003fa4:	ed97 0b04 	vldr	d0, [r7, #16]
 8003fa8:	f006 fc66 	bl	800a878 <sin>
 8003fac:	ec53 2b10 	vmov	r2, r3, d0
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	f7fc fb48 	bl	8000648 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	461d      	mov	r5, r3
 8003fc0:	ed97 0b04 	vldr	d0, [r7, #16]
 8003fc4:	f006 fc04 	bl	800a7d0 <cos>
 8003fc8:	ec51 0b10 	vmov	r0, r1, d0
 8003fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd0:	f7fc fb3a 	bl	8000648 <__aeabi_dmul>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4620      	mov	r0, r4
 8003fda:	4629      	mov	r1, r5
 8003fdc:	f7fc f97e 	bl	80002dc <__adddf3>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 8003fe8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003ff6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ffe:	ec41 0b16 	vmov	d6, r0, r1
 8004002:	ec43 2b17 	vmov	d7, r2, r3

}
 8004006:	eeb0 0a46 	vmov.f32	s0, s12
 800400a:	eef0 0a66 	vmov.f32	s1, s13
 800400e:	eeb0 1a47 	vmov.f32	s2, s14
 8004012:	eef0 1a67 	vmov.f32	s3, s15
 8004016:	3748      	adds	r7, #72	; 0x48
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08004020 <_Z9tf_clarkeddd>:
	output.vbeta = vd * sin(theta_d) + vq * cos(theta_d);
	return output;
}

//Clarke transform
ClarkeOut tf_clarke (double ia, double ib, double ic){
 8004020:	b5b0      	push	{r4, r5, r7, lr}
 8004022:	b092      	sub	sp, #72	; 0x48
 8004024:	af00      	add	r7, sp, #0
 8004026:	ed87 0b08 	vstr	d0, [r7, #32]
 800402a:	ed87 1b06 	vstr	d1, [r7, #24]
 800402e:	ed87 2b04 	vstr	d2, [r7, #16]
	ClarkeOut output;
	output.ialpha = (3.0/2.0) * ia;
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <_Z9tf_clarkeddd+0xa0>)
 8004038:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800403c:	f7fc fb04 	bl	8000648 <__aeabi_dmul>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.ibeta = (sqrt(3)/2) * ib - (sqrt(3)/2) * ic;
 8004048:	a31b      	add	r3, pc, #108	; (adr r3, 80040b8 <_Z9tf_clarkeddd+0x98>)
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004052:	f7fc faf9 	bl	8000648 <__aeabi_dmul>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4614      	mov	r4, r2
 800405c:	461d      	mov	r5, r3
 800405e:	a316      	add	r3, pc, #88	; (adr r3, 80040b8 <_Z9tf_clarkeddd+0x98>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004068:	f7fc faee 	bl	8000648 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4620      	mov	r0, r4
 8004072:	4629      	mov	r1, r5
 8004074:	f7fc f930 	bl	80002d8 <__aeabi_dsub>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 8004080:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800408a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800408e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004096:	ec41 0b16 	vmov	d6, r0, r1
 800409a:	ec43 2b17 	vmov	d7, r2, r3
}
 800409e:	eeb0 0a46 	vmov.f32	s0, s12
 80040a2:	eef0 0a66 	vmov.f32	s1, s13
 80040a6:	eeb0 1a47 	vmov.f32	s2, s14
 80040aa:	eef0 1a67 	vmov.f32	s3, s15
 80040ae:	3748      	adds	r7, #72	; 0x48
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bdb0      	pop	{r4, r5, r7, pc}
 80040b4:	f3af 8000 	nop.w
 80040b8:	e8584caa 	.word	0xe8584caa
 80040bc:	3febb67a 	.word	0x3febb67a
 80040c0:	3ff80000 	.word	0x3ff80000

080040c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <HAL_MspInit+0x44>)
 80040cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ce:	4a0e      	ldr	r2, [pc, #56]	; (8004108 <HAL_MspInit+0x44>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6613      	str	r3, [r2, #96]	; 0x60
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_MspInit+0x44>)
 80040d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <HAL_MspInit+0x44>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	4a08      	ldr	r2, [pc, #32]	; (8004108 <HAL_MspInit+0x44>)
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6593      	str	r3, [r2, #88]	; 0x58
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_MspInit+0x44>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80040fa:	f002 ffd9 	bl	80070b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000

0800410c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b0a2      	sub	sp, #136	; 0x88
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004114:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004124:	f107 0320 	add.w	r3, r7, #32
 8004128:	2254      	movs	r2, #84	; 0x54
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f008 fc5c 	bl	800c9ea <memset>
  if(hadc->Instance==ADC1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413a:	f040 8083 	bne.w	8004244 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800413e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004142:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004144:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004148:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800414a:	f107 0320 	add.w	r3, r7, #32
 800414e:	4618      	mov	r0, r3
 8004150:	f003 fcf2 	bl	8007b38 <HAL_RCCEx_PeriphCLKConfig>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800415a:	f7ff fe7b 	bl	8003e54 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800415e:	4b69      	ldr	r3, [pc, #420]	; (8004304 <HAL_ADC_MspInit+0x1f8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	4a67      	ldr	r2, [pc, #412]	; (8004304 <HAL_ADC_MspInit+0x1f8>)
 8004166:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004168:	4b66      	ldr	r3, [pc, #408]	; (8004304 <HAL_ADC_MspInit+0x1f8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10b      	bne.n	8004188 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004170:	4b65      	ldr	r3, [pc, #404]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 8004172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004174:	4a64      	ldr	r2, [pc, #400]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 8004176:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800417a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800417c:	4b62      	ldr	r3, [pc, #392]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 800417e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004188:	4b5f      	ldr	r3, [pc, #380]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 800418a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418c:	4a5e      	ldr	r2, [pc, #376]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 800418e:	f043 0304 	orr.w	r3, r3, #4
 8004192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004194:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a0:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 80041a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ac:	4b56      	ldr	r3, [pc, #344]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 80041ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	697b      	ldr	r3, [r7, #20]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURR_A_Pin|CURR_B_Pin|CURR_C_Pin|ADC_TEMP_Pin;
 80041b8:	230f      	movs	r3, #15
 80041ba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041bc:	2303      	movs	r3, #3
 80041be:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80041c8:	4619      	mov	r1, r3
 80041ca:	4850      	ldr	r0, [pc, #320]	; (800430c <HAL_ADC_MspInit+0x200>)
 80041cc:	f002 fd32 	bl	8006c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SHC_V_Pin|SOURCE_VOLTAGE_Pin;
 80041d0:	230c      	movs	r3, #12
 80041d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041d4:	2303      	movs	r3, #3
 80041d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80041e0:	4619      	mov	r1, r3
 80041e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041e6:	f002 fd25 	bl	8006c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80041ea:	4b49      	ldr	r3, [pc, #292]	; (8004310 <HAL_ADC_MspInit+0x204>)
 80041ec:	4a49      	ldr	r2, [pc, #292]	; (8004314 <HAL_ADC_MspInit+0x208>)
 80041ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80041f0:	4b47      	ldr	r3, [pc, #284]	; (8004310 <HAL_ADC_MspInit+0x204>)
 80041f2:	2205      	movs	r2, #5
 80041f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041f6:	4b46      	ldr	r3, [pc, #280]	; (8004310 <HAL_ADC_MspInit+0x204>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80041fc:	4b44      	ldr	r3, [pc, #272]	; (8004310 <HAL_ADC_MspInit+0x204>)
 80041fe:	2200      	movs	r2, #0
 8004200:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004202:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_ADC_MspInit+0x204>)
 8004204:	2280      	movs	r2, #128	; 0x80
 8004206:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004208:	4b41      	ldr	r3, [pc, #260]	; (8004310 <HAL_ADC_MspInit+0x204>)
 800420a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004210:	4b3f      	ldr	r3, [pc, #252]	; (8004310 <HAL_ADC_MspInit+0x204>)
 8004212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004216:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004218:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <HAL_ADC_MspInit+0x204>)
 800421a:	2200      	movs	r2, #0
 800421c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800421e:	4b3c      	ldr	r3, [pc, #240]	; (8004310 <HAL_ADC_MspInit+0x204>)
 8004220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004224:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004226:	483a      	ldr	r0, [pc, #232]	; (8004310 <HAL_ADC_MspInit+0x204>)
 8004228:	f002 f8cc 	bl	80063c4 <HAL_DMA_Init>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8004232:	f7ff fe0f 	bl	8003e54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a35      	ldr	r2, [pc, #212]	; (8004310 <HAL_ADC_MspInit+0x204>)
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
 800423c:	4a34      	ldr	r2, [pc, #208]	; (8004310 <HAL_ADC_MspInit+0x204>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004242:	e05a      	b.n	80042fa <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a33      	ldr	r2, [pc, #204]	; (8004318 <HAL_ADC_MspInit+0x20c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d155      	bne.n	80042fa <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800424e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004252:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004254:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004258:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800425a:	f107 0320 	add.w	r3, r7, #32
 800425e:	4618      	mov	r0, r3
 8004260:	f003 fc6a 	bl	8007b38 <HAL_RCCEx_PeriphCLKConfig>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_ADC_MspInit+0x162>
      Error_Handler();
 800426a:	f7ff fdf3 	bl	8003e54 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800426e:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_ADC_MspInit+0x1f8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	4a23      	ldr	r2, [pc, #140]	; (8004304 <HAL_ADC_MspInit+0x1f8>)
 8004276:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004278:	4b22      	ldr	r3, [pc, #136]	; (8004304 <HAL_ADC_MspInit+0x1f8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10b      	bne.n	8004298 <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 8004286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800428a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 800428e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 800429a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429c:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 80042a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b0:	4b15      	ldr	r3, [pc, #84]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 80042b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042bc:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_ADC_MspInit+0x1fc>)
 80042be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHA_V_Pin|SHB_V_Pin;
 80042c8:	2303      	movs	r3, #3
 80042ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042cc:	2303      	movs	r3, #3
 80042ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80042d8:	4619      	mov	r1, r3
 80042da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042de:	f002 fca9 	bl	8006c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_TEMP_Pin;
 80042e2:	2320      	movs	r3, #32
 80042e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042e6:	2303      	movs	r3, #3
 80042e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(MOTOR_TEMP_GPIO_Port, &GPIO_InitStruct);
 80042ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80042f2:	4619      	mov	r1, r3
 80042f4:	4805      	ldr	r0, [pc, #20]	; (800430c <HAL_ADC_MspInit+0x200>)
 80042f6:	f002 fc9d 	bl	8006c34 <HAL_GPIO_Init>
}
 80042fa:	bf00      	nop
 80042fc:	3788      	adds	r7, #136	; 0x88
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000528 	.word	0x20000528
 8004308:	40021000 	.word	0x40021000
 800430c:	48000800 	.word	0x48000800
 8004310:	20000328 	.word	0x20000328
 8004314:	40020008 	.word	0x40020008
 8004318:	50000100 	.word	0x50000100

0800431c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b09e      	sub	sp, #120	; 0x78
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004324:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004334:	f107 0310 	add.w	r3, r7, #16
 8004338:	2254      	movs	r2, #84	; 0x54
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f008 fb54 	bl	800c9ea <memset>
  if(hfdcan->Instance==FDCAN1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <HAL_FDCAN_MspInit+0xac>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d139      	bne.n	80043c0 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800434c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004350:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004356:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004358:	f107 0310 	add.w	r3, r7, #16
 800435c:	4618      	mov	r0, r3
 800435e:	f003 fbeb 	bl	8007b38 <HAL_RCCEx_PeriphCLKConfig>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004368:	f7ff fd74 	bl	8003e54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800436c:	4b17      	ldr	r3, [pc, #92]	; (80043cc <HAL_FDCAN_MspInit+0xb0>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	4a16      	ldr	r2, [pc, #88]	; (80043cc <HAL_FDCAN_MspInit+0xb0>)
 8004372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004376:	6593      	str	r3, [r2, #88]	; 0x58
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <HAL_FDCAN_MspInit+0xb0>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_FDCAN_MspInit+0xb0>)
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	4a10      	ldr	r2, [pc, #64]	; (80043cc <HAL_FDCAN_MspInit+0xb0>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004390:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <HAL_FDCAN_MspInit+0xb0>)
 8004392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800439c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80043a0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a2:	2302      	movs	r3, #2
 80043a4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043aa:	2300      	movs	r3, #0
 80043ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80043ae:	2309      	movs	r3, #9
 80043b0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80043b6:	4619      	mov	r1, r3
 80043b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043bc:	f002 fc3a 	bl	8006c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80043c0:	bf00      	nop
 80043c2:	3778      	adds	r7, #120	; 0x78
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40006400 	.word	0x40006400
 80043cc:	40021000 	.word	0x40021000

080043d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d114      	bne.n	800441c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043f2:	4b27      	ldr	r3, [pc, #156]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	4a26      	ldr	r2, [pc, #152]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6593      	str	r3, [r2, #88]	; 0x58
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800440a:	2200      	movs	r2, #0
 800440c:	2100      	movs	r1, #0
 800440e:	201c      	movs	r0, #28
 8004410:	f001 ffa3 	bl	800635a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004414:	201c      	movs	r0, #28
 8004416:	f001 ffba 	bl	800638e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800441a:	e035      	b.n	8004488 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM3)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <HAL_TIM_Base_MspInit+0xc4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d130      	bne.n	8004488 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442a:	4a19      	ldr	r2, [pc, #100]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	6593      	str	r3, [r2, #88]	; 0x58
 8004432:	4b17      	ldr	r3, [pc, #92]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	4a13      	ldr	r2, [pc, #76]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL1_INPUT_Pin|HALL_2_INPUT_Pin|HALL_3_INPUT_Pin;
 8004456:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800445a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445c:	2302      	movs	r3, #2
 800445e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004464:	2300      	movs	r3, #0
 8004466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004468:	2302      	movs	r3, #2
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446c:	f107 0314 	add.w	r3, r7, #20
 8004470:	4619      	mov	r1, r3
 8004472:	4809      	ldr	r0, [pc, #36]	; (8004498 <HAL_TIM_Base_MspInit+0xc8>)
 8004474:	f002 fbde 	bl	8006c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004478:	2200      	movs	r2, #0
 800447a:	2100      	movs	r1, #0
 800447c:	201d      	movs	r0, #29
 800447e:	f001 ff6c 	bl	800635a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004482:	201d      	movs	r0, #29
 8004484:	f001 ff83 	bl	800638e <HAL_NVIC_EnableIRQ>
}
 8004488:	bf00      	nop
 800448a:	3728      	adds	r7, #40	; 0x28
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	40000400 	.word	0x40000400
 8004498:	48000800 	.word	0x48000800

0800449c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b09e      	sub	sp, #120	; 0x78
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044b4:	f107 0310 	add.w	r3, r7, #16
 80044b8:	2254      	movs	r2, #84	; 0x54
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f008 fa94 	bl	800c9ea <memset>
  if(huart->Instance==UART4)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <HAL_UART_MspInit+0xa8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d136      	bne.n	800453a <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80044cc:	2308      	movs	r3, #8
 80044ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80044d0:	2300      	movs	r3, #0
 80044d2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	4618      	mov	r0, r3
 80044da:	f003 fb2d 	bl	8007b38 <HAL_RCCEx_PeriphCLKConfig>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80044e4:	f7ff fcb6 	bl	8003e54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80044e8:	4b17      	ldr	r3, [pc, #92]	; (8004548 <HAL_UART_MspInit+0xac>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_UART_MspInit+0xac>)
 80044ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044f2:	6593      	str	r3, [r2, #88]	; 0x58
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <HAL_UART_MspInit+0xac>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <HAL_UART_MspInit+0xac>)
 8004502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004504:	4a10      	ldr	r2, [pc, #64]	; (8004548 <HAL_UART_MspInit+0xac>)
 8004506:	f043 0304 	orr.w	r3, r3, #4
 800450a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800450c:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <HAL_UART_MspInit+0xac>)
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004518:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800451c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451e:	2302      	movs	r3, #2
 8004520:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	2300      	movs	r3, #0
 8004528:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800452a:	2305      	movs	r3, #5
 800452c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800452e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004532:	4619      	mov	r1, r3
 8004534:	4805      	ldr	r0, [pc, #20]	; (800454c <HAL_UART_MspInit+0xb0>)
 8004536:	f002 fb7d 	bl	8006c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800453a:	bf00      	nop
 800453c:	3778      	adds	r7, #120	; 0x78
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40004c00 	.word	0x40004c00
 8004548:	40021000 	.word	0x40021000
 800454c:	48000800 	.word	0x48000800

08004550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004554:	e7fe      	b.n	8004554 <NMI_Handler+0x4>

08004556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800455a:	e7fe      	b.n	800455a <HardFault_Handler+0x4>

0800455c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004560:	e7fe      	b.n	8004560 <MemManage_Handler+0x4>

08004562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004566:	e7fe      	b.n	8004566 <BusFault_Handler+0x4>

08004568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800456c:	e7fe      	b.n	800456c <UsageFault_Handler+0x4>

0800456e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800458a:	b480      	push	{r7}
 800458c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800459c:	f000 f974 	bl	8004888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045a0:	bf00      	nop
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045a8:	4802      	ldr	r0, [pc, #8]	; (80045b4 <DMA1_Channel1_IRQHandler+0x10>)
 80045aa:	f002 f82e 	bl	800660a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000328 	.word	0x20000328

080045b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045bc:	4802      	ldr	r0, [pc, #8]	; (80045c8 <TIM2_IRQHandler+0x10>)
 80045be:	f003 ffeb 	bl	8008598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200003ec 	.word	0x200003ec

080045cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045d0:	4802      	ldr	r0, [pc, #8]	; (80045dc <TIM3_IRQHandler+0x10>)
 80045d2:	f003 ffe1 	bl	8008598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000438 	.word	0x20000438

080045e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return 1;
 80045e4:	2301      	movs	r3, #1
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <_kill>:

int _kill(int pid, int sig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045fa:	f008 fa9d 	bl	800cb38 <__errno>
 80045fe:	4603      	mov	r3, r0
 8004600:	2216      	movs	r2, #22
 8004602:	601a      	str	r2, [r3, #0]
  return -1;
 8004604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_exit>:

void _exit (int status)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004618:	f04f 31ff 	mov.w	r1, #4294967295
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ffe7 	bl	80045f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004622:	e7fe      	b.n	8004622 <_exit+0x12>

08004624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e00a      	b.n	800464c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004636:	f3af 8000 	nop.w
 800463a:	4601      	mov	r1, r0
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	60ba      	str	r2, [r7, #8]
 8004642:	b2ca      	uxtb	r2, r1
 8004644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	3301      	adds	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	dbf0      	blt.n	8004636 <_read+0x12>
  }

  return len;
 8004654:	687b      	ldr	r3, [r7, #4]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e009      	b.n	8004684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	60ba      	str	r2, [r7, #8]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	3301      	adds	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	dbf1      	blt.n	8004670 <_write+0x12>
  }
  return len;
 800468c:	687b      	ldr	r3, [r7, #4]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <_close>:

int _close(int file)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046be:	605a      	str	r2, [r3, #4]
  return 0;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <_isatty>:

int _isatty(int file)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <_sbrk+0x5c>)
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <_sbrk+0x60>)
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <_sbrk+0x64>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <_sbrk+0x64>)
 800471e:	4a12      	ldr	r2, [pc, #72]	; (8004768 <_sbrk+0x68>)
 8004720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <_sbrk+0x64>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	429a      	cmp	r2, r3
 800472e:	d207      	bcs.n	8004740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004730:	f008 fa02 	bl	800cb38 <__errno>
 8004734:	4603      	mov	r3, r0
 8004736:	220c      	movs	r2, #12
 8004738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800473a:	f04f 33ff 	mov.w	r3, #4294967295
 800473e:	e009      	b.n	8004754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <_sbrk+0x64>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <_sbrk+0x64>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <_sbrk+0x64>)
 8004750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20020000 	.word	0x20020000
 8004760:	00000400 	.word	0x00000400
 8004764:	2000052c 	.word	0x2000052c
 8004768:	20000688 	.word	0x20000688

0800476c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <SystemInit+0x20>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	4a05      	ldr	r2, [pc, #20]	; (800478c <SystemInit+0x20>)
 8004778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800477c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004790:	480d      	ldr	r0, [pc, #52]	; (80047c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004792:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004794:	480d      	ldr	r0, [pc, #52]	; (80047cc <LoopForever+0x6>)
  ldr r1, =_edata
 8004796:	490e      	ldr	r1, [pc, #56]	; (80047d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004798:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <LoopForever+0xe>)
  movs r3, #0
 800479a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800479c:	e002      	b.n	80047a4 <LoopCopyDataInit>

0800479e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800479e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047a2:	3304      	adds	r3, #4

080047a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047a8:	d3f9      	bcc.n	800479e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047aa:	4a0b      	ldr	r2, [pc, #44]	; (80047d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047ac:	4c0b      	ldr	r4, [pc, #44]	; (80047dc <LoopForever+0x16>)
  movs r3, #0
 80047ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047b0:	e001      	b.n	80047b6 <LoopFillZerobss>

080047b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047b4:	3204      	adds	r2, #4

080047b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047b8:	d3fb      	bcc.n	80047b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80047ba:	f7ff ffd7 	bl	800476c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047be:	f008 f9c1 	bl	800cb44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80047c2:	f7fe ffb5 	bl	8003730 <main>

080047c6 <LoopForever>:

LoopForever:
    b LoopForever
 80047c6:	e7fe      	b.n	80047c6 <LoopForever>
  ldr   r0, =_estack
 80047c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80047d4:	080107b8 	.word	0x080107b8
  ldr r2, =_sbss
 80047d8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80047dc:	20000684 	.word	0x20000684

080047e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047e0:	e7fe      	b.n	80047e0 <ADC1_2_IRQHandler>

080047e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ec:	2003      	movs	r0, #3
 80047ee:	f001 fda9 	bl	8006344 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047f2:	200f      	movs	r0, #15
 80047f4:	f000 f80e 	bl	8004814 <HAL_InitTick>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	71fb      	strb	r3, [r7, #7]
 8004802:	e001      	b.n	8004808 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004804:	f7ff fc5e 	bl	80040c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004808:	79fb      	ldrb	r3, [r7, #7]

}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004820:	4b16      	ldr	r3, [pc, #88]	; (800487c <HAL_InitTick+0x68>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d022      	beq.n	800486e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <HAL_InitTick+0x6c>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <HAL_InitTick+0x68>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004834:	fbb1 f3f3 	udiv	r3, r1, r3
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	4618      	mov	r0, r3
 800483e:	f001 fdb4 	bl	80063aa <HAL_SYSTICK_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10f      	bne.n	8004868 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	d809      	bhi.n	8004862 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800484e:	2200      	movs	r2, #0
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	f04f 30ff 	mov.w	r0, #4294967295
 8004856:	f001 fd80 	bl	800635a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <HAL_InitTick+0x70>)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e007      	b.n	8004872 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
 8004866:	e004      	b.n	8004872 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
 800486c:	e001      	b.n	8004872 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000008 	.word	0x20000008
 8004880:	20000000 	.word	0x20000000
 8004884:	20000004 	.word	0x20000004

08004888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_IncTick+0x1c>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_IncTick+0x20>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4413      	add	r3, r2
 8004896:	4a03      	ldr	r2, [pc, #12]	; (80048a4 <HAL_IncTick+0x1c>)
 8004898:	6013      	str	r3, [r2, #0]
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	20000530 	.word	0x20000530
 80048a8:	20000008 	.word	0x20000008

080048ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return uwTick;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <HAL_GetTick+0x14>)
 80048b2:	681b      	ldr	r3, [r3, #0]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000530 	.word	0x20000530

080048c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048cc:	f7ff ffee 	bl	80048ac <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d004      	beq.n	80048e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_Delay+0x40>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048e8:	bf00      	nop
 80048ea:	f7ff ffdf 	bl	80048ac <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d8f7      	bhi.n	80048ea <HAL_Delay+0x26>
  {
  }
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000008 	.word	0x20000008

08004908 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	609a      	str	r2, [r3, #8]
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3360      	adds	r3, #96	; 0x60
 8004982:	461a      	mov	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <LL_ADC_SetOffset+0x44>)
 8004992:	4013      	ands	r3, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	4313      	orrs	r3, r2
 80049a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	03fff000 	.word	0x03fff000

080049b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3360      	adds	r3, #96	; 0x60
 80049c6:	461a      	mov	r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3360      	adds	r3, #96	; 0x60
 80049f4:	461a      	mov	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3360      	adds	r3, #96	; 0x60
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3360      	adds	r3, #96	; 0x60
 8004a60:	461a      	mov	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	615a      	str	r2, [r3, #20]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3330      	adds	r3, #48	; 0x30
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	0a1b      	lsrs	r3, r3, #8
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	4413      	add	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	211f      	movs	r1, #31
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	401a      	ands	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	0e9b      	lsrs	r3, r3, #26
 8004b0a:	f003 011f 	and.w	r1, r3, #31
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b087      	sub	sp, #28
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3314      	adds	r3, #20
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	0e5b      	lsrs	r3, r3, #25
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	4413      	add	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	0d1b      	lsrs	r3, r3, #20
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2107      	movs	r1, #7
 8004b58:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	0d1b      	lsrs	r3, r3, #20
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d10a      	bne.n	8004baa <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004ba8:	e00a      	b.n	8004bc0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	401a      	ands	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	407f0000 	.word	0x407f0000

08004bd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 031f 	and.w	r3, r3, #31
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004bfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6093      	str	r3, [r2, #8]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c24:	d101      	bne.n	8004c2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c74:	d101      	bne.n	8004c7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c9c:	f043 0201 	orr.w	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004cc4:	f043 0202 	orr.w	r2, r3, #2
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <LL_ADC_IsEnabled+0x18>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <LL_ADC_IsEnabled+0x1a>
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d101      	bne.n	8004d16 <LL_ADC_IsDisableOngoing+0x18>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <LL_ADC_IsDisableOngoing+0x1a>
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d38:	f043 0204 	orr.w	r2, r3, #4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d101      	bne.n	8004d64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d101      	bne.n	8004d8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b089      	sub	sp, #36	; 0x24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e1af      	b.n	8005112 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d109      	bne.n	8004dd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff f9a3 	bl	800410c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff ff19 	bl	8004c10 <LL_ADC_IsDeepPowerDownEnabled>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff feff 	bl	8004bec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff ff34 	bl	8004c60 <LL_ADC_IsInternalRegulatorEnabled>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d115      	bne.n	8004e2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff18 	bl	8004c38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e08:	4b9f      	ldr	r3, [pc, #636]	; (8005088 <HAL_ADC_Init+0x2f0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	099b      	lsrs	r3, r3, #6
 8004e0e:	4a9f      	ldr	r2, [pc, #636]	; (800508c <HAL_ADC_Init+0x2f4>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	099b      	lsrs	r3, r3, #6
 8004e16:	3301      	adds	r3, #1
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e1c:	e002      	b.n	8004e24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f9      	bne.n	8004e1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff ff16 	bl	8004c60 <LL_ADC_IsInternalRegulatorEnabled>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3e:	f043 0210 	orr.w	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4a:	f043 0201 	orr.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff ff76 	bl	8004d4c <LL_ADC_REG_IsConversionOngoing>
 8004e60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f040 8148 	bne.w	8005100 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f040 8144 	bne.w	8005100 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e80:	f043 0202 	orr.w	r2, r3, #2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff ff23 	bl	8004cd8 <LL_ADC_IsEnabled>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d141      	bne.n	8004f1c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ea0:	d004      	beq.n	8004eac <HAL_ADC_Init+0x114>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a7a      	ldr	r2, [pc, #488]	; (8005090 <HAL_ADC_Init+0x2f8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d10f      	bne.n	8004ecc <HAL_ADC_Init+0x134>
 8004eac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004eb0:	f7ff ff12 	bl	8004cd8 <LL_ADC_IsEnabled>
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	4876      	ldr	r0, [pc, #472]	; (8005090 <HAL_ADC_Init+0x2f8>)
 8004eb8:	f7ff ff0e 	bl	8004cd8 <LL_ADC_IsEnabled>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4323      	orrs	r3, r4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e012      	b.n	8004ef2 <HAL_ADC_Init+0x15a>
 8004ecc:	4871      	ldr	r0, [pc, #452]	; (8005094 <HAL_ADC_Init+0x2fc>)
 8004ece:	f7ff ff03 	bl	8004cd8 <LL_ADC_IsEnabled>
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	4870      	ldr	r0, [pc, #448]	; (8005098 <HAL_ADC_Init+0x300>)
 8004ed6:	f7ff feff 	bl	8004cd8 <LL_ADC_IsEnabled>
 8004eda:	4603      	mov	r3, r0
 8004edc:	431c      	orrs	r4, r3
 8004ede:	486f      	ldr	r0, [pc, #444]	; (800509c <HAL_ADC_Init+0x304>)
 8004ee0:	f7ff fefa 	bl	8004cd8 <LL_ADC_IsEnabled>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4323      	orrs	r3, r4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d012      	beq.n	8004f1c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004efe:	d004      	beq.n	8004f0a <HAL_ADC_Init+0x172>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a62      	ldr	r2, [pc, #392]	; (8005090 <HAL_ADC_Init+0x2f8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_ADC_Init+0x176>
 8004f0a:	4a65      	ldr	r2, [pc, #404]	; (80050a0 <HAL_ADC_Init+0x308>)
 8004f0c:	e000      	b.n	8004f10 <HAL_ADC_Init+0x178>
 8004f0e:	4a65      	ldr	r2, [pc, #404]	; (80050a4 <HAL_ADC_Init+0x30c>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7ff fcf6 	bl	8004908 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7f5b      	ldrb	r3, [r3, #29]
 8004f20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004f2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004f32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d106      	bne.n	8004f58 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	045b      	lsls	r3, r3, #17
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	4b4b      	ldr	r3, [pc, #300]	; (80050a8 <HAL_ADC_Init+0x310>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	69b9      	ldr	r1, [r7, #24]
 8004f84:	430b      	orrs	r3, r1
 8004f86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fed2 	bl	8004d4c <LL_ADC_REG_IsConversionOngoing>
 8004fa8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fedf 	bl	8004d72 <LL_ADC_INJ_IsConversionOngoing>
 8004fb4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d17f      	bne.n	80050bc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d17c      	bne.n	80050bc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004fc6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fde:	f023 0302 	bic.w	r3, r3, #2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	69b9      	ldr	r1, [r7, #24]
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005002:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800500c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6911      	ldr	r1, [r2, #16]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	430b      	orrs	r3, r1
 800501e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005022:	e013      	b.n	800504c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005032:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005048:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005052:	2b01      	cmp	r3, #1
 8005054:	d12a      	bne.n	80050ac <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005060:	f023 0304 	bic.w	r3, r3, #4
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800506c:	4311      	orrs	r1, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005072:	4311      	orrs	r1, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005078:	430a      	orrs	r2, r1
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0201 	orr.w	r2, r2, #1
 8005084:	611a      	str	r2, [r3, #16]
 8005086:	e019      	b.n	80050bc <HAL_ADC_Init+0x324>
 8005088:	20000000 	.word	0x20000000
 800508c:	053e2d63 	.word	0x053e2d63
 8005090:	50000100 	.word	0x50000100
 8005094:	50000400 	.word	0x50000400
 8005098:	50000500 	.word	0x50000500
 800509c:	50000600 	.word	0x50000600
 80050a0:	50000300 	.word	0x50000300
 80050a4:	50000700 	.word	0x50000700
 80050a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d10c      	bne.n	80050de <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	f023 010f 	bic.w	r1, r3, #15
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	1e5a      	subs	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
 80050dc:	e007      	b.n	80050ee <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 020f 	bic.w	r2, r2, #15
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80050fe:	e007      	b.n	8005110 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005104:	f043 0210 	orr.w	r2, r3, #16
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005110:	7ffb      	ldrb	r3, [r7, #31]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3724      	adds	r7, #36	; 0x24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd90      	pop	{r4, r7, pc}
 800511a:	bf00      	nop

0800511c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005130:	d004      	beq.n	800513c <HAL_ADC_Start_DMA+0x20>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a5a      	ldr	r2, [pc, #360]	; (80052a0 <HAL_ADC_Start_DMA+0x184>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_ADC_Start_DMA+0x24>
 800513c:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <HAL_ADC_Start_DMA+0x188>)
 800513e:	e000      	b.n	8005142 <HAL_ADC_Start_DMA+0x26>
 8005140:	4b59      	ldr	r3, [pc, #356]	; (80052a8 <HAL_ADC_Start_DMA+0x18c>)
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fd44 	bl	8004bd0 <LL_ADC_GetMultimode>
 8005148:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fdfc 	bl	8004d4c <LL_ADC_REG_IsConversionOngoing>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 809b 	bne.w	8005292 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_ADC_Start_DMA+0x4e>
 8005166:	2302      	movs	r3, #2
 8005168:	e096      	b.n	8005298 <HAL_ADC_Start_DMA+0x17c>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a4d      	ldr	r2, [pc, #308]	; (80052ac <HAL_ADC_Start_DMA+0x190>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d008      	beq.n	800518e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b05      	cmp	r3, #5
 8005186:	d002      	beq.n	800518e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b09      	cmp	r3, #9
 800518c:	d17a      	bne.n	8005284 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fcf6 	bl	8005b80 <ADC_Enable>
 8005194:	4603      	mov	r3, r0
 8005196:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d16d      	bne.n	800527a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a3a      	ldr	r2, [pc, #232]	; (80052a0 <HAL_ADC_Start_DMA+0x184>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d009      	beq.n	80051d0 <HAL_ADC_Start_DMA+0xb4>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a3b      	ldr	r2, [pc, #236]	; (80052b0 <HAL_ADC_Start_DMA+0x194>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d002      	beq.n	80051cc <HAL_ADC_Start_DMA+0xb0>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	e003      	b.n	80051d4 <HAL_ADC_Start_DMA+0xb8>
 80051cc:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <HAL_ADC_Start_DMA+0x198>)
 80051ce:	e001      	b.n	80051d4 <HAL_ADC_Start_DMA+0xb8>
 80051d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	4293      	cmp	r3, r2
 80051da:	d002      	beq.n	80051e2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d105      	bne.n	80051ee <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fe:	f023 0206 	bic.w	r2, r3, #6
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	661a      	str	r2, [r3, #96]	; 0x60
 8005206:	e002      	b.n	800520e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	4a29      	ldr	r2, [pc, #164]	; (80052b8 <HAL_ADC_Start_DMA+0x19c>)
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	4a28      	ldr	r2, [pc, #160]	; (80052bc <HAL_ADC_Start_DMA+0x1a0>)
 800521c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <HAL_ADC_Start_DMA+0x1a4>)
 8005224:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	221c      	movs	r2, #28
 800522c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0210 	orr.w	r2, r2, #16
 8005244:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0201 	orr.w	r2, r2, #1
 8005254:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3340      	adds	r3, #64	; 0x40
 8005260:	4619      	mov	r1, r3
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f001 f955 	bl	8006514 <HAL_DMA_Start_IT>
 800526a:	4603      	mov	r3, r0
 800526c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fd56 	bl	8004d24 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005278:	e00d      	b.n	8005296 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005282:	e008      	b.n	8005296 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005290:	e001      	b.n	8005296 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005292:	2302      	movs	r3, #2
 8005294:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005296:	7dfb      	ldrb	r3, [r7, #23]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	50000100 	.word	0x50000100
 80052a4:	50000300 	.word	0x50000300
 80052a8:	50000700 	.word	0x50000700
 80052ac:	50000600 	.word	0x50000600
 80052b0:	50000500 	.word	0x50000500
 80052b4:	50000400 	.word	0x50000400
 80052b8:	08005d03 	.word	0x08005d03
 80052bc:	08005ddb 	.word	0x08005ddb
 80052c0:	08005df7 	.word	0x08005df7

080052c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b0b6      	sub	sp, #216	; 0xd8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800531a:	2b01      	cmp	r3, #1
 800531c:	d102      	bne.n	8005324 <HAL_ADC_ConfigChannel+0x24>
 800531e:	2302      	movs	r3, #2
 8005320:	f000 bc13 	b.w	8005b4a <HAL_ADC_ConfigChannel+0x84a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fd0b 	bl	8004d4c <LL_ADC_REG_IsConversionOngoing>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	f040 83f3 	bne.w	8005b24 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6859      	ldr	r1, [r3, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7ff fbc1 	bl	8004ad2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff fcf9 	bl	8004d4c <LL_ADC_REG_IsConversionOngoing>
 800535a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fd05 	bl	8004d72 <LL_ADC_INJ_IsConversionOngoing>
 8005368:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800536c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005370:	2b00      	cmp	r3, #0
 8005372:	f040 81d9 	bne.w	8005728 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005376:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800537a:	2b00      	cmp	r3, #0
 800537c:	f040 81d4 	bne.w	8005728 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005388:	d10f      	bne.n	80053aa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	4619      	mov	r1, r3
 8005396:	f7ff fbc8 	bl	8004b2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fb6f 	bl	8004a86 <LL_ADC_SetSamplingTimeCommonConfig>
 80053a8:	e00e      	b.n	80053c8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6819      	ldr	r1, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f7ff fbb7 	bl	8004b2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fb5f 	bl	8004a86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	08db      	lsrs	r3, r3, #3
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d022      	beq.n	8005430 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6919      	ldr	r1, [r3, #16]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053fa:	f7ff fab9 	bl	8004970 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6919      	ldr	r1, [r3, #16]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	461a      	mov	r2, r3
 800540c:	f7ff fb05 	bl	8004a1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	6919      	ldr	r1, [r3, #16]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	7f1b      	ldrb	r3, [r3, #28]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d102      	bne.n	8005426 <HAL_ADC_ConfigChannel+0x126>
 8005420:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005424:	e000      	b.n	8005428 <HAL_ADC_ConfigChannel+0x128>
 8005426:	2300      	movs	r3, #0
 8005428:	461a      	mov	r2, r3
 800542a:	f7ff fb11 	bl	8004a50 <LL_ADC_SetOffsetSaturation>
 800542e:	e17b      	b.n	8005728 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fabe 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 800543c:	4603      	mov	r3, r0
 800543e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <HAL_ADC_ConfigChannel+0x15c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2100      	movs	r1, #0
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fab3 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 8005452:	4603      	mov	r3, r0
 8005454:	0e9b      	lsrs	r3, r3, #26
 8005456:	f003 021f 	and.w	r2, r3, #31
 800545a:	e01e      	b.n	800549a <HAL_ADC_ConfigChannel+0x19a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff faa8 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 8005468:	4603      	mov	r3, r0
 800546a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800547a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800547e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800548a:	2320      	movs	r3, #32
 800548c:	e004      	b.n	8005498 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800548e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005492:	fab3 f383 	clz	r3, r3
 8005496:	b2db      	uxtb	r3, r3
 8005498:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d105      	bne.n	80054b2 <HAL_ADC_ConfigChannel+0x1b2>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	0e9b      	lsrs	r3, r3, #26
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	e018      	b.n	80054e4 <HAL_ADC_ConfigChannel+0x1e4>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054be:	fa93 f3a3 	rbit	r3, r3
 80054c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80054c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80054ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80054d6:	2320      	movs	r3, #32
 80054d8:	e004      	b.n	80054e4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80054da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054de:	fab3 f383 	clz	r3, r3
 80054e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d106      	bne.n	80054f6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2200      	movs	r2, #0
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fa77 	bl	80049e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2101      	movs	r1, #1
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fa5b 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 8005502:	4603      	mov	r3, r0
 8005504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <HAL_ADC_ConfigChannel+0x222>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2101      	movs	r1, #1
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fa50 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 8005518:	4603      	mov	r3, r0
 800551a:	0e9b      	lsrs	r3, r3, #26
 800551c:	f003 021f 	and.w	r2, r3, #31
 8005520:	e01e      	b.n	8005560 <HAL_ADC_ConfigChannel+0x260>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2101      	movs	r1, #1
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fa45 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 800552e:	4603      	mov	r3, r0
 8005530:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005538:	fa93 f3a3 	rbit	r3, r3
 800553c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005540:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005550:	2320      	movs	r3, #32
 8005552:	e004      	b.n	800555e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005558:	fab3 f383 	clz	r3, r3
 800555c:	b2db      	uxtb	r3, r3
 800555e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005568:	2b00      	cmp	r3, #0
 800556a:	d105      	bne.n	8005578 <HAL_ADC_ConfigChannel+0x278>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	0e9b      	lsrs	r3, r3, #26
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	e018      	b.n	80055aa <HAL_ADC_ConfigChannel+0x2aa>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005584:	fa93 f3a3 	rbit	r3, r3
 8005588:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800558c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800559c:	2320      	movs	r3, #32
 800559e:	e004      	b.n	80055aa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80055a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055a4:	fab3 f383 	clz	r3, r3
 80055a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d106      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	2101      	movs	r1, #1
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fa14 	bl	80049e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2102      	movs	r1, #2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff f9f8 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x2e8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2102      	movs	r1, #2
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff f9ed 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 80055de:	4603      	mov	r3, r0
 80055e0:	0e9b      	lsrs	r3, r3, #26
 80055e2:	f003 021f 	and.w	r2, r3, #31
 80055e6:	e01e      	b.n	8005626 <HAL_ADC_ConfigChannel+0x326>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2102      	movs	r1, #2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff f9e2 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055fe:	fa93 f3a3 	rbit	r3, r3
 8005602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005606:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800560a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800560e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005616:	2320      	movs	r3, #32
 8005618:	e004      	b.n	8005624 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800561a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800561e:	fab3 f383 	clz	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <HAL_ADC_ConfigChannel+0x33e>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	0e9b      	lsrs	r3, r3, #26
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	e016      	b.n	800566c <HAL_ADC_ConfigChannel+0x36c>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800565e:	2320      	movs	r3, #32
 8005660:	e004      	b.n	800566c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005666:	fab3 f383 	clz	r3, r3
 800566a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800566c:	429a      	cmp	r2, r3
 800566e:	d106      	bne.n	800567e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2200      	movs	r2, #0
 8005676:	2102      	movs	r1, #2
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff f9b3 	bl	80049e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2103      	movs	r1, #3
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff f997 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 800568a:	4603      	mov	r3, r0
 800568c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <HAL_ADC_ConfigChannel+0x3aa>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2103      	movs	r1, #3
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff f98c 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 80056a0:	4603      	mov	r3, r0
 80056a2:	0e9b      	lsrs	r3, r3, #26
 80056a4:	f003 021f 	and.w	r2, r3, #31
 80056a8:	e017      	b.n	80056da <HAL_ADC_ConfigChannel+0x3da>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2103      	movs	r1, #3
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f981 	bl	80049b8 <LL_ADC_GetOffsetChannel>
 80056b6:	4603      	mov	r3, r0
 80056b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056bc:	fa93 f3a3 	rbit	r3, r3
 80056c0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80056c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80056c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80056cc:	2320      	movs	r3, #32
 80056ce:	e003      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80056d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d105      	bne.n	80056f2 <HAL_ADC_ConfigChannel+0x3f2>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	0e9b      	lsrs	r3, r3, #26
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	e011      	b.n	8005716 <HAL_ADC_ConfigChannel+0x416>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056fa:	fa93 f3a3 	rbit	r3, r3
 80056fe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005702:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800570a:	2320      	movs	r3, #32
 800570c:	e003      	b.n	8005716 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005716:	429a      	cmp	r2, r3
 8005718:	d106      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	2103      	movs	r1, #3
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff f95e 	bl	80049e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fad3 	bl	8004cd8 <LL_ADC_IsEnabled>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	f040 813d 	bne.w	80059b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	461a      	mov	r2, r3
 8005748:	f7ff fa1a 	bl	8004b80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	4aa2      	ldr	r2, [pc, #648]	; (80059dc <HAL_ADC_ConfigChannel+0x6dc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	f040 812e 	bne.w	80059b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x480>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	0e9b      	lsrs	r3, r3, #26
 800576e:	3301      	adds	r3, #1
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	2b09      	cmp	r3, #9
 8005776:	bf94      	ite	ls
 8005778:	2301      	movls	r3, #1
 800577a:	2300      	movhi	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	e019      	b.n	80057b4 <HAL_ADC_ConfigChannel+0x4b4>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005788:	fa93 f3a3 	rbit	r3, r3
 800578c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800578e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005790:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005798:	2320      	movs	r3, #32
 800579a:	e003      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800579c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800579e:	fab3 f383 	clz	r3, r3
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	3301      	adds	r3, #1
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2b09      	cmp	r3, #9
 80057ac:	bf94      	ite	ls
 80057ae:	2301      	movls	r3, #1
 80057b0:	2300      	movhi	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d079      	beq.n	80058ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d107      	bne.n	80057d4 <HAL_ADC_ConfigChannel+0x4d4>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	0e9b      	lsrs	r3, r3, #26
 80057ca:	3301      	adds	r3, #1
 80057cc:	069b      	lsls	r3, r3, #26
 80057ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057d2:	e015      	b.n	8005800 <HAL_ADC_ConfigChannel+0x500>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057dc:	fa93 f3a3 	rbit	r3, r3
 80057e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80057e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80057ec:	2320      	movs	r3, #32
 80057ee:	e003      	b.n	80057f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80057f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f2:	fab3 f383 	clz	r3, r3
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	3301      	adds	r3, #1
 80057fa:	069b      	lsls	r3, r3, #26
 80057fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <HAL_ADC_ConfigChannel+0x520>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	0e9b      	lsrs	r3, r3, #26
 8005812:	3301      	adds	r3, #1
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	2101      	movs	r1, #1
 800581a:	fa01 f303 	lsl.w	r3, r1, r3
 800581e:	e017      	b.n	8005850 <HAL_ADC_ConfigChannel+0x550>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005828:	fa93 f3a3 	rbit	r3, r3
 800582c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800582e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005830:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005838:	2320      	movs	r3, #32
 800583a:	e003      	b.n	8005844 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800583c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583e:	fab3 f383 	clz	r3, r3
 8005842:	b2db      	uxtb	r3, r3
 8005844:	3301      	adds	r3, #1
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	2101      	movs	r1, #1
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	ea42 0103 	orr.w	r1, r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <HAL_ADC_ConfigChannel+0x576>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	0e9b      	lsrs	r3, r3, #26
 8005866:	3301      	adds	r3, #1
 8005868:	f003 021f 	and.w	r2, r3, #31
 800586c:	4613      	mov	r3, r2
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	4413      	add	r3, r2
 8005872:	051b      	lsls	r3, r3, #20
 8005874:	e018      	b.n	80058a8 <HAL_ADC_ConfigChannel+0x5a8>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	fa93 f3a3 	rbit	r3, r3
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800588e:	2320      	movs	r3, #32
 8005890:	e003      	b.n	800589a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	fab3 f383 	clz	r3, r3
 8005898:	b2db      	uxtb	r3, r3
 800589a:	3301      	adds	r3, #1
 800589c:	f003 021f 	and.w	r2, r3, #31
 80058a0:	4613      	mov	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058a8:	430b      	orrs	r3, r1
 80058aa:	e07e      	b.n	80059aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d107      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x5c8>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	0e9b      	lsrs	r3, r3, #26
 80058be:	3301      	adds	r3, #1
 80058c0:	069b      	lsls	r3, r3, #26
 80058c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058c6:	e015      	b.n	80058f4 <HAL_ADC_ConfigChannel+0x5f4>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	fa93 f3a3 	rbit	r3, r3
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80058e0:	2320      	movs	r3, #32
 80058e2:	e003      	b.n	80058ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	fab3 f383 	clz	r3, r3
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	3301      	adds	r3, #1
 80058ee:	069b      	lsls	r3, r3, #26
 80058f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d109      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x614>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	0e9b      	lsrs	r3, r3, #26
 8005906:	3301      	adds	r3, #1
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	2101      	movs	r1, #1
 800590e:	fa01 f303 	lsl.w	r3, r1, r3
 8005912:	e017      	b.n	8005944 <HAL_ADC_ConfigChannel+0x644>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	fa93 f3a3 	rbit	r3, r3
 8005920:	61fb      	str	r3, [r7, #28]
  return result;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800592c:	2320      	movs	r3, #32
 800592e:	e003      	b.n	8005938 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	3301      	adds	r3, #1
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2101      	movs	r1, #1
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	ea42 0103 	orr.w	r1, r2, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10d      	bne.n	8005970 <HAL_ADC_ConfigChannel+0x670>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	0e9b      	lsrs	r3, r3, #26
 800595a:	3301      	adds	r3, #1
 800595c:	f003 021f 	and.w	r2, r3, #31
 8005960:	4613      	mov	r3, r2
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	4413      	add	r3, r2
 8005966:	3b1e      	subs	r3, #30
 8005968:	051b      	lsls	r3, r3, #20
 800596a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800596e:	e01b      	b.n	80059a8 <HAL_ADC_ConfigChannel+0x6a8>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	fa93 f3a3 	rbit	r3, r3
 800597c:	613b      	str	r3, [r7, #16]
  return result;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005988:	2320      	movs	r3, #32
 800598a:	e003      	b.n	8005994 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	fab3 f383 	clz	r3, r3
 8005992:	b2db      	uxtb	r3, r3
 8005994:	3301      	adds	r3, #1
 8005996:	f003 021f 	and.w	r2, r3, #31
 800599a:	4613      	mov	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4413      	add	r3, r2
 80059a0:	3b1e      	subs	r3, #30
 80059a2:	051b      	lsls	r3, r3, #20
 80059a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059a8:	430b      	orrs	r3, r1
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	6892      	ldr	r2, [r2, #8]
 80059ae:	4619      	mov	r1, r3
 80059b0:	f7ff f8bb 	bl	8004b2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80be 	beq.w	8005b3e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059ca:	d004      	beq.n	80059d6 <HAL_ADC_ConfigChannel+0x6d6>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a04      	ldr	r2, [pc, #16]	; (80059e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d10a      	bne.n	80059ec <HAL_ADC_ConfigChannel+0x6ec>
 80059d6:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80059d8:	e009      	b.n	80059ee <HAL_ADC_ConfigChannel+0x6ee>
 80059da:	bf00      	nop
 80059dc:	407f0000 	.word	0x407f0000
 80059e0:	80080000 	.word	0x80080000
 80059e4:	50000100 	.word	0x50000100
 80059e8:	50000300 	.word	0x50000300
 80059ec:	4b59      	ldr	r3, [pc, #356]	; (8005b54 <HAL_ADC_ConfigChannel+0x854>)
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe ffb0 	bl	8004954 <LL_ADC_GetCommonPathInternalCh>
 80059f4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a56      	ldr	r2, [pc, #344]	; (8005b58 <HAL_ADC_ConfigChannel+0x858>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <HAL_ADC_ConfigChannel+0x70c>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a55      	ldr	r2, [pc, #340]	; (8005b5c <HAL_ADC_ConfigChannel+0x85c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d13a      	bne.n	8005a82 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d134      	bne.n	8005a82 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a20:	d005      	beq.n	8005a2e <HAL_ADC_ConfigChannel+0x72e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a4e      	ldr	r2, [pc, #312]	; (8005b60 <HAL_ADC_ConfigChannel+0x860>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	f040 8085 	bne.w	8005b38 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a36:	d004      	beq.n	8005a42 <HAL_ADC_ConfigChannel+0x742>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a49      	ldr	r2, [pc, #292]	; (8005b64 <HAL_ADC_ConfigChannel+0x864>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d101      	bne.n	8005a46 <HAL_ADC_ConfigChannel+0x746>
 8005a42:	4a49      	ldr	r2, [pc, #292]	; (8005b68 <HAL_ADC_ConfigChannel+0x868>)
 8005a44:	e000      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x748>
 8005a46:	4a43      	ldr	r2, [pc, #268]	; (8005b54 <HAL_ADC_ConfigChannel+0x854>)
 8005a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f7fe ff6b 	bl	800492e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a58:	4b44      	ldr	r3, [pc, #272]	; (8005b6c <HAL_ADC_ConfigChannel+0x86c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	099b      	lsrs	r3, r3, #6
 8005a5e:	4a44      	ldr	r2, [pc, #272]	; (8005b70 <HAL_ADC_ConfigChannel+0x870>)
 8005a60:	fba2 2303 	umull	r2, r3, r2, r3
 8005a64:	099b      	lsrs	r3, r3, #6
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	4613      	mov	r3, r2
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a72:	e002      	b.n	8005a7a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f9      	bne.n	8005a74 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a80:	e05a      	b.n	8005b38 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a3b      	ldr	r2, [pc, #236]	; (8005b74 <HAL_ADC_ConfigChannel+0x874>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d125      	bne.n	8005ad8 <HAL_ADC_ConfigChannel+0x7d8>
 8005a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d11f      	bne.n	8005ad8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a31      	ldr	r2, [pc, #196]	; (8005b64 <HAL_ADC_ConfigChannel+0x864>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d104      	bne.n	8005aac <HAL_ADC_ConfigChannel+0x7ac>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a34      	ldr	r2, [pc, #208]	; (8005b78 <HAL_ADC_ConfigChannel+0x878>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d047      	beq.n	8005b3c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ab4:	d004      	beq.n	8005ac0 <HAL_ADC_ConfigChannel+0x7c0>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <HAL_ADC_ConfigChannel+0x864>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d101      	bne.n	8005ac4 <HAL_ADC_ConfigChannel+0x7c4>
 8005ac0:	4a29      	ldr	r2, [pc, #164]	; (8005b68 <HAL_ADC_ConfigChannel+0x868>)
 8005ac2:	e000      	b.n	8005ac6 <HAL_ADC_ConfigChannel+0x7c6>
 8005ac4:	4a23      	ldr	r2, [pc, #140]	; (8005b54 <HAL_ADC_ConfigChannel+0x854>)
 8005ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	f7fe ff2c 	bl	800492e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ad6:	e031      	b.n	8005b3c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a27      	ldr	r2, [pc, #156]	; (8005b7c <HAL_ADC_ConfigChannel+0x87c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d12d      	bne.n	8005b3e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d127      	bne.n	8005b3e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1c      	ldr	r2, [pc, #112]	; (8005b64 <HAL_ADC_ConfigChannel+0x864>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d022      	beq.n	8005b3e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b00:	d004      	beq.n	8005b0c <HAL_ADC_ConfigChannel+0x80c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a17      	ldr	r2, [pc, #92]	; (8005b64 <HAL_ADC_ConfigChannel+0x864>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d101      	bne.n	8005b10 <HAL_ADC_ConfigChannel+0x810>
 8005b0c:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <HAL_ADC_ConfigChannel+0x868>)
 8005b0e:	e000      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x812>
 8005b10:	4a10      	ldr	r2, [pc, #64]	; (8005b54 <HAL_ADC_ConfigChannel+0x854>)
 8005b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f7fe ff06 	bl	800492e <LL_ADC_SetCommonPathInternalCh>
 8005b22:	e00c      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b28:	f043 0220 	orr.w	r2, r3, #32
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005b36:	e002      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b38:	bf00      	nop
 8005b3a:	e000      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005b46:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	37d8      	adds	r7, #216	; 0xd8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	50000700 	.word	0x50000700
 8005b58:	c3210000 	.word	0xc3210000
 8005b5c:	90c00010 	.word	0x90c00010
 8005b60:	50000600 	.word	0x50000600
 8005b64:	50000100 	.word	0x50000100
 8005b68:	50000300 	.word	0x50000300
 8005b6c:	20000000 	.word	0x20000000
 8005b70:	053e2d63 	.word	0x053e2d63
 8005b74:	c7520000 	.word	0xc7520000
 8005b78:	50000500 	.word	0x50000500
 8005b7c:	cb840000 	.word	0xcb840000

08005b80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff f8a3 	bl	8004cd8 <LL_ADC_IsEnabled>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d14d      	bne.n	8005c34 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	4b28      	ldr	r3, [pc, #160]	; (8005c40 <ADC_Enable+0xc0>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005baa:	f043 0210 	orr.w	r2, r3, #16
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb6:	f043 0201 	orr.w	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e039      	b.n	8005c36 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff f85e 	bl	8004c88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005bcc:	f7fe fe6e 	bl	80048ac <HAL_GetTick>
 8005bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bd2:	e028      	b.n	8005c26 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff f87d 	bl	8004cd8 <LL_ADC_IsEnabled>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff f84d 	bl	8004c88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bee:	f7fe fe5d 	bl	80048ac <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d914      	bls.n	8005c26 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d00d      	beq.n	8005c26 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0e:	f043 0210 	orr.w	r2, r3, #16
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1a:	f043 0201 	orr.w	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e007      	b.n	8005c36 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d1cf      	bne.n	8005bd4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	8000003f 	.word	0x8000003f

08005c44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff f854 	bl	8004cfe <LL_ADC_IsDisableOngoing>
 8005c56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff f83b 	bl	8004cd8 <LL_ADC_IsEnabled>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d047      	beq.n	8005cf8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d144      	bne.n	8005cf8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030d 	and.w	r3, r3, #13
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d10c      	bne.n	8005c96 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff f815 	bl	8004cb0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c8e:	f7fe fe0d 	bl	80048ac <HAL_GetTick>
 8005c92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c94:	e029      	b.n	8005cea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9a:	f043 0210 	orr.w	r2, r3, #16
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca6:	f043 0201 	orr.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e023      	b.n	8005cfa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005cb2:	f7fe fdfb 	bl	80048ac <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d914      	bls.n	8005cea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd2:	f043 0210 	orr.w	r2, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cde:	f043 0201 	orr.w	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e007      	b.n	8005cfa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1dc      	bne.n	8005cb2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d14b      	bne.n	8005db4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d021      	beq.n	8005d7a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe feb6 	bl	8004aac <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d032      	beq.n	8005dac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d12b      	bne.n	8005dac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11f      	bne.n	8005dac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d70:	f043 0201 	orr.w	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d78:	e018      	b.n	8005dac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d111      	bne.n	8005dac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d105      	bne.n	8005dac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da4:	f043 0201 	orr.w	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f7ff fa89 	bl	80052c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005db2:	e00e      	b.n	8005dd2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff fa93 	bl	80052ec <HAL_ADC_ErrorCallback>
}
 8005dc6:	e004      	b.n	8005dd2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	4798      	blx	r3
}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff fa75 	bl	80052d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e14:	f043 0204 	orr.w	r2, r3, #4
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7ff fa65 	bl	80052ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <LL_ADC_IsEnabled>:
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <LL_ADC_IsEnabled+0x18>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <LL_ADC_IsEnabled+0x1a>
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <LL_ADC_StartCalibration>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005e62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	609a      	str	r2, [r3, #8]
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <LL_ADC_IsCalibrationOnGoing>:
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e96:	d101      	bne.n	8005e9c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <LL_ADC_REG_IsConversionOngoing>:
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d101      	bne.n	8005ec2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_ADCEx_Calibration_Start+0x1c>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e04d      	b.n	8005f88 <HAL_ADCEx_Calibration_Start+0xb8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff fea5 	bl	8005c44 <ADC_Disable>
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d136      	bne.n	8005f72 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005f0c:	f023 0302 	bic.w	r3, r3, #2
 8005f10:	f043 0202 	orr.w	r2, r3, #2
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff ff96 	bl	8005e50 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f24:	e014      	b.n	8005f50 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4a18      	ldr	r2, [pc, #96]	; (8005f90 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d90d      	bls.n	8005f50 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f38:	f023 0312 	bic.w	r3, r3, #18
 8005f3c:	f043 0210 	orr.w	r2, r3, #16
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e01b      	b.n	8005f88 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff ff94 	bl	8005e82 <LL_ADC_IsCalibrationOnGoing>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e2      	bne.n	8005f26 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f64:	f023 0303 	bic.w	r3, r3, #3
 8005f68:	f043 0201 	orr.w	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f70:	e005      	b.n	8005f7e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	f043 0210 	orr.w	r2, r3, #16
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	0004de01 	.word	0x0004de01

08005f94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b0a1      	sub	sp, #132	; 0x84
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e0e7      	b.n	8006182 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fca:	d102      	bne.n	8005fd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005fcc:	4b6f      	ldr	r3, [pc, #444]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	e009      	b.n	8005fe6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a6e      	ldr	r2, [pc, #440]	; (8006190 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d102      	bne.n	8005fe2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005fdc:	4b6d      	ldr	r3, [pc, #436]	; (8006194 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005fde:	60bb      	str	r3, [r7, #8]
 8005fe0:	e001      	b.n	8005fe6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10b      	bne.n	8006004 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff0:	f043 0220 	orr.w	r2, r3, #32
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0be      	b.n	8006182 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff ff4f 	bl	8005eaa <LL_ADC_REG_IsConversionOngoing>
 800600c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff ff49 	bl	8005eaa <LL_ADC_REG_IsConversionOngoing>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	f040 80a0 	bne.w	8006160 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 809c 	bne.w	8006160 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006030:	d004      	beq.n	800603c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a55      	ldr	r2, [pc, #340]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d101      	bne.n	8006040 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800603c:	4b56      	ldr	r3, [pc, #344]	; (8006198 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800603e:	e000      	b.n	8006042 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006040:	4b56      	ldr	r3, [pc, #344]	; (800619c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006042:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d04b      	beq.n	80060e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800604c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	6859      	ldr	r1, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800605e:	035b      	lsls	r3, r3, #13
 8006060:	430b      	orrs	r3, r1
 8006062:	431a      	orrs	r2, r3
 8006064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006066:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006070:	d004      	beq.n	800607c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a45      	ldr	r2, [pc, #276]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d10f      	bne.n	800609c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800607c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006080:	f7ff fed3 	bl	8005e2a <LL_ADC_IsEnabled>
 8006084:	4604      	mov	r4, r0
 8006086:	4841      	ldr	r0, [pc, #260]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006088:	f7ff fecf 	bl	8005e2a <LL_ADC_IsEnabled>
 800608c:	4603      	mov	r3, r0
 800608e:	4323      	orrs	r3, r4
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	e012      	b.n	80060c2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800609c:	483c      	ldr	r0, [pc, #240]	; (8006190 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800609e:	f7ff fec4 	bl	8005e2a <LL_ADC_IsEnabled>
 80060a2:	4604      	mov	r4, r0
 80060a4:	483b      	ldr	r0, [pc, #236]	; (8006194 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80060a6:	f7ff fec0 	bl	8005e2a <LL_ADC_IsEnabled>
 80060aa:	4603      	mov	r3, r0
 80060ac:	431c      	orrs	r4, r3
 80060ae:	483c      	ldr	r0, [pc, #240]	; (80061a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80060b0:	f7ff febb 	bl	8005e2a <LL_ADC_IsEnabled>
 80060b4:	4603      	mov	r3, r0
 80060b6:	4323      	orrs	r3, r4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d056      	beq.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80060c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80060ce:	f023 030f 	bic.w	r3, r3, #15
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	6811      	ldr	r1, [r2, #0]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	6892      	ldr	r2, [r2, #8]
 80060da:	430a      	orrs	r2, r1
 80060dc:	431a      	orrs	r2, r3
 80060de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060e2:	e047      	b.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80060e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060f8:	d004      	beq.n	8006104 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a23      	ldr	r2, [pc, #140]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d10f      	bne.n	8006124 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006104:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006108:	f7ff fe8f 	bl	8005e2a <LL_ADC_IsEnabled>
 800610c:	4604      	mov	r4, r0
 800610e:	481f      	ldr	r0, [pc, #124]	; (800618c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006110:	f7ff fe8b 	bl	8005e2a <LL_ADC_IsEnabled>
 8006114:	4603      	mov	r3, r0
 8006116:	4323      	orrs	r3, r4
 8006118:	2b00      	cmp	r3, #0
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	e012      	b.n	800614a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006124:	481a      	ldr	r0, [pc, #104]	; (8006190 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006126:	f7ff fe80 	bl	8005e2a <LL_ADC_IsEnabled>
 800612a:	4604      	mov	r4, r0
 800612c:	4819      	ldr	r0, [pc, #100]	; (8006194 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800612e:	f7ff fe7c 	bl	8005e2a <LL_ADC_IsEnabled>
 8006132:	4603      	mov	r3, r0
 8006134:	431c      	orrs	r4, r3
 8006136:	481a      	ldr	r0, [pc, #104]	; (80061a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006138:	f7ff fe77 	bl	8005e2a <LL_ADC_IsEnabled>
 800613c:	4603      	mov	r3, r0
 800613e:	4323      	orrs	r3, r4
 8006140:	2b00      	cmp	r3, #0
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d012      	beq.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800614e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006156:	f023 030f 	bic.w	r3, r3, #15
 800615a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800615c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800615e:	e009      	b.n	8006174 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006172:	e000      	b.n	8006176 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006174:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800617e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006182:	4618      	mov	r0, r3
 8006184:	3784      	adds	r7, #132	; 0x84
 8006186:	46bd      	mov	sp, r7
 8006188:	bd90      	pop	{r4, r7, pc}
 800618a:	bf00      	nop
 800618c:	50000100 	.word	0x50000100
 8006190:	50000400 	.word	0x50000400
 8006194:	50000500 	.word	0x50000500
 8006198:	50000300 	.word	0x50000300
 800619c:	50000700 	.word	0x50000700
 80061a0:	50000600 	.word	0x50000600

080061a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <__NVIC_SetPriorityGrouping+0x44>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061c0:	4013      	ands	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061d6:	4a04      	ldr	r2, [pc, #16]	; (80061e8 <__NVIC_SetPriorityGrouping+0x44>)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	60d3      	str	r3, [r2, #12]
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	e000ed00 	.word	0xe000ed00

080061ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <__NVIC_GetPriorityGrouping+0x18>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	f003 0307 	and.w	r3, r3, #7
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	e000ed00 	.word	0xe000ed00

08006208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006216:	2b00      	cmp	r3, #0
 8006218:	db0b      	blt.n	8006232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	f003 021f 	and.w	r2, r3, #31
 8006220:	4907      	ldr	r1, [pc, #28]	; (8006240 <__NVIC_EnableIRQ+0x38>)
 8006222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	2001      	movs	r0, #1
 800622a:	fa00 f202 	lsl.w	r2, r0, r2
 800622e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	e000e100 	.word	0xe000e100

08006244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	6039      	str	r1, [r7, #0]
 800624e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006254:	2b00      	cmp	r3, #0
 8006256:	db0a      	blt.n	800626e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	490c      	ldr	r1, [pc, #48]	; (8006290 <__NVIC_SetPriority+0x4c>)
 800625e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006262:	0112      	lsls	r2, r2, #4
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	440b      	add	r3, r1
 8006268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800626c:	e00a      	b.n	8006284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4908      	ldr	r1, [pc, #32]	; (8006294 <__NVIC_SetPriority+0x50>)
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	3b04      	subs	r3, #4
 800627c:	0112      	lsls	r2, r2, #4
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	440b      	add	r3, r1
 8006282:	761a      	strb	r2, [r3, #24]
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	e000e100 	.word	0xe000e100
 8006294:	e000ed00 	.word	0xe000ed00

08006298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006298:	b480      	push	{r7}
 800629a:	b089      	sub	sp, #36	; 0x24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f1c3 0307 	rsb	r3, r3, #7
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	bf28      	it	cs
 80062b6:	2304      	movcs	r3, #4
 80062b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	3304      	adds	r3, #4
 80062be:	2b06      	cmp	r3, #6
 80062c0:	d902      	bls.n	80062c8 <NVIC_EncodePriority+0x30>
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	3b03      	subs	r3, #3
 80062c6:	e000      	b.n	80062ca <NVIC_EncodePriority+0x32>
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	43da      	mvns	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	401a      	ands	r2, r3
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062e0:	f04f 31ff 	mov.w	r1, #4294967295
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ea:	43d9      	mvns	r1, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062f0:	4313      	orrs	r3, r2
         );
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3724      	adds	r7, #36	; 0x24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3b01      	subs	r3, #1
 800630c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006310:	d301      	bcc.n	8006316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006312:	2301      	movs	r3, #1
 8006314:	e00f      	b.n	8006336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006316:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <SysTick_Config+0x40>)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3b01      	subs	r3, #1
 800631c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800631e:	210f      	movs	r1, #15
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	f7ff ff8e 	bl	8006244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <SysTick_Config+0x40>)
 800632a:	2200      	movs	r2, #0
 800632c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800632e:	4b04      	ldr	r3, [pc, #16]	; (8006340 <SysTick_Config+0x40>)
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	e000e010 	.word	0xe000e010

08006344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff ff29 	bl	80061a4 <__NVIC_SetPriorityGrouping>
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	4603      	mov	r3, r0
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006368:	f7ff ff40 	bl	80061ec <__NVIC_GetPriorityGrouping>
 800636c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	6978      	ldr	r0, [r7, #20]
 8006374:	f7ff ff90 	bl	8006298 <NVIC_EncodePriority>
 8006378:	4602      	mov	r2, r0
 800637a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ff5f 	bl	8006244 <__NVIC_SetPriority>
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	4603      	mov	r3, r0
 8006396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff ff33 	bl	8006208 <__NVIC_EnableIRQ>
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff ffa4 	bl	8006300 <SysTick_Config>
 80063b8:	4603      	mov	r3, r0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e08d      	b.n	80064f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	4b47      	ldr	r3, [pc, #284]	; (80064fc <HAL_DMA_Init+0x138>)
 80063de:	429a      	cmp	r2, r3
 80063e0:	d80f      	bhi.n	8006402 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	4b45      	ldr	r3, [pc, #276]	; (8006500 <HAL_DMA_Init+0x13c>)
 80063ea:	4413      	add	r3, r2
 80063ec:	4a45      	ldr	r2, [pc, #276]	; (8006504 <HAL_DMA_Init+0x140>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	091b      	lsrs	r3, r3, #4
 80063f4:	009a      	lsls	r2, r3, #2
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a42      	ldr	r2, [pc, #264]	; (8006508 <HAL_DMA_Init+0x144>)
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
 8006400:	e00e      	b.n	8006420 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	4b40      	ldr	r3, [pc, #256]	; (800650c <HAL_DMA_Init+0x148>)
 800640a:	4413      	add	r3, r2
 800640c:	4a3d      	ldr	r2, [pc, #244]	; (8006504 <HAL_DMA_Init+0x140>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	091b      	lsrs	r3, r3, #4
 8006414:	009a      	lsls	r2, r3, #2
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a3c      	ldr	r2, [pc, #240]	; (8006510 <HAL_DMA_Init+0x14c>)
 800641e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800645c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9b6 	bl	80067e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006480:	d102      	bne.n	8006488 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800649c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d010      	beq.n	80064c8 <HAL_DMA_Init+0x104>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d80c      	bhi.n	80064c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9d6 	bl	8006860 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80064c4:	605a      	str	r2, [r3, #4]
 80064c6:	e008      	b.n	80064da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40020407 	.word	0x40020407
 8006500:	bffdfff8 	.word	0xbffdfff8
 8006504:	cccccccd 	.word	0xcccccccd
 8006508:	40020000 	.word	0x40020000
 800650c:	bffdfbf8 	.word	0xbffdfbf8
 8006510:	40020400 	.word	0x40020400

08006514 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_DMA_Start_IT+0x20>
 8006530:	2302      	movs	r3, #2
 8006532:	e066      	b.n	8006602 <HAL_DMA_Start_IT+0xee>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d155      	bne.n	80065f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f8fb 	bl	8006768 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 020e 	orr.w	r2, r2, #14
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	e00f      	b.n	80065ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0204 	bic.w	r2, r2, #4
 800659a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 020a 	orr.w	r2, r2, #10
 80065aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0201 	orr.w	r2, r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	e005      	b.n	8006600 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
 80065fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006600:	7dfb      	ldrb	r3, [r7, #23]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	f003 031f 	and.w	r3, r3, #31
 800662a:	2204      	movs	r2, #4
 800662c:	409a      	lsls	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d026      	beq.n	8006684 <HAL_DMA_IRQHandler+0x7a>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d021      	beq.n	8006684 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d107      	bne.n	800665e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0204 	bic.w	r2, r2, #4
 800665c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006662:	f003 021f 	and.w	r2, r3, #31
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	2104      	movs	r1, #4
 800666c:	fa01 f202 	lsl.w	r2, r1, r2
 8006670:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	2b00      	cmp	r3, #0
 8006678:	d071      	beq.n	800675e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006682:	e06c      	b.n	800675e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006688:	f003 031f 	and.w	r3, r3, #31
 800668c:	2202      	movs	r2, #2
 800668e:	409a      	lsls	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4013      	ands	r3, r2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d02e      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d029      	beq.n	80066f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 020a 	bic.w	r2, r2, #10
 80066be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066cc:	f003 021f 	and.w	r2, r3, #31
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	2102      	movs	r1, #2
 80066d6:	fa01 f202 	lsl.w	r2, r1, r2
 80066da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d038      	beq.n	800675e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80066f4:	e033      	b.n	800675e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	2208      	movs	r2, #8
 8006700:	409a      	lsls	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4013      	ands	r3, r2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d02a      	beq.n	8006760 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d025      	beq.n	8006760 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 020e 	bic.w	r2, r2, #14
 8006722:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006728:	f003 021f 	and.w	r2, r3, #31
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	2101      	movs	r1, #1
 8006732:	fa01 f202 	lsl.w	r2, r1, r2
 8006736:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800675e:	bf00      	nop
 8006760:	bf00      	nop
}
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800677e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006790:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006796:	f003 021f 	and.w	r2, r3, #31
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	2101      	movs	r1, #1
 80067a0:	fa01 f202 	lsl.w	r2, r1, r2
 80067a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	d108      	bne.n	80067c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80067c6:	e007      	b.n	80067d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	60da      	str	r2, [r3, #12]
}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	4b16      	ldr	r3, [pc, #88]	; (800684c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d802      	bhi.n	80067fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80067f8:	4b15      	ldr	r3, [pc, #84]	; (8006850 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e001      	b.n	8006802 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80067fe:	4b15      	ldr	r3, [pc, #84]	; (8006854 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006800:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	3b08      	subs	r3, #8
 800680e:	4a12      	ldr	r2, [pc, #72]	; (8006858 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006810:	fba2 2303 	umull	r2, r3, r2, r3
 8006814:	091b      	lsrs	r3, r3, #4
 8006816:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681c:	089b      	lsrs	r3, r3, #2
 800681e:	009a      	lsls	r2, r3, #2
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	461a      	mov	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a0b      	ldr	r2, [pc, #44]	; (800685c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800682e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	2201      	movs	r2, #1
 8006838:	409a      	lsls	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	40020407 	.word	0x40020407
 8006850:	40020800 	.word	0x40020800
 8006854:	40020820 	.word	0x40020820
 8006858:	cccccccd 	.word	0xcccccccd
 800685c:	40020880 	.word	0x40020880

08006860 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	461a      	mov	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006882:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3b01      	subs	r3, #1
 8006888:	f003 031f 	and.w	r3, r3, #31
 800688c:	2201      	movs	r2, #1
 800688e:	409a      	lsls	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	1000823f 	.word	0x1000823f
 80068a4:	40020940 	.word	0x40020940

080068a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e147      	b.n	8006b4a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fd fd24 	bl	800431c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0210 	bic.w	r2, r2, #16
 80068e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068e4:	f7fd ffe2 	bl	80048ac <HAL_GetTick>
 80068e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80068ea:	e012      	b.n	8006912 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80068ec:	f7fd ffde 	bl	80048ac <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b0a      	cmp	r3, #10
 80068f8:	d90b      	bls.n	8006912 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fe:	f043 0201 	orr.w	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2203      	movs	r2, #3
 800690a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e11b      	b.n	8006b4a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b08      	cmp	r3, #8
 800691e:	d0e5      	beq.n	80068ec <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006930:	f7fd ffbc 	bl	80048ac <HAL_GetTick>
 8006934:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006936:	e012      	b.n	800695e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006938:	f7fd ffb8 	bl	80048ac <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b0a      	cmp	r3, #10
 8006944:	d90b      	bls.n	800695e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694a:	f043 0201 	orr.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2203      	movs	r2, #3
 8006956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e0f5      	b.n	8006b4a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0e5      	beq.n	8006938 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699a      	ldr	r2, [r3, #24]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0202 	orr.w	r2, r2, #2
 800697a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a74      	ldr	r2, [pc, #464]	; (8006b54 <HAL_FDCAN_Init+0x2ac>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d103      	bne.n	800698e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006986:	4a74      	ldr	r2, [pc, #464]	; (8006b58 <HAL_FDCAN_Init+0x2b0>)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	7c1b      	ldrb	r3, [r3, #16]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d108      	bne.n	80069a8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a4:	619a      	str	r2, [r3, #24]
 80069a6:	e007      	b.n	80069b8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7c5b      	ldrb	r3, [r3, #17]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d108      	bne.n	80069d2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ce:	619a      	str	r2, [r3, #24]
 80069d0:	e007      	b.n	80069e2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	699a      	ldr	r2, [r3, #24]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	7c9b      	ldrb	r3, [r3, #18]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d108      	bne.n	80069fc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699a      	ldr	r2, [r3, #24]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069f8:	619a      	str	r2, [r3, #24]
 80069fa:	e007      	b.n	8006a0c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a0a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699a      	ldr	r2, [r3, #24]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006a30:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0210 	bic.w	r2, r2, #16
 8006a40:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d108      	bne.n	8006a5c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0204 	orr.w	r2, r2, #4
 8006a58:	619a      	str	r2, [r3, #24]
 8006a5a:	e02c      	b.n	8006ab6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d028      	beq.n	8006ab6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d01c      	beq.n	8006aa6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a7a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0210 	orr.w	r2, r2, #16
 8006a8a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d110      	bne.n	8006ab6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0220 	orr.w	r2, r2, #32
 8006aa2:	619a      	str	r2, [r3, #24]
 8006aa4:	e007      	b.n	8006ab6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699a      	ldr	r2, [r3, #24]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0220 	orr.w	r2, r2, #32
 8006ab4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ac6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006ace:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ade:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ae0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aea:	d115      	bne.n	8006b18 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	3b01      	subs	r3, #1
 8006af8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006afa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	3b01      	subs	r3, #1
 8006b02:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006b04:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006b14:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006b16:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f814 	bl	8006b5c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40006400 	.word	0x40006400
 8006b58:	40006500 	.word	0x40006500

08006b5c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006b64:	4b30      	ldr	r3, [pc, #192]	; (8006c28 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006b66:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2f      	ldr	r2, [pc, #188]	; (8006c2c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d103      	bne.n	8006b7a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b78:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a2c      	ldr	r2, [pc, #176]	; (8006c30 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d103      	bne.n	8006b8c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8006b8a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b9a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba2:	041a      	lsls	r2, r3, #16
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	061a      	lsls	r2, r3, #24
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	e005      	b.n	8006c0e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d3f3      	bcc.n	8006c02 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	4000a400 	.word	0x4000a400
 8006c2c:	40006800 	.word	0x40006800
 8006c30:	40006c00 	.word	0x40006c00

08006c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006c42:	e15a      	b.n	8006efa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	2101      	movs	r1, #1
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 814c 	beq.w	8006ef4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d005      	beq.n	8006c74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d130      	bne.n	8006cd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	2203      	movs	r2, #3
 8006c80:	fa02 f303 	lsl.w	r3, r2, r3
 8006c84:	43db      	mvns	r3, r3
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006caa:	2201      	movs	r2, #1
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	091b      	lsrs	r3, r3, #4
 8006cc0:	f003 0201 	and.w	r2, r3, #1
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d017      	beq.n	8006d12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	2203      	movs	r2, #3
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d123      	bne.n	8006d66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	08da      	lsrs	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3208      	adds	r2, #8
 8006d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	220f      	movs	r2, #15
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	43db      	mvns	r3, r3
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	691a      	ldr	r2, [r3, #16]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	08da      	lsrs	r2, r3, #3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3208      	adds	r2, #8
 8006d60:	6939      	ldr	r1, [r7, #16]
 8006d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	2203      	movs	r2, #3
 8006d72:	fa02 f303 	lsl.w	r3, r2, r3
 8006d76:	43db      	mvns	r3, r3
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 0203 	and.w	r2, r3, #3
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 80a6 	beq.w	8006ef4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006da8:	4b5b      	ldr	r3, [pc, #364]	; (8006f18 <HAL_GPIO_Init+0x2e4>)
 8006daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dac:	4a5a      	ldr	r2, [pc, #360]	; (8006f18 <HAL_GPIO_Init+0x2e4>)
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	6613      	str	r3, [r2, #96]	; 0x60
 8006db4:	4b58      	ldr	r3, [pc, #352]	; (8006f18 <HAL_GPIO_Init+0x2e4>)
 8006db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dc0:	4a56      	ldr	r2, [pc, #344]	; (8006f1c <HAL_GPIO_Init+0x2e8>)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	089b      	lsrs	r3, r3, #2
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	220f      	movs	r2, #15
 8006dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ddc:	43db      	mvns	r3, r3
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4013      	ands	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006dea:	d01f      	beq.n	8006e2c <HAL_GPIO_Init+0x1f8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a4c      	ldr	r2, [pc, #304]	; (8006f20 <HAL_GPIO_Init+0x2ec>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d019      	beq.n	8006e28 <HAL_GPIO_Init+0x1f4>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a4b      	ldr	r2, [pc, #300]	; (8006f24 <HAL_GPIO_Init+0x2f0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <HAL_GPIO_Init+0x1f0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a4a      	ldr	r2, [pc, #296]	; (8006f28 <HAL_GPIO_Init+0x2f4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00d      	beq.n	8006e20 <HAL_GPIO_Init+0x1ec>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a49      	ldr	r2, [pc, #292]	; (8006f2c <HAL_GPIO_Init+0x2f8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <HAL_GPIO_Init+0x1e8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a48      	ldr	r2, [pc, #288]	; (8006f30 <HAL_GPIO_Init+0x2fc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d101      	bne.n	8006e18 <HAL_GPIO_Init+0x1e4>
 8006e14:	2305      	movs	r3, #5
 8006e16:	e00a      	b.n	8006e2e <HAL_GPIO_Init+0x1fa>
 8006e18:	2306      	movs	r3, #6
 8006e1a:	e008      	b.n	8006e2e <HAL_GPIO_Init+0x1fa>
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	e006      	b.n	8006e2e <HAL_GPIO_Init+0x1fa>
 8006e20:	2303      	movs	r3, #3
 8006e22:	e004      	b.n	8006e2e <HAL_GPIO_Init+0x1fa>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e002      	b.n	8006e2e <HAL_GPIO_Init+0x1fa>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <HAL_GPIO_Init+0x1fa>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	f002 0203 	and.w	r2, r2, #3
 8006e34:	0092      	lsls	r2, r2, #2
 8006e36:	4093      	lsls	r3, r2
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e3e:	4937      	ldr	r1, [pc, #220]	; (8006f1c <HAL_GPIO_Init+0x2e8>)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	089b      	lsrs	r3, r3, #2
 8006e44:	3302      	adds	r3, #2
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e4c:	4b39      	ldr	r3, [pc, #228]	; (8006f34 <HAL_GPIO_Init+0x300>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	43db      	mvns	r3, r3
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e70:	4a30      	ldr	r2, [pc, #192]	; (8006f34 <HAL_GPIO_Init+0x300>)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006e76:	4b2f      	ldr	r3, [pc, #188]	; (8006f34 <HAL_GPIO_Init+0x300>)
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	4013      	ands	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e9a:	4a26      	ldr	r2, [pc, #152]	; (8006f34 <HAL_GPIO_Init+0x300>)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006ea0:	4b24      	ldr	r3, [pc, #144]	; (8006f34 <HAL_GPIO_Init+0x300>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	43db      	mvns	r3, r3
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4013      	ands	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ec4:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <HAL_GPIO_Init+0x300>)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006eca:	4b1a      	ldr	r3, [pc, #104]	; (8006f34 <HAL_GPIO_Init+0x300>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006eee:	4a11      	ldr	r2, [pc, #68]	; (8006f34 <HAL_GPIO_Init+0x300>)
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	fa22 f303 	lsr.w	r3, r2, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f47f ae9d 	bne.w	8006c44 <HAL_GPIO_Init+0x10>
  }
}
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	40010000 	.word	0x40010000
 8006f20:	48000400 	.word	0x48000400
 8006f24:	48000800 	.word	0x48000800
 8006f28:	48000c00 	.word	0x48000c00
 8006f2c:	48001000 	.word	0x48001000
 8006f30:	48001400 	.word	0x48001400
 8006f34:	40010400 	.word	0x40010400

08006f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	807b      	strh	r3, [r7, #2]
 8006f44:	4613      	mov	r3, r2
 8006f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f48:	787b      	ldrb	r3, [r7, #1]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f4e:	887a      	ldrh	r2, [r7, #2]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f54:	e002      	b.n	8006f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f56:	887a      	ldrh	r2, [r7, #2]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d141      	bne.n	8006ffa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f76:	4b4b      	ldr	r3, [pc, #300]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f82:	d131      	bne.n	8006fe8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f84:	4b47      	ldr	r3, [pc, #284]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f8a:	4a46      	ldr	r2, [pc, #280]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f94:	4b43      	ldr	r3, [pc, #268]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f9c:	4a41      	ldr	r2, [pc, #260]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006fa4:	4b40      	ldr	r3, [pc, #256]	; (80070a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2232      	movs	r2, #50	; 0x32
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	4a3f      	ldr	r2, [pc, #252]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb4:	0c9b      	lsrs	r3, r3, #18
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fba:	e002      	b.n	8006fc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006fc2:	4b38      	ldr	r3, [pc, #224]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fce:	d102      	bne.n	8006fd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f2      	bne.n	8006fbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006fd6:	4b33      	ldr	r3, [pc, #204]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe2:	d158      	bne.n	8007096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e057      	b.n	8007098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fe8:	4b2e      	ldr	r3, [pc, #184]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fee:	4a2d      	ldr	r2, [pc, #180]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ff8:	e04d      	b.n	8007096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007000:	d141      	bne.n	8007086 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007002:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800700a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800700e:	d131      	bne.n	8007074 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007010:	4b24      	ldr	r3, [pc, #144]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007016:	4a23      	ldr	r2, [pc, #140]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800701c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007020:	4b20      	ldr	r3, [pc, #128]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007028:	4a1e      	ldr	r2, [pc, #120]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800702a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800702e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007030:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2232      	movs	r2, #50	; 0x32
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	0c9b      	lsrs	r3, r3, #18
 8007042:	3301      	adds	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007046:	e002      	b.n	800704e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3b01      	subs	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800704e:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800705a:	d102      	bne.n	8007062 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f2      	bne.n	8007048 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007062:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800706e:	d112      	bne.n	8007096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e011      	b.n	8007098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007074:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800707a:	4a0a      	ldr	r2, [pc, #40]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800707c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007084:	e007      	b.n	8007096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800708e:	4a05      	ldr	r2, [pc, #20]	; (80070a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007094:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40007000 	.word	0x40007000
 80070a8:	20000000 	.word	0x20000000
 80070ac:	431bde83 	.word	0x431bde83

080070b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	4a04      	ldr	r2, [pc, #16]	; (80070cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80070ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070be:	6093      	str	r3, [r2, #8]
}
 80070c0:	bf00      	nop
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40007000 	.word	0x40007000

080070d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e306      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d075      	beq.n	80071da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ee:	4b97      	ldr	r3, [pc, #604]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 030c 	and.w	r3, r3, #12
 80070f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070f8:	4b94      	ldr	r3, [pc, #592]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d102      	bne.n	800710e <HAL_RCC_OscConfig+0x3e>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d002      	beq.n	8007114 <HAL_RCC_OscConfig+0x44>
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b08      	cmp	r3, #8
 8007112:	d10b      	bne.n	800712c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007114:	4b8d      	ldr	r3, [pc, #564]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d05b      	beq.n	80071d8 <HAL_RCC_OscConfig+0x108>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d157      	bne.n	80071d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e2e1      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007134:	d106      	bne.n	8007144 <HAL_RCC_OscConfig+0x74>
 8007136:	4b85      	ldr	r3, [pc, #532]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a84      	ldr	r2, [pc, #528]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 800713c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e01d      	b.n	8007180 <HAL_RCC_OscConfig+0xb0>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800714c:	d10c      	bne.n	8007168 <HAL_RCC_OscConfig+0x98>
 800714e:	4b7f      	ldr	r3, [pc, #508]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a7e      	ldr	r2, [pc, #504]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	4b7c      	ldr	r3, [pc, #496]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a7b      	ldr	r2, [pc, #492]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e00b      	b.n	8007180 <HAL_RCC_OscConfig+0xb0>
 8007168:	4b78      	ldr	r3, [pc, #480]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a77      	ldr	r2, [pc, #476]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 800716e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	4b75      	ldr	r3, [pc, #468]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a74      	ldr	r2, [pc, #464]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 800717a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800717e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007188:	f7fd fb90 	bl	80048ac <HAL_GetTick>
 800718c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007190:	f7fd fb8c 	bl	80048ac <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b64      	cmp	r3, #100	; 0x64
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e2a6      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071a2:	4b6a      	ldr	r3, [pc, #424]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f0      	beq.n	8007190 <HAL_RCC_OscConfig+0xc0>
 80071ae:	e014      	b.n	80071da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fd fb7c 	bl	80048ac <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071b8:	f7fd fb78 	bl	80048ac <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b64      	cmp	r3, #100	; 0x64
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e292      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071ca:	4b60      	ldr	r3, [pc, #384]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0xe8>
 80071d6:	e000      	b.n	80071da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d075      	beq.n	80072d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071e6:	4b59      	ldr	r3, [pc, #356]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 030c 	and.w	r3, r3, #12
 80071ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071f0:	4b56      	ldr	r3, [pc, #344]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b0c      	cmp	r3, #12
 80071fe:	d102      	bne.n	8007206 <HAL_RCC_OscConfig+0x136>
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2b02      	cmp	r3, #2
 8007204:	d002      	beq.n	800720c <HAL_RCC_OscConfig+0x13c>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d11f      	bne.n	800724c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800720c:	4b4f      	ldr	r3, [pc, #316]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <HAL_RCC_OscConfig+0x154>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e265      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007224:	4b49      	ldr	r3, [pc, #292]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	061b      	lsls	r3, r3, #24
 8007232:	4946      	ldr	r1, [pc, #280]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007234:	4313      	orrs	r3, r2
 8007236:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007238:	4b45      	ldr	r3, [pc, #276]	; (8007350 <HAL_RCC_OscConfig+0x280>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f7fd fae9 	bl	8004814 <HAL_InitTick>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d043      	beq.n	80072d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e251      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d023      	beq.n	800729c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007254:	4b3d      	ldr	r3, [pc, #244]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a3c      	ldr	r2, [pc, #240]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 800725a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800725e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fd fb24 	bl	80048ac <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007268:	f7fd fb20 	bl	80048ac <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e23a      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727a:	4b34      	ldr	r3, [pc, #208]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007286:	4b31      	ldr	r3, [pc, #196]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	061b      	lsls	r3, r3, #24
 8007294:	492d      	ldr	r1, [pc, #180]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007296:	4313      	orrs	r3, r2
 8007298:	604b      	str	r3, [r1, #4]
 800729a:	e01a      	b.n	80072d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800729c:	4b2b      	ldr	r3, [pc, #172]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a2a      	ldr	r2, [pc, #168]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80072a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a8:	f7fd fb00 	bl	80048ac <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072b0:	f7fd fafc 	bl	80048ac <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e216      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072c2:	4b22      	ldr	r3, [pc, #136]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f0      	bne.n	80072b0 <HAL_RCC_OscConfig+0x1e0>
 80072ce:	e000      	b.n	80072d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d041      	beq.n	8007362 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d01c      	beq.n	8007320 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e6:	4b19      	ldr	r3, [pc, #100]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80072e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072ec:	4a17      	ldr	r2, [pc, #92]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 80072ee:	f043 0301 	orr.w	r3, r3, #1
 80072f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f6:	f7fd fad9 	bl	80048ac <HAL_GetTick>
 80072fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fe:	f7fd fad5 	bl	80048ac <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e1ef      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007310:	4b0e      	ldr	r3, [pc, #56]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0ef      	beq.n	80072fe <HAL_RCC_OscConfig+0x22e>
 800731e:	e020      	b.n	8007362 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007326:	4a09      	ldr	r2, [pc, #36]	; (800734c <HAL_RCC_OscConfig+0x27c>)
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007330:	f7fd fabc 	bl	80048ac <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007336:	e00d      	b.n	8007354 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007338:	f7fd fab8 	bl	80048ac <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d906      	bls.n	8007354 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e1d2      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
 800734a:	bf00      	nop
 800734c:	40021000 	.word	0x40021000
 8007350:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007354:	4b8c      	ldr	r3, [pc, #560]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1ea      	bne.n	8007338 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0304 	and.w	r3, r3, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 80a6 	beq.w	80074bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007370:	2300      	movs	r3, #0
 8007372:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007374:	4b84      	ldr	r3, [pc, #528]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <HAL_RCC_OscConfig+0x2b4>
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <HAL_RCC_OscConfig+0x2b6>
 8007384:	2300      	movs	r3, #0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00d      	beq.n	80073a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800738a:	4b7f      	ldr	r3, [pc, #508]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 800738c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738e:	4a7e      	ldr	r2, [pc, #504]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007394:	6593      	str	r3, [r2, #88]	; 0x58
 8007396:	4b7c      	ldr	r3, [pc, #496]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80073a2:	2301      	movs	r3, #1
 80073a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073a6:	4b79      	ldr	r3, [pc, #484]	; (800758c <HAL_RCC_OscConfig+0x4bc>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d118      	bne.n	80073e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073b2:	4b76      	ldr	r3, [pc, #472]	; (800758c <HAL_RCC_OscConfig+0x4bc>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a75      	ldr	r2, [pc, #468]	; (800758c <HAL_RCC_OscConfig+0x4bc>)
 80073b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073be:	f7fd fa75 	bl	80048ac <HAL_GetTick>
 80073c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c4:	e008      	b.n	80073d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073c6:	f7fd fa71 	bl	80048ac <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e18b      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073d8:	4b6c      	ldr	r3, [pc, #432]	; (800758c <HAL_RCC_OscConfig+0x4bc>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d108      	bne.n	80073fe <HAL_RCC_OscConfig+0x32e>
 80073ec:	4b66      	ldr	r3, [pc, #408]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 80073ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f2:	4a65      	ldr	r2, [pc, #404]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 80073f4:	f043 0301 	orr.w	r3, r3, #1
 80073f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073fc:	e024      	b.n	8007448 <HAL_RCC_OscConfig+0x378>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b05      	cmp	r3, #5
 8007404:	d110      	bne.n	8007428 <HAL_RCC_OscConfig+0x358>
 8007406:	4b60      	ldr	r3, [pc, #384]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740c:	4a5e      	ldr	r2, [pc, #376]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 800740e:	f043 0304 	orr.w	r3, r3, #4
 8007412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007416:	4b5c      	ldr	r3, [pc, #368]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741c:	4a5a      	ldr	r2, [pc, #360]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007426:	e00f      	b.n	8007448 <HAL_RCC_OscConfig+0x378>
 8007428:	4b57      	ldr	r3, [pc, #348]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742e:	4a56      	ldr	r2, [pc, #344]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007438:	4b53      	ldr	r3, [pc, #332]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743e:	4a52      	ldr	r2, [pc, #328]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007440:	f023 0304 	bic.w	r3, r3, #4
 8007444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d016      	beq.n	800747e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007450:	f7fd fa2c 	bl	80048ac <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007456:	e00a      	b.n	800746e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007458:	f7fd fa28 	bl	80048ac <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	f241 3288 	movw	r2, #5000	; 0x1388
 8007466:	4293      	cmp	r3, r2
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e140      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800746e:	4b46      	ldr	r3, [pc, #280]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0ed      	beq.n	8007458 <HAL_RCC_OscConfig+0x388>
 800747c:	e015      	b.n	80074aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800747e:	f7fd fa15 	bl	80048ac <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007484:	e00a      	b.n	800749c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007486:	f7fd fa11 	bl	80048ac <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f241 3288 	movw	r2, #5000	; 0x1388
 8007494:	4293      	cmp	r3, r2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e129      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800749c:	4b3a      	ldr	r3, [pc, #232]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 800749e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1ed      	bne.n	8007486 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074aa:	7ffb      	ldrb	r3, [r7, #31]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d105      	bne.n	80074bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074b0:	4b35      	ldr	r3, [pc, #212]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 80074b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b4:	4a34      	ldr	r2, [pc, #208]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 80074b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d03c      	beq.n	8007542 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01c      	beq.n	800750a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074d0:	4b2d      	ldr	r3, [pc, #180]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 80074d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074d6:	4a2c      	ldr	r2, [pc, #176]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e0:	f7fd f9e4 	bl	80048ac <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074e8:	f7fd f9e0 	bl	80048ac <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e0fa      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074fa:	4b23      	ldr	r3, [pc, #140]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 80074fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0ef      	beq.n	80074e8 <HAL_RCC_OscConfig+0x418>
 8007508:	e01b      	b.n	8007542 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800750a:	4b1f      	ldr	r3, [pc, #124]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 800750c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007510:	4a1d      	ldr	r2, [pc, #116]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751a:	f7fd f9c7 	bl	80048ac <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007520:	e008      	b.n	8007534 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007522:	f7fd f9c3 	bl	80048ac <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e0dd      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007534:	4b14      	ldr	r3, [pc, #80]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1ef      	bne.n	8007522 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 80d1 	beq.w	80076ee <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800754c:	4b0e      	ldr	r3, [pc, #56]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 030c 	and.w	r3, r3, #12
 8007554:	2b0c      	cmp	r3, #12
 8007556:	f000 808b 	beq.w	8007670 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d15e      	bne.n	8007620 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007562:	4b09      	ldr	r3, [pc, #36]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a08      	ldr	r2, [pc, #32]	; (8007588 <HAL_RCC_OscConfig+0x4b8>)
 8007568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800756c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756e:	f7fd f99d 	bl	80048ac <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007574:	e00c      	b.n	8007590 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007576:	f7fd f999 	bl	80048ac <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d905      	bls.n	8007590 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e0b3      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
 8007588:	40021000 	.word	0x40021000
 800758c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007590:	4b59      	ldr	r3, [pc, #356]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1ec      	bne.n	8007576 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800759c:	4b56      	ldr	r3, [pc, #344]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	4b56      	ldr	r3, [pc, #344]	; (80076fc <HAL_RCC_OscConfig+0x62c>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6a11      	ldr	r1, [r2, #32]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075ac:	3a01      	subs	r2, #1
 80075ae:	0112      	lsls	r2, r2, #4
 80075b0:	4311      	orrs	r1, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80075b6:	0212      	lsls	r2, r2, #8
 80075b8:	4311      	orrs	r1, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075be:	0852      	lsrs	r2, r2, #1
 80075c0:	3a01      	subs	r2, #1
 80075c2:	0552      	lsls	r2, r2, #21
 80075c4:	4311      	orrs	r1, r2
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075ca:	0852      	lsrs	r2, r2, #1
 80075cc:	3a01      	subs	r2, #1
 80075ce:	0652      	lsls	r2, r2, #25
 80075d0:	4311      	orrs	r1, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075d6:	06d2      	lsls	r2, r2, #27
 80075d8:	430a      	orrs	r2, r1
 80075da:	4947      	ldr	r1, [pc, #284]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075e0:	4b45      	ldr	r3, [pc, #276]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a44      	ldr	r2, [pc, #272]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 80075e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075ec:	4b42      	ldr	r3, [pc, #264]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	4a41      	ldr	r2, [pc, #260]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 80075f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f8:	f7fd f958 	bl	80048ac <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007600:	f7fd f954 	bl	80048ac <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e06e      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007612:	4b39      	ldr	r3, [pc, #228]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f0      	beq.n	8007600 <HAL_RCC_OscConfig+0x530>
 800761e:	e066      	b.n	80076ee <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007620:	4b35      	ldr	r3, [pc, #212]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a34      	ldr	r2, [pc, #208]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 8007626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800762a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800762c:	4b32      	ldr	r3, [pc, #200]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	4a31      	ldr	r2, [pc, #196]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007638:	4b2f      	ldr	r3, [pc, #188]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	4a2e      	ldr	r2, [pc, #184]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 800763e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007646:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007648:	f7fd f930 	bl	80048ac <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007650:	f7fd f92c 	bl	80048ac <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e046      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007662:	4b25      	ldr	r3, [pc, #148]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x580>
 800766e:	e03e      	b.n	80076ee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e039      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800767c:	4b1e      	ldr	r3, [pc, #120]	; (80076f8 <HAL_RCC_OscConfig+0x628>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f003 0203 	and.w	r2, r3, #3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	429a      	cmp	r2, r3
 800768e:	d12c      	bne.n	80076ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	3b01      	subs	r3, #1
 800769c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800769e:	429a      	cmp	r2, r3
 80076a0:	d123      	bne.n	80076ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d11b      	bne.n	80076ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80076be:	429a      	cmp	r2, r3
 80076c0:	d113      	bne.n	80076ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	3b01      	subs	r3, #1
 80076d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d109      	bne.n	80076ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	3b01      	subs	r3, #1
 80076e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d001      	beq.n	80076ee <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	40021000 	.word	0x40021000
 80076fc:	019f800c 	.word	0x019f800c

08007700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e11e      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007718:	4b91      	ldr	r3, [pc, #580]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d910      	bls.n	8007748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007726:	4b8e      	ldr	r3, [pc, #568]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f023 020f 	bic.w	r2, r3, #15
 800772e:	498c      	ldr	r1, [pc, #560]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	4313      	orrs	r3, r2
 8007734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007736:	4b8a      	ldr	r3, [pc, #552]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d001      	beq.n	8007748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e106      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d073      	beq.n	800783c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d129      	bne.n	80077b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800775c:	4b81      	ldr	r3, [pc, #516]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0f4      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800776c:	f000 f99e 	bl	8007aac <RCC_GetSysClockFreqFromPLLSource>
 8007770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	4a7c      	ldr	r2, [pc, #496]	; (8007968 <HAL_RCC_ClockConfig+0x268>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d93f      	bls.n	80077fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800777a:	4b7a      	ldr	r3, [pc, #488]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800778e:	2b00      	cmp	r3, #0
 8007790:	d033      	beq.n	80077fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007796:	2b00      	cmp	r3, #0
 8007798:	d12f      	bne.n	80077fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800779a:	4b72      	ldr	r3, [pc, #456]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077a2:	4a70      	ldr	r2, [pc, #448]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80077aa:	2380      	movs	r3, #128	; 0x80
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	e024      	b.n	80077fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d107      	bne.n	80077c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077b8:	4b6a      	ldr	r3, [pc, #424]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d109      	bne.n	80077d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0c6      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077c8:	4b66      	ldr	r3, [pc, #408]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0be      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80077d8:	f000 f8ce 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 80077dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	4a61      	ldr	r2, [pc, #388]	; (8007968 <HAL_RCC_ClockConfig+0x268>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d909      	bls.n	80077fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80077e6:	4b5f      	ldr	r3, [pc, #380]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ee:	4a5d      	ldr	r2, [pc, #372]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80077f6:	2380      	movs	r3, #128	; 0x80
 80077f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077fa:	4b5a      	ldr	r3, [pc, #360]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f023 0203 	bic.w	r2, r3, #3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	4957      	ldr	r1, [pc, #348]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007808:	4313      	orrs	r3, r2
 800780a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780c:	f7fd f84e 	bl	80048ac <HAL_GetTick>
 8007810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007812:	e00a      	b.n	800782a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007814:	f7fd f84a 	bl	80048ac <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007822:	4293      	cmp	r3, r2
 8007824:	d901      	bls.n	800782a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e095      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800782a:	4b4e      	ldr	r3, [pc, #312]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 020c 	and.w	r2, r3, #12
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	429a      	cmp	r2, r3
 800783a:	d1eb      	bne.n	8007814 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d023      	beq.n	8007890 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007854:	4b43      	ldr	r3, [pc, #268]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4a42      	ldr	r2, [pc, #264]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800785a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800785e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800786c:	4b3d      	ldr	r3, [pc, #244]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007874:	4a3b      	ldr	r2, [pc, #236]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007876:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800787a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800787c:	4b39      	ldr	r3, [pc, #228]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	4936      	ldr	r1, [pc, #216]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800788a:	4313      	orrs	r3, r2
 800788c:	608b      	str	r3, [r1, #8]
 800788e:	e008      	b.n	80078a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d105      	bne.n	80078a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007896:	4b33      	ldr	r3, [pc, #204]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	4a32      	ldr	r2, [pc, #200]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 800789c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078a2:	4b2f      	ldr	r3, [pc, #188]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d21d      	bcs.n	80078ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b0:	4b2b      	ldr	r3, [pc, #172]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f023 020f 	bic.w	r2, r3, #15
 80078b8:	4929      	ldr	r1, [pc, #164]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	4313      	orrs	r3, r2
 80078be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80078c0:	f7fc fff4 	bl	80048ac <HAL_GetTick>
 80078c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c6:	e00a      	b.n	80078de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078c8:	f7fc fff0 	bl	80048ac <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e03b      	b.n	8007956 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078de:	4b20      	ldr	r3, [pc, #128]	; (8007960 <HAL_RCC_ClockConfig+0x260>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 030f 	and.w	r3, r3, #15
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d1ed      	bne.n	80078c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078f8:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4917      	ldr	r1, [pc, #92]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007906:	4313      	orrs	r3, r2
 8007908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007916:	4b13      	ldr	r3, [pc, #76]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	490f      	ldr	r1, [pc, #60]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007926:	4313      	orrs	r3, r2
 8007928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800792a:	f000 f825 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 800792e:	4602      	mov	r2, r0
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <HAL_RCC_ClockConfig+0x264>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	490c      	ldr	r1, [pc, #48]	; (800796c <HAL_RCC_ClockConfig+0x26c>)
 800793c:	5ccb      	ldrb	r3, [r1, r3]
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <HAL_RCC_ClockConfig+0x270>)
 8007948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800794a:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <HAL_RCC_ClockConfig+0x274>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7fc ff60 	bl	8004814 <HAL_InitTick>
 8007954:	4603      	mov	r3, r0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40022000 	.word	0x40022000
 8007964:	40021000 	.word	0x40021000
 8007968:	04c4b400 	.word	0x04c4b400
 800796c:	08010160 	.word	0x08010160
 8007970:	20000000 	.word	0x20000000
 8007974:	20000004 	.word	0x20000004

08007978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800797e:	4b2c      	ldr	r3, [pc, #176]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 030c 	and.w	r3, r3, #12
 8007986:	2b04      	cmp	r3, #4
 8007988:	d102      	bne.n	8007990 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800798a:	4b2a      	ldr	r3, [pc, #168]	; (8007a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	e047      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007990:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 030c 	and.w	r3, r3, #12
 8007998:	2b08      	cmp	r3, #8
 800799a:	d102      	bne.n	80079a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800799c:	4b26      	ldr	r3, [pc, #152]	; (8007a38 <HAL_RCC_GetSysClockFreq+0xc0>)
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	e03e      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80079a2:	4b23      	ldr	r3, [pc, #140]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 030c 	and.w	r3, r3, #12
 80079aa:	2b0c      	cmp	r3, #12
 80079ac:	d136      	bne.n	8007a1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079ae:	4b20      	ldr	r3, [pc, #128]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	091b      	lsrs	r3, r3, #4
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	3301      	adds	r3, #1
 80079c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d10c      	bne.n	80079e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079cc:	4a1a      	ldr	r2, [pc, #104]	; (8007a38 <HAL_RCC_GetSysClockFreq+0xc0>)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d4:	4a16      	ldr	r2, [pc, #88]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079d6:	68d2      	ldr	r2, [r2, #12]
 80079d8:	0a12      	lsrs	r2, r2, #8
 80079da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079de:	fb02 f303 	mul.w	r3, r2, r3
 80079e2:	617b      	str	r3, [r7, #20]
      break;
 80079e4:	e00c      	b.n	8007a00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079e6:	4a13      	ldr	r2, [pc, #76]	; (8007a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ee:	4a10      	ldr	r2, [pc, #64]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079f0:	68d2      	ldr	r2, [r2, #12]
 80079f2:	0a12      	lsrs	r2, r2, #8
 80079f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079f8:	fb02 f303 	mul.w	r3, r2, r3
 80079fc:	617b      	str	r3, [r7, #20]
      break;
 80079fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	0e5b      	lsrs	r3, r3, #25
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a18:	613b      	str	r3, [r7, #16]
 8007a1a:	e001      	b.n	8007a20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007a20:	693b      	ldr	r3, [r7, #16]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	40021000 	.word	0x40021000
 8007a34:	00f42400 	.word	0x00f42400
 8007a38:	007a1200 	.word	0x007a1200

08007a3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a40:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a42:	681b      	ldr	r3, [r3, #0]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000000 	.word	0x20000000

08007a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a58:	f7ff fff0 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	0a1b      	lsrs	r3, r3, #8
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	4904      	ldr	r1, [pc, #16]	; (8007a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a6a:	5ccb      	ldrb	r3, [r1, r3]
 8007a6c:	f003 031f 	and.w	r3, r3, #31
 8007a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40021000 	.word	0x40021000
 8007a7c:	08010170 	.word	0x08010170

08007a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a84:	f7ff ffda 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	4b06      	ldr	r3, [pc, #24]	; (8007aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	0adb      	lsrs	r3, r3, #11
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	4904      	ldr	r1, [pc, #16]	; (8007aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a96:	5ccb      	ldrb	r3, [r1, r3]
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40021000 	.word	0x40021000
 8007aa8:	08010170 	.word	0x08010170

08007aac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ab2:	4b1e      	ldr	r3, [pc, #120]	; (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007abc:	4b1b      	ldr	r3, [pc, #108]	; (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	091b      	lsrs	r3, r3, #4
 8007ac2:	f003 030f 	and.w	r3, r3, #15
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d10c      	bne.n	8007aea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ad0:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad8:	4a14      	ldr	r2, [pc, #80]	; (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ada:	68d2      	ldr	r2, [r2, #12]
 8007adc:	0a12      	lsrs	r2, r2, #8
 8007ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ae2:	fb02 f303 	mul.w	r3, r2, r3
 8007ae6:	617b      	str	r3, [r7, #20]
    break;
 8007ae8:	e00c      	b.n	8007b04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007aea:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	4a0e      	ldr	r2, [pc, #56]	; (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007af4:	68d2      	ldr	r2, [r2, #12]
 8007af6:	0a12      	lsrs	r2, r2, #8
 8007af8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007afc:	fb02 f303 	mul.w	r3, r2, r3
 8007b00:	617b      	str	r3, [r7, #20]
    break;
 8007b02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b04:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	0e5b      	lsrs	r3, r3, #25
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	3301      	adds	r3, #1
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007b1e:	687b      	ldr	r3, [r7, #4]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	007a1200 	.word	0x007a1200
 8007b34:	00f42400 	.word	0x00f42400

08007b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b40:	2300      	movs	r3, #0
 8007b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b44:	2300      	movs	r3, #0
 8007b46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 8098 	beq.w	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b56:	2300      	movs	r3, #0
 8007b58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b5a:	4b43      	ldr	r3, [pc, #268]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10d      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b66:	4b40      	ldr	r3, [pc, #256]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b6a:	4a3f      	ldr	r2, [pc, #252]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b70:	6593      	str	r3, [r2, #88]	; 0x58
 8007b72:	4b3d      	ldr	r3, [pc, #244]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b7a:	60bb      	str	r3, [r7, #8]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b82:	4b3a      	ldr	r3, [pc, #232]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a39      	ldr	r2, [pc, #228]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b8e:	f7fc fe8d 	bl	80048ac <HAL_GetTick>
 8007b92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b94:	e009      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b96:	f7fc fe89 	bl	80048ac <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d902      	bls.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	74fb      	strb	r3, [r7, #19]
        break;
 8007ba8:	e005      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007baa:	4b30      	ldr	r3, [pc, #192]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0ef      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007bb6:	7cfb      	ldrb	r3, [r7, #19]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d159      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bbc:	4b2a      	ldr	r3, [pc, #168]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d01e      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d019      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bd8:	4b23      	ldr	r3, [pc, #140]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007be4:	4b20      	ldr	r3, [pc, #128]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bea:	4a1f      	ldr	r2, [pc, #124]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bf4:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	4a1b      	ldr	r2, [pc, #108]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c04:	4a18      	ldr	r2, [pc, #96]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d016      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c16:	f7fc fe49 	bl	80048ac <HAL_GetTick>
 8007c1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c1c:	e00b      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c1e:	f7fc fe45 	bl	80048ac <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d902      	bls.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	74fb      	strb	r3, [r7, #19]
            break;
 8007c34:	e006      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0ec      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c44:	7cfb      	ldrb	r3, [r7, #19]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10b      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c4a:	4b07      	ldr	r3, [pc, #28]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	4903      	ldr	r1, [pc, #12]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c60:	e008      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c62:	7cfb      	ldrb	r3, [r7, #19]
 8007c64:	74bb      	strb	r3, [r7, #18]
 8007c66:	e005      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c68:	40021000 	.word	0x40021000
 8007c6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c70:	7cfb      	ldrb	r3, [r7, #19]
 8007c72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c74:	7c7b      	ldrb	r3, [r7, #17]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d105      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c7a:	4ba7      	ldr	r3, [pc, #668]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7e:	4aa6      	ldr	r2, [pc, #664]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c92:	4ba1      	ldr	r3, [pc, #644]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c98:	f023 0203 	bic.w	r2, r3, #3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	499d      	ldr	r1, [pc, #628]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cb4:	4b98      	ldr	r3, [pc, #608]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cba:	f023 020c 	bic.w	r2, r3, #12
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	4995      	ldr	r1, [pc, #596]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0304 	and.w	r3, r3, #4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cd6:	4b90      	ldr	r3, [pc, #576]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	498c      	ldr	r1, [pc, #560]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00a      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cf8:	4b87      	ldr	r3, [pc, #540]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	4984      	ldr	r1, [pc, #528]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0310 	and.w	r3, r3, #16
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d1a:	4b7f      	ldr	r3, [pc, #508]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	497b      	ldr	r1, [pc, #492]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d3c:	4b76      	ldr	r3, [pc, #472]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	4973      	ldr	r1, [pc, #460]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d5e:	4b6e      	ldr	r3, [pc, #440]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	496a      	ldr	r1, [pc, #424]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00a      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d80:	4b65      	ldr	r3, [pc, #404]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	4962      	ldr	r1, [pc, #392]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007da2:	4b5d      	ldr	r3, [pc, #372]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	4959      	ldr	r1, [pc, #356]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007dc4:	4b54      	ldr	r3, [pc, #336]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dca:	f023 0203 	bic.w	r2, r3, #3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	4951      	ldr	r1, [pc, #324]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007de6:	4b4c      	ldr	r3, [pc, #304]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4948      	ldr	r1, [pc, #288]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d015      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e08:	4b43      	ldr	r3, [pc, #268]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	4940      	ldr	r1, [pc, #256]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e26:	d105      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e28:	4b3b      	ldr	r3, [pc, #236]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	4a3a      	ldr	r2, [pc, #232]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d015      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e40:	4b35      	ldr	r3, [pc, #212]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4e:	4932      	ldr	r1, [pc, #200]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e5e:	d105      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e60:	4b2d      	ldr	r3, [pc, #180]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4a2c      	ldr	r2, [pc, #176]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d015      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e78:	4b27      	ldr	r3, [pc, #156]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	4924      	ldr	r1, [pc, #144]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e96:	d105      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e98:	4b1f      	ldr	r3, [pc, #124]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	4a1e      	ldr	r2, [pc, #120]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d015      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eb0:	4b19      	ldr	r3, [pc, #100]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ebe:	4916      	ldr	r1, [pc, #88]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ece:	d105      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ed0:	4b11      	ldr	r3, [pc, #68]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	4a10      	ldr	r2, [pc, #64]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d019      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ee8:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	4908      	ldr	r1, [pc, #32]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f06:	d109      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f08:	4b03      	ldr	r3, [pc, #12]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4a02      	ldr	r2, [pc, #8]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f12:	60d3      	str	r3, [r2, #12]
 8007f14:	e002      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007f16:	bf00      	nop
 8007f18:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d015      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f28:	4b29      	ldr	r3, [pc, #164]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	4926      	ldr	r1, [pc, #152]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f46:	d105      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f48:	4b21      	ldr	r3, [pc, #132]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	4a20      	ldr	r2, [pc, #128]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f52:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d015      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007f60:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f66:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f6e:	4918      	ldr	r1, [pc, #96]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7e:	d105      	bne.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f80:	4b13      	ldr	r3, [pc, #76]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	4a12      	ldr	r2, [pc, #72]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f8a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d015      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f98:	4b0d      	ldr	r3, [pc, #52]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa6:	490a      	ldr	r1, [pc, #40]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fb6:	d105      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fb8:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	4a04      	ldr	r2, [pc, #16]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007fc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	40021000 	.word	0x40021000

08007fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e049      	b.n	800807a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d106      	bne.n	8008000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fc f9e8 	bl	80043d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f000 fe80 	bl	8008d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b01      	cmp	r3, #1
 8008096:	d001      	beq.n	800809c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e054      	b.n	8008146 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0201 	orr.w	r2, r2, #1
 80080b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a26      	ldr	r2, [pc, #152]	; (8008154 <HAL_TIM_Base_Start_IT+0xd0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d022      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x80>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c6:	d01d      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x80>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a22      	ldr	r2, [pc, #136]	; (8008158 <HAL_TIM_Base_Start_IT+0xd4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d018      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x80>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a21      	ldr	r2, [pc, #132]	; (800815c <HAL_TIM_Base_Start_IT+0xd8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d013      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x80>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a1f      	ldr	r2, [pc, #124]	; (8008160 <HAL_TIM_Base_Start_IT+0xdc>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00e      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x80>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1e      	ldr	r2, [pc, #120]	; (8008164 <HAL_TIM_Base_Start_IT+0xe0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d009      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x80>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1c      	ldr	r2, [pc, #112]	; (8008168 <HAL_TIM_Base_Start_IT+0xe4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d004      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x80>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1b      	ldr	r2, [pc, #108]	; (800816c <HAL_TIM_Base_Start_IT+0xe8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d115      	bne.n	8008130 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	4b19      	ldr	r3, [pc, #100]	; (8008170 <HAL_TIM_Base_Start_IT+0xec>)
 800810c:	4013      	ands	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b06      	cmp	r3, #6
 8008114:	d015      	beq.n	8008142 <HAL_TIM_Base_Start_IT+0xbe>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811c:	d011      	beq.n	8008142 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0201 	orr.w	r2, r2, #1
 800812c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812e:	e008      	b.n	8008142 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	e000      	b.n	8008144 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	40012c00 	.word	0x40012c00
 8008158:	40000400 	.word	0x40000400
 800815c:	40000800 	.word	0x40000800
 8008160:	40000c00 	.word	0x40000c00
 8008164:	40013400 	.word	0x40013400
 8008168:	40014000 	.word	0x40014000
 800816c:	40015000 	.word	0x40015000
 8008170:	00010007 	.word	0x00010007

08008174 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e049      	b.n	800821a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f841 	bl	8008222 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4619      	mov	r1, r3
 80081b2:	4610      	mov	r0, r2
 80081b4:	f000 fdb0 	bl	8008d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e049      	b.n	80082dc <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f841 	bl	80082e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3304      	adds	r3, #4
 8008272:	4619      	mov	r1, r3
 8008274:	4610      	mov	r0, r2
 8008276:	f000 fd4f 	bl	8008d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d104      	bne.n	8008316 <HAL_TIM_IC_Start_IT+0x1e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008312:	b2db      	uxtb	r3, r3
 8008314:	e023      	b.n	800835e <HAL_TIM_IC_Start_IT+0x66>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b04      	cmp	r3, #4
 800831a:	d104      	bne.n	8008326 <HAL_TIM_IC_Start_IT+0x2e>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008322:	b2db      	uxtb	r3, r3
 8008324:	e01b      	b.n	800835e <HAL_TIM_IC_Start_IT+0x66>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d104      	bne.n	8008336 <HAL_TIM_IC_Start_IT+0x3e>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008332:	b2db      	uxtb	r3, r3
 8008334:	e013      	b.n	800835e <HAL_TIM_IC_Start_IT+0x66>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b0c      	cmp	r3, #12
 800833a:	d104      	bne.n	8008346 <HAL_TIM_IC_Start_IT+0x4e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008342:	b2db      	uxtb	r3, r3
 8008344:	e00b      	b.n	800835e <HAL_TIM_IC_Start_IT+0x66>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b10      	cmp	r3, #16
 800834a:	d104      	bne.n	8008356 <HAL_TIM_IC_Start_IT+0x5e>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008352:	b2db      	uxtb	r3, r3
 8008354:	e003      	b.n	800835e <HAL_TIM_IC_Start_IT+0x66>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800835c:	b2db      	uxtb	r3, r3
 800835e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d104      	bne.n	8008370 <HAL_TIM_IC_Start_IT+0x78>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800836c:	b2db      	uxtb	r3, r3
 800836e:	e013      	b.n	8008398 <HAL_TIM_IC_Start_IT+0xa0>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b04      	cmp	r3, #4
 8008374:	d104      	bne.n	8008380 <HAL_TIM_IC_Start_IT+0x88>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800837c:	b2db      	uxtb	r3, r3
 800837e:	e00b      	b.n	8008398 <HAL_TIM_IC_Start_IT+0xa0>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b08      	cmp	r3, #8
 8008384:	d104      	bne.n	8008390 <HAL_TIM_IC_Start_IT+0x98>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800838c:	b2db      	uxtb	r3, r3
 800838e:	e003      	b.n	8008398 <HAL_TIM_IC_Start_IT+0xa0>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008396:	b2db      	uxtb	r3, r3
 8008398:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d102      	bne.n	80083a6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80083a0:	7b7b      	ldrb	r3, [r7, #13]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d001      	beq.n	80083aa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e0e2      	b.n	8008570 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d104      	bne.n	80083ba <HAL_TIM_IC_Start_IT+0xc2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083b8:	e023      	b.n	8008402 <HAL_TIM_IC_Start_IT+0x10a>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d104      	bne.n	80083ca <HAL_TIM_IC_Start_IT+0xd2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083c8:	e01b      	b.n	8008402 <HAL_TIM_IC_Start_IT+0x10a>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d104      	bne.n	80083da <HAL_TIM_IC_Start_IT+0xe2>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d8:	e013      	b.n	8008402 <HAL_TIM_IC_Start_IT+0x10a>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b0c      	cmp	r3, #12
 80083de:	d104      	bne.n	80083ea <HAL_TIM_IC_Start_IT+0xf2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083e8:	e00b      	b.n	8008402 <HAL_TIM_IC_Start_IT+0x10a>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b10      	cmp	r3, #16
 80083ee:	d104      	bne.n	80083fa <HAL_TIM_IC_Start_IT+0x102>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083f8:	e003      	b.n	8008402 <HAL_TIM_IC_Start_IT+0x10a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2202      	movs	r2, #2
 80083fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <HAL_TIM_IC_Start_IT+0x11a>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008410:	e013      	b.n	800843a <HAL_TIM_IC_Start_IT+0x142>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b04      	cmp	r3, #4
 8008416:	d104      	bne.n	8008422 <HAL_TIM_IC_Start_IT+0x12a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008420:	e00b      	b.n	800843a <HAL_TIM_IC_Start_IT+0x142>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b08      	cmp	r3, #8
 8008426:	d104      	bne.n	8008432 <HAL_TIM_IC_Start_IT+0x13a>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008430:	e003      	b.n	800843a <HAL_TIM_IC_Start_IT+0x142>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b0c      	cmp	r3, #12
 800843e:	d841      	bhi.n	80084c4 <HAL_TIM_IC_Start_IT+0x1cc>
 8008440:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <HAL_TIM_IC_Start_IT+0x150>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	0800847d 	.word	0x0800847d
 800844c:	080084c5 	.word	0x080084c5
 8008450:	080084c5 	.word	0x080084c5
 8008454:	080084c5 	.word	0x080084c5
 8008458:	0800848f 	.word	0x0800848f
 800845c:	080084c5 	.word	0x080084c5
 8008460:	080084c5 	.word	0x080084c5
 8008464:	080084c5 	.word	0x080084c5
 8008468:	080084a1 	.word	0x080084a1
 800846c:	080084c5 	.word	0x080084c5
 8008470:	080084c5 	.word	0x080084c5
 8008474:	080084c5 	.word	0x080084c5
 8008478:	080084b3 	.word	0x080084b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0202 	orr.w	r2, r2, #2
 800848a:	60da      	str	r2, [r3, #12]
      break;
 800848c:	e01d      	b.n	80084ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f042 0204 	orr.w	r2, r2, #4
 800849c:	60da      	str	r2, [r3, #12]
      break;
 800849e:	e014      	b.n	80084ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0208 	orr.w	r2, r2, #8
 80084ae:	60da      	str	r2, [r3, #12]
      break;
 80084b0:	e00b      	b.n	80084ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f042 0210 	orr.w	r2, r2, #16
 80084c0:	60da      	str	r2, [r3, #12]
      break;
 80084c2:	e002      	b.n	80084ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
      break;
 80084c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d14e      	bne.n	800856e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2201      	movs	r2, #1
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 f9b5 	bl	8009848 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a25      	ldr	r2, [pc, #148]	; (8008578 <HAL_TIM_IC_Start_IT+0x280>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d022      	beq.n	800852e <HAL_TIM_IC_Start_IT+0x236>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f0:	d01d      	beq.n	800852e <HAL_TIM_IC_Start_IT+0x236>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a21      	ldr	r2, [pc, #132]	; (800857c <HAL_TIM_IC_Start_IT+0x284>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d018      	beq.n	800852e <HAL_TIM_IC_Start_IT+0x236>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <HAL_TIM_IC_Start_IT+0x288>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d013      	beq.n	800852e <HAL_TIM_IC_Start_IT+0x236>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <HAL_TIM_IC_Start_IT+0x28c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00e      	beq.n	800852e <HAL_TIM_IC_Start_IT+0x236>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a1c      	ldr	r2, [pc, #112]	; (8008588 <HAL_TIM_IC_Start_IT+0x290>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d009      	beq.n	800852e <HAL_TIM_IC_Start_IT+0x236>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1b      	ldr	r2, [pc, #108]	; (800858c <HAL_TIM_IC_Start_IT+0x294>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d004      	beq.n	800852e <HAL_TIM_IC_Start_IT+0x236>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a19      	ldr	r2, [pc, #100]	; (8008590 <HAL_TIM_IC_Start_IT+0x298>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d115      	bne.n	800855a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	4b17      	ldr	r3, [pc, #92]	; (8008594 <HAL_TIM_IC_Start_IT+0x29c>)
 8008536:	4013      	ands	r3, r2
 8008538:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b06      	cmp	r3, #6
 800853e:	d015      	beq.n	800856c <HAL_TIM_IC_Start_IT+0x274>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008546:	d011      	beq.n	800856c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008558:	e008      	b.n	800856c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0201 	orr.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e000      	b.n	800856e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800856c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	40012c00 	.word	0x40012c00
 800857c:	40000400 	.word	0x40000400
 8008580:	40000800 	.word	0x40000800
 8008584:	40000c00 	.word	0x40000c00
 8008588:	40013400 	.word	0x40013400
 800858c:	40014000 	.word	0x40014000
 8008590:	40015000 	.word	0x40015000
 8008594:	00010007 	.word	0x00010007

08008598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d122      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d11b      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f06f 0202 	mvn.w	r2, #2
 80085c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	f003 0303 	and.w	r3, r3, #3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f8 ff60 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 80085e0:	e005      	b.n	80085ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fb7a 	bl	8008cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fb81 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d122      	bne.n	8008648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b04      	cmp	r3, #4
 800860e:	d11b      	bne.n	8008648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f06f 0204 	mvn.w	r2, #4
 8008618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2202      	movs	r2, #2
 800861e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7f8 ff36 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 8008634:	e005      	b.n	8008642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fb50 	bl	8008cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fb57 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b08      	cmp	r3, #8
 8008654:	d122      	bne.n	800869c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	2b08      	cmp	r3, #8
 8008662:	d11b      	bne.n	800869c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f06f 0208 	mvn.w	r2, #8
 800866c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2204      	movs	r2, #4
 8008672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7f8 ff0c 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 8008688:	e005      	b.n	8008696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb26 	bl	8008cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fb2d 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b10      	cmp	r3, #16
 80086a8:	d122      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d11b      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0210 	mvn.w	r2, #16
 80086c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2208      	movs	r2, #8
 80086c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7f8 fee2 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 80086dc:	e005      	b.n	80086ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fafc 	bl	8008cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fb03 	bl	8008cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d10e      	bne.n	800871c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d107      	bne.n	800871c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0201 	mvn.w	r2, #1
 8008714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7f8 fe75 	bl	8001406 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008726:	2b80      	cmp	r3, #128	; 0x80
 8008728:	d10e      	bne.n	8008748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008734:	2b80      	cmp	r3, #128	; 0x80
 8008736:	d107      	bne.n	8008748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f946 	bl	80099d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008756:	d10e      	bne.n	8008776 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008762:	2b80      	cmp	r3, #128	; 0x80
 8008764:	d107      	bne.n	8008776 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800876e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 f939 	bl	80099e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008780:	2b40      	cmp	r3, #64	; 0x40
 8008782:	d10e      	bne.n	80087a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878e:	2b40      	cmp	r3, #64	; 0x40
 8008790:	d107      	bne.n	80087a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800879a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fab1 	bl	8008d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d10e      	bne.n	80087ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f003 0320 	and.w	r3, r3, #32
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d107      	bne.n	80087ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f06f 0220 	mvn.w	r2, #32
 80087c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 f8f9 	bl	80099c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087dc:	d10f      	bne.n	80087fe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ec:	d107      	bne.n	80087fe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80087f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 f8ff 	bl	80099fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800880c:	d10f      	bne.n	800882e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800881c:	d107      	bne.n	800882e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f001 f8f1 	bl	8009a10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800883c:	d10f      	bne.n	800885e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800884c:	d107      	bne.n	800885e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 f8e3 	bl	8009a24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008868:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800886c:	d10f      	bne.n	800888e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008878:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800887c:	d107      	bne.n	800888e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f8d5 	bl	8009a38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800888e:	bf00      	nop
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e066      	b.n	8008984 <HAL_TIM_OC_ConfigChannel+0xec>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b14      	cmp	r3, #20
 80088c2:	d857      	bhi.n	8008974 <HAL_TIM_OC_ConfigChannel+0xdc>
 80088c4:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	08008921 	.word	0x08008921
 80088d0:	08008975 	.word	0x08008975
 80088d4:	08008975 	.word	0x08008975
 80088d8:	08008975 	.word	0x08008975
 80088dc:	0800892f 	.word	0x0800892f
 80088e0:	08008975 	.word	0x08008975
 80088e4:	08008975 	.word	0x08008975
 80088e8:	08008975 	.word	0x08008975
 80088ec:	0800893d 	.word	0x0800893d
 80088f0:	08008975 	.word	0x08008975
 80088f4:	08008975 	.word	0x08008975
 80088f8:	08008975 	.word	0x08008975
 80088fc:	0800894b 	.word	0x0800894b
 8008900:	08008975 	.word	0x08008975
 8008904:	08008975 	.word	0x08008975
 8008908:	08008975 	.word	0x08008975
 800890c:	08008959 	.word	0x08008959
 8008910:	08008975 	.word	0x08008975
 8008914:	08008975 	.word	0x08008975
 8008918:	08008975 	.word	0x08008975
 800891c:	08008967 	.word	0x08008967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	4618      	mov	r0, r3
 8008928:	f000 fa9e 	bl	8008e68 <TIM_OC1_SetConfig>
      break;
 800892c:	e025      	b.n	800897a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fb31 	bl	8008f9c <TIM_OC2_SetConfig>
      break;
 800893a:	e01e      	b.n	800897a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fbbe 	bl	80090c4 <TIM_OC3_SetConfig>
      break;
 8008948:	e017      	b.n	800897a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fc49 	bl	80091e8 <TIM_OC4_SetConfig>
      break;
 8008956:	e010      	b.n	800897a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fcd6 	bl	8009310 <TIM_OC5_SetConfig>
      break;
 8008964:	e009      	b.n	800897a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 fd39 	bl	80093e4 <TIM_OC6_SetConfig>
      break;
 8008972:	e002      	b.n	800897a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]
      break;
 8008978:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d101      	bne.n	80089aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80089a6:	2302      	movs	r3, #2
 80089a8:	e088      	b.n	8008abc <HAL_TIM_IC_ConfigChannel+0x130>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d11b      	bne.n	80089f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6818      	ldr	r0, [r3, #0]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	6819      	ldr	r1, [r3, #0]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f000 fd78 	bl	80094bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 020c 	bic.w	r2, r2, #12
 80089da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6999      	ldr	r1, [r3, #24]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	689a      	ldr	r2, [r3, #8]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	619a      	str	r2, [r3, #24]
 80089ee:	e060      	b.n	8008ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d11c      	bne.n	8008a30 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6818      	ldr	r0, [r3, #0]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	6819      	ldr	r1, [r3, #0]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f000 fdfc 	bl	8009602 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	699a      	ldr	r2, [r3, #24]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6999      	ldr	r1, [r3, #24]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	021a      	lsls	r2, r3, #8
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	619a      	str	r2, [r3, #24]
 8008a2e:	e040      	b.n	8008ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d11b      	bne.n	8008a6e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6819      	ldr	r1, [r3, #0]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f000 fe49 	bl	80096dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69da      	ldr	r2, [r3, #28]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 020c 	bic.w	r2, r2, #12
 8008a58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69d9      	ldr	r1, [r3, #28]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	61da      	str	r2, [r3, #28]
 8008a6c:	e021      	b.n	8008ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b0c      	cmp	r3, #12
 8008a72:	d11c      	bne.n	8008aae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6819      	ldr	r1, [r3, #0]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f000 fe66 	bl	8009754 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	69da      	ldr	r2, [r3, #28]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	69d9      	ldr	r1, [r3, #28]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	021a      	lsls	r2, r3, #8
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	61da      	str	r2, [r3, #28]
 8008aac:	e001      	b.n	8008ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e0ee      	b.n	8008cbe <HAL_TIM_ConfigClockSource+0x1fa>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008afe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a6b      	ldr	r2, [pc, #428]	; (8008cc8 <HAL_TIM_ConfigClockSource+0x204>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	f000 80b9 	beq.w	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008b20:	4a69      	ldr	r2, [pc, #420]	; (8008cc8 <HAL_TIM_ConfigClockSource+0x204>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	f200 80be 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008b28:	4a68      	ldr	r2, [pc, #416]	; (8008ccc <HAL_TIM_ConfigClockSource+0x208>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	f000 80b1 	beq.w	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008b30:	4a66      	ldr	r2, [pc, #408]	; (8008ccc <HAL_TIM_ConfigClockSource+0x208>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	f200 80b6 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008b38:	4a65      	ldr	r2, [pc, #404]	; (8008cd0 <HAL_TIM_ConfigClockSource+0x20c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	f000 80a9 	beq.w	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008b40:	4a63      	ldr	r2, [pc, #396]	; (8008cd0 <HAL_TIM_ConfigClockSource+0x20c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	f200 80ae 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008b48:	4a62      	ldr	r2, [pc, #392]	; (8008cd4 <HAL_TIM_ConfigClockSource+0x210>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	f000 80a1 	beq.w	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008b50:	4a60      	ldr	r2, [pc, #384]	; (8008cd4 <HAL_TIM_ConfigClockSource+0x210>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	f200 80a6 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008b58:	4a5f      	ldr	r2, [pc, #380]	; (8008cd8 <HAL_TIM_ConfigClockSource+0x214>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	f000 8099 	beq.w	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008b60:	4a5d      	ldr	r2, [pc, #372]	; (8008cd8 <HAL_TIM_ConfigClockSource+0x214>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	f200 809e 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008b68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b6c:	f000 8091 	beq.w	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008b70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b74:	f200 8096 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b7c:	f000 8089 	beq.w	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b84:	f200 808e 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b8c:	d03e      	beq.n	8008c0c <HAL_TIM_ConfigClockSource+0x148>
 8008b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b92:	f200 8087 	bhi.w	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9a:	f000 8086 	beq.w	8008caa <HAL_TIM_ConfigClockSource+0x1e6>
 8008b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba2:	d87f      	bhi.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008ba4:	2b70      	cmp	r3, #112	; 0x70
 8008ba6:	d01a      	beq.n	8008bde <HAL_TIM_ConfigClockSource+0x11a>
 8008ba8:	2b70      	cmp	r3, #112	; 0x70
 8008baa:	d87b      	bhi.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008bac:	2b60      	cmp	r3, #96	; 0x60
 8008bae:	d050      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x18e>
 8008bb0:	2b60      	cmp	r3, #96	; 0x60
 8008bb2:	d877      	bhi.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008bb4:	2b50      	cmp	r3, #80	; 0x50
 8008bb6:	d03c      	beq.n	8008c32 <HAL_TIM_ConfigClockSource+0x16e>
 8008bb8:	2b50      	cmp	r3, #80	; 0x50
 8008bba:	d873      	bhi.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008bbc:	2b40      	cmp	r3, #64	; 0x40
 8008bbe:	d058      	beq.n	8008c72 <HAL_TIM_ConfigClockSource+0x1ae>
 8008bc0:	2b40      	cmp	r3, #64	; 0x40
 8008bc2:	d86f      	bhi.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008bc4:	2b30      	cmp	r3, #48	; 0x30
 8008bc6:	d064      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008bc8:	2b30      	cmp	r3, #48	; 0x30
 8008bca:	d86b      	bhi.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	d060      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008bd0:	2b20      	cmp	r3, #32
 8008bd2:	d867      	bhi.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d05c      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008bd8:	2b10      	cmp	r3, #16
 8008bda:	d05a      	beq.n	8008c92 <HAL_TIM_ConfigClockSource+0x1ce>
 8008bdc:	e062      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	6899      	ldr	r1, [r3, #8]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f000 fe0b 	bl	8009808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	609a      	str	r2, [r3, #8]
      break;
 8008c0a:	e04f      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6818      	ldr	r0, [r3, #0]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	6899      	ldr	r1, [r3, #8]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f000 fdf4 	bl	8009808 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c2e:	609a      	str	r2, [r3, #8]
      break;
 8008c30:	e03c      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6818      	ldr	r0, [r3, #0]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	6859      	ldr	r1, [r3, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f000 fcb0 	bl	80095a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2150      	movs	r1, #80	; 0x50
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fdbf 	bl	80097ce <TIM_ITRx_SetConfig>
      break;
 8008c50:	e02c      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6859      	ldr	r1, [r3, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f000 fd0c 	bl	800967c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2160      	movs	r1, #96	; 0x60
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fdaf 	bl	80097ce <TIM_ITRx_SetConfig>
      break;
 8008c70:	e01c      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6818      	ldr	r0, [r3, #0]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	6859      	ldr	r1, [r3, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f000 fc90 	bl	80095a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2140      	movs	r1, #64	; 0x40
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 fd9f 	bl	80097ce <TIM_ITRx_SetConfig>
      break;
 8008c90:	e00c      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	f000 fd96 	bl	80097ce <TIM_ITRx_SetConfig>
      break;
 8008ca2:	e003      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca8:	e000      	b.n	8008cac <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8008caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	00100070 	.word	0x00100070
 8008ccc:	00100050 	.word	0x00100050
 8008cd0:	00100040 	.word	0x00100040
 8008cd4:	00100030 	.word	0x00100030
 8008cd8:	00100020 	.word	0x00100020

08008cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a46      	ldr	r2, [pc, #280]	; (8008e44 <TIM_Base_SetConfig+0x12c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d017      	beq.n	8008d60 <TIM_Base_SetConfig+0x48>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d36:	d013      	beq.n	8008d60 <TIM_Base_SetConfig+0x48>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a43      	ldr	r2, [pc, #268]	; (8008e48 <TIM_Base_SetConfig+0x130>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00f      	beq.n	8008d60 <TIM_Base_SetConfig+0x48>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a42      	ldr	r2, [pc, #264]	; (8008e4c <TIM_Base_SetConfig+0x134>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d00b      	beq.n	8008d60 <TIM_Base_SetConfig+0x48>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a41      	ldr	r2, [pc, #260]	; (8008e50 <TIM_Base_SetConfig+0x138>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d007      	beq.n	8008d60 <TIM_Base_SetConfig+0x48>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a40      	ldr	r2, [pc, #256]	; (8008e54 <TIM_Base_SetConfig+0x13c>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d003      	beq.n	8008d60 <TIM_Base_SetConfig+0x48>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a3f      	ldr	r2, [pc, #252]	; (8008e58 <TIM_Base_SetConfig+0x140>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d108      	bne.n	8008d72 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a33      	ldr	r2, [pc, #204]	; (8008e44 <TIM_Base_SetConfig+0x12c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d023      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d80:	d01f      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a30      	ldr	r2, [pc, #192]	; (8008e48 <TIM_Base_SetConfig+0x130>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d01b      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a2f      	ldr	r2, [pc, #188]	; (8008e4c <TIM_Base_SetConfig+0x134>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d017      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a2e      	ldr	r2, [pc, #184]	; (8008e50 <TIM_Base_SetConfig+0x138>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a2d      	ldr	r2, [pc, #180]	; (8008e54 <TIM_Base_SetConfig+0x13c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00f      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a2d      	ldr	r2, [pc, #180]	; (8008e5c <TIM_Base_SetConfig+0x144>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00b      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a2c      	ldr	r2, [pc, #176]	; (8008e60 <TIM_Base_SetConfig+0x148>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d007      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a2b      	ldr	r2, [pc, #172]	; (8008e64 <TIM_Base_SetConfig+0x14c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d003      	beq.n	8008dc2 <TIM_Base_SetConfig+0xaa>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a26      	ldr	r2, [pc, #152]	; (8008e58 <TIM_Base_SetConfig+0x140>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d108      	bne.n	8008dd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a12      	ldr	r2, [pc, #72]	; (8008e44 <TIM_Base_SetConfig+0x12c>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d013      	beq.n	8008e28 <TIM_Base_SetConfig+0x110>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a14      	ldr	r2, [pc, #80]	; (8008e54 <TIM_Base_SetConfig+0x13c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00f      	beq.n	8008e28 <TIM_Base_SetConfig+0x110>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a14      	ldr	r2, [pc, #80]	; (8008e5c <TIM_Base_SetConfig+0x144>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00b      	beq.n	8008e28 <TIM_Base_SetConfig+0x110>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a13      	ldr	r2, [pc, #76]	; (8008e60 <TIM_Base_SetConfig+0x148>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d007      	beq.n	8008e28 <TIM_Base_SetConfig+0x110>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a12      	ldr	r2, [pc, #72]	; (8008e64 <TIM_Base_SetConfig+0x14c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d003      	beq.n	8008e28 <TIM_Base_SetConfig+0x110>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a0d      	ldr	r2, [pc, #52]	; (8008e58 <TIM_Base_SetConfig+0x140>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d103      	bne.n	8008e30 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	691a      	ldr	r2, [r3, #16]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	615a      	str	r2, [r3, #20]
}
 8008e36:	bf00      	nop
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	40012c00 	.word	0x40012c00
 8008e48:	40000400 	.word	0x40000400
 8008e4c:	40000800 	.word	0x40000800
 8008e50:	40000c00 	.word	0x40000c00
 8008e54:	40013400 	.word	0x40013400
 8008e58:	40015000 	.word	0x40015000
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800

08008e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	f023 0201 	bic.w	r2, r3, #1
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f023 0302 	bic.w	r3, r3, #2
 8008eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a30      	ldr	r2, [pc, #192]	; (8008f84 <TIM_OC1_SetConfig+0x11c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d013      	beq.n	8008ef0 <TIM_OC1_SetConfig+0x88>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a2f      	ldr	r2, [pc, #188]	; (8008f88 <TIM_OC1_SetConfig+0x120>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00f      	beq.n	8008ef0 <TIM_OC1_SetConfig+0x88>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a2e      	ldr	r2, [pc, #184]	; (8008f8c <TIM_OC1_SetConfig+0x124>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00b      	beq.n	8008ef0 <TIM_OC1_SetConfig+0x88>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a2d      	ldr	r2, [pc, #180]	; (8008f90 <TIM_OC1_SetConfig+0x128>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d007      	beq.n	8008ef0 <TIM_OC1_SetConfig+0x88>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a2c      	ldr	r2, [pc, #176]	; (8008f94 <TIM_OC1_SetConfig+0x12c>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d003      	beq.n	8008ef0 <TIM_OC1_SetConfig+0x88>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a2b      	ldr	r2, [pc, #172]	; (8008f98 <TIM_OC1_SetConfig+0x130>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d10c      	bne.n	8008f0a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f023 0308 	bic.w	r3, r3, #8
 8008ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f023 0304 	bic.w	r3, r3, #4
 8008f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a1d      	ldr	r2, [pc, #116]	; (8008f84 <TIM_OC1_SetConfig+0x11c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d013      	beq.n	8008f3a <TIM_OC1_SetConfig+0xd2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a1c      	ldr	r2, [pc, #112]	; (8008f88 <TIM_OC1_SetConfig+0x120>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d00f      	beq.n	8008f3a <TIM_OC1_SetConfig+0xd2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a1b      	ldr	r2, [pc, #108]	; (8008f8c <TIM_OC1_SetConfig+0x124>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d00b      	beq.n	8008f3a <TIM_OC1_SetConfig+0xd2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a1a      	ldr	r2, [pc, #104]	; (8008f90 <TIM_OC1_SetConfig+0x128>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d007      	beq.n	8008f3a <TIM_OC1_SetConfig+0xd2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a19      	ldr	r2, [pc, #100]	; (8008f94 <TIM_OC1_SetConfig+0x12c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d003      	beq.n	8008f3a <TIM_OC1_SetConfig+0xd2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <TIM_OC1_SetConfig+0x130>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d111      	bne.n	8008f5e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	621a      	str	r2, [r3, #32]
}
 8008f78:	bf00      	nop
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	40012c00 	.word	0x40012c00
 8008f88:	40013400 	.word	0x40013400
 8008f8c:	40014000 	.word	0x40014000
 8008f90:	40014400 	.word	0x40014400
 8008f94:	40014800 	.word	0x40014800
 8008f98:	40015000 	.word	0x40015000

08008f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	f023 0210 	bic.w	r2, r3, #16
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	021b      	lsls	r3, r3, #8
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f023 0320 	bic.w	r3, r3, #32
 8008fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a2c      	ldr	r2, [pc, #176]	; (80090ac <TIM_OC2_SetConfig+0x110>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d007      	beq.n	8009010 <TIM_OC2_SetConfig+0x74>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a2b      	ldr	r2, [pc, #172]	; (80090b0 <TIM_OC2_SetConfig+0x114>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d003      	beq.n	8009010 <TIM_OC2_SetConfig+0x74>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a2a      	ldr	r2, [pc, #168]	; (80090b4 <TIM_OC2_SetConfig+0x118>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d10d      	bne.n	800902c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4313      	orrs	r3, r2
 8009022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800902a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a1f      	ldr	r2, [pc, #124]	; (80090ac <TIM_OC2_SetConfig+0x110>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d013      	beq.n	800905c <TIM_OC2_SetConfig+0xc0>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a1e      	ldr	r2, [pc, #120]	; (80090b0 <TIM_OC2_SetConfig+0x114>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d00f      	beq.n	800905c <TIM_OC2_SetConfig+0xc0>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a1e      	ldr	r2, [pc, #120]	; (80090b8 <TIM_OC2_SetConfig+0x11c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00b      	beq.n	800905c <TIM_OC2_SetConfig+0xc0>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a1d      	ldr	r2, [pc, #116]	; (80090bc <TIM_OC2_SetConfig+0x120>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d007      	beq.n	800905c <TIM_OC2_SetConfig+0xc0>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a1c      	ldr	r2, [pc, #112]	; (80090c0 <TIM_OC2_SetConfig+0x124>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d003      	beq.n	800905c <TIM_OC2_SetConfig+0xc0>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <TIM_OC2_SetConfig+0x118>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d113      	bne.n	8009084 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800906a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	4313      	orrs	r3, r2
 8009076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	621a      	str	r2, [r3, #32]
}
 800909e:	bf00      	nop
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	40012c00 	.word	0x40012c00
 80090b0:	40013400 	.word	0x40013400
 80090b4:	40015000 	.word	0x40015000
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40014400 	.word	0x40014400
 80090c0:	40014800 	.word	0x40014800

080090c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 0303 	bic.w	r3, r3, #3
 80090fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	021b      	lsls	r3, r3, #8
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a2b      	ldr	r2, [pc, #172]	; (80091d0 <TIM_OC3_SetConfig+0x10c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d007      	beq.n	8009136 <TIM_OC3_SetConfig+0x72>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a2a      	ldr	r2, [pc, #168]	; (80091d4 <TIM_OC3_SetConfig+0x110>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d003      	beq.n	8009136 <TIM_OC3_SetConfig+0x72>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a29      	ldr	r2, [pc, #164]	; (80091d8 <TIM_OC3_SetConfig+0x114>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d10d      	bne.n	8009152 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800913c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	021b      	lsls	r3, r3, #8
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	4313      	orrs	r3, r2
 8009148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a1e      	ldr	r2, [pc, #120]	; (80091d0 <TIM_OC3_SetConfig+0x10c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d013      	beq.n	8009182 <TIM_OC3_SetConfig+0xbe>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a1d      	ldr	r2, [pc, #116]	; (80091d4 <TIM_OC3_SetConfig+0x110>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d00f      	beq.n	8009182 <TIM_OC3_SetConfig+0xbe>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a1d      	ldr	r2, [pc, #116]	; (80091dc <TIM_OC3_SetConfig+0x118>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00b      	beq.n	8009182 <TIM_OC3_SetConfig+0xbe>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a1c      	ldr	r2, [pc, #112]	; (80091e0 <TIM_OC3_SetConfig+0x11c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d007      	beq.n	8009182 <TIM_OC3_SetConfig+0xbe>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a1b      	ldr	r2, [pc, #108]	; (80091e4 <TIM_OC3_SetConfig+0x120>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d003      	beq.n	8009182 <TIM_OC3_SetConfig+0xbe>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a16      	ldr	r2, [pc, #88]	; (80091d8 <TIM_OC3_SetConfig+0x114>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d113      	bne.n	80091aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	011b      	lsls	r3, r3, #4
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	4313      	orrs	r3, r2
 800919c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	011b      	lsls	r3, r3, #4
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	621a      	str	r2, [r3, #32]
}
 80091c4:	bf00      	nop
 80091c6:	371c      	adds	r7, #28
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	40012c00 	.word	0x40012c00
 80091d4:	40013400 	.word	0x40013400
 80091d8:	40015000 	.word	0x40015000
 80091dc:	40014000 	.word	0x40014000
 80091e0:	40014400 	.word	0x40014400
 80091e4:	40014800 	.word	0x40014800

080091e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800921a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	031b      	lsls	r3, r3, #12
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	4313      	orrs	r3, r2
 8009242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a2c      	ldr	r2, [pc, #176]	; (80092f8 <TIM_OC4_SetConfig+0x110>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d007      	beq.n	800925c <TIM_OC4_SetConfig+0x74>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a2b      	ldr	r2, [pc, #172]	; (80092fc <TIM_OC4_SetConfig+0x114>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d003      	beq.n	800925c <TIM_OC4_SetConfig+0x74>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a2a      	ldr	r2, [pc, #168]	; (8009300 <TIM_OC4_SetConfig+0x118>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d10d      	bne.n	8009278 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	031b      	lsls	r3, r3, #12
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	4313      	orrs	r3, r2
 800926e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a1f      	ldr	r2, [pc, #124]	; (80092f8 <TIM_OC4_SetConfig+0x110>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d013      	beq.n	80092a8 <TIM_OC4_SetConfig+0xc0>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a1e      	ldr	r2, [pc, #120]	; (80092fc <TIM_OC4_SetConfig+0x114>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00f      	beq.n	80092a8 <TIM_OC4_SetConfig+0xc0>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a1e      	ldr	r2, [pc, #120]	; (8009304 <TIM_OC4_SetConfig+0x11c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d00b      	beq.n	80092a8 <TIM_OC4_SetConfig+0xc0>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a1d      	ldr	r2, [pc, #116]	; (8009308 <TIM_OC4_SetConfig+0x120>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d007      	beq.n	80092a8 <TIM_OC4_SetConfig+0xc0>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a1c      	ldr	r2, [pc, #112]	; (800930c <TIM_OC4_SetConfig+0x124>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d003      	beq.n	80092a8 <TIM_OC4_SetConfig+0xc0>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a17      	ldr	r2, [pc, #92]	; (8009300 <TIM_OC4_SetConfig+0x118>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d113      	bne.n	80092d0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	019b      	lsls	r3, r3, #6
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	019b      	lsls	r3, r3, #6
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	40012c00 	.word	0x40012c00
 80092fc:	40013400 	.word	0x40013400
 8009300:	40015000 	.word	0x40015000
 8009304:	40014000 	.word	0x40014000
 8009308:	40014400 	.word	0x40014400
 800930c:	40014800 	.word	0x40014800

08009310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800933e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	041b      	lsls	r3, r3, #16
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	4313      	orrs	r3, r2
 8009360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a19      	ldr	r2, [pc, #100]	; (80093cc <TIM_OC5_SetConfig+0xbc>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d013      	beq.n	8009392 <TIM_OC5_SetConfig+0x82>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a18      	ldr	r2, [pc, #96]	; (80093d0 <TIM_OC5_SetConfig+0xc0>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d00f      	beq.n	8009392 <TIM_OC5_SetConfig+0x82>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a17      	ldr	r2, [pc, #92]	; (80093d4 <TIM_OC5_SetConfig+0xc4>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d00b      	beq.n	8009392 <TIM_OC5_SetConfig+0x82>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a16      	ldr	r2, [pc, #88]	; (80093d8 <TIM_OC5_SetConfig+0xc8>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d007      	beq.n	8009392 <TIM_OC5_SetConfig+0x82>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a15      	ldr	r2, [pc, #84]	; (80093dc <TIM_OC5_SetConfig+0xcc>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d003      	beq.n	8009392 <TIM_OC5_SetConfig+0x82>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a14      	ldr	r2, [pc, #80]	; (80093e0 <TIM_OC5_SetConfig+0xd0>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d109      	bne.n	80093a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009398:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	021b      	lsls	r3, r3, #8
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	621a      	str	r2, [r3, #32]
}
 80093c0:	bf00      	nop
 80093c2:	371c      	adds	r7, #28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	40012c00 	.word	0x40012c00
 80093d0:	40013400 	.word	0x40013400
 80093d4:	40014000 	.word	0x40014000
 80093d8:	40014400 	.word	0x40014400
 80093dc:	40014800 	.word	0x40014800
 80093e0:	40015000 	.word	0x40015000

080093e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4313      	orrs	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800942a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	051b      	lsls	r3, r3, #20
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	4313      	orrs	r3, r2
 8009436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a1a      	ldr	r2, [pc, #104]	; (80094a4 <TIM_OC6_SetConfig+0xc0>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d013      	beq.n	8009468 <TIM_OC6_SetConfig+0x84>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a19      	ldr	r2, [pc, #100]	; (80094a8 <TIM_OC6_SetConfig+0xc4>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00f      	beq.n	8009468 <TIM_OC6_SetConfig+0x84>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a18      	ldr	r2, [pc, #96]	; (80094ac <TIM_OC6_SetConfig+0xc8>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00b      	beq.n	8009468 <TIM_OC6_SetConfig+0x84>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a17      	ldr	r2, [pc, #92]	; (80094b0 <TIM_OC6_SetConfig+0xcc>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d007      	beq.n	8009468 <TIM_OC6_SetConfig+0x84>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a16      	ldr	r2, [pc, #88]	; (80094b4 <TIM_OC6_SetConfig+0xd0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d003      	beq.n	8009468 <TIM_OC6_SetConfig+0x84>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a15      	ldr	r2, [pc, #84]	; (80094b8 <TIM_OC6_SetConfig+0xd4>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d109      	bne.n	800947c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800946e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	029b      	lsls	r3, r3, #10
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	621a      	str	r2, [r3, #32]
}
 8009496:	bf00      	nop
 8009498:	371c      	adds	r7, #28
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	40012c00 	.word	0x40012c00
 80094a8:	40013400 	.word	0x40013400
 80094ac:	40014000 	.word	0x40014000
 80094b0:	40014400 	.word	0x40014400
 80094b4:	40014800 	.word	0x40014800
 80094b8:	40015000 	.word	0x40015000

080094bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f023 0201 	bic.w	r2, r3, #1
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4a28      	ldr	r2, [pc, #160]	; (8009588 <TIM_TI1_SetConfig+0xcc>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d01b      	beq.n	8009522 <TIM_TI1_SetConfig+0x66>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094f0:	d017      	beq.n	8009522 <TIM_TI1_SetConfig+0x66>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4a25      	ldr	r2, [pc, #148]	; (800958c <TIM_TI1_SetConfig+0xd0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d013      	beq.n	8009522 <TIM_TI1_SetConfig+0x66>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4a24      	ldr	r2, [pc, #144]	; (8009590 <TIM_TI1_SetConfig+0xd4>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00f      	beq.n	8009522 <TIM_TI1_SetConfig+0x66>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4a23      	ldr	r2, [pc, #140]	; (8009594 <TIM_TI1_SetConfig+0xd8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d00b      	beq.n	8009522 <TIM_TI1_SetConfig+0x66>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	4a22      	ldr	r2, [pc, #136]	; (8009598 <TIM_TI1_SetConfig+0xdc>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d007      	beq.n	8009522 <TIM_TI1_SetConfig+0x66>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	4a21      	ldr	r2, [pc, #132]	; (800959c <TIM_TI1_SetConfig+0xe0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d003      	beq.n	8009522 <TIM_TI1_SetConfig+0x66>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	4a20      	ldr	r2, [pc, #128]	; (80095a0 <TIM_TI1_SetConfig+0xe4>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d101      	bne.n	8009526 <TIM_TI1_SetConfig+0x6a>
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <TIM_TI1_SetConfig+0x6c>
 8009526:	2300      	movs	r3, #0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d008      	beq.n	800953e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4313      	orrs	r3, r2
 800953a:	617b      	str	r3, [r7, #20]
 800953c:	e003      	b.n	8009546 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f043 0301 	orr.w	r3, r3, #1
 8009544:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800954c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	011b      	lsls	r3, r3, #4
 8009552:	b2db      	uxtb	r3, r3
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f023 030a 	bic.w	r3, r3, #10
 8009560:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f003 030a 	and.w	r3, r3, #10
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	4313      	orrs	r3, r2
 800956c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	621a      	str	r2, [r3, #32]
}
 800957a:	bf00      	nop
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	40012c00 	.word	0x40012c00
 800958c:	40000400 	.word	0x40000400
 8009590:	40000800 	.word	0x40000800
 8009594:	40000c00 	.word	0x40000c00
 8009598:	40013400 	.word	0x40013400
 800959c:	40014000 	.word	0x40014000
 80095a0:	40015000 	.word	0x40015000

080095a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f023 0201 	bic.w	r2, r3, #1
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	011b      	lsls	r3, r3, #4
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f023 030a 	bic.w	r3, r3, #10
 80095e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	621a      	str	r2, [r3, #32]
}
 80095f6:	bf00      	nop
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009602:	b480      	push	{r7}
 8009604:	b087      	sub	sp, #28
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	f023 0210 	bic.w	r2, r3, #16
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800962e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	021b      	lsls	r3, r3, #8
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	4313      	orrs	r3, r2
 8009638:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	031b      	lsls	r3, r3, #12
 8009646:	b29b      	uxth	r3, r3
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	4313      	orrs	r3, r2
 800964c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009654:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	011b      	lsls	r3, r3, #4
 800965a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	621a      	str	r2, [r3, #32]
}
 8009670:	bf00      	nop
 8009672:	371c      	adds	r7, #28
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	f023 0210 	bic.w	r2, r3, #16
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	031b      	lsls	r3, r3, #12
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	621a      	str	r2, [r3, #32]
}
 80096d0:	bf00      	nop
 80096d2:	371c      	adds	r7, #28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f023 0303 	bic.w	r3, r3, #3
 8009708:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4313      	orrs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009718:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	b2db      	uxtb	r3, r3
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800972c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	4313      	orrs	r3, r2
 800973a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	621a      	str	r2, [r3, #32]
}
 8009748:	bf00      	nop
 800974a:	371c      	adds	r7, #28
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009780:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	4313      	orrs	r3, r2
 800978a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009792:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	031b      	lsls	r3, r3, #12
 8009798:	b29b      	uxth	r3, r3
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	4313      	orrs	r3, r2
 800979e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80097a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	031b      	lsls	r3, r3, #12
 80097ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	621a      	str	r2, [r3, #32]
}
 80097c2:	bf00      	nop
 80097c4:	371c      	adds	r7, #28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80097e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f043 0307 	orr.w	r3, r3, #7
 80097f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	609a      	str	r2, [r3, #8]
}
 80097fc:	bf00      	nop
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
 8009814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	021a      	lsls	r2, r3, #8
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	431a      	orrs	r2, r3
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4313      	orrs	r3, r2
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	4313      	orrs	r3, r2
 8009834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	609a      	str	r2, [r3, #8]
}
 800983c:	bf00      	nop
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f003 031f 	and.w	r3, r3, #31
 800985a:	2201      	movs	r2, #1
 800985c:	fa02 f303 	lsl.w	r3, r2, r3
 8009860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a1a      	ldr	r2, [r3, #32]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	43db      	mvns	r3, r3
 800986a:	401a      	ands	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a1a      	ldr	r2, [r3, #32]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f003 031f 	and.w	r3, r3, #31
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	fa01 f303 	lsl.w	r3, r1, r3
 8009880:	431a      	orrs	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	621a      	str	r2, [r3, #32]
}
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
	...

08009894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d101      	bne.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e074      	b.n	8009996 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a34      	ldr	r2, [pc, #208]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d009      	beq.n	80098ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a33      	ldr	r2, [pc, #204]	; (80099a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d004      	beq.n	80098ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a31      	ldr	r2, [pc, #196]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d108      	bne.n	80098fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a21      	ldr	r2, [pc, #132]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d022      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992c:	d01d      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a1f      	ldr	r2, [pc, #124]	; (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d018      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a1d      	ldr	r2, [pc, #116]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d013      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a1c      	ldr	r2, [pc, #112]	; (80099b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00e      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a15      	ldr	r2, [pc, #84]	; (80099a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d009      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a18      	ldr	r2, [pc, #96]	; (80099bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d004      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a11      	ldr	r2, [pc, #68]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d10c      	bne.n	8009984 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	4313      	orrs	r3, r2
 800997a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	40012c00 	.word	0x40012c00
 80099a8:	40013400 	.word	0x40013400
 80099ac:	40015000 	.word	0x40015000
 80099b0:	40000400 	.word	0x40000400
 80099b4:	40000800 	.word	0x40000800
 80099b8:	40000c00 	.word	0x40000c00
 80099bc:	40014000 	.word	0x40014000

080099c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e042      	b.n	8009ae4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d106      	bne.n	8009a76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fa fd13 	bl	800449c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2224      	movs	r2, #36	; 0x24
 8009a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 0201 	bic.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f8c2 	bl	8009c18 <UART_SetConfig>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d101      	bne.n	8009a9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e022      	b.n	8009ae4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d002      	beq.n	8009aac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fbb2 	bl	800a210 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689a      	ldr	r2, [r3, #8]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0201 	orr.w	r2, r2, #1
 8009ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fc39 	bl	800a354 <UART_CheckIdleState>
 8009ae2:	4603      	mov	r3, r0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08a      	sub	sp, #40	; 0x28
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	4613      	mov	r3, r2
 8009afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	f040 8083 	bne.w	8009c0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <HAL_UART_Transmit+0x28>
 8009b0e:	88fb      	ldrh	r3, [r7, #6]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e07b      	b.n	8009c10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d101      	bne.n	8009b26 <HAL_UART_Transmit+0x3a>
 8009b22:	2302      	movs	r3, #2
 8009b24:	e074      	b.n	8009c10 <HAL_UART_Transmit+0x124>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2221      	movs	r2, #33	; 0x21
 8009b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b3e:	f7fa feb5 	bl	80048ac <HAL_GetTick>
 8009b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	88fa      	ldrh	r2, [r7, #6]
 8009b48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	88fa      	ldrh	r2, [r7, #6]
 8009b50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b5c:	d108      	bne.n	8009b70 <HAL_UART_Transmit+0x84>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d104      	bne.n	8009b70 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	61bb      	str	r3, [r7, #24]
 8009b6e:	e003      	b.n	8009b78 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b74:	2300      	movs	r3, #0
 8009b76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009b80:	e02c      	b.n	8009bdc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2180      	movs	r1, #128	; 0x80
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 fc2c 	bl	800a3ea <UART_WaitOnFlagUntilTimeout>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e039      	b.n	8009c10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10b      	bne.n	8009bba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	3302      	adds	r3, #2
 8009bb6:	61bb      	str	r3, [r7, #24]
 8009bb8:	e007      	b.n	8009bca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	781a      	ldrb	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1cc      	bne.n	8009b82 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	2140      	movs	r1, #64	; 0x40
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 fbf9 	bl	800a3ea <UART_WaitOnFlagUntilTimeout>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e006      	b.n	8009c10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2220      	movs	r2, #32
 8009c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e000      	b.n	8009c10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009c0e:	2302      	movs	r3, #2
  }
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3720      	adds	r7, #32
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c1c:	b08c      	sub	sp, #48	; 0x30
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	431a      	orrs	r2, r3
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	431a      	orrs	r2, r3
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	4baa      	ldr	r3, [pc, #680]	; (8009ef0 <UART_SetConfig+0x2d8>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	6812      	ldr	r2, [r2, #0]
 8009c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c50:	430b      	orrs	r3, r1
 8009c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a9f      	ldr	r2, [pc, #636]	; (8009ef4 <UART_SetConfig+0x2dc>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d004      	beq.n	8009c84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c80:	4313      	orrs	r3, r2
 8009c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009c8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	6812      	ldr	r2, [r2, #0]
 8009c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c98:	430b      	orrs	r3, r1
 8009c9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	f023 010f 	bic.w	r1, r3, #15
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a90      	ldr	r2, [pc, #576]	; (8009ef8 <UART_SetConfig+0x2e0>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d125      	bne.n	8009d08 <UART_SetConfig+0xf0>
 8009cbc:	4b8f      	ldr	r3, [pc, #572]	; (8009efc <UART_SetConfig+0x2e4>)
 8009cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc2:	f003 0303 	and.w	r3, r3, #3
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d81a      	bhi.n	8009d00 <UART_SetConfig+0xe8>
 8009cca:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <UART_SetConfig+0xb8>)
 8009ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd0:	08009ce1 	.word	0x08009ce1
 8009cd4:	08009cf1 	.word	0x08009cf1
 8009cd8:	08009ce9 	.word	0x08009ce9
 8009cdc:	08009cf9 	.word	0x08009cf9
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ce6:	e116      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cee:	e112      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009cf0:	2304      	movs	r3, #4
 8009cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cf6:	e10e      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009cf8:	2308      	movs	r3, #8
 8009cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cfe:	e10a      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009d00:	2310      	movs	r3, #16
 8009d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d06:	e106      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a7c      	ldr	r2, [pc, #496]	; (8009f00 <UART_SetConfig+0x2e8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d138      	bne.n	8009d84 <UART_SetConfig+0x16c>
 8009d12:	4b7a      	ldr	r3, [pc, #488]	; (8009efc <UART_SetConfig+0x2e4>)
 8009d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d18:	f003 030c 	and.w	r3, r3, #12
 8009d1c:	2b0c      	cmp	r3, #12
 8009d1e:	d82d      	bhi.n	8009d7c <UART_SetConfig+0x164>
 8009d20:	a201      	add	r2, pc, #4	; (adr r2, 8009d28 <UART_SetConfig+0x110>)
 8009d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d26:	bf00      	nop
 8009d28:	08009d5d 	.word	0x08009d5d
 8009d2c:	08009d7d 	.word	0x08009d7d
 8009d30:	08009d7d 	.word	0x08009d7d
 8009d34:	08009d7d 	.word	0x08009d7d
 8009d38:	08009d6d 	.word	0x08009d6d
 8009d3c:	08009d7d 	.word	0x08009d7d
 8009d40:	08009d7d 	.word	0x08009d7d
 8009d44:	08009d7d 	.word	0x08009d7d
 8009d48:	08009d65 	.word	0x08009d65
 8009d4c:	08009d7d 	.word	0x08009d7d
 8009d50:	08009d7d 	.word	0x08009d7d
 8009d54:	08009d7d 	.word	0x08009d7d
 8009d58:	08009d75 	.word	0x08009d75
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d62:	e0d8      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009d64:	2302      	movs	r3, #2
 8009d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d6a:	e0d4      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009d6c:	2304      	movs	r3, #4
 8009d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d72:	e0d0      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009d74:	2308      	movs	r3, #8
 8009d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d7a:	e0cc      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d82:	e0c8      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a5e      	ldr	r2, [pc, #376]	; (8009f04 <UART_SetConfig+0x2ec>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d125      	bne.n	8009dda <UART_SetConfig+0x1c2>
 8009d8e:	4b5b      	ldr	r3, [pc, #364]	; (8009efc <UART_SetConfig+0x2e4>)
 8009d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d98:	2b30      	cmp	r3, #48	; 0x30
 8009d9a:	d016      	beq.n	8009dca <UART_SetConfig+0x1b2>
 8009d9c:	2b30      	cmp	r3, #48	; 0x30
 8009d9e:	d818      	bhi.n	8009dd2 <UART_SetConfig+0x1ba>
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d00a      	beq.n	8009dba <UART_SetConfig+0x1a2>
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d814      	bhi.n	8009dd2 <UART_SetConfig+0x1ba>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <UART_SetConfig+0x19a>
 8009dac:	2b10      	cmp	r3, #16
 8009dae:	d008      	beq.n	8009dc2 <UART_SetConfig+0x1aa>
 8009db0:	e00f      	b.n	8009dd2 <UART_SetConfig+0x1ba>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009db8:	e0ad      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009dba:	2302      	movs	r3, #2
 8009dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dc0:	e0a9      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009dc2:	2304      	movs	r3, #4
 8009dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dc8:	e0a5      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009dca:	2308      	movs	r3, #8
 8009dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dd0:	e0a1      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009dd2:	2310      	movs	r3, #16
 8009dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dd8:	e09d      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a4a      	ldr	r2, [pc, #296]	; (8009f08 <UART_SetConfig+0x2f0>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d125      	bne.n	8009e30 <UART_SetConfig+0x218>
 8009de4:	4b45      	ldr	r3, [pc, #276]	; (8009efc <UART_SetConfig+0x2e4>)
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009dee:	2bc0      	cmp	r3, #192	; 0xc0
 8009df0:	d016      	beq.n	8009e20 <UART_SetConfig+0x208>
 8009df2:	2bc0      	cmp	r3, #192	; 0xc0
 8009df4:	d818      	bhi.n	8009e28 <UART_SetConfig+0x210>
 8009df6:	2b80      	cmp	r3, #128	; 0x80
 8009df8:	d00a      	beq.n	8009e10 <UART_SetConfig+0x1f8>
 8009dfa:	2b80      	cmp	r3, #128	; 0x80
 8009dfc:	d814      	bhi.n	8009e28 <UART_SetConfig+0x210>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <UART_SetConfig+0x1f0>
 8009e02:	2b40      	cmp	r3, #64	; 0x40
 8009e04:	d008      	beq.n	8009e18 <UART_SetConfig+0x200>
 8009e06:	e00f      	b.n	8009e28 <UART_SetConfig+0x210>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e0e:	e082      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e10:	2302      	movs	r3, #2
 8009e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e16:	e07e      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e18:	2304      	movs	r3, #4
 8009e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e1e:	e07a      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e20:	2308      	movs	r3, #8
 8009e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e26:	e076      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e28:	2310      	movs	r3, #16
 8009e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e2e:	e072      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a35      	ldr	r2, [pc, #212]	; (8009f0c <UART_SetConfig+0x2f4>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d12a      	bne.n	8009e90 <UART_SetConfig+0x278>
 8009e3a:	4b30      	ldr	r3, [pc, #192]	; (8009efc <UART_SetConfig+0x2e4>)
 8009e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e48:	d01a      	beq.n	8009e80 <UART_SetConfig+0x268>
 8009e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e4e:	d81b      	bhi.n	8009e88 <UART_SetConfig+0x270>
 8009e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e54:	d00c      	beq.n	8009e70 <UART_SetConfig+0x258>
 8009e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e5a:	d815      	bhi.n	8009e88 <UART_SetConfig+0x270>
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d003      	beq.n	8009e68 <UART_SetConfig+0x250>
 8009e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e64:	d008      	beq.n	8009e78 <UART_SetConfig+0x260>
 8009e66:	e00f      	b.n	8009e88 <UART_SetConfig+0x270>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e6e:	e052      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e70:	2302      	movs	r3, #2
 8009e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e76:	e04e      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e78:	2304      	movs	r3, #4
 8009e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e7e:	e04a      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e80:	2308      	movs	r3, #8
 8009e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e86:	e046      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e88:	2310      	movs	r3, #16
 8009e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e8e:	e042      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a17      	ldr	r2, [pc, #92]	; (8009ef4 <UART_SetConfig+0x2dc>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d13a      	bne.n	8009f10 <UART_SetConfig+0x2f8>
 8009e9a:	4b18      	ldr	r3, [pc, #96]	; (8009efc <UART_SetConfig+0x2e4>)
 8009e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ea8:	d01a      	beq.n	8009ee0 <UART_SetConfig+0x2c8>
 8009eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009eae:	d81b      	bhi.n	8009ee8 <UART_SetConfig+0x2d0>
 8009eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eb4:	d00c      	beq.n	8009ed0 <UART_SetConfig+0x2b8>
 8009eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eba:	d815      	bhi.n	8009ee8 <UART_SetConfig+0x2d0>
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d003      	beq.n	8009ec8 <UART_SetConfig+0x2b0>
 8009ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ec4:	d008      	beq.n	8009ed8 <UART_SetConfig+0x2c0>
 8009ec6:	e00f      	b.n	8009ee8 <UART_SetConfig+0x2d0>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ece:	e022      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ed6:	e01e      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009ed8:	2304      	movs	r3, #4
 8009eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ede:	e01a      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ee6:	e016      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009ee8:	2310      	movs	r3, #16
 8009eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eee:	e012      	b.n	8009f16 <UART_SetConfig+0x2fe>
 8009ef0:	cfff69f3 	.word	0xcfff69f3
 8009ef4:	40008000 	.word	0x40008000
 8009ef8:	40013800 	.word	0x40013800
 8009efc:	40021000 	.word	0x40021000
 8009f00:	40004400 	.word	0x40004400
 8009f04:	40004800 	.word	0x40004800
 8009f08:	40004c00 	.word	0x40004c00
 8009f0c:	40005000 	.word	0x40005000
 8009f10:	2310      	movs	r3, #16
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4aae      	ldr	r2, [pc, #696]	; (800a1d4 <UART_SetConfig+0x5bc>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	f040 8097 	bne.w	800a050 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f26:	2b08      	cmp	r3, #8
 8009f28:	d823      	bhi.n	8009f72 <UART_SetConfig+0x35a>
 8009f2a:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <UART_SetConfig+0x318>)
 8009f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f30:	08009f55 	.word	0x08009f55
 8009f34:	08009f73 	.word	0x08009f73
 8009f38:	08009f5d 	.word	0x08009f5d
 8009f3c:	08009f73 	.word	0x08009f73
 8009f40:	08009f63 	.word	0x08009f63
 8009f44:	08009f73 	.word	0x08009f73
 8009f48:	08009f73 	.word	0x08009f73
 8009f4c:	08009f73 	.word	0x08009f73
 8009f50:	08009f6b 	.word	0x08009f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f54:	f7fd fd7e 	bl	8007a54 <HAL_RCC_GetPCLK1Freq>
 8009f58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f5a:	e010      	b.n	8009f7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f5c:	4b9e      	ldr	r3, [pc, #632]	; (800a1d8 <UART_SetConfig+0x5c0>)
 8009f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f60:	e00d      	b.n	8009f7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f62:	f7fd fd09 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 8009f66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f68:	e009      	b.n	8009f7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f70:	e005      	b.n	8009f7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 8130 	beq.w	800a1e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	4a94      	ldr	r2, [pc, #592]	; (800a1dc <UART_SetConfig+0x5c4>)
 8009f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f90:	461a      	mov	r2, r3
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	4413      	add	r3, r2
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d305      	bcc.n	8009fb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fb0:	69ba      	ldr	r2, [r7, #24]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d903      	bls.n	8009fbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009fbc:	e113      	b.n	800a1e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	60bb      	str	r3, [r7, #8]
 8009fc4:	60fa      	str	r2, [r7, #12]
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	4a84      	ldr	r2, [pc, #528]	; (800a1dc <UART_SetConfig+0x5c4>)
 8009fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	603b      	str	r3, [r7, #0]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fe0:	f7f6 fe7a 	bl	8000cd8 <__aeabi_uldivmod>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4619      	mov	r1, r3
 8009fec:	f04f 0200 	mov.w	r2, #0
 8009ff0:	f04f 0300 	mov.w	r3, #0
 8009ff4:	020b      	lsls	r3, r1, #8
 8009ff6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ffa:	0202      	lsls	r2, r0, #8
 8009ffc:	6979      	ldr	r1, [r7, #20]
 8009ffe:	6849      	ldr	r1, [r1, #4]
 800a000:	0849      	lsrs	r1, r1, #1
 800a002:	2000      	movs	r0, #0
 800a004:	460c      	mov	r4, r1
 800a006:	4605      	mov	r5, r0
 800a008:	eb12 0804 	adds.w	r8, r2, r4
 800a00c:	eb43 0905 	adc.w	r9, r3, r5
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	469a      	mov	sl, r3
 800a018:	4693      	mov	fp, r2
 800a01a:	4652      	mov	r2, sl
 800a01c:	465b      	mov	r3, fp
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 fe59 	bl	8000cd8 <__aeabi_uldivmod>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	4613      	mov	r3, r2
 800a02c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a034:	d308      	bcc.n	800a048 <UART_SetConfig+0x430>
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a03c:	d204      	bcs.n	800a048 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6a3a      	ldr	r2, [r7, #32]
 800a044:	60da      	str	r2, [r3, #12]
 800a046:	e0ce      	b.n	800a1e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a04e:	e0ca      	b.n	800a1e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a058:	d166      	bne.n	800a128 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a05a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a05e:	2b08      	cmp	r3, #8
 800a060:	d827      	bhi.n	800a0b2 <UART_SetConfig+0x49a>
 800a062:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <UART_SetConfig+0x450>)
 800a064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a068:	0800a08d 	.word	0x0800a08d
 800a06c:	0800a095 	.word	0x0800a095
 800a070:	0800a09d 	.word	0x0800a09d
 800a074:	0800a0b3 	.word	0x0800a0b3
 800a078:	0800a0a3 	.word	0x0800a0a3
 800a07c:	0800a0b3 	.word	0x0800a0b3
 800a080:	0800a0b3 	.word	0x0800a0b3
 800a084:	0800a0b3 	.word	0x0800a0b3
 800a088:	0800a0ab 	.word	0x0800a0ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a08c:	f7fd fce2 	bl	8007a54 <HAL_RCC_GetPCLK1Freq>
 800a090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a092:	e014      	b.n	800a0be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a094:	f7fd fcf4 	bl	8007a80 <HAL_RCC_GetPCLK2Freq>
 800a098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a09a:	e010      	b.n	800a0be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a09c:	4b4e      	ldr	r3, [pc, #312]	; (800a1d8 <UART_SetConfig+0x5c0>)
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0a0:	e00d      	b.n	800a0be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0a2:	f7fd fc69 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 800a0a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0a8:	e009      	b.n	800a0be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0b0:	e005      	b.n	800a0be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a0bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 8090 	beq.w	800a1e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ca:	4a44      	ldr	r2, [pc, #272]	; (800a1dc <UART_SetConfig+0x5c4>)
 800a0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0d8:	005a      	lsls	r2, r3, #1
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	085b      	lsrs	r3, r3, #1
 800a0e0:	441a      	add	r2, r3
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	2b0f      	cmp	r3, #15
 800a0f0:	d916      	bls.n	800a120 <UART_SetConfig+0x508>
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0f8:	d212      	bcs.n	800a120 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	f023 030f 	bic.w	r3, r3, #15
 800a102:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	085b      	lsrs	r3, r3, #1
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f003 0307 	and.w	r3, r3, #7
 800a10e:	b29a      	uxth	r2, r3
 800a110:	8bfb      	ldrh	r3, [r7, #30]
 800a112:	4313      	orrs	r3, r2
 800a114:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	8bfa      	ldrh	r2, [r7, #30]
 800a11c:	60da      	str	r2, [r3, #12]
 800a11e:	e062      	b.n	800a1e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a126:	e05e      	b.n	800a1e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a128:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a12c:	2b08      	cmp	r3, #8
 800a12e:	d828      	bhi.n	800a182 <UART_SetConfig+0x56a>
 800a130:	a201      	add	r2, pc, #4	; (adr r2, 800a138 <UART_SetConfig+0x520>)
 800a132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a136:	bf00      	nop
 800a138:	0800a15d 	.word	0x0800a15d
 800a13c:	0800a165 	.word	0x0800a165
 800a140:	0800a16d 	.word	0x0800a16d
 800a144:	0800a183 	.word	0x0800a183
 800a148:	0800a173 	.word	0x0800a173
 800a14c:	0800a183 	.word	0x0800a183
 800a150:	0800a183 	.word	0x0800a183
 800a154:	0800a183 	.word	0x0800a183
 800a158:	0800a17b 	.word	0x0800a17b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a15c:	f7fd fc7a 	bl	8007a54 <HAL_RCC_GetPCLK1Freq>
 800a160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a162:	e014      	b.n	800a18e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a164:	f7fd fc8c 	bl	8007a80 <HAL_RCC_GetPCLK2Freq>
 800a168:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a16a:	e010      	b.n	800a18e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a16c:	4b1a      	ldr	r3, [pc, #104]	; (800a1d8 <UART_SetConfig+0x5c0>)
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a170:	e00d      	b.n	800a18e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a172:	f7fd fc01 	bl	8007978 <HAL_RCC_GetSysClockFreq>
 800a176:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a178:	e009      	b.n	800a18e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a17a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a17e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a180:	e005      	b.n	800a18e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a18c:	bf00      	nop
    }

    if (pclk != 0U)
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d028      	beq.n	800a1e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a198:	4a10      	ldr	r2, [pc, #64]	; (800a1dc <UART_SetConfig+0x5c4>)
 800a19a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	085b      	lsrs	r3, r3, #1
 800a1ac:	441a      	add	r2, r3
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	2b0f      	cmp	r3, #15
 800a1bc:	d910      	bls.n	800a1e0 <UART_SetConfig+0x5c8>
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c4:	d20c      	bcs.n	800a1e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	60da      	str	r2, [r3, #12]
 800a1d0:	e009      	b.n	800a1e6 <UART_SetConfig+0x5ce>
 800a1d2:	bf00      	nop
 800a1d4:	40008000 	.word	0x40008000
 800a1d8:	00f42400 	.word	0x00f42400
 800a1dc:	08010178 	.word	0x08010178
      }
      else
      {
        ret = HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2200      	movs	r2, #0
 800a200:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a202:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a206:	4618      	mov	r0, r3
 800a208:	3730      	adds	r7, #48	; 0x30
 800a20a:	46bd      	mov	sp, r7
 800a20c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00a      	beq.n	800a23a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	f003 0302 	and.w	r3, r3, #2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	f003 0310 	and.w	r3, r3, #16
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01a      	beq.n	800a326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30e:	d10a      	bne.n	800a326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00a      	beq.n	800a348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	605a      	str	r2, [r3, #4]
  }
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af02      	add	r7, sp, #8
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a364:	f7fa faa2 	bl	80048ac <HAL_GetTick>
 800a368:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	2b08      	cmp	r3, #8
 800a376:	d10e      	bne.n	800a396 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f82f 	bl	800a3ea <UART_WaitOnFlagUntilTimeout>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e025      	b.n	800a3e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	d10e      	bne.n	800a3c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f819 	bl	800a3ea <UART_WaitOnFlagUntilTimeout>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e00f      	b.n	800a3e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b09c      	sub	sp, #112	; 0x70
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	603b      	str	r3, [r7, #0]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3fa:	e0a9      	b.n	800a550 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a402:	f000 80a5 	beq.w	800a550 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a406:	f7fa fa51 	bl	80048ac <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a412:	429a      	cmp	r2, r3
 800a414:	d302      	bcc.n	800a41c <UART_WaitOnFlagUntilTimeout+0x32>
 800a416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d140      	bne.n	800a49e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a430:	667b      	str	r3, [r7, #100]	; 0x64
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a43a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a43c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a440:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e6      	bne.n	800a41c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3308      	adds	r3, #8
 800a454:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a460:	f023 0301 	bic.w	r3, r3, #1
 800a464:	663b      	str	r3, [r7, #96]	; 0x60
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3308      	adds	r3, #8
 800a46c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a46e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a470:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a472:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a476:	e841 2300 	strex	r3, r2, [r1]
 800a47a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e5      	bne.n	800a44e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2220      	movs	r2, #32
 800a486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2220      	movs	r2, #32
 800a48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e069      	b.n	800a572 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d051      	beq.n	800a550 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4ba:	d149      	bne.n	800a550 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	e853 3f00 	ldrex	r3, [r3]
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e6      	bne.n	800a4c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	613b      	str	r3, [r7, #16]
   return(result);
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f023 0301 	bic.w	r3, r3, #1
 800a50e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3308      	adds	r3, #8
 800a516:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a518:	623a      	str	r2, [r7, #32]
 800a51a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	69f9      	ldr	r1, [r7, #28]
 800a51e:	6a3a      	ldr	r2, [r7, #32]
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	61bb      	str	r3, [r7, #24]
   return(result);
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e5      	bne.n	800a4f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2220      	movs	r2, #32
 800a530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2220      	movs	r2, #32
 800a538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e010      	b.n	800a572 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	69da      	ldr	r2, [r3, #28]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	4013      	ands	r3, r2
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	bf0c      	ite	eq
 800a560:	2301      	moveq	r3, #1
 800a562:	2300      	movne	r3, #0
 800a564:	b2db      	uxtb	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	f43f af46 	beq.w	800a3fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3770      	adds	r7, #112	; 0x70
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b085      	sub	sp, #20
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d101      	bne.n	800a590 <HAL_UARTEx_DisableFifoMode+0x16>
 800a58c:	2302      	movs	r3, #2
 800a58e:	e027      	b.n	800a5e0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2224      	movs	r2, #36	; 0x24
 800a59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f022 0201 	bic.w	r2, r2, #1
 800a5b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a5be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d101      	bne.n	800a604 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a600:	2302      	movs	r3, #2
 800a602:	e02d      	b.n	800a660 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2224      	movs	r2, #36	; 0x24
 800a610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0201 	bic.w	r2, r2, #1
 800a62a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	430a      	orrs	r2, r1
 800a63e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f84f 	bl	800a6e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2220      	movs	r2, #32
 800a652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e02d      	b.n	800a6dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2224      	movs	r2, #36	; 0x24
 800a68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0201 	bic.w	r2, r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f811 	bl	800a6e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2220      	movs	r2, #32
 800a6ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d108      	bne.n	800a706 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a704:	e031      	b.n	800a76a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a706:	2308      	movs	r3, #8
 800a708:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a70a:	2308      	movs	r3, #8
 800a70c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	0e5b      	lsrs	r3, r3, #25
 800a716:	b2db      	uxtb	r3, r3
 800a718:	f003 0307 	and.w	r3, r3, #7
 800a71c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	0f5b      	lsrs	r3, r3, #29
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f003 0307 	and.w	r3, r3, #7
 800a72c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
 800a730:	7b3a      	ldrb	r2, [r7, #12]
 800a732:	4911      	ldr	r1, [pc, #68]	; (800a778 <UARTEx_SetNbDataToProcess+0x94>)
 800a734:	5c8a      	ldrb	r2, [r1, r2]
 800a736:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a73a:	7b3a      	ldrb	r2, [r7, #12]
 800a73c:	490f      	ldr	r1, [pc, #60]	; (800a77c <UARTEx_SetNbDataToProcess+0x98>)
 800a73e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a740:	fb93 f3f2 	sdiv	r3, r3, r2
 800a744:	b29a      	uxth	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	7b7a      	ldrb	r2, [r7, #13]
 800a750:	4909      	ldr	r1, [pc, #36]	; (800a778 <UARTEx_SetNbDataToProcess+0x94>)
 800a752:	5c8a      	ldrb	r2, [r1, r2]
 800a754:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a758:	7b7a      	ldrb	r2, [r7, #13]
 800a75a:	4908      	ldr	r1, [pc, #32]	; (800a77c <UARTEx_SetNbDataToProcess+0x98>)
 800a75c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a75e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a762:	b29a      	uxth	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a76a:	bf00      	nop
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	08010190 	.word	0x08010190
 800a77c:	08010198 	.word	0x08010198

0800a780 <_ZdlPvj>:
 800a780:	f000 b81a 	b.w	800a7b8 <_ZdlPv>

0800a784 <_Znwj>:
 800a784:	2801      	cmp	r0, #1
 800a786:	bf38      	it	cc
 800a788:	2001      	movcc	r0, #1
 800a78a:	b510      	push	{r4, lr}
 800a78c:	4604      	mov	r4, r0
 800a78e:	4620      	mov	r0, r4
 800a790:	f001 f8ba 	bl	800b908 <malloc>
 800a794:	b100      	cbz	r0, 800a798 <_Znwj+0x14>
 800a796:	bd10      	pop	{r4, pc}
 800a798:	f000 f810 	bl	800a7bc <_ZSt15get_new_handlerv>
 800a79c:	b908      	cbnz	r0, 800a7a2 <_Znwj+0x1e>
 800a79e:	f001 f8ab 	bl	800b8f8 <abort>
 800a7a2:	4780      	blx	r0
 800a7a4:	e7f3      	b.n	800a78e <_Znwj+0xa>

0800a7a6 <_ZSt17__throw_bad_allocv>:
 800a7a6:	b508      	push	{r3, lr}
 800a7a8:	f001 f8a6 	bl	800b8f8 <abort>

0800a7ac <_ZSt28__throw_bad_array_new_lengthv>:
 800a7ac:	b508      	push	{r3, lr}
 800a7ae:	f001 f8a3 	bl	800b8f8 <abort>

0800a7b2 <_ZSt20__throw_length_errorPKc>:
 800a7b2:	b508      	push	{r3, lr}
 800a7b4:	f001 f8a0 	bl	800b8f8 <abort>

0800a7b8 <_ZdlPv>:
 800a7b8:	f001 b8ae 	b.w	800b918 <free>

0800a7bc <_ZSt15get_new_handlerv>:
 800a7bc:	4b02      	ldr	r3, [pc, #8]	; (800a7c8 <_ZSt15get_new_handlerv+0xc>)
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	f3bf 8f5b 	dmb	ish
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	20000534 	.word	0x20000534
 800a7cc:	00000000 	.word	0x00000000

0800a7d0 <cos>:
 800a7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7d2:	ec53 2b10 	vmov	r2, r3, d0
 800a7d6:	4826      	ldr	r0, [pc, #152]	; (800a870 <cos+0xa0>)
 800a7d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7dc:	4281      	cmp	r1, r0
 800a7de:	dc06      	bgt.n	800a7ee <cos+0x1e>
 800a7e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a868 <cos+0x98>
 800a7e4:	b005      	add	sp, #20
 800a7e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7ea:	f000 b89d 	b.w	800a928 <__kernel_cos>
 800a7ee:	4821      	ldr	r0, [pc, #132]	; (800a874 <cos+0xa4>)
 800a7f0:	4281      	cmp	r1, r0
 800a7f2:	dd09      	ble.n	800a808 <cos+0x38>
 800a7f4:	ee10 0a10 	vmov	r0, s0
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	f7f5 fd6d 	bl	80002d8 <__aeabi_dsub>
 800a7fe:	ec41 0b10 	vmov	d0, r0, r1
 800a802:	b005      	add	sp, #20
 800a804:	f85d fb04 	ldr.w	pc, [sp], #4
 800a808:	4668      	mov	r0, sp
 800a80a:	f000 fa15 	bl	800ac38 <__ieee754_rem_pio2>
 800a80e:	f000 0003 	and.w	r0, r0, #3
 800a812:	2801      	cmp	r0, #1
 800a814:	d00b      	beq.n	800a82e <cos+0x5e>
 800a816:	2802      	cmp	r0, #2
 800a818:	d016      	beq.n	800a848 <cos+0x78>
 800a81a:	b9e0      	cbnz	r0, 800a856 <cos+0x86>
 800a81c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a820:	ed9d 0b00 	vldr	d0, [sp]
 800a824:	f000 f880 	bl	800a928 <__kernel_cos>
 800a828:	ec51 0b10 	vmov	r0, r1, d0
 800a82c:	e7e7      	b.n	800a7fe <cos+0x2e>
 800a82e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a832:	ed9d 0b00 	vldr	d0, [sp]
 800a836:	f000 f93f 	bl	800aab8 <__kernel_sin>
 800a83a:	ec53 2b10 	vmov	r2, r3, d0
 800a83e:	ee10 0a10 	vmov	r0, s0
 800a842:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a846:	e7da      	b.n	800a7fe <cos+0x2e>
 800a848:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a84c:	ed9d 0b00 	vldr	d0, [sp]
 800a850:	f000 f86a 	bl	800a928 <__kernel_cos>
 800a854:	e7f1      	b.n	800a83a <cos+0x6a>
 800a856:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a85a:	ed9d 0b00 	vldr	d0, [sp]
 800a85e:	2001      	movs	r0, #1
 800a860:	f000 f92a 	bl	800aab8 <__kernel_sin>
 800a864:	e7e0      	b.n	800a828 <cos+0x58>
 800a866:	bf00      	nop
	...
 800a870:	3fe921fb 	.word	0x3fe921fb
 800a874:	7fefffff 	.word	0x7fefffff

0800a878 <sin>:
 800a878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a87a:	ec53 2b10 	vmov	r2, r3, d0
 800a87e:	4828      	ldr	r0, [pc, #160]	; (800a920 <sin+0xa8>)
 800a880:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a884:	4281      	cmp	r1, r0
 800a886:	dc07      	bgt.n	800a898 <sin+0x20>
 800a888:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a918 <sin+0xa0>
 800a88c:	2000      	movs	r0, #0
 800a88e:	b005      	add	sp, #20
 800a890:	f85d eb04 	ldr.w	lr, [sp], #4
 800a894:	f000 b910 	b.w	800aab8 <__kernel_sin>
 800a898:	4822      	ldr	r0, [pc, #136]	; (800a924 <sin+0xac>)
 800a89a:	4281      	cmp	r1, r0
 800a89c:	dd09      	ble.n	800a8b2 <sin+0x3a>
 800a89e:	ee10 0a10 	vmov	r0, s0
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	f7f5 fd18 	bl	80002d8 <__aeabi_dsub>
 800a8a8:	ec41 0b10 	vmov	d0, r0, r1
 800a8ac:	b005      	add	sp, #20
 800a8ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8b2:	4668      	mov	r0, sp
 800a8b4:	f000 f9c0 	bl	800ac38 <__ieee754_rem_pio2>
 800a8b8:	f000 0003 	and.w	r0, r0, #3
 800a8bc:	2801      	cmp	r0, #1
 800a8be:	d00c      	beq.n	800a8da <sin+0x62>
 800a8c0:	2802      	cmp	r0, #2
 800a8c2:	d011      	beq.n	800a8e8 <sin+0x70>
 800a8c4:	b9f0      	cbnz	r0, 800a904 <sin+0x8c>
 800a8c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8ca:	ed9d 0b00 	vldr	d0, [sp]
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	f000 f8f2 	bl	800aab8 <__kernel_sin>
 800a8d4:	ec51 0b10 	vmov	r0, r1, d0
 800a8d8:	e7e6      	b.n	800a8a8 <sin+0x30>
 800a8da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8de:	ed9d 0b00 	vldr	d0, [sp]
 800a8e2:	f000 f821 	bl	800a928 <__kernel_cos>
 800a8e6:	e7f5      	b.n	800a8d4 <sin+0x5c>
 800a8e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8ec:	ed9d 0b00 	vldr	d0, [sp]
 800a8f0:	2001      	movs	r0, #1
 800a8f2:	f000 f8e1 	bl	800aab8 <__kernel_sin>
 800a8f6:	ec53 2b10 	vmov	r2, r3, d0
 800a8fa:	ee10 0a10 	vmov	r0, s0
 800a8fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a902:	e7d1      	b.n	800a8a8 <sin+0x30>
 800a904:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a908:	ed9d 0b00 	vldr	d0, [sp]
 800a90c:	f000 f80c 	bl	800a928 <__kernel_cos>
 800a910:	e7f1      	b.n	800a8f6 <sin+0x7e>
 800a912:	bf00      	nop
 800a914:	f3af 8000 	nop.w
	...
 800a920:	3fe921fb 	.word	0x3fe921fb
 800a924:	7fefffff 	.word	0x7fefffff

0800a928 <__kernel_cos>:
 800a928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	ec57 6b10 	vmov	r6, r7, d0
 800a930:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a934:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a938:	ed8d 1b00 	vstr	d1, [sp]
 800a93c:	da07      	bge.n	800a94e <__kernel_cos+0x26>
 800a93e:	ee10 0a10 	vmov	r0, s0
 800a942:	4639      	mov	r1, r7
 800a944:	f7f6 f930 	bl	8000ba8 <__aeabi_d2iz>
 800a948:	2800      	cmp	r0, #0
 800a94a:	f000 8088 	beq.w	800aa5e <__kernel_cos+0x136>
 800a94e:	4632      	mov	r2, r6
 800a950:	463b      	mov	r3, r7
 800a952:	4630      	mov	r0, r6
 800a954:	4639      	mov	r1, r7
 800a956:	f7f5 fe77 	bl	8000648 <__aeabi_dmul>
 800a95a:	4b51      	ldr	r3, [pc, #324]	; (800aaa0 <__kernel_cos+0x178>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	4604      	mov	r4, r0
 800a960:	460d      	mov	r5, r1
 800a962:	f7f5 fe71 	bl	8000648 <__aeabi_dmul>
 800a966:	a340      	add	r3, pc, #256	; (adr r3, 800aa68 <__kernel_cos+0x140>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	4682      	mov	sl, r0
 800a96e:	468b      	mov	fp, r1
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f5 fe68 	bl	8000648 <__aeabi_dmul>
 800a978:	a33d      	add	r3, pc, #244	; (adr r3, 800aa70 <__kernel_cos+0x148>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	f7f5 fcad 	bl	80002dc <__adddf3>
 800a982:	4622      	mov	r2, r4
 800a984:	462b      	mov	r3, r5
 800a986:	f7f5 fe5f 	bl	8000648 <__aeabi_dmul>
 800a98a:	a33b      	add	r3, pc, #236	; (adr r3, 800aa78 <__kernel_cos+0x150>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f7f5 fca2 	bl	80002d8 <__aeabi_dsub>
 800a994:	4622      	mov	r2, r4
 800a996:	462b      	mov	r3, r5
 800a998:	f7f5 fe56 	bl	8000648 <__aeabi_dmul>
 800a99c:	a338      	add	r3, pc, #224	; (adr r3, 800aa80 <__kernel_cos+0x158>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	f7f5 fc9b 	bl	80002dc <__adddf3>
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	462b      	mov	r3, r5
 800a9aa:	f7f5 fe4d 	bl	8000648 <__aeabi_dmul>
 800a9ae:	a336      	add	r3, pc, #216	; (adr r3, 800aa88 <__kernel_cos+0x160>)
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	f7f5 fc90 	bl	80002d8 <__aeabi_dsub>
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	462b      	mov	r3, r5
 800a9bc:	f7f5 fe44 	bl	8000648 <__aeabi_dmul>
 800a9c0:	a333      	add	r3, pc, #204	; (adr r3, 800aa90 <__kernel_cos+0x168>)
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	f7f5 fc89 	bl	80002dc <__adddf3>
 800a9ca:	4622      	mov	r2, r4
 800a9cc:	462b      	mov	r3, r5
 800a9ce:	f7f5 fe3b 	bl	8000648 <__aeabi_dmul>
 800a9d2:	4622      	mov	r2, r4
 800a9d4:	462b      	mov	r3, r5
 800a9d6:	f7f5 fe37 	bl	8000648 <__aeabi_dmul>
 800a9da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9de:	4604      	mov	r4, r0
 800a9e0:	460d      	mov	r5, r1
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	f7f5 fe2f 	bl	8000648 <__aeabi_dmul>
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f7f5 fc71 	bl	80002d8 <__aeabi_dsub>
 800a9f6:	4b2b      	ldr	r3, [pc, #172]	; (800aaa4 <__kernel_cos+0x17c>)
 800a9f8:	4598      	cmp	r8, r3
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	460f      	mov	r7, r1
 800a9fe:	dc10      	bgt.n	800aa22 <__kernel_cos+0xfa>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4650      	mov	r0, sl
 800aa06:	4659      	mov	r1, fp
 800aa08:	f7f5 fc66 	bl	80002d8 <__aeabi_dsub>
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4926      	ldr	r1, [pc, #152]	; (800aaa8 <__kernel_cos+0x180>)
 800aa10:	4602      	mov	r2, r0
 800aa12:	2000      	movs	r0, #0
 800aa14:	f7f5 fc60 	bl	80002d8 <__aeabi_dsub>
 800aa18:	ec41 0b10 	vmov	d0, r0, r1
 800aa1c:	b003      	add	sp, #12
 800aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa22:	4b22      	ldr	r3, [pc, #136]	; (800aaac <__kernel_cos+0x184>)
 800aa24:	4920      	ldr	r1, [pc, #128]	; (800aaa8 <__kernel_cos+0x180>)
 800aa26:	4598      	cmp	r8, r3
 800aa28:	bfcc      	ite	gt
 800aa2a:	4d21      	ldrgt	r5, [pc, #132]	; (800aab0 <__kernel_cos+0x188>)
 800aa2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800aa30:	2400      	movs	r4, #0
 800aa32:	4622      	mov	r2, r4
 800aa34:	462b      	mov	r3, r5
 800aa36:	2000      	movs	r0, #0
 800aa38:	f7f5 fc4e 	bl	80002d8 <__aeabi_dsub>
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	4680      	mov	r8, r0
 800aa40:	4689      	mov	r9, r1
 800aa42:	462b      	mov	r3, r5
 800aa44:	4650      	mov	r0, sl
 800aa46:	4659      	mov	r1, fp
 800aa48:	f7f5 fc46 	bl	80002d8 <__aeabi_dsub>
 800aa4c:	4632      	mov	r2, r6
 800aa4e:	463b      	mov	r3, r7
 800aa50:	f7f5 fc42 	bl	80002d8 <__aeabi_dsub>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4640      	mov	r0, r8
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	e7da      	b.n	800aa14 <__kernel_cos+0xec>
 800aa5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800aa98 <__kernel_cos+0x170>
 800aa62:	e7db      	b.n	800aa1c <__kernel_cos+0xf4>
 800aa64:	f3af 8000 	nop.w
 800aa68:	be8838d4 	.word	0xbe8838d4
 800aa6c:	bda8fae9 	.word	0xbda8fae9
 800aa70:	bdb4b1c4 	.word	0xbdb4b1c4
 800aa74:	3e21ee9e 	.word	0x3e21ee9e
 800aa78:	809c52ad 	.word	0x809c52ad
 800aa7c:	3e927e4f 	.word	0x3e927e4f
 800aa80:	19cb1590 	.word	0x19cb1590
 800aa84:	3efa01a0 	.word	0x3efa01a0
 800aa88:	16c15177 	.word	0x16c15177
 800aa8c:	3f56c16c 	.word	0x3f56c16c
 800aa90:	5555554c 	.word	0x5555554c
 800aa94:	3fa55555 	.word	0x3fa55555
 800aa98:	00000000 	.word	0x00000000
 800aa9c:	3ff00000 	.word	0x3ff00000
 800aaa0:	3fe00000 	.word	0x3fe00000
 800aaa4:	3fd33332 	.word	0x3fd33332
 800aaa8:	3ff00000 	.word	0x3ff00000
 800aaac:	3fe90000 	.word	0x3fe90000
 800aab0:	3fd20000 	.word	0x3fd20000
 800aab4:	00000000 	.word	0x00000000

0800aab8 <__kernel_sin>:
 800aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabc:	ed2d 8b04 	vpush	{d8-d9}
 800aac0:	eeb0 8a41 	vmov.f32	s16, s2
 800aac4:	eef0 8a61 	vmov.f32	s17, s3
 800aac8:	ec55 4b10 	vmov	r4, r5, d0
 800aacc:	b083      	sub	sp, #12
 800aace:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aad2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aad6:	9001      	str	r0, [sp, #4]
 800aad8:	da06      	bge.n	800aae8 <__kernel_sin+0x30>
 800aada:	ee10 0a10 	vmov	r0, s0
 800aade:	4629      	mov	r1, r5
 800aae0:	f7f6 f862 	bl	8000ba8 <__aeabi_d2iz>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d051      	beq.n	800ab8c <__kernel_sin+0xd4>
 800aae8:	4622      	mov	r2, r4
 800aaea:	462b      	mov	r3, r5
 800aaec:	4620      	mov	r0, r4
 800aaee:	4629      	mov	r1, r5
 800aaf0:	f7f5 fdaa 	bl	8000648 <__aeabi_dmul>
 800aaf4:	4682      	mov	sl, r0
 800aaf6:	468b      	mov	fp, r1
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4620      	mov	r0, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	f7f5 fda2 	bl	8000648 <__aeabi_dmul>
 800ab04:	a341      	add	r3, pc, #260	; (adr r3, 800ac0c <__kernel_sin+0x154>)
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	4689      	mov	r9, r1
 800ab0e:	4650      	mov	r0, sl
 800ab10:	4659      	mov	r1, fp
 800ab12:	f7f5 fd99 	bl	8000648 <__aeabi_dmul>
 800ab16:	a33f      	add	r3, pc, #252	; (adr r3, 800ac14 <__kernel_sin+0x15c>)
 800ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1c:	f7f5 fbdc 	bl	80002d8 <__aeabi_dsub>
 800ab20:	4652      	mov	r2, sl
 800ab22:	465b      	mov	r3, fp
 800ab24:	f7f5 fd90 	bl	8000648 <__aeabi_dmul>
 800ab28:	a33c      	add	r3, pc, #240	; (adr r3, 800ac1c <__kernel_sin+0x164>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	f7f5 fbd5 	bl	80002dc <__adddf3>
 800ab32:	4652      	mov	r2, sl
 800ab34:	465b      	mov	r3, fp
 800ab36:	f7f5 fd87 	bl	8000648 <__aeabi_dmul>
 800ab3a:	a33a      	add	r3, pc, #232	; (adr r3, 800ac24 <__kernel_sin+0x16c>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fbca 	bl	80002d8 <__aeabi_dsub>
 800ab44:	4652      	mov	r2, sl
 800ab46:	465b      	mov	r3, fp
 800ab48:	f7f5 fd7e 	bl	8000648 <__aeabi_dmul>
 800ab4c:	a337      	add	r3, pc, #220	; (adr r3, 800ac2c <__kernel_sin+0x174>)
 800ab4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab52:	f7f5 fbc3 	bl	80002dc <__adddf3>
 800ab56:	9b01      	ldr	r3, [sp, #4]
 800ab58:	4606      	mov	r6, r0
 800ab5a:	460f      	mov	r7, r1
 800ab5c:	b9eb      	cbnz	r3, 800ab9a <__kernel_sin+0xe2>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4650      	mov	r0, sl
 800ab64:	4659      	mov	r1, fp
 800ab66:	f7f5 fd6f 	bl	8000648 <__aeabi_dmul>
 800ab6a:	a325      	add	r3, pc, #148	; (adr r3, 800ac00 <__kernel_sin+0x148>)
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	f7f5 fbb2 	bl	80002d8 <__aeabi_dsub>
 800ab74:	4642      	mov	r2, r8
 800ab76:	464b      	mov	r3, r9
 800ab78:	f7f5 fd66 	bl	8000648 <__aeabi_dmul>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4620      	mov	r0, r4
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7f5 fbaa 	bl	80002dc <__adddf3>
 800ab88:	4604      	mov	r4, r0
 800ab8a:	460d      	mov	r5, r1
 800ab8c:	ec45 4b10 	vmov	d0, r4, r5
 800ab90:	b003      	add	sp, #12
 800ab92:	ecbd 8b04 	vpop	{d8-d9}
 800ab96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9a:	4b1b      	ldr	r3, [pc, #108]	; (800ac08 <__kernel_sin+0x150>)
 800ab9c:	ec51 0b18 	vmov	r0, r1, d8
 800aba0:	2200      	movs	r2, #0
 800aba2:	f7f5 fd51 	bl	8000648 <__aeabi_dmul>
 800aba6:	4632      	mov	r2, r6
 800aba8:	ec41 0b19 	vmov	d9, r0, r1
 800abac:	463b      	mov	r3, r7
 800abae:	4640      	mov	r0, r8
 800abb0:	4649      	mov	r1, r9
 800abb2:	f7f5 fd49 	bl	8000648 <__aeabi_dmul>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	ec51 0b19 	vmov	r0, r1, d9
 800abbe:	f7f5 fb8b 	bl	80002d8 <__aeabi_dsub>
 800abc2:	4652      	mov	r2, sl
 800abc4:	465b      	mov	r3, fp
 800abc6:	f7f5 fd3f 	bl	8000648 <__aeabi_dmul>
 800abca:	ec53 2b18 	vmov	r2, r3, d8
 800abce:	f7f5 fb83 	bl	80002d8 <__aeabi_dsub>
 800abd2:	a30b      	add	r3, pc, #44	; (adr r3, 800ac00 <__kernel_sin+0x148>)
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	4606      	mov	r6, r0
 800abda:	460f      	mov	r7, r1
 800abdc:	4640      	mov	r0, r8
 800abde:	4649      	mov	r1, r9
 800abe0:	f7f5 fd32 	bl	8000648 <__aeabi_dmul>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	4630      	mov	r0, r6
 800abea:	4639      	mov	r1, r7
 800abec:	f7f5 fb76 	bl	80002dc <__adddf3>
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	4620      	mov	r0, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	f7f5 fb6e 	bl	80002d8 <__aeabi_dsub>
 800abfc:	e7c4      	b.n	800ab88 <__kernel_sin+0xd0>
 800abfe:	bf00      	nop
 800ac00:	55555549 	.word	0x55555549
 800ac04:	3fc55555 	.word	0x3fc55555
 800ac08:	3fe00000 	.word	0x3fe00000
 800ac0c:	5acfd57c 	.word	0x5acfd57c
 800ac10:	3de5d93a 	.word	0x3de5d93a
 800ac14:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac18:	3e5ae5e6 	.word	0x3e5ae5e6
 800ac1c:	57b1fe7d 	.word	0x57b1fe7d
 800ac20:	3ec71de3 	.word	0x3ec71de3
 800ac24:	19c161d5 	.word	0x19c161d5
 800ac28:	3f2a01a0 	.word	0x3f2a01a0
 800ac2c:	1110f8a6 	.word	0x1110f8a6
 800ac30:	3f811111 	.word	0x3f811111
 800ac34:	00000000 	.word	0x00000000

0800ac38 <__ieee754_rem_pio2>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	ed2d 8b02 	vpush	{d8}
 800ac40:	ec55 4b10 	vmov	r4, r5, d0
 800ac44:	4bca      	ldr	r3, [pc, #808]	; (800af70 <__ieee754_rem_pio2+0x338>)
 800ac46:	b08b      	sub	sp, #44	; 0x2c
 800ac48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ac4c:	4598      	cmp	r8, r3
 800ac4e:	4682      	mov	sl, r0
 800ac50:	9502      	str	r5, [sp, #8]
 800ac52:	dc08      	bgt.n	800ac66 <__ieee754_rem_pio2+0x2e>
 800ac54:	2200      	movs	r2, #0
 800ac56:	2300      	movs	r3, #0
 800ac58:	ed80 0b00 	vstr	d0, [r0]
 800ac5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ac60:	f04f 0b00 	mov.w	fp, #0
 800ac64:	e028      	b.n	800acb8 <__ieee754_rem_pio2+0x80>
 800ac66:	4bc3      	ldr	r3, [pc, #780]	; (800af74 <__ieee754_rem_pio2+0x33c>)
 800ac68:	4598      	cmp	r8, r3
 800ac6a:	dc78      	bgt.n	800ad5e <__ieee754_rem_pio2+0x126>
 800ac6c:	9b02      	ldr	r3, [sp, #8]
 800ac6e:	4ec2      	ldr	r6, [pc, #776]	; (800af78 <__ieee754_rem_pio2+0x340>)
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	ee10 0a10 	vmov	r0, s0
 800ac76:	a3b0      	add	r3, pc, #704	; (adr r3, 800af38 <__ieee754_rem_pio2+0x300>)
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	dd39      	ble.n	800acf4 <__ieee754_rem_pio2+0xbc>
 800ac80:	f7f5 fb2a 	bl	80002d8 <__aeabi_dsub>
 800ac84:	45b0      	cmp	r8, r6
 800ac86:	4604      	mov	r4, r0
 800ac88:	460d      	mov	r5, r1
 800ac8a:	d01b      	beq.n	800acc4 <__ieee754_rem_pio2+0x8c>
 800ac8c:	a3ac      	add	r3, pc, #688	; (adr r3, 800af40 <__ieee754_rem_pio2+0x308>)
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f7f5 fb21 	bl	80002d8 <__aeabi_dsub>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	e9ca 2300 	strd	r2, r3, [sl]
 800ac9e:	4620      	mov	r0, r4
 800aca0:	4629      	mov	r1, r5
 800aca2:	f7f5 fb19 	bl	80002d8 <__aeabi_dsub>
 800aca6:	a3a6      	add	r3, pc, #664	; (adr r3, 800af40 <__ieee754_rem_pio2+0x308>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f7f5 fb14 	bl	80002d8 <__aeabi_dsub>
 800acb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800acb4:	f04f 0b01 	mov.w	fp, #1
 800acb8:	4658      	mov	r0, fp
 800acba:	b00b      	add	sp, #44	; 0x2c
 800acbc:	ecbd 8b02 	vpop	{d8}
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	a3a0      	add	r3, pc, #640	; (adr r3, 800af48 <__ieee754_rem_pio2+0x310>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	f7f5 fb05 	bl	80002d8 <__aeabi_dsub>
 800acce:	a3a0      	add	r3, pc, #640	; (adr r3, 800af50 <__ieee754_rem_pio2+0x318>)
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	4604      	mov	r4, r0
 800acd6:	460d      	mov	r5, r1
 800acd8:	f7f5 fafe 	bl	80002d8 <__aeabi_dsub>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	e9ca 2300 	strd	r2, r3, [sl]
 800ace4:	4620      	mov	r0, r4
 800ace6:	4629      	mov	r1, r5
 800ace8:	f7f5 faf6 	bl	80002d8 <__aeabi_dsub>
 800acec:	a398      	add	r3, pc, #608	; (adr r3, 800af50 <__ieee754_rem_pio2+0x318>)
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	e7db      	b.n	800acac <__ieee754_rem_pio2+0x74>
 800acf4:	f7f5 faf2 	bl	80002dc <__adddf3>
 800acf8:	45b0      	cmp	r8, r6
 800acfa:	4604      	mov	r4, r0
 800acfc:	460d      	mov	r5, r1
 800acfe:	d016      	beq.n	800ad2e <__ieee754_rem_pio2+0xf6>
 800ad00:	a38f      	add	r3, pc, #572	; (adr r3, 800af40 <__ieee754_rem_pio2+0x308>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f7f5 fae9 	bl	80002dc <__adddf3>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	e9ca 2300 	strd	r2, r3, [sl]
 800ad12:	4620      	mov	r0, r4
 800ad14:	4629      	mov	r1, r5
 800ad16:	f7f5 fadf 	bl	80002d8 <__aeabi_dsub>
 800ad1a:	a389      	add	r3, pc, #548	; (adr r3, 800af40 <__ieee754_rem_pio2+0x308>)
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f7f5 fadc 	bl	80002dc <__adddf3>
 800ad24:	f04f 3bff 	mov.w	fp, #4294967295
 800ad28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad2c:	e7c4      	b.n	800acb8 <__ieee754_rem_pio2+0x80>
 800ad2e:	a386      	add	r3, pc, #536	; (adr r3, 800af48 <__ieee754_rem_pio2+0x310>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f7f5 fad2 	bl	80002dc <__adddf3>
 800ad38:	a385      	add	r3, pc, #532	; (adr r3, 800af50 <__ieee754_rem_pio2+0x318>)
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	4604      	mov	r4, r0
 800ad40:	460d      	mov	r5, r1
 800ad42:	f7f5 facb 	bl	80002dc <__adddf3>
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	e9ca 2300 	strd	r2, r3, [sl]
 800ad4e:	4620      	mov	r0, r4
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7f5 fac1 	bl	80002d8 <__aeabi_dsub>
 800ad56:	a37e      	add	r3, pc, #504	; (adr r3, 800af50 <__ieee754_rem_pio2+0x318>)
 800ad58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5c:	e7e0      	b.n	800ad20 <__ieee754_rem_pio2+0xe8>
 800ad5e:	4b87      	ldr	r3, [pc, #540]	; (800af7c <__ieee754_rem_pio2+0x344>)
 800ad60:	4598      	cmp	r8, r3
 800ad62:	f300 80d8 	bgt.w	800af16 <__ieee754_rem_pio2+0x2de>
 800ad66:	f000 f96d 	bl	800b044 <fabs>
 800ad6a:	ec55 4b10 	vmov	r4, r5, d0
 800ad6e:	ee10 0a10 	vmov	r0, s0
 800ad72:	a379      	add	r3, pc, #484	; (adr r3, 800af58 <__ieee754_rem_pio2+0x320>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	4629      	mov	r1, r5
 800ad7a:	f7f5 fc65 	bl	8000648 <__aeabi_dmul>
 800ad7e:	4b80      	ldr	r3, [pc, #512]	; (800af80 <__ieee754_rem_pio2+0x348>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	f7f5 faab 	bl	80002dc <__adddf3>
 800ad86:	f7f5 ff0f 	bl	8000ba8 <__aeabi_d2iz>
 800ad8a:	4683      	mov	fp, r0
 800ad8c:	f7f5 fbf2 	bl	8000574 <__aeabi_i2d>
 800ad90:	4602      	mov	r2, r0
 800ad92:	460b      	mov	r3, r1
 800ad94:	ec43 2b18 	vmov	d8, r2, r3
 800ad98:	a367      	add	r3, pc, #412	; (adr r3, 800af38 <__ieee754_rem_pio2+0x300>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 fc53 	bl	8000648 <__aeabi_dmul>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fa95 	bl	80002d8 <__aeabi_dsub>
 800adae:	a364      	add	r3, pc, #400	; (adr r3, 800af40 <__ieee754_rem_pio2+0x308>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	ec51 0b18 	vmov	r0, r1, d8
 800adbc:	f7f5 fc44 	bl	8000648 <__aeabi_dmul>
 800adc0:	f1bb 0f1f 	cmp.w	fp, #31
 800adc4:	4604      	mov	r4, r0
 800adc6:	460d      	mov	r5, r1
 800adc8:	dc0d      	bgt.n	800ade6 <__ieee754_rem_pio2+0x1ae>
 800adca:	4b6e      	ldr	r3, [pc, #440]	; (800af84 <__ieee754_rem_pio2+0x34c>)
 800adcc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800add0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add4:	4543      	cmp	r3, r8
 800add6:	d006      	beq.n	800ade6 <__ieee754_rem_pio2+0x1ae>
 800add8:	4622      	mov	r2, r4
 800adda:	462b      	mov	r3, r5
 800addc:	4630      	mov	r0, r6
 800adde:	4639      	mov	r1, r7
 800ade0:	f7f5 fa7a 	bl	80002d8 <__aeabi_dsub>
 800ade4:	e00e      	b.n	800ae04 <__ieee754_rem_pio2+0x1cc>
 800ade6:	462b      	mov	r3, r5
 800ade8:	4622      	mov	r2, r4
 800adea:	4630      	mov	r0, r6
 800adec:	4639      	mov	r1, r7
 800adee:	f7f5 fa73 	bl	80002d8 <__aeabi_dsub>
 800adf2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800adf6:	9303      	str	r3, [sp, #12]
 800adf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800adfc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ae00:	2b10      	cmp	r3, #16
 800ae02:	dc02      	bgt.n	800ae0a <__ieee754_rem_pio2+0x1d2>
 800ae04:	e9ca 0100 	strd	r0, r1, [sl]
 800ae08:	e039      	b.n	800ae7e <__ieee754_rem_pio2+0x246>
 800ae0a:	a34f      	add	r3, pc, #316	; (adr r3, 800af48 <__ieee754_rem_pio2+0x310>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	ec51 0b18 	vmov	r0, r1, d8
 800ae14:	f7f5 fc18 	bl	8000648 <__aeabi_dmul>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4630      	mov	r0, r6
 800ae22:	4639      	mov	r1, r7
 800ae24:	f7f5 fa58 	bl	80002d8 <__aeabi_dsub>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4680      	mov	r8, r0
 800ae2e:	4689      	mov	r9, r1
 800ae30:	4630      	mov	r0, r6
 800ae32:	4639      	mov	r1, r7
 800ae34:	f7f5 fa50 	bl	80002d8 <__aeabi_dsub>
 800ae38:	4622      	mov	r2, r4
 800ae3a:	462b      	mov	r3, r5
 800ae3c:	f7f5 fa4c 	bl	80002d8 <__aeabi_dsub>
 800ae40:	a343      	add	r3, pc, #268	; (adr r3, 800af50 <__ieee754_rem_pio2+0x318>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	4604      	mov	r4, r0
 800ae48:	460d      	mov	r5, r1
 800ae4a:	ec51 0b18 	vmov	r0, r1, d8
 800ae4e:	f7f5 fbfb 	bl	8000648 <__aeabi_dmul>
 800ae52:	4622      	mov	r2, r4
 800ae54:	462b      	mov	r3, r5
 800ae56:	f7f5 fa3f 	bl	80002d8 <__aeabi_dsub>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4604      	mov	r4, r0
 800ae60:	460d      	mov	r5, r1
 800ae62:	4640      	mov	r0, r8
 800ae64:	4649      	mov	r1, r9
 800ae66:	f7f5 fa37 	bl	80002d8 <__aeabi_dsub>
 800ae6a:	9a03      	ldr	r2, [sp, #12]
 800ae6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	2b31      	cmp	r3, #49	; 0x31
 800ae74:	dc24      	bgt.n	800aec0 <__ieee754_rem_pio2+0x288>
 800ae76:	e9ca 0100 	strd	r0, r1, [sl]
 800ae7a:	4646      	mov	r6, r8
 800ae7c:	464f      	mov	r7, r9
 800ae7e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae82:	4630      	mov	r0, r6
 800ae84:	4642      	mov	r2, r8
 800ae86:	464b      	mov	r3, r9
 800ae88:	4639      	mov	r1, r7
 800ae8a:	f7f5 fa25 	bl	80002d8 <__aeabi_dsub>
 800ae8e:	462b      	mov	r3, r5
 800ae90:	4622      	mov	r2, r4
 800ae92:	f7f5 fa21 	bl	80002d8 <__aeabi_dsub>
 800ae96:	9b02      	ldr	r3, [sp, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae9e:	f6bf af0b 	bge.w	800acb8 <__ieee754_rem_pio2+0x80>
 800aea2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aea6:	f8ca 3004 	str.w	r3, [sl, #4]
 800aeaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aeae:	f8ca 8000 	str.w	r8, [sl]
 800aeb2:	f8ca 0008 	str.w	r0, [sl, #8]
 800aeb6:	f8ca 300c 	str.w	r3, [sl, #12]
 800aeba:	f1cb 0b00 	rsb	fp, fp, #0
 800aebe:	e6fb      	b.n	800acb8 <__ieee754_rem_pio2+0x80>
 800aec0:	a327      	add	r3, pc, #156	; (adr r3, 800af60 <__ieee754_rem_pio2+0x328>)
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	ec51 0b18 	vmov	r0, r1, d8
 800aeca:	f7f5 fbbd 	bl	8000648 <__aeabi_dmul>
 800aece:	4604      	mov	r4, r0
 800aed0:	460d      	mov	r5, r1
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4640      	mov	r0, r8
 800aed8:	4649      	mov	r1, r9
 800aeda:	f7f5 f9fd 	bl	80002d8 <__aeabi_dsub>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4606      	mov	r6, r0
 800aee4:	460f      	mov	r7, r1
 800aee6:	4640      	mov	r0, r8
 800aee8:	4649      	mov	r1, r9
 800aeea:	f7f5 f9f5 	bl	80002d8 <__aeabi_dsub>
 800aeee:	4622      	mov	r2, r4
 800aef0:	462b      	mov	r3, r5
 800aef2:	f7f5 f9f1 	bl	80002d8 <__aeabi_dsub>
 800aef6:	a31c      	add	r3, pc, #112	; (adr r3, 800af68 <__ieee754_rem_pio2+0x330>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	4604      	mov	r4, r0
 800aefe:	460d      	mov	r5, r1
 800af00:	ec51 0b18 	vmov	r0, r1, d8
 800af04:	f7f5 fba0 	bl	8000648 <__aeabi_dmul>
 800af08:	4622      	mov	r2, r4
 800af0a:	462b      	mov	r3, r5
 800af0c:	f7f5 f9e4 	bl	80002d8 <__aeabi_dsub>
 800af10:	4604      	mov	r4, r0
 800af12:	460d      	mov	r5, r1
 800af14:	e760      	b.n	800add8 <__ieee754_rem_pio2+0x1a0>
 800af16:	4b1c      	ldr	r3, [pc, #112]	; (800af88 <__ieee754_rem_pio2+0x350>)
 800af18:	4598      	cmp	r8, r3
 800af1a:	dd37      	ble.n	800af8c <__ieee754_rem_pio2+0x354>
 800af1c:	ee10 2a10 	vmov	r2, s0
 800af20:	462b      	mov	r3, r5
 800af22:	4620      	mov	r0, r4
 800af24:	4629      	mov	r1, r5
 800af26:	f7f5 f9d7 	bl	80002d8 <__aeabi_dsub>
 800af2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af2e:	e9ca 0100 	strd	r0, r1, [sl]
 800af32:	e695      	b.n	800ac60 <__ieee754_rem_pio2+0x28>
 800af34:	f3af 8000 	nop.w
 800af38:	54400000 	.word	0x54400000
 800af3c:	3ff921fb 	.word	0x3ff921fb
 800af40:	1a626331 	.word	0x1a626331
 800af44:	3dd0b461 	.word	0x3dd0b461
 800af48:	1a600000 	.word	0x1a600000
 800af4c:	3dd0b461 	.word	0x3dd0b461
 800af50:	2e037073 	.word	0x2e037073
 800af54:	3ba3198a 	.word	0x3ba3198a
 800af58:	6dc9c883 	.word	0x6dc9c883
 800af5c:	3fe45f30 	.word	0x3fe45f30
 800af60:	2e000000 	.word	0x2e000000
 800af64:	3ba3198a 	.word	0x3ba3198a
 800af68:	252049c1 	.word	0x252049c1
 800af6c:	397b839a 	.word	0x397b839a
 800af70:	3fe921fb 	.word	0x3fe921fb
 800af74:	4002d97b 	.word	0x4002d97b
 800af78:	3ff921fb 	.word	0x3ff921fb
 800af7c:	413921fb 	.word	0x413921fb
 800af80:	3fe00000 	.word	0x3fe00000
 800af84:	080101a0 	.word	0x080101a0
 800af88:	7fefffff 	.word	0x7fefffff
 800af8c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800af90:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800af94:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800af98:	4620      	mov	r0, r4
 800af9a:	460d      	mov	r5, r1
 800af9c:	f7f5 fe04 	bl	8000ba8 <__aeabi_d2iz>
 800afa0:	f7f5 fae8 	bl	8000574 <__aeabi_i2d>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4620      	mov	r0, r4
 800afaa:	4629      	mov	r1, r5
 800afac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afb0:	f7f5 f992 	bl	80002d8 <__aeabi_dsub>
 800afb4:	4b21      	ldr	r3, [pc, #132]	; (800b03c <__ieee754_rem_pio2+0x404>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	f7f5 fb46 	bl	8000648 <__aeabi_dmul>
 800afbc:	460d      	mov	r5, r1
 800afbe:	4604      	mov	r4, r0
 800afc0:	f7f5 fdf2 	bl	8000ba8 <__aeabi_d2iz>
 800afc4:	f7f5 fad6 	bl	8000574 <__aeabi_i2d>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4620      	mov	r0, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800afd4:	f7f5 f980 	bl	80002d8 <__aeabi_dsub>
 800afd8:	4b18      	ldr	r3, [pc, #96]	; (800b03c <__ieee754_rem_pio2+0x404>)
 800afda:	2200      	movs	r2, #0
 800afdc:	f7f5 fb34 	bl	8000648 <__aeabi_dmul>
 800afe0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afe4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800afe8:	2703      	movs	r7, #3
 800afea:	2400      	movs	r4, #0
 800afec:	2500      	movs	r5, #0
 800afee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800aff2:	4622      	mov	r2, r4
 800aff4:	462b      	mov	r3, r5
 800aff6:	46b9      	mov	r9, r7
 800aff8:	3f01      	subs	r7, #1
 800affa:	f7f5 fd8d 	bl	8000b18 <__aeabi_dcmpeq>
 800affe:	2800      	cmp	r0, #0
 800b000:	d1f5      	bne.n	800afee <__ieee754_rem_pio2+0x3b6>
 800b002:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <__ieee754_rem_pio2+0x408>)
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	2302      	movs	r3, #2
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4632      	mov	r2, r6
 800b00c:	464b      	mov	r3, r9
 800b00e:	4651      	mov	r1, sl
 800b010:	a804      	add	r0, sp, #16
 800b012:	f000 f821 	bl	800b058 <__kernel_rem_pio2>
 800b016:	9b02      	ldr	r3, [sp, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	4683      	mov	fp, r0
 800b01c:	f6bf ae4c 	bge.w	800acb8 <__ieee754_rem_pio2+0x80>
 800b020:	e9da 2100 	ldrd	r2, r1, [sl]
 800b024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b028:	e9ca 2300 	strd	r2, r3, [sl]
 800b02c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b030:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b034:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b038:	e73f      	b.n	800aeba <__ieee754_rem_pio2+0x282>
 800b03a:	bf00      	nop
 800b03c:	41700000 	.word	0x41700000
 800b040:	08010220 	.word	0x08010220

0800b044 <fabs>:
 800b044:	ec51 0b10 	vmov	r0, r1, d0
 800b048:	ee10 2a10 	vmov	r2, s0
 800b04c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b050:	ec43 2b10 	vmov	d0, r2, r3
 800b054:	4770      	bx	lr
	...

0800b058 <__kernel_rem_pio2>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	ed2d 8b02 	vpush	{d8}
 800b060:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b064:	f112 0f14 	cmn.w	r2, #20
 800b068:	9306      	str	r3, [sp, #24]
 800b06a:	9104      	str	r1, [sp, #16]
 800b06c:	4bc2      	ldr	r3, [pc, #776]	; (800b378 <__kernel_rem_pio2+0x320>)
 800b06e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b070:	9009      	str	r0, [sp, #36]	; 0x24
 800b072:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	9b06      	ldr	r3, [sp, #24]
 800b07a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b07e:	bfa8      	it	ge
 800b080:	1ed4      	subge	r4, r2, #3
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	bfb2      	itee	lt
 800b086:	2400      	movlt	r4, #0
 800b088:	2318      	movge	r3, #24
 800b08a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b08e:	f06f 0317 	mvn.w	r3, #23
 800b092:	fb04 3303 	mla	r3, r4, r3, r3
 800b096:	eb03 0a02 	add.w	sl, r3, r2
 800b09a:	9b00      	ldr	r3, [sp, #0]
 800b09c:	9a05      	ldr	r2, [sp, #20]
 800b09e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800b368 <__kernel_rem_pio2+0x310>
 800b0a2:	eb03 0802 	add.w	r8, r3, r2
 800b0a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b0a8:	1aa7      	subs	r7, r4, r2
 800b0aa:	ae20      	add	r6, sp, #128	; 0x80
 800b0ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b0b0:	2500      	movs	r5, #0
 800b0b2:	4545      	cmp	r5, r8
 800b0b4:	dd13      	ble.n	800b0de <__kernel_rem_pio2+0x86>
 800b0b6:	9b06      	ldr	r3, [sp, #24]
 800b0b8:	aa20      	add	r2, sp, #128	; 0x80
 800b0ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b0be:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b0c2:	f04f 0800 	mov.w	r8, #0
 800b0c6:	9b00      	ldr	r3, [sp, #0]
 800b0c8:	4598      	cmp	r8, r3
 800b0ca:	dc31      	bgt.n	800b130 <__kernel_rem_pio2+0xd8>
 800b0cc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800b368 <__kernel_rem_pio2+0x310>
 800b0d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b0d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b0d8:	462f      	mov	r7, r5
 800b0da:	2600      	movs	r6, #0
 800b0dc:	e01b      	b.n	800b116 <__kernel_rem_pio2+0xbe>
 800b0de:	42ef      	cmn	r7, r5
 800b0e0:	d407      	bmi.n	800b0f2 <__kernel_rem_pio2+0x9a>
 800b0e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b0e6:	f7f5 fa45 	bl	8000574 <__aeabi_i2d>
 800b0ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b0ee:	3501      	adds	r5, #1
 800b0f0:	e7df      	b.n	800b0b2 <__kernel_rem_pio2+0x5a>
 800b0f2:	ec51 0b18 	vmov	r0, r1, d8
 800b0f6:	e7f8      	b.n	800b0ea <__kernel_rem_pio2+0x92>
 800b0f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b100:	f7f5 faa2 	bl	8000648 <__aeabi_dmul>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b10c:	f7f5 f8e6 	bl	80002dc <__adddf3>
 800b110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b114:	3601      	adds	r6, #1
 800b116:	9b05      	ldr	r3, [sp, #20]
 800b118:	429e      	cmp	r6, r3
 800b11a:	f1a7 0708 	sub.w	r7, r7, #8
 800b11e:	ddeb      	ble.n	800b0f8 <__kernel_rem_pio2+0xa0>
 800b120:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b124:	f108 0801 	add.w	r8, r8, #1
 800b128:	ecab 7b02 	vstmia	fp!, {d7}
 800b12c:	3508      	adds	r5, #8
 800b12e:	e7ca      	b.n	800b0c6 <__kernel_rem_pio2+0x6e>
 800b130:	9b00      	ldr	r3, [sp, #0]
 800b132:	aa0c      	add	r2, sp, #48	; 0x30
 800b134:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b138:	930b      	str	r3, [sp, #44]	; 0x2c
 800b13a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b13c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b140:	9c00      	ldr	r4, [sp, #0]
 800b142:	930a      	str	r3, [sp, #40]	; 0x28
 800b144:	00e3      	lsls	r3, r4, #3
 800b146:	9308      	str	r3, [sp, #32]
 800b148:	ab98      	add	r3, sp, #608	; 0x260
 800b14a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b14e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b152:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800b156:	ab70      	add	r3, sp, #448	; 0x1c0
 800b158:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b15c:	46c3      	mov	fp, r8
 800b15e:	46a1      	mov	r9, r4
 800b160:	f1b9 0f00 	cmp.w	r9, #0
 800b164:	f1a5 0508 	sub.w	r5, r5, #8
 800b168:	dc77      	bgt.n	800b25a <__kernel_rem_pio2+0x202>
 800b16a:	ec47 6b10 	vmov	d0, r6, r7
 800b16e:	4650      	mov	r0, sl
 800b170:	f000 fac2 	bl	800b6f8 <scalbn>
 800b174:	ec57 6b10 	vmov	r6, r7, d0
 800b178:	2200      	movs	r2, #0
 800b17a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b17e:	ee10 0a10 	vmov	r0, s0
 800b182:	4639      	mov	r1, r7
 800b184:	f7f5 fa60 	bl	8000648 <__aeabi_dmul>
 800b188:	ec41 0b10 	vmov	d0, r0, r1
 800b18c:	f000 fb34 	bl	800b7f8 <floor>
 800b190:	4b7a      	ldr	r3, [pc, #488]	; (800b37c <__kernel_rem_pio2+0x324>)
 800b192:	ec51 0b10 	vmov	r0, r1, d0
 800b196:	2200      	movs	r2, #0
 800b198:	f7f5 fa56 	bl	8000648 <__aeabi_dmul>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	f7f5 f898 	bl	80002d8 <__aeabi_dsub>
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	f7f5 fcfc 	bl	8000ba8 <__aeabi_d2iz>
 800b1b0:	9002      	str	r0, [sp, #8]
 800b1b2:	f7f5 f9df 	bl	8000574 <__aeabi_i2d>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	4639      	mov	r1, r7
 800b1be:	f7f5 f88b 	bl	80002d8 <__aeabi_dsub>
 800b1c2:	f1ba 0f00 	cmp.w	sl, #0
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	460f      	mov	r7, r1
 800b1ca:	dd6d      	ble.n	800b2a8 <__kernel_rem_pio2+0x250>
 800b1cc:	1e61      	subs	r1, r4, #1
 800b1ce:	ab0c      	add	r3, sp, #48	; 0x30
 800b1d0:	9d02      	ldr	r5, [sp, #8]
 800b1d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1d6:	f1ca 0018 	rsb	r0, sl, #24
 800b1da:	fa43 f200 	asr.w	r2, r3, r0
 800b1de:	4415      	add	r5, r2
 800b1e0:	4082      	lsls	r2, r0
 800b1e2:	1a9b      	subs	r3, r3, r2
 800b1e4:	aa0c      	add	r2, sp, #48	; 0x30
 800b1e6:	9502      	str	r5, [sp, #8]
 800b1e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b1ec:	f1ca 0217 	rsb	r2, sl, #23
 800b1f0:	fa43 fb02 	asr.w	fp, r3, r2
 800b1f4:	f1bb 0f00 	cmp.w	fp, #0
 800b1f8:	dd65      	ble.n	800b2c6 <__kernel_rem_pio2+0x26e>
 800b1fa:	9b02      	ldr	r3, [sp, #8]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	3301      	adds	r3, #1
 800b200:	9302      	str	r3, [sp, #8]
 800b202:	4615      	mov	r5, r2
 800b204:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b208:	4294      	cmp	r4, r2
 800b20a:	f300 809f 	bgt.w	800b34c <__kernel_rem_pio2+0x2f4>
 800b20e:	f1ba 0f00 	cmp.w	sl, #0
 800b212:	dd07      	ble.n	800b224 <__kernel_rem_pio2+0x1cc>
 800b214:	f1ba 0f01 	cmp.w	sl, #1
 800b218:	f000 80c1 	beq.w	800b39e <__kernel_rem_pio2+0x346>
 800b21c:	f1ba 0f02 	cmp.w	sl, #2
 800b220:	f000 80c7 	beq.w	800b3b2 <__kernel_rem_pio2+0x35a>
 800b224:	f1bb 0f02 	cmp.w	fp, #2
 800b228:	d14d      	bne.n	800b2c6 <__kernel_rem_pio2+0x26e>
 800b22a:	4632      	mov	r2, r6
 800b22c:	463b      	mov	r3, r7
 800b22e:	4954      	ldr	r1, [pc, #336]	; (800b380 <__kernel_rem_pio2+0x328>)
 800b230:	2000      	movs	r0, #0
 800b232:	f7f5 f851 	bl	80002d8 <__aeabi_dsub>
 800b236:	4606      	mov	r6, r0
 800b238:	460f      	mov	r7, r1
 800b23a:	2d00      	cmp	r5, #0
 800b23c:	d043      	beq.n	800b2c6 <__kernel_rem_pio2+0x26e>
 800b23e:	4650      	mov	r0, sl
 800b240:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800b370 <__kernel_rem_pio2+0x318>
 800b244:	f000 fa58 	bl	800b6f8 <scalbn>
 800b248:	4630      	mov	r0, r6
 800b24a:	4639      	mov	r1, r7
 800b24c:	ec53 2b10 	vmov	r2, r3, d0
 800b250:	f7f5 f842 	bl	80002d8 <__aeabi_dsub>
 800b254:	4606      	mov	r6, r0
 800b256:	460f      	mov	r7, r1
 800b258:	e035      	b.n	800b2c6 <__kernel_rem_pio2+0x26e>
 800b25a:	4b4a      	ldr	r3, [pc, #296]	; (800b384 <__kernel_rem_pio2+0x32c>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	4630      	mov	r0, r6
 800b260:	4639      	mov	r1, r7
 800b262:	f7f5 f9f1 	bl	8000648 <__aeabi_dmul>
 800b266:	f7f5 fc9f 	bl	8000ba8 <__aeabi_d2iz>
 800b26a:	f7f5 f983 	bl	8000574 <__aeabi_i2d>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	ec43 2b18 	vmov	d8, r2, r3
 800b276:	4b44      	ldr	r3, [pc, #272]	; (800b388 <__kernel_rem_pio2+0x330>)
 800b278:	2200      	movs	r2, #0
 800b27a:	f7f5 f9e5 	bl	8000648 <__aeabi_dmul>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4630      	mov	r0, r6
 800b284:	4639      	mov	r1, r7
 800b286:	f7f5 f827 	bl	80002d8 <__aeabi_dsub>
 800b28a:	f7f5 fc8d 	bl	8000ba8 <__aeabi_d2iz>
 800b28e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b292:	f84b 0b04 	str.w	r0, [fp], #4
 800b296:	ec51 0b18 	vmov	r0, r1, d8
 800b29a:	f7f5 f81f 	bl	80002dc <__adddf3>
 800b29e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460f      	mov	r7, r1
 800b2a6:	e75b      	b.n	800b160 <__kernel_rem_pio2+0x108>
 800b2a8:	d106      	bne.n	800b2b8 <__kernel_rem_pio2+0x260>
 800b2aa:	1e63      	subs	r3, r4, #1
 800b2ac:	aa0c      	add	r2, sp, #48	; 0x30
 800b2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2b2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800b2b6:	e79d      	b.n	800b1f4 <__kernel_rem_pio2+0x19c>
 800b2b8:	4b34      	ldr	r3, [pc, #208]	; (800b38c <__kernel_rem_pio2+0x334>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f7f5 fc4a 	bl	8000b54 <__aeabi_dcmpge>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d140      	bne.n	800b346 <__kernel_rem_pio2+0x2ee>
 800b2c4:	4683      	mov	fp, r0
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	f7f5 fc23 	bl	8000b18 <__aeabi_dcmpeq>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	f000 80c1 	beq.w	800b45a <__kernel_rem_pio2+0x402>
 800b2d8:	1e65      	subs	r5, r4, #1
 800b2da:	462b      	mov	r3, r5
 800b2dc:	2200      	movs	r2, #0
 800b2de:	9900      	ldr	r1, [sp, #0]
 800b2e0:	428b      	cmp	r3, r1
 800b2e2:	da6d      	bge.n	800b3c0 <__kernel_rem_pio2+0x368>
 800b2e4:	2a00      	cmp	r2, #0
 800b2e6:	f000 808a 	beq.w	800b3fe <__kernel_rem_pio2+0x3a6>
 800b2ea:	ab0c      	add	r3, sp, #48	; 0x30
 800b2ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800b2f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 80ae 	beq.w	800b456 <__kernel_rem_pio2+0x3fe>
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800b370 <__kernel_rem_pio2+0x318>
 800b300:	f000 f9fa 	bl	800b6f8 <scalbn>
 800b304:	1c6b      	adds	r3, r5, #1
 800b306:	00da      	lsls	r2, r3, #3
 800b308:	9205      	str	r2, [sp, #20]
 800b30a:	ec57 6b10 	vmov	r6, r7, d0
 800b30e:	aa70      	add	r2, sp, #448	; 0x1c0
 800b310:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800b384 <__kernel_rem_pio2+0x32c>
 800b314:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800b318:	462c      	mov	r4, r5
 800b31a:	f04f 0800 	mov.w	r8, #0
 800b31e:	2c00      	cmp	r4, #0
 800b320:	f280 80d4 	bge.w	800b4cc <__kernel_rem_pio2+0x474>
 800b324:	462c      	mov	r4, r5
 800b326:	2c00      	cmp	r4, #0
 800b328:	f2c0 8102 	blt.w	800b530 <__kernel_rem_pio2+0x4d8>
 800b32c:	4b18      	ldr	r3, [pc, #96]	; (800b390 <__kernel_rem_pio2+0x338>)
 800b32e:	461e      	mov	r6, r3
 800b330:	ab70      	add	r3, sp, #448	; 0x1c0
 800b332:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800b336:	1b2b      	subs	r3, r5, r4
 800b338:	f04f 0900 	mov.w	r9, #0
 800b33c:	f04f 0a00 	mov.w	sl, #0
 800b340:	2700      	movs	r7, #0
 800b342:	9306      	str	r3, [sp, #24]
 800b344:	e0e6      	b.n	800b514 <__kernel_rem_pio2+0x4bc>
 800b346:	f04f 0b02 	mov.w	fp, #2
 800b34a:	e756      	b.n	800b1fa <__kernel_rem_pio2+0x1a2>
 800b34c:	f8d8 3000 	ldr.w	r3, [r8]
 800b350:	bb05      	cbnz	r5, 800b394 <__kernel_rem_pio2+0x33c>
 800b352:	b123      	cbz	r3, 800b35e <__kernel_rem_pio2+0x306>
 800b354:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b358:	f8c8 3000 	str.w	r3, [r8]
 800b35c:	2301      	movs	r3, #1
 800b35e:	3201      	adds	r2, #1
 800b360:	f108 0804 	add.w	r8, r8, #4
 800b364:	461d      	mov	r5, r3
 800b366:	e74f      	b.n	800b208 <__kernel_rem_pio2+0x1b0>
	...
 800b374:	3ff00000 	.word	0x3ff00000
 800b378:	08010368 	.word	0x08010368
 800b37c:	40200000 	.word	0x40200000
 800b380:	3ff00000 	.word	0x3ff00000
 800b384:	3e700000 	.word	0x3e700000
 800b388:	41700000 	.word	0x41700000
 800b38c:	3fe00000 	.word	0x3fe00000
 800b390:	08010328 	.word	0x08010328
 800b394:	1acb      	subs	r3, r1, r3
 800b396:	f8c8 3000 	str.w	r3, [r8]
 800b39a:	462b      	mov	r3, r5
 800b39c:	e7df      	b.n	800b35e <__kernel_rem_pio2+0x306>
 800b39e:	1e62      	subs	r2, r4, #1
 800b3a0:	ab0c      	add	r3, sp, #48	; 0x30
 800b3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b3aa:	a90c      	add	r1, sp, #48	; 0x30
 800b3ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b3b0:	e738      	b.n	800b224 <__kernel_rem_pio2+0x1cc>
 800b3b2:	1e62      	subs	r2, r4, #1
 800b3b4:	ab0c      	add	r3, sp, #48	; 0x30
 800b3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b3be:	e7f4      	b.n	800b3aa <__kernel_rem_pio2+0x352>
 800b3c0:	a90c      	add	r1, sp, #48	; 0x30
 800b3c2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	430a      	orrs	r2, r1
 800b3ca:	e788      	b.n	800b2de <__kernel_rem_pio2+0x286>
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b3d2:	2900      	cmp	r1, #0
 800b3d4:	d0fa      	beq.n	800b3cc <__kernel_rem_pio2+0x374>
 800b3d6:	9a08      	ldr	r2, [sp, #32]
 800b3d8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800b3dc:	446a      	add	r2, sp
 800b3de:	3a98      	subs	r2, #152	; 0x98
 800b3e0:	9208      	str	r2, [sp, #32]
 800b3e2:	9a06      	ldr	r2, [sp, #24]
 800b3e4:	a920      	add	r1, sp, #128	; 0x80
 800b3e6:	18a2      	adds	r2, r4, r2
 800b3e8:	18e3      	adds	r3, r4, r3
 800b3ea:	f104 0801 	add.w	r8, r4, #1
 800b3ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800b3f2:	9302      	str	r3, [sp, #8]
 800b3f4:	9b02      	ldr	r3, [sp, #8]
 800b3f6:	4543      	cmp	r3, r8
 800b3f8:	da04      	bge.n	800b404 <__kernel_rem_pio2+0x3ac>
 800b3fa:	461c      	mov	r4, r3
 800b3fc:	e6a2      	b.n	800b144 <__kernel_rem_pio2+0xec>
 800b3fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b400:	2301      	movs	r3, #1
 800b402:	e7e4      	b.n	800b3ce <__kernel_rem_pio2+0x376>
 800b404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b406:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b40a:	f7f5 f8b3 	bl	8000574 <__aeabi_i2d>
 800b40e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b414:	46ab      	mov	fp, r5
 800b416:	461c      	mov	r4, r3
 800b418:	f04f 0900 	mov.w	r9, #0
 800b41c:	2600      	movs	r6, #0
 800b41e:	2700      	movs	r7, #0
 800b420:	9b05      	ldr	r3, [sp, #20]
 800b422:	4599      	cmp	r9, r3
 800b424:	dd06      	ble.n	800b434 <__kernel_rem_pio2+0x3dc>
 800b426:	9b08      	ldr	r3, [sp, #32]
 800b428:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b42c:	f108 0801 	add.w	r8, r8, #1
 800b430:	9308      	str	r3, [sp, #32]
 800b432:	e7df      	b.n	800b3f4 <__kernel_rem_pio2+0x39c>
 800b434:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b438:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b43c:	f7f5 f904 	bl	8000648 <__aeabi_dmul>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	4630      	mov	r0, r6
 800b446:	4639      	mov	r1, r7
 800b448:	f7f4 ff48 	bl	80002dc <__adddf3>
 800b44c:	f109 0901 	add.w	r9, r9, #1
 800b450:	4606      	mov	r6, r0
 800b452:	460f      	mov	r7, r1
 800b454:	e7e4      	b.n	800b420 <__kernel_rem_pio2+0x3c8>
 800b456:	3d01      	subs	r5, #1
 800b458:	e747      	b.n	800b2ea <__kernel_rem_pio2+0x292>
 800b45a:	ec47 6b10 	vmov	d0, r6, r7
 800b45e:	f1ca 0000 	rsb	r0, sl, #0
 800b462:	f000 f949 	bl	800b6f8 <scalbn>
 800b466:	ec57 6b10 	vmov	r6, r7, d0
 800b46a:	4ba0      	ldr	r3, [pc, #640]	; (800b6ec <__kernel_rem_pio2+0x694>)
 800b46c:	ee10 0a10 	vmov	r0, s0
 800b470:	2200      	movs	r2, #0
 800b472:	4639      	mov	r1, r7
 800b474:	f7f5 fb6e 	bl	8000b54 <__aeabi_dcmpge>
 800b478:	b1f8      	cbz	r0, 800b4ba <__kernel_rem_pio2+0x462>
 800b47a:	4b9d      	ldr	r3, [pc, #628]	; (800b6f0 <__kernel_rem_pio2+0x698>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f5 f8e1 	bl	8000648 <__aeabi_dmul>
 800b486:	f7f5 fb8f 	bl	8000ba8 <__aeabi_d2iz>
 800b48a:	4680      	mov	r8, r0
 800b48c:	f7f5 f872 	bl	8000574 <__aeabi_i2d>
 800b490:	4b96      	ldr	r3, [pc, #600]	; (800b6ec <__kernel_rem_pio2+0x694>)
 800b492:	2200      	movs	r2, #0
 800b494:	f7f5 f8d8 	bl	8000648 <__aeabi_dmul>
 800b498:	460b      	mov	r3, r1
 800b49a:	4602      	mov	r2, r0
 800b49c:	4639      	mov	r1, r7
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7f4 ff1a 	bl	80002d8 <__aeabi_dsub>
 800b4a4:	f7f5 fb80 	bl	8000ba8 <__aeabi_d2iz>
 800b4a8:	1c65      	adds	r5, r4, #1
 800b4aa:	ab0c      	add	r3, sp, #48	; 0x30
 800b4ac:	f10a 0a18 	add.w	sl, sl, #24
 800b4b0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b4b4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b4b8:	e71f      	b.n	800b2fa <__kernel_rem_pio2+0x2a2>
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	4639      	mov	r1, r7
 800b4be:	f7f5 fb73 	bl	8000ba8 <__aeabi_d2iz>
 800b4c2:	ab0c      	add	r3, sp, #48	; 0x30
 800b4c4:	4625      	mov	r5, r4
 800b4c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b4ca:	e716      	b.n	800b2fa <__kernel_rem_pio2+0x2a2>
 800b4cc:	ab0c      	add	r3, sp, #48	; 0x30
 800b4ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b4d2:	f7f5 f84f 	bl	8000574 <__aeabi_i2d>
 800b4d6:	4632      	mov	r2, r6
 800b4d8:	463b      	mov	r3, r7
 800b4da:	f7f5 f8b5 	bl	8000648 <__aeabi_dmul>
 800b4de:	4642      	mov	r2, r8
 800b4e0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b4e4:	464b      	mov	r3, r9
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	f7f5 f8ad 	bl	8000648 <__aeabi_dmul>
 800b4ee:	3c01      	subs	r4, #1
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	460f      	mov	r7, r1
 800b4f4:	e713      	b.n	800b31e <__kernel_rem_pio2+0x2c6>
 800b4f6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800b4fa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800b4fe:	f7f5 f8a3 	bl	8000648 <__aeabi_dmul>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4648      	mov	r0, r9
 800b508:	4651      	mov	r1, sl
 800b50a:	f7f4 fee7 	bl	80002dc <__adddf3>
 800b50e:	3701      	adds	r7, #1
 800b510:	4681      	mov	r9, r0
 800b512:	468a      	mov	sl, r1
 800b514:	9b00      	ldr	r3, [sp, #0]
 800b516:	429f      	cmp	r7, r3
 800b518:	dc02      	bgt.n	800b520 <__kernel_rem_pio2+0x4c8>
 800b51a:	9b06      	ldr	r3, [sp, #24]
 800b51c:	429f      	cmp	r7, r3
 800b51e:	ddea      	ble.n	800b4f6 <__kernel_rem_pio2+0x49e>
 800b520:	9a06      	ldr	r2, [sp, #24]
 800b522:	ab48      	add	r3, sp, #288	; 0x120
 800b524:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800b528:	e9c6 9a00 	strd	r9, sl, [r6]
 800b52c:	3c01      	subs	r4, #1
 800b52e:	e6fa      	b.n	800b326 <__kernel_rem_pio2+0x2ce>
 800b530:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b532:	2b02      	cmp	r3, #2
 800b534:	dc0b      	bgt.n	800b54e <__kernel_rem_pio2+0x4f6>
 800b536:	2b00      	cmp	r3, #0
 800b538:	dc39      	bgt.n	800b5ae <__kernel_rem_pio2+0x556>
 800b53a:	d05d      	beq.n	800b5f8 <__kernel_rem_pio2+0x5a0>
 800b53c:	9b02      	ldr	r3, [sp, #8]
 800b53e:	f003 0007 	and.w	r0, r3, #7
 800b542:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b546:	ecbd 8b02 	vpop	{d8}
 800b54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b550:	2b03      	cmp	r3, #3
 800b552:	d1f3      	bne.n	800b53c <__kernel_rem_pio2+0x4e4>
 800b554:	9b05      	ldr	r3, [sp, #20]
 800b556:	9500      	str	r5, [sp, #0]
 800b558:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b55c:	eb0d 0403 	add.w	r4, sp, r3
 800b560:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800b564:	46a2      	mov	sl, r4
 800b566:	9b00      	ldr	r3, [sp, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f1aa 0a08 	sub.w	sl, sl, #8
 800b56e:	dc69      	bgt.n	800b644 <__kernel_rem_pio2+0x5ec>
 800b570:	46aa      	mov	sl, r5
 800b572:	f1ba 0f01 	cmp.w	sl, #1
 800b576:	f1a4 0408 	sub.w	r4, r4, #8
 800b57a:	f300 8083 	bgt.w	800b684 <__kernel_rem_pio2+0x62c>
 800b57e:	9c05      	ldr	r4, [sp, #20]
 800b580:	ab48      	add	r3, sp, #288	; 0x120
 800b582:	441c      	add	r4, r3
 800b584:	2000      	movs	r0, #0
 800b586:	2100      	movs	r1, #0
 800b588:	2d01      	cmp	r5, #1
 800b58a:	f300 809a 	bgt.w	800b6c2 <__kernel_rem_pio2+0x66a>
 800b58e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800b592:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b596:	f1bb 0f00 	cmp.w	fp, #0
 800b59a:	f040 8098 	bne.w	800b6ce <__kernel_rem_pio2+0x676>
 800b59e:	9b04      	ldr	r3, [sp, #16]
 800b5a0:	e9c3 7800 	strd	r7, r8, [r3]
 800b5a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b5a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b5ac:	e7c6      	b.n	800b53c <__kernel_rem_pio2+0x4e4>
 800b5ae:	9e05      	ldr	r6, [sp, #20]
 800b5b0:	ab48      	add	r3, sp, #288	; 0x120
 800b5b2:	441e      	add	r6, r3
 800b5b4:	462c      	mov	r4, r5
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	2c00      	cmp	r4, #0
 800b5bc:	da33      	bge.n	800b626 <__kernel_rem_pio2+0x5ce>
 800b5be:	f1bb 0f00 	cmp.w	fp, #0
 800b5c2:	d036      	beq.n	800b632 <__kernel_rem_pio2+0x5da>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5ca:	9c04      	ldr	r4, [sp, #16]
 800b5cc:	e9c4 2300 	strd	r2, r3, [r4]
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b5d8:	f7f4 fe7e 	bl	80002d8 <__aeabi_dsub>
 800b5dc:	ae4a      	add	r6, sp, #296	; 0x128
 800b5de:	2401      	movs	r4, #1
 800b5e0:	42a5      	cmp	r5, r4
 800b5e2:	da29      	bge.n	800b638 <__kernel_rem_pio2+0x5e0>
 800b5e4:	f1bb 0f00 	cmp.w	fp, #0
 800b5e8:	d002      	beq.n	800b5f0 <__kernel_rem_pio2+0x598>
 800b5ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	9b04      	ldr	r3, [sp, #16]
 800b5f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b5f6:	e7a1      	b.n	800b53c <__kernel_rem_pio2+0x4e4>
 800b5f8:	9c05      	ldr	r4, [sp, #20]
 800b5fa:	ab48      	add	r3, sp, #288	; 0x120
 800b5fc:	441c      	add	r4, r3
 800b5fe:	2000      	movs	r0, #0
 800b600:	2100      	movs	r1, #0
 800b602:	2d00      	cmp	r5, #0
 800b604:	da09      	bge.n	800b61a <__kernel_rem_pio2+0x5c2>
 800b606:	f1bb 0f00 	cmp.w	fp, #0
 800b60a:	d002      	beq.n	800b612 <__kernel_rem_pio2+0x5ba>
 800b60c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b610:	4619      	mov	r1, r3
 800b612:	9b04      	ldr	r3, [sp, #16]
 800b614:	e9c3 0100 	strd	r0, r1, [r3]
 800b618:	e790      	b.n	800b53c <__kernel_rem_pio2+0x4e4>
 800b61a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b61e:	f7f4 fe5d 	bl	80002dc <__adddf3>
 800b622:	3d01      	subs	r5, #1
 800b624:	e7ed      	b.n	800b602 <__kernel_rem_pio2+0x5aa>
 800b626:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b62a:	f7f4 fe57 	bl	80002dc <__adddf3>
 800b62e:	3c01      	subs	r4, #1
 800b630:	e7c3      	b.n	800b5ba <__kernel_rem_pio2+0x562>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	e7c8      	b.n	800b5ca <__kernel_rem_pio2+0x572>
 800b638:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b63c:	f7f4 fe4e 	bl	80002dc <__adddf3>
 800b640:	3401      	adds	r4, #1
 800b642:	e7cd      	b.n	800b5e0 <__kernel_rem_pio2+0x588>
 800b644:	e9da 8900 	ldrd	r8, r9, [sl]
 800b648:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b64c:	9b00      	ldr	r3, [sp, #0]
 800b64e:	3b01      	subs	r3, #1
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	4632      	mov	r2, r6
 800b654:	463b      	mov	r3, r7
 800b656:	4640      	mov	r0, r8
 800b658:	4649      	mov	r1, r9
 800b65a:	f7f4 fe3f 	bl	80002dc <__adddf3>
 800b65e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	4640      	mov	r0, r8
 800b668:	4649      	mov	r1, r9
 800b66a:	f7f4 fe35 	bl	80002d8 <__aeabi_dsub>
 800b66e:	4632      	mov	r2, r6
 800b670:	463b      	mov	r3, r7
 800b672:	f7f4 fe33 	bl	80002dc <__adddf3>
 800b676:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b67a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b67e:	ed8a 7b00 	vstr	d7, [sl]
 800b682:	e770      	b.n	800b566 <__kernel_rem_pio2+0x50e>
 800b684:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b688:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b68c:	4640      	mov	r0, r8
 800b68e:	4632      	mov	r2, r6
 800b690:	463b      	mov	r3, r7
 800b692:	4649      	mov	r1, r9
 800b694:	f7f4 fe22 	bl	80002dc <__adddf3>
 800b698:	e9cd 0100 	strd	r0, r1, [sp]
 800b69c:	4602      	mov	r2, r0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	f7f4 fe18 	bl	80002d8 <__aeabi_dsub>
 800b6a8:	4632      	mov	r2, r6
 800b6aa:	463b      	mov	r3, r7
 800b6ac:	f7f4 fe16 	bl	80002dc <__adddf3>
 800b6b0:	ed9d 7b00 	vldr	d7, [sp]
 800b6b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b6b8:	ed84 7b00 	vstr	d7, [r4]
 800b6bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6c0:	e757      	b.n	800b572 <__kernel_rem_pio2+0x51a>
 800b6c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b6c6:	f7f4 fe09 	bl	80002dc <__adddf3>
 800b6ca:	3d01      	subs	r5, #1
 800b6cc:	e75c      	b.n	800b588 <__kernel_rem_pio2+0x530>
 800b6ce:	9b04      	ldr	r3, [sp, #16]
 800b6d0:	9a04      	ldr	r2, [sp, #16]
 800b6d2:	601f      	str	r7, [r3, #0]
 800b6d4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b6d8:	605c      	str	r4, [r3, #4]
 800b6da:	609d      	str	r5, [r3, #8]
 800b6dc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b6e0:	60d3      	str	r3, [r2, #12]
 800b6e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6e6:	6110      	str	r0, [r2, #16]
 800b6e8:	6153      	str	r3, [r2, #20]
 800b6ea:	e727      	b.n	800b53c <__kernel_rem_pio2+0x4e4>
 800b6ec:	41700000 	.word	0x41700000
 800b6f0:	3e700000 	.word	0x3e700000
 800b6f4:	00000000 	.word	0x00000000

0800b6f8 <scalbn>:
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	ec55 4b10 	vmov	r4, r5, d0
 800b6fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b702:	4606      	mov	r6, r0
 800b704:	462b      	mov	r3, r5
 800b706:	b999      	cbnz	r1, 800b730 <scalbn+0x38>
 800b708:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b70c:	4323      	orrs	r3, r4
 800b70e:	d03f      	beq.n	800b790 <scalbn+0x98>
 800b710:	4b35      	ldr	r3, [pc, #212]	; (800b7e8 <scalbn+0xf0>)
 800b712:	4629      	mov	r1, r5
 800b714:	ee10 0a10 	vmov	r0, s0
 800b718:	2200      	movs	r2, #0
 800b71a:	f7f4 ff95 	bl	8000648 <__aeabi_dmul>
 800b71e:	4b33      	ldr	r3, [pc, #204]	; (800b7ec <scalbn+0xf4>)
 800b720:	429e      	cmp	r6, r3
 800b722:	4604      	mov	r4, r0
 800b724:	460d      	mov	r5, r1
 800b726:	da10      	bge.n	800b74a <scalbn+0x52>
 800b728:	a327      	add	r3, pc, #156	; (adr r3, 800b7c8 <scalbn+0xd0>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	e01f      	b.n	800b770 <scalbn+0x78>
 800b730:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b734:	4291      	cmp	r1, r2
 800b736:	d10c      	bne.n	800b752 <scalbn+0x5a>
 800b738:	ee10 2a10 	vmov	r2, s0
 800b73c:	4620      	mov	r0, r4
 800b73e:	4629      	mov	r1, r5
 800b740:	f7f4 fdcc 	bl	80002dc <__adddf3>
 800b744:	4604      	mov	r4, r0
 800b746:	460d      	mov	r5, r1
 800b748:	e022      	b.n	800b790 <scalbn+0x98>
 800b74a:	460b      	mov	r3, r1
 800b74c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b750:	3936      	subs	r1, #54	; 0x36
 800b752:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b756:	4296      	cmp	r6, r2
 800b758:	dd0d      	ble.n	800b776 <scalbn+0x7e>
 800b75a:	2d00      	cmp	r5, #0
 800b75c:	a11c      	add	r1, pc, #112	; (adr r1, 800b7d0 <scalbn+0xd8>)
 800b75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b762:	da02      	bge.n	800b76a <scalbn+0x72>
 800b764:	a11c      	add	r1, pc, #112	; (adr r1, 800b7d8 <scalbn+0xe0>)
 800b766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b76a:	a319      	add	r3, pc, #100	; (adr r3, 800b7d0 <scalbn+0xd8>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f7f4 ff6a 	bl	8000648 <__aeabi_dmul>
 800b774:	e7e6      	b.n	800b744 <scalbn+0x4c>
 800b776:	1872      	adds	r2, r6, r1
 800b778:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b77c:	428a      	cmp	r2, r1
 800b77e:	dcec      	bgt.n	800b75a <scalbn+0x62>
 800b780:	2a00      	cmp	r2, #0
 800b782:	dd08      	ble.n	800b796 <scalbn+0x9e>
 800b784:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b788:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b78c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b790:	ec45 4b10 	vmov	d0, r4, r5
 800b794:	bd70      	pop	{r4, r5, r6, pc}
 800b796:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b79a:	da08      	bge.n	800b7ae <scalbn+0xb6>
 800b79c:	2d00      	cmp	r5, #0
 800b79e:	a10a      	add	r1, pc, #40	; (adr r1, 800b7c8 <scalbn+0xd0>)
 800b7a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7a4:	dac0      	bge.n	800b728 <scalbn+0x30>
 800b7a6:	a10e      	add	r1, pc, #56	; (adr r1, 800b7e0 <scalbn+0xe8>)
 800b7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7ac:	e7bc      	b.n	800b728 <scalbn+0x30>
 800b7ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7b2:	3236      	adds	r2, #54	; 0x36
 800b7b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b7bc:	4620      	mov	r0, r4
 800b7be:	4b0c      	ldr	r3, [pc, #48]	; (800b7f0 <scalbn+0xf8>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	e7d5      	b.n	800b770 <scalbn+0x78>
 800b7c4:	f3af 8000 	nop.w
 800b7c8:	c2f8f359 	.word	0xc2f8f359
 800b7cc:	01a56e1f 	.word	0x01a56e1f
 800b7d0:	8800759c 	.word	0x8800759c
 800b7d4:	7e37e43c 	.word	0x7e37e43c
 800b7d8:	8800759c 	.word	0x8800759c
 800b7dc:	fe37e43c 	.word	0xfe37e43c
 800b7e0:	c2f8f359 	.word	0xc2f8f359
 800b7e4:	81a56e1f 	.word	0x81a56e1f
 800b7e8:	43500000 	.word	0x43500000
 800b7ec:	ffff3cb0 	.word	0xffff3cb0
 800b7f0:	3c900000 	.word	0x3c900000
 800b7f4:	00000000 	.word	0x00000000

0800b7f8 <floor>:
 800b7f8:	ec51 0b10 	vmov	r0, r1, d0
 800b7fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b804:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800b808:	2e13      	cmp	r6, #19
 800b80a:	ee10 5a10 	vmov	r5, s0
 800b80e:	ee10 8a10 	vmov	r8, s0
 800b812:	460c      	mov	r4, r1
 800b814:	dc31      	bgt.n	800b87a <floor+0x82>
 800b816:	2e00      	cmp	r6, #0
 800b818:	da14      	bge.n	800b844 <floor+0x4c>
 800b81a:	a333      	add	r3, pc, #204	; (adr r3, 800b8e8 <floor+0xf0>)
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	f7f4 fd5c 	bl	80002dc <__adddf3>
 800b824:	2200      	movs	r2, #0
 800b826:	2300      	movs	r3, #0
 800b828:	f7f5 f99e 	bl	8000b68 <__aeabi_dcmpgt>
 800b82c:	b138      	cbz	r0, 800b83e <floor+0x46>
 800b82e:	2c00      	cmp	r4, #0
 800b830:	da53      	bge.n	800b8da <floor+0xe2>
 800b832:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b836:	4325      	orrs	r5, r4
 800b838:	d052      	beq.n	800b8e0 <floor+0xe8>
 800b83a:	4c2d      	ldr	r4, [pc, #180]	; (800b8f0 <floor+0xf8>)
 800b83c:	2500      	movs	r5, #0
 800b83e:	4621      	mov	r1, r4
 800b840:	4628      	mov	r0, r5
 800b842:	e024      	b.n	800b88e <floor+0x96>
 800b844:	4f2b      	ldr	r7, [pc, #172]	; (800b8f4 <floor+0xfc>)
 800b846:	4137      	asrs	r7, r6
 800b848:	ea01 0307 	and.w	r3, r1, r7
 800b84c:	4303      	orrs	r3, r0
 800b84e:	d01e      	beq.n	800b88e <floor+0x96>
 800b850:	a325      	add	r3, pc, #148	; (adr r3, 800b8e8 <floor+0xf0>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fd41 	bl	80002dc <__adddf3>
 800b85a:	2200      	movs	r2, #0
 800b85c:	2300      	movs	r3, #0
 800b85e:	f7f5 f983 	bl	8000b68 <__aeabi_dcmpgt>
 800b862:	2800      	cmp	r0, #0
 800b864:	d0eb      	beq.n	800b83e <floor+0x46>
 800b866:	2c00      	cmp	r4, #0
 800b868:	bfbe      	ittt	lt
 800b86a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b86e:	4133      	asrlt	r3, r6
 800b870:	18e4      	addlt	r4, r4, r3
 800b872:	ea24 0407 	bic.w	r4, r4, r7
 800b876:	2500      	movs	r5, #0
 800b878:	e7e1      	b.n	800b83e <floor+0x46>
 800b87a:	2e33      	cmp	r6, #51	; 0x33
 800b87c:	dd0b      	ble.n	800b896 <floor+0x9e>
 800b87e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b882:	d104      	bne.n	800b88e <floor+0x96>
 800b884:	ee10 2a10 	vmov	r2, s0
 800b888:	460b      	mov	r3, r1
 800b88a:	f7f4 fd27 	bl	80002dc <__adddf3>
 800b88e:	ec41 0b10 	vmov	d0, r0, r1
 800b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b896:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800b89a:	f04f 37ff 	mov.w	r7, #4294967295
 800b89e:	40df      	lsrs	r7, r3
 800b8a0:	4238      	tst	r0, r7
 800b8a2:	d0f4      	beq.n	800b88e <floor+0x96>
 800b8a4:	a310      	add	r3, pc, #64	; (adr r3, 800b8e8 <floor+0xf0>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	f7f4 fd17 	bl	80002dc <__adddf3>
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f7f5 f959 	bl	8000b68 <__aeabi_dcmpgt>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d0c1      	beq.n	800b83e <floor+0x46>
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	da0a      	bge.n	800b8d4 <floor+0xdc>
 800b8be:	2e14      	cmp	r6, #20
 800b8c0:	d101      	bne.n	800b8c6 <floor+0xce>
 800b8c2:	3401      	adds	r4, #1
 800b8c4:	e006      	b.n	800b8d4 <floor+0xdc>
 800b8c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	40b3      	lsls	r3, r6
 800b8ce:	441d      	add	r5, r3
 800b8d0:	45a8      	cmp	r8, r5
 800b8d2:	d8f6      	bhi.n	800b8c2 <floor+0xca>
 800b8d4:	ea25 0507 	bic.w	r5, r5, r7
 800b8d8:	e7b1      	b.n	800b83e <floor+0x46>
 800b8da:	2500      	movs	r5, #0
 800b8dc:	462c      	mov	r4, r5
 800b8de:	e7ae      	b.n	800b83e <floor+0x46>
 800b8e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b8e4:	e7ab      	b.n	800b83e <floor+0x46>
 800b8e6:	bf00      	nop
 800b8e8:	8800759c 	.word	0x8800759c
 800b8ec:	7e37e43c 	.word	0x7e37e43c
 800b8f0:	bff00000 	.word	0xbff00000
 800b8f4:	000fffff 	.word	0x000fffff

0800b8f8 <abort>:
 800b8f8:	b508      	push	{r3, lr}
 800b8fa:	2006      	movs	r0, #6
 800b8fc:	f001 f8a6 	bl	800ca4c <raise>
 800b900:	2001      	movs	r0, #1
 800b902:	f7f8 fe85 	bl	8004610 <_exit>
	...

0800b908 <malloc>:
 800b908:	4b02      	ldr	r3, [pc, #8]	; (800b914 <malloc+0xc>)
 800b90a:	4601      	mov	r1, r0
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	f000 b82b 	b.w	800b968 <_malloc_r>
 800b912:	bf00      	nop
 800b914:	20000064 	.word	0x20000064

0800b918 <free>:
 800b918:	4b02      	ldr	r3, [pc, #8]	; (800b924 <free+0xc>)
 800b91a:	4601      	mov	r1, r0
 800b91c:	6818      	ldr	r0, [r3, #0]
 800b91e:	f001 bfc9 	b.w	800d8b4 <_free_r>
 800b922:	bf00      	nop
 800b924:	20000064 	.word	0x20000064

0800b928 <sbrk_aligned>:
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	4e0e      	ldr	r6, [pc, #56]	; (800b964 <sbrk_aligned+0x3c>)
 800b92c:	460c      	mov	r4, r1
 800b92e:	6831      	ldr	r1, [r6, #0]
 800b930:	4605      	mov	r5, r0
 800b932:	b911      	cbnz	r1, 800b93a <sbrk_aligned+0x12>
 800b934:	f001 f8de 	bl	800caf4 <_sbrk_r>
 800b938:	6030      	str	r0, [r6, #0]
 800b93a:	4621      	mov	r1, r4
 800b93c:	4628      	mov	r0, r5
 800b93e:	f001 f8d9 	bl	800caf4 <_sbrk_r>
 800b942:	1c43      	adds	r3, r0, #1
 800b944:	d00a      	beq.n	800b95c <sbrk_aligned+0x34>
 800b946:	1cc4      	adds	r4, r0, #3
 800b948:	f024 0403 	bic.w	r4, r4, #3
 800b94c:	42a0      	cmp	r0, r4
 800b94e:	d007      	beq.n	800b960 <sbrk_aligned+0x38>
 800b950:	1a21      	subs	r1, r4, r0
 800b952:	4628      	mov	r0, r5
 800b954:	f001 f8ce 	bl	800caf4 <_sbrk_r>
 800b958:	3001      	adds	r0, #1
 800b95a:	d101      	bne.n	800b960 <sbrk_aligned+0x38>
 800b95c:	f04f 34ff 	mov.w	r4, #4294967295
 800b960:	4620      	mov	r0, r4
 800b962:	bd70      	pop	{r4, r5, r6, pc}
 800b964:	2000053c 	.word	0x2000053c

0800b968 <_malloc_r>:
 800b968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b96c:	1ccd      	adds	r5, r1, #3
 800b96e:	f025 0503 	bic.w	r5, r5, #3
 800b972:	3508      	adds	r5, #8
 800b974:	2d0c      	cmp	r5, #12
 800b976:	bf38      	it	cc
 800b978:	250c      	movcc	r5, #12
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	4607      	mov	r7, r0
 800b97e:	db01      	blt.n	800b984 <_malloc_r+0x1c>
 800b980:	42a9      	cmp	r1, r5
 800b982:	d905      	bls.n	800b990 <_malloc_r+0x28>
 800b984:	230c      	movs	r3, #12
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	2600      	movs	r6, #0
 800b98a:	4630      	mov	r0, r6
 800b98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b990:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba64 <_malloc_r+0xfc>
 800b994:	f000 f868 	bl	800ba68 <__malloc_lock>
 800b998:	f8d8 3000 	ldr.w	r3, [r8]
 800b99c:	461c      	mov	r4, r3
 800b99e:	bb5c      	cbnz	r4, 800b9f8 <_malloc_r+0x90>
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4638      	mov	r0, r7
 800b9a4:	f7ff ffc0 	bl	800b928 <sbrk_aligned>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	d155      	bne.n	800ba5a <_malloc_r+0xf2>
 800b9ae:	f8d8 4000 	ldr.w	r4, [r8]
 800b9b2:	4626      	mov	r6, r4
 800b9b4:	2e00      	cmp	r6, #0
 800b9b6:	d145      	bne.n	800ba44 <_malloc_r+0xdc>
 800b9b8:	2c00      	cmp	r4, #0
 800b9ba:	d048      	beq.n	800ba4e <_malloc_r+0xe6>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	eb04 0903 	add.w	r9, r4, r3
 800b9c6:	f001 f895 	bl	800caf4 <_sbrk_r>
 800b9ca:	4581      	cmp	r9, r0
 800b9cc:	d13f      	bne.n	800ba4e <_malloc_r+0xe6>
 800b9ce:	6821      	ldr	r1, [r4, #0]
 800b9d0:	1a6d      	subs	r5, r5, r1
 800b9d2:	4629      	mov	r1, r5
 800b9d4:	4638      	mov	r0, r7
 800b9d6:	f7ff ffa7 	bl	800b928 <sbrk_aligned>
 800b9da:	3001      	adds	r0, #1
 800b9dc:	d037      	beq.n	800ba4e <_malloc_r+0xe6>
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	442b      	add	r3, r5
 800b9e2:	6023      	str	r3, [r4, #0]
 800b9e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d038      	beq.n	800ba5e <_malloc_r+0xf6>
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	42a2      	cmp	r2, r4
 800b9f0:	d12b      	bne.n	800ba4a <_malloc_r+0xe2>
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	605a      	str	r2, [r3, #4]
 800b9f6:	e00f      	b.n	800ba18 <_malloc_r+0xb0>
 800b9f8:	6822      	ldr	r2, [r4, #0]
 800b9fa:	1b52      	subs	r2, r2, r5
 800b9fc:	d41f      	bmi.n	800ba3e <_malloc_r+0xd6>
 800b9fe:	2a0b      	cmp	r2, #11
 800ba00:	d917      	bls.n	800ba32 <_malloc_r+0xca>
 800ba02:	1961      	adds	r1, r4, r5
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	6025      	str	r5, [r4, #0]
 800ba08:	bf18      	it	ne
 800ba0a:	6059      	strne	r1, [r3, #4]
 800ba0c:	6863      	ldr	r3, [r4, #4]
 800ba0e:	bf08      	it	eq
 800ba10:	f8c8 1000 	streq.w	r1, [r8]
 800ba14:	5162      	str	r2, [r4, r5]
 800ba16:	604b      	str	r3, [r1, #4]
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f104 060b 	add.w	r6, r4, #11
 800ba1e:	f000 f829 	bl	800ba74 <__malloc_unlock>
 800ba22:	f026 0607 	bic.w	r6, r6, #7
 800ba26:	1d23      	adds	r3, r4, #4
 800ba28:	1af2      	subs	r2, r6, r3
 800ba2a:	d0ae      	beq.n	800b98a <_malloc_r+0x22>
 800ba2c:	1b9b      	subs	r3, r3, r6
 800ba2e:	50a3      	str	r3, [r4, r2]
 800ba30:	e7ab      	b.n	800b98a <_malloc_r+0x22>
 800ba32:	42a3      	cmp	r3, r4
 800ba34:	6862      	ldr	r2, [r4, #4]
 800ba36:	d1dd      	bne.n	800b9f4 <_malloc_r+0x8c>
 800ba38:	f8c8 2000 	str.w	r2, [r8]
 800ba3c:	e7ec      	b.n	800ba18 <_malloc_r+0xb0>
 800ba3e:	4623      	mov	r3, r4
 800ba40:	6864      	ldr	r4, [r4, #4]
 800ba42:	e7ac      	b.n	800b99e <_malloc_r+0x36>
 800ba44:	4634      	mov	r4, r6
 800ba46:	6876      	ldr	r6, [r6, #4]
 800ba48:	e7b4      	b.n	800b9b4 <_malloc_r+0x4c>
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	e7cc      	b.n	800b9e8 <_malloc_r+0x80>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	603b      	str	r3, [r7, #0]
 800ba52:	4638      	mov	r0, r7
 800ba54:	f000 f80e 	bl	800ba74 <__malloc_unlock>
 800ba58:	e797      	b.n	800b98a <_malloc_r+0x22>
 800ba5a:	6025      	str	r5, [r4, #0]
 800ba5c:	e7dc      	b.n	800ba18 <_malloc_r+0xb0>
 800ba5e:	605b      	str	r3, [r3, #4]
 800ba60:	deff      	udf	#255	; 0xff
 800ba62:	bf00      	nop
 800ba64:	20000538 	.word	0x20000538

0800ba68 <__malloc_lock>:
 800ba68:	4801      	ldr	r0, [pc, #4]	; (800ba70 <__malloc_lock+0x8>)
 800ba6a:	f001 b890 	b.w	800cb8e <__retarget_lock_acquire_recursive>
 800ba6e:	bf00      	nop
 800ba70:	20000680 	.word	0x20000680

0800ba74 <__malloc_unlock>:
 800ba74:	4801      	ldr	r0, [pc, #4]	; (800ba7c <__malloc_unlock+0x8>)
 800ba76:	f001 b88b 	b.w	800cb90 <__retarget_lock_release_recursive>
 800ba7a:	bf00      	nop
 800ba7c:	20000680 	.word	0x20000680

0800ba80 <__cvt>:
 800ba80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba84:	ec55 4b10 	vmov	r4, r5, d0
 800ba88:	2d00      	cmp	r5, #0
 800ba8a:	460e      	mov	r6, r1
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	462b      	mov	r3, r5
 800ba90:	bfbb      	ittet	lt
 800ba92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ba96:	461d      	movlt	r5, r3
 800ba98:	2300      	movge	r3, #0
 800ba9a:	232d      	movlt	r3, #45	; 0x2d
 800ba9c:	700b      	strb	r3, [r1, #0]
 800ba9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baa0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800baa4:	4691      	mov	r9, r2
 800baa6:	f023 0820 	bic.w	r8, r3, #32
 800baaa:	bfbc      	itt	lt
 800baac:	4622      	movlt	r2, r4
 800baae:	4614      	movlt	r4, r2
 800bab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bab4:	d005      	beq.n	800bac2 <__cvt+0x42>
 800bab6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800baba:	d100      	bne.n	800babe <__cvt+0x3e>
 800babc:	3601      	adds	r6, #1
 800babe:	2102      	movs	r1, #2
 800bac0:	e000      	b.n	800bac4 <__cvt+0x44>
 800bac2:	2103      	movs	r1, #3
 800bac4:	ab03      	add	r3, sp, #12
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	ab02      	add	r3, sp, #8
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	ec45 4b10 	vmov	d0, r4, r5
 800bad0:	4653      	mov	r3, sl
 800bad2:	4632      	mov	r2, r6
 800bad4:	f001 f8fc 	bl	800ccd0 <_dtoa_r>
 800bad8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800badc:	4607      	mov	r7, r0
 800bade:	d102      	bne.n	800bae6 <__cvt+0x66>
 800bae0:	f019 0f01 	tst.w	r9, #1
 800bae4:	d022      	beq.n	800bb2c <__cvt+0xac>
 800bae6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800baea:	eb07 0906 	add.w	r9, r7, r6
 800baee:	d110      	bne.n	800bb12 <__cvt+0x92>
 800baf0:	783b      	ldrb	r3, [r7, #0]
 800baf2:	2b30      	cmp	r3, #48	; 0x30
 800baf4:	d10a      	bne.n	800bb0c <__cvt+0x8c>
 800baf6:	2200      	movs	r2, #0
 800baf8:	2300      	movs	r3, #0
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f5 f80b 	bl	8000b18 <__aeabi_dcmpeq>
 800bb02:	b918      	cbnz	r0, 800bb0c <__cvt+0x8c>
 800bb04:	f1c6 0601 	rsb	r6, r6, #1
 800bb08:	f8ca 6000 	str.w	r6, [sl]
 800bb0c:	f8da 3000 	ldr.w	r3, [sl]
 800bb10:	4499      	add	r9, r3
 800bb12:	2200      	movs	r2, #0
 800bb14:	2300      	movs	r3, #0
 800bb16:	4620      	mov	r0, r4
 800bb18:	4629      	mov	r1, r5
 800bb1a:	f7f4 fffd 	bl	8000b18 <__aeabi_dcmpeq>
 800bb1e:	b108      	cbz	r0, 800bb24 <__cvt+0xa4>
 800bb20:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb24:	2230      	movs	r2, #48	; 0x30
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	454b      	cmp	r3, r9
 800bb2a:	d307      	bcc.n	800bb3c <__cvt+0xbc>
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb30:	1bdb      	subs	r3, r3, r7
 800bb32:	4638      	mov	r0, r7
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	b004      	add	sp, #16
 800bb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3c:	1c59      	adds	r1, r3, #1
 800bb3e:	9103      	str	r1, [sp, #12]
 800bb40:	701a      	strb	r2, [r3, #0]
 800bb42:	e7f0      	b.n	800bb26 <__cvt+0xa6>

0800bb44 <__exponent>:
 800bb44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb46:	4603      	mov	r3, r0
 800bb48:	2900      	cmp	r1, #0
 800bb4a:	bfb8      	it	lt
 800bb4c:	4249      	neglt	r1, r1
 800bb4e:	f803 2b02 	strb.w	r2, [r3], #2
 800bb52:	bfb4      	ite	lt
 800bb54:	222d      	movlt	r2, #45	; 0x2d
 800bb56:	222b      	movge	r2, #43	; 0x2b
 800bb58:	2909      	cmp	r1, #9
 800bb5a:	7042      	strb	r2, [r0, #1]
 800bb5c:	dd2a      	ble.n	800bbb4 <__exponent+0x70>
 800bb5e:	f10d 0207 	add.w	r2, sp, #7
 800bb62:	4617      	mov	r7, r2
 800bb64:	260a      	movs	r6, #10
 800bb66:	4694      	mov	ip, r2
 800bb68:	fb91 f5f6 	sdiv	r5, r1, r6
 800bb6c:	fb06 1415 	mls	r4, r6, r5, r1
 800bb70:	3430      	adds	r4, #48	; 0x30
 800bb72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bb76:	460c      	mov	r4, r1
 800bb78:	2c63      	cmp	r4, #99	; 0x63
 800bb7a:	f102 32ff 	add.w	r2, r2, #4294967295
 800bb7e:	4629      	mov	r1, r5
 800bb80:	dcf1      	bgt.n	800bb66 <__exponent+0x22>
 800bb82:	3130      	adds	r1, #48	; 0x30
 800bb84:	f1ac 0402 	sub.w	r4, ip, #2
 800bb88:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bb8c:	1c41      	adds	r1, r0, #1
 800bb8e:	4622      	mov	r2, r4
 800bb90:	42ba      	cmp	r2, r7
 800bb92:	d30a      	bcc.n	800bbaa <__exponent+0x66>
 800bb94:	f10d 0209 	add.w	r2, sp, #9
 800bb98:	eba2 020c 	sub.w	r2, r2, ip
 800bb9c:	42bc      	cmp	r4, r7
 800bb9e:	bf88      	it	hi
 800bba0:	2200      	movhi	r2, #0
 800bba2:	4413      	add	r3, r2
 800bba4:	1a18      	subs	r0, r3, r0
 800bba6:	b003      	add	sp, #12
 800bba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbaa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bbae:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bbb2:	e7ed      	b.n	800bb90 <__exponent+0x4c>
 800bbb4:	2330      	movs	r3, #48	; 0x30
 800bbb6:	3130      	adds	r1, #48	; 0x30
 800bbb8:	7083      	strb	r3, [r0, #2]
 800bbba:	70c1      	strb	r1, [r0, #3]
 800bbbc:	1d03      	adds	r3, r0, #4
 800bbbe:	e7f1      	b.n	800bba4 <__exponent+0x60>

0800bbc0 <_printf_float>:
 800bbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc4:	ed2d 8b02 	vpush	{d8}
 800bbc8:	b08d      	sub	sp, #52	; 0x34
 800bbca:	460c      	mov	r4, r1
 800bbcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bbd0:	4616      	mov	r6, r2
 800bbd2:	461f      	mov	r7, r3
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	f000 ff41 	bl	800ca5c <_localeconv_r>
 800bbda:	f8d0 a000 	ldr.w	sl, [r0]
 800bbde:	4650      	mov	r0, sl
 800bbe0:	f7f4 fb6e 	bl	80002c0 <strlen>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	930a      	str	r3, [sp, #40]	; 0x28
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	9305      	str	r3, [sp, #20]
 800bbec:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bbf4:	3307      	adds	r3, #7
 800bbf6:	f023 0307 	bic.w	r3, r3, #7
 800bbfa:	f103 0208 	add.w	r2, r3, #8
 800bbfe:	f8c8 2000 	str.w	r2, [r8]
 800bc02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc0a:	9307      	str	r3, [sp, #28]
 800bc0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc10:	ee08 0a10 	vmov	s16, r0
 800bc14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bc18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc1c:	4b9e      	ldr	r3, [pc, #632]	; (800be98 <_printf_float+0x2d8>)
 800bc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc22:	f7f4 ffab 	bl	8000b7c <__aeabi_dcmpun>
 800bc26:	bb88      	cbnz	r0, 800bc8c <_printf_float+0xcc>
 800bc28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc2c:	4b9a      	ldr	r3, [pc, #616]	; (800be98 <_printf_float+0x2d8>)
 800bc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc32:	f7f4 ff85 	bl	8000b40 <__aeabi_dcmple>
 800bc36:	bb48      	cbnz	r0, 800bc8c <_printf_float+0xcc>
 800bc38:	2200      	movs	r2, #0
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4640      	mov	r0, r8
 800bc3e:	4649      	mov	r1, r9
 800bc40:	f7f4 ff74 	bl	8000b2c <__aeabi_dcmplt>
 800bc44:	b110      	cbz	r0, 800bc4c <_printf_float+0x8c>
 800bc46:	232d      	movs	r3, #45	; 0x2d
 800bc48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc4c:	4a93      	ldr	r2, [pc, #588]	; (800be9c <_printf_float+0x2dc>)
 800bc4e:	4b94      	ldr	r3, [pc, #592]	; (800bea0 <_printf_float+0x2e0>)
 800bc50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bc54:	bf94      	ite	ls
 800bc56:	4690      	movls	r8, r2
 800bc58:	4698      	movhi	r8, r3
 800bc5a:	2303      	movs	r3, #3
 800bc5c:	6123      	str	r3, [r4, #16]
 800bc5e:	9b05      	ldr	r3, [sp, #20]
 800bc60:	f023 0304 	bic.w	r3, r3, #4
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	f04f 0900 	mov.w	r9, #0
 800bc6a:	9700      	str	r7, [sp, #0]
 800bc6c:	4633      	mov	r3, r6
 800bc6e:	aa0b      	add	r2, sp, #44	; 0x2c
 800bc70:	4621      	mov	r1, r4
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 f9da 	bl	800c02c <_printf_common>
 800bc78:	3001      	adds	r0, #1
 800bc7a:	f040 8090 	bne.w	800bd9e <_printf_float+0x1de>
 800bc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc82:	b00d      	add	sp, #52	; 0x34
 800bc84:	ecbd 8b02 	vpop	{d8}
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8c:	4642      	mov	r2, r8
 800bc8e:	464b      	mov	r3, r9
 800bc90:	4640      	mov	r0, r8
 800bc92:	4649      	mov	r1, r9
 800bc94:	f7f4 ff72 	bl	8000b7c <__aeabi_dcmpun>
 800bc98:	b140      	cbz	r0, 800bcac <_printf_float+0xec>
 800bc9a:	464b      	mov	r3, r9
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	bfbc      	itt	lt
 800bca0:	232d      	movlt	r3, #45	; 0x2d
 800bca2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bca6:	4a7f      	ldr	r2, [pc, #508]	; (800bea4 <_printf_float+0x2e4>)
 800bca8:	4b7f      	ldr	r3, [pc, #508]	; (800bea8 <_printf_float+0x2e8>)
 800bcaa:	e7d1      	b.n	800bc50 <_printf_float+0x90>
 800bcac:	6863      	ldr	r3, [r4, #4]
 800bcae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bcb2:	9206      	str	r2, [sp, #24]
 800bcb4:	1c5a      	adds	r2, r3, #1
 800bcb6:	d13f      	bne.n	800bd38 <_printf_float+0x178>
 800bcb8:	2306      	movs	r3, #6
 800bcba:	6063      	str	r3, [r4, #4]
 800bcbc:	9b05      	ldr	r3, [sp, #20]
 800bcbe:	6861      	ldr	r1, [r4, #4]
 800bcc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	9303      	str	r3, [sp, #12]
 800bcc8:	ab0a      	add	r3, sp, #40	; 0x28
 800bcca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bcce:	ab09      	add	r3, sp, #36	; 0x24
 800bcd0:	ec49 8b10 	vmov	d0, r8, r9
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	6022      	str	r2, [r4, #0]
 800bcd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bcdc:	4628      	mov	r0, r5
 800bcde:	f7ff fecf 	bl	800ba80 <__cvt>
 800bce2:	9b06      	ldr	r3, [sp, #24]
 800bce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bce6:	2b47      	cmp	r3, #71	; 0x47
 800bce8:	4680      	mov	r8, r0
 800bcea:	d108      	bne.n	800bcfe <_printf_float+0x13e>
 800bcec:	1cc8      	adds	r0, r1, #3
 800bcee:	db02      	blt.n	800bcf6 <_printf_float+0x136>
 800bcf0:	6863      	ldr	r3, [r4, #4]
 800bcf2:	4299      	cmp	r1, r3
 800bcf4:	dd41      	ble.n	800bd7a <_printf_float+0x1ba>
 800bcf6:	f1ab 0302 	sub.w	r3, fp, #2
 800bcfa:	fa5f fb83 	uxtb.w	fp, r3
 800bcfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd02:	d820      	bhi.n	800bd46 <_printf_float+0x186>
 800bd04:	3901      	subs	r1, #1
 800bd06:	465a      	mov	r2, fp
 800bd08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd0c:	9109      	str	r1, [sp, #36]	; 0x24
 800bd0e:	f7ff ff19 	bl	800bb44 <__exponent>
 800bd12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd14:	1813      	adds	r3, r2, r0
 800bd16:	2a01      	cmp	r2, #1
 800bd18:	4681      	mov	r9, r0
 800bd1a:	6123      	str	r3, [r4, #16]
 800bd1c:	dc02      	bgt.n	800bd24 <_printf_float+0x164>
 800bd1e:	6822      	ldr	r2, [r4, #0]
 800bd20:	07d2      	lsls	r2, r2, #31
 800bd22:	d501      	bpl.n	800bd28 <_printf_float+0x168>
 800bd24:	3301      	adds	r3, #1
 800bd26:	6123      	str	r3, [r4, #16]
 800bd28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d09c      	beq.n	800bc6a <_printf_float+0xaa>
 800bd30:	232d      	movs	r3, #45	; 0x2d
 800bd32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd36:	e798      	b.n	800bc6a <_printf_float+0xaa>
 800bd38:	9a06      	ldr	r2, [sp, #24]
 800bd3a:	2a47      	cmp	r2, #71	; 0x47
 800bd3c:	d1be      	bne.n	800bcbc <_printf_float+0xfc>
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1bc      	bne.n	800bcbc <_printf_float+0xfc>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e7b9      	b.n	800bcba <_printf_float+0xfa>
 800bd46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bd4a:	d118      	bne.n	800bd7e <_printf_float+0x1be>
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	6863      	ldr	r3, [r4, #4]
 800bd50:	dd0b      	ble.n	800bd6a <_printf_float+0x1aa>
 800bd52:	6121      	str	r1, [r4, #16]
 800bd54:	b913      	cbnz	r3, 800bd5c <_printf_float+0x19c>
 800bd56:	6822      	ldr	r2, [r4, #0]
 800bd58:	07d0      	lsls	r0, r2, #31
 800bd5a:	d502      	bpl.n	800bd62 <_printf_float+0x1a2>
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	440b      	add	r3, r1
 800bd60:	6123      	str	r3, [r4, #16]
 800bd62:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd64:	f04f 0900 	mov.w	r9, #0
 800bd68:	e7de      	b.n	800bd28 <_printf_float+0x168>
 800bd6a:	b913      	cbnz	r3, 800bd72 <_printf_float+0x1b2>
 800bd6c:	6822      	ldr	r2, [r4, #0]
 800bd6e:	07d2      	lsls	r2, r2, #31
 800bd70:	d501      	bpl.n	800bd76 <_printf_float+0x1b6>
 800bd72:	3302      	adds	r3, #2
 800bd74:	e7f4      	b.n	800bd60 <_printf_float+0x1a0>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e7f2      	b.n	800bd60 <_printf_float+0x1a0>
 800bd7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd80:	4299      	cmp	r1, r3
 800bd82:	db05      	blt.n	800bd90 <_printf_float+0x1d0>
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	6121      	str	r1, [r4, #16]
 800bd88:	07d8      	lsls	r0, r3, #31
 800bd8a:	d5ea      	bpl.n	800bd62 <_printf_float+0x1a2>
 800bd8c:	1c4b      	adds	r3, r1, #1
 800bd8e:	e7e7      	b.n	800bd60 <_printf_float+0x1a0>
 800bd90:	2900      	cmp	r1, #0
 800bd92:	bfd4      	ite	le
 800bd94:	f1c1 0202 	rsble	r2, r1, #2
 800bd98:	2201      	movgt	r2, #1
 800bd9a:	4413      	add	r3, r2
 800bd9c:	e7e0      	b.n	800bd60 <_printf_float+0x1a0>
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	055a      	lsls	r2, r3, #21
 800bda2:	d407      	bmi.n	800bdb4 <_printf_float+0x1f4>
 800bda4:	6923      	ldr	r3, [r4, #16]
 800bda6:	4642      	mov	r2, r8
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b8      	blx	r7
 800bdae:	3001      	adds	r0, #1
 800bdb0:	d12c      	bne.n	800be0c <_printf_float+0x24c>
 800bdb2:	e764      	b.n	800bc7e <_printf_float+0xbe>
 800bdb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdb8:	f240 80e0 	bls.w	800bf7c <_printf_float+0x3bc>
 800bdbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f7f4 fea8 	bl	8000b18 <__aeabi_dcmpeq>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d034      	beq.n	800be36 <_printf_float+0x276>
 800bdcc:	4a37      	ldr	r2, [pc, #220]	; (800beac <_printf_float+0x2ec>)
 800bdce:	2301      	movs	r3, #1
 800bdd0:	4631      	mov	r1, r6
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	47b8      	blx	r7
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	f43f af51 	beq.w	800bc7e <_printf_float+0xbe>
 800bddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bde0:	429a      	cmp	r2, r3
 800bde2:	db02      	blt.n	800bdea <_printf_float+0x22a>
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	07d8      	lsls	r0, r3, #31
 800bde8:	d510      	bpl.n	800be0c <_printf_float+0x24c>
 800bdea:	ee18 3a10 	vmov	r3, s16
 800bdee:	4652      	mov	r2, sl
 800bdf0:	4631      	mov	r1, r6
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	47b8      	blx	r7
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	f43f af41 	beq.w	800bc7e <_printf_float+0xbe>
 800bdfc:	f04f 0800 	mov.w	r8, #0
 800be00:	f104 091a 	add.w	r9, r4, #26
 800be04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be06:	3b01      	subs	r3, #1
 800be08:	4543      	cmp	r3, r8
 800be0a:	dc09      	bgt.n	800be20 <_printf_float+0x260>
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	079b      	lsls	r3, r3, #30
 800be10:	f100 8107 	bmi.w	800c022 <_printf_float+0x462>
 800be14:	68e0      	ldr	r0, [r4, #12]
 800be16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be18:	4298      	cmp	r0, r3
 800be1a:	bfb8      	it	lt
 800be1c:	4618      	movlt	r0, r3
 800be1e:	e730      	b.n	800bc82 <_printf_float+0xc2>
 800be20:	2301      	movs	r3, #1
 800be22:	464a      	mov	r2, r9
 800be24:	4631      	mov	r1, r6
 800be26:	4628      	mov	r0, r5
 800be28:	47b8      	blx	r7
 800be2a:	3001      	adds	r0, #1
 800be2c:	f43f af27 	beq.w	800bc7e <_printf_float+0xbe>
 800be30:	f108 0801 	add.w	r8, r8, #1
 800be34:	e7e6      	b.n	800be04 <_printf_float+0x244>
 800be36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be38:	2b00      	cmp	r3, #0
 800be3a:	dc39      	bgt.n	800beb0 <_printf_float+0x2f0>
 800be3c:	4a1b      	ldr	r2, [pc, #108]	; (800beac <_printf_float+0x2ec>)
 800be3e:	2301      	movs	r3, #1
 800be40:	4631      	mov	r1, r6
 800be42:	4628      	mov	r0, r5
 800be44:	47b8      	blx	r7
 800be46:	3001      	adds	r0, #1
 800be48:	f43f af19 	beq.w	800bc7e <_printf_float+0xbe>
 800be4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800be50:	4313      	orrs	r3, r2
 800be52:	d102      	bne.n	800be5a <_printf_float+0x29a>
 800be54:	6823      	ldr	r3, [r4, #0]
 800be56:	07d9      	lsls	r1, r3, #31
 800be58:	d5d8      	bpl.n	800be0c <_printf_float+0x24c>
 800be5a:	ee18 3a10 	vmov	r3, s16
 800be5e:	4652      	mov	r2, sl
 800be60:	4631      	mov	r1, r6
 800be62:	4628      	mov	r0, r5
 800be64:	47b8      	blx	r7
 800be66:	3001      	adds	r0, #1
 800be68:	f43f af09 	beq.w	800bc7e <_printf_float+0xbe>
 800be6c:	f04f 0900 	mov.w	r9, #0
 800be70:	f104 0a1a 	add.w	sl, r4, #26
 800be74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be76:	425b      	negs	r3, r3
 800be78:	454b      	cmp	r3, r9
 800be7a:	dc01      	bgt.n	800be80 <_printf_float+0x2c0>
 800be7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be7e:	e792      	b.n	800bda6 <_printf_float+0x1e6>
 800be80:	2301      	movs	r3, #1
 800be82:	4652      	mov	r2, sl
 800be84:	4631      	mov	r1, r6
 800be86:	4628      	mov	r0, r5
 800be88:	47b8      	blx	r7
 800be8a:	3001      	adds	r0, #1
 800be8c:	f43f aef7 	beq.w	800bc7e <_printf_float+0xbe>
 800be90:	f109 0901 	add.w	r9, r9, #1
 800be94:	e7ee      	b.n	800be74 <_printf_float+0x2b4>
 800be96:	bf00      	nop
 800be98:	7fefffff 	.word	0x7fefffff
 800be9c:	08010378 	.word	0x08010378
 800bea0:	0801037c 	.word	0x0801037c
 800bea4:	08010380 	.word	0x08010380
 800bea8:	08010384 	.word	0x08010384
 800beac:	08010388 	.word	0x08010388
 800beb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800beb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800beb4:	429a      	cmp	r2, r3
 800beb6:	bfa8      	it	ge
 800beb8:	461a      	movge	r2, r3
 800beba:	2a00      	cmp	r2, #0
 800bebc:	4691      	mov	r9, r2
 800bebe:	dc37      	bgt.n	800bf30 <_printf_float+0x370>
 800bec0:	f04f 0b00 	mov.w	fp, #0
 800bec4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bec8:	f104 021a 	add.w	r2, r4, #26
 800becc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bece:	9305      	str	r3, [sp, #20]
 800bed0:	eba3 0309 	sub.w	r3, r3, r9
 800bed4:	455b      	cmp	r3, fp
 800bed6:	dc33      	bgt.n	800bf40 <_printf_float+0x380>
 800bed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bedc:	429a      	cmp	r2, r3
 800bede:	db3b      	blt.n	800bf58 <_printf_float+0x398>
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	07da      	lsls	r2, r3, #31
 800bee4:	d438      	bmi.n	800bf58 <_printf_float+0x398>
 800bee6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800beea:	eba2 0903 	sub.w	r9, r2, r3
 800beee:	9b05      	ldr	r3, [sp, #20]
 800bef0:	1ad2      	subs	r2, r2, r3
 800bef2:	4591      	cmp	r9, r2
 800bef4:	bfa8      	it	ge
 800bef6:	4691      	movge	r9, r2
 800bef8:	f1b9 0f00 	cmp.w	r9, #0
 800befc:	dc35      	bgt.n	800bf6a <_printf_float+0x3aa>
 800befe:	f04f 0800 	mov.w	r8, #0
 800bf02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf06:	f104 0a1a 	add.w	sl, r4, #26
 800bf0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf0e:	1a9b      	subs	r3, r3, r2
 800bf10:	eba3 0309 	sub.w	r3, r3, r9
 800bf14:	4543      	cmp	r3, r8
 800bf16:	f77f af79 	ble.w	800be0c <_printf_float+0x24c>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4652      	mov	r2, sl
 800bf1e:	4631      	mov	r1, r6
 800bf20:	4628      	mov	r0, r5
 800bf22:	47b8      	blx	r7
 800bf24:	3001      	adds	r0, #1
 800bf26:	f43f aeaa 	beq.w	800bc7e <_printf_float+0xbe>
 800bf2a:	f108 0801 	add.w	r8, r8, #1
 800bf2e:	e7ec      	b.n	800bf0a <_printf_float+0x34a>
 800bf30:	4613      	mov	r3, r2
 800bf32:	4631      	mov	r1, r6
 800bf34:	4642      	mov	r2, r8
 800bf36:	4628      	mov	r0, r5
 800bf38:	47b8      	blx	r7
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	d1c0      	bne.n	800bec0 <_printf_float+0x300>
 800bf3e:	e69e      	b.n	800bc7e <_printf_float+0xbe>
 800bf40:	2301      	movs	r3, #1
 800bf42:	4631      	mov	r1, r6
 800bf44:	4628      	mov	r0, r5
 800bf46:	9205      	str	r2, [sp, #20]
 800bf48:	47b8      	blx	r7
 800bf4a:	3001      	adds	r0, #1
 800bf4c:	f43f ae97 	beq.w	800bc7e <_printf_float+0xbe>
 800bf50:	9a05      	ldr	r2, [sp, #20]
 800bf52:	f10b 0b01 	add.w	fp, fp, #1
 800bf56:	e7b9      	b.n	800becc <_printf_float+0x30c>
 800bf58:	ee18 3a10 	vmov	r3, s16
 800bf5c:	4652      	mov	r2, sl
 800bf5e:	4631      	mov	r1, r6
 800bf60:	4628      	mov	r0, r5
 800bf62:	47b8      	blx	r7
 800bf64:	3001      	adds	r0, #1
 800bf66:	d1be      	bne.n	800bee6 <_printf_float+0x326>
 800bf68:	e689      	b.n	800bc7e <_printf_float+0xbe>
 800bf6a:	9a05      	ldr	r2, [sp, #20]
 800bf6c:	464b      	mov	r3, r9
 800bf6e:	4442      	add	r2, r8
 800bf70:	4631      	mov	r1, r6
 800bf72:	4628      	mov	r0, r5
 800bf74:	47b8      	blx	r7
 800bf76:	3001      	adds	r0, #1
 800bf78:	d1c1      	bne.n	800befe <_printf_float+0x33e>
 800bf7a:	e680      	b.n	800bc7e <_printf_float+0xbe>
 800bf7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf7e:	2a01      	cmp	r2, #1
 800bf80:	dc01      	bgt.n	800bf86 <_printf_float+0x3c6>
 800bf82:	07db      	lsls	r3, r3, #31
 800bf84:	d53a      	bpl.n	800bffc <_printf_float+0x43c>
 800bf86:	2301      	movs	r3, #1
 800bf88:	4642      	mov	r2, r8
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	47b8      	blx	r7
 800bf90:	3001      	adds	r0, #1
 800bf92:	f43f ae74 	beq.w	800bc7e <_printf_float+0xbe>
 800bf96:	ee18 3a10 	vmov	r3, s16
 800bf9a:	4652      	mov	r2, sl
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	47b8      	blx	r7
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	f43f ae6b 	beq.w	800bc7e <_printf_float+0xbe>
 800bfa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfac:	2200      	movs	r2, #0
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bfb4:	f7f4 fdb0 	bl	8000b18 <__aeabi_dcmpeq>
 800bfb8:	b9d8      	cbnz	r0, 800bff2 <_printf_float+0x432>
 800bfba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bfbe:	f108 0201 	add.w	r2, r8, #1
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	47b8      	blx	r7
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d10e      	bne.n	800bfea <_printf_float+0x42a>
 800bfcc:	e657      	b.n	800bc7e <_printf_float+0xbe>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4652      	mov	r2, sl
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	47b8      	blx	r7
 800bfd8:	3001      	adds	r0, #1
 800bfda:	f43f ae50 	beq.w	800bc7e <_printf_float+0xbe>
 800bfde:	f108 0801 	add.w	r8, r8, #1
 800bfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	4543      	cmp	r3, r8
 800bfe8:	dcf1      	bgt.n	800bfce <_printf_float+0x40e>
 800bfea:	464b      	mov	r3, r9
 800bfec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bff0:	e6da      	b.n	800bda8 <_printf_float+0x1e8>
 800bff2:	f04f 0800 	mov.w	r8, #0
 800bff6:	f104 0a1a 	add.w	sl, r4, #26
 800bffa:	e7f2      	b.n	800bfe2 <_printf_float+0x422>
 800bffc:	2301      	movs	r3, #1
 800bffe:	4642      	mov	r2, r8
 800c000:	e7df      	b.n	800bfc2 <_printf_float+0x402>
 800c002:	2301      	movs	r3, #1
 800c004:	464a      	mov	r2, r9
 800c006:	4631      	mov	r1, r6
 800c008:	4628      	mov	r0, r5
 800c00a:	47b8      	blx	r7
 800c00c:	3001      	adds	r0, #1
 800c00e:	f43f ae36 	beq.w	800bc7e <_printf_float+0xbe>
 800c012:	f108 0801 	add.w	r8, r8, #1
 800c016:	68e3      	ldr	r3, [r4, #12]
 800c018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c01a:	1a5b      	subs	r3, r3, r1
 800c01c:	4543      	cmp	r3, r8
 800c01e:	dcf0      	bgt.n	800c002 <_printf_float+0x442>
 800c020:	e6f8      	b.n	800be14 <_printf_float+0x254>
 800c022:	f04f 0800 	mov.w	r8, #0
 800c026:	f104 0919 	add.w	r9, r4, #25
 800c02a:	e7f4      	b.n	800c016 <_printf_float+0x456>

0800c02c <_printf_common>:
 800c02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c030:	4616      	mov	r6, r2
 800c032:	4699      	mov	r9, r3
 800c034:	688a      	ldr	r2, [r1, #8]
 800c036:	690b      	ldr	r3, [r1, #16]
 800c038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c03c:	4293      	cmp	r3, r2
 800c03e:	bfb8      	it	lt
 800c040:	4613      	movlt	r3, r2
 800c042:	6033      	str	r3, [r6, #0]
 800c044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c048:	4607      	mov	r7, r0
 800c04a:	460c      	mov	r4, r1
 800c04c:	b10a      	cbz	r2, 800c052 <_printf_common+0x26>
 800c04e:	3301      	adds	r3, #1
 800c050:	6033      	str	r3, [r6, #0]
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	0699      	lsls	r1, r3, #26
 800c056:	bf42      	ittt	mi
 800c058:	6833      	ldrmi	r3, [r6, #0]
 800c05a:	3302      	addmi	r3, #2
 800c05c:	6033      	strmi	r3, [r6, #0]
 800c05e:	6825      	ldr	r5, [r4, #0]
 800c060:	f015 0506 	ands.w	r5, r5, #6
 800c064:	d106      	bne.n	800c074 <_printf_common+0x48>
 800c066:	f104 0a19 	add.w	sl, r4, #25
 800c06a:	68e3      	ldr	r3, [r4, #12]
 800c06c:	6832      	ldr	r2, [r6, #0]
 800c06e:	1a9b      	subs	r3, r3, r2
 800c070:	42ab      	cmp	r3, r5
 800c072:	dc26      	bgt.n	800c0c2 <_printf_common+0x96>
 800c074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c078:	1e13      	subs	r3, r2, #0
 800c07a:	6822      	ldr	r2, [r4, #0]
 800c07c:	bf18      	it	ne
 800c07e:	2301      	movne	r3, #1
 800c080:	0692      	lsls	r2, r2, #26
 800c082:	d42b      	bmi.n	800c0dc <_printf_common+0xb0>
 800c084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c088:	4649      	mov	r1, r9
 800c08a:	4638      	mov	r0, r7
 800c08c:	47c0      	blx	r8
 800c08e:	3001      	adds	r0, #1
 800c090:	d01e      	beq.n	800c0d0 <_printf_common+0xa4>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	6922      	ldr	r2, [r4, #16]
 800c096:	f003 0306 	and.w	r3, r3, #6
 800c09a:	2b04      	cmp	r3, #4
 800c09c:	bf02      	ittt	eq
 800c09e:	68e5      	ldreq	r5, [r4, #12]
 800c0a0:	6833      	ldreq	r3, [r6, #0]
 800c0a2:	1aed      	subeq	r5, r5, r3
 800c0a4:	68a3      	ldr	r3, [r4, #8]
 800c0a6:	bf0c      	ite	eq
 800c0a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0ac:	2500      	movne	r5, #0
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	bfc4      	itt	gt
 800c0b2:	1a9b      	subgt	r3, r3, r2
 800c0b4:	18ed      	addgt	r5, r5, r3
 800c0b6:	2600      	movs	r6, #0
 800c0b8:	341a      	adds	r4, #26
 800c0ba:	42b5      	cmp	r5, r6
 800c0bc:	d11a      	bne.n	800c0f4 <_printf_common+0xc8>
 800c0be:	2000      	movs	r0, #0
 800c0c0:	e008      	b.n	800c0d4 <_printf_common+0xa8>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	4652      	mov	r2, sl
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	47c0      	blx	r8
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	d103      	bne.n	800c0d8 <_printf_common+0xac>
 800c0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d8:	3501      	adds	r5, #1
 800c0da:	e7c6      	b.n	800c06a <_printf_common+0x3e>
 800c0dc:	18e1      	adds	r1, r4, r3
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	2030      	movs	r0, #48	; 0x30
 800c0e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0e6:	4422      	add	r2, r4
 800c0e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0f0:	3302      	adds	r3, #2
 800c0f2:	e7c7      	b.n	800c084 <_printf_common+0x58>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	47c0      	blx	r8
 800c0fe:	3001      	adds	r0, #1
 800c100:	d0e6      	beq.n	800c0d0 <_printf_common+0xa4>
 800c102:	3601      	adds	r6, #1
 800c104:	e7d9      	b.n	800c0ba <_printf_common+0x8e>
	...

0800c108 <_printf_i>:
 800c108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c10c:	7e0f      	ldrb	r7, [r1, #24]
 800c10e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c110:	2f78      	cmp	r7, #120	; 0x78
 800c112:	4691      	mov	r9, r2
 800c114:	4680      	mov	r8, r0
 800c116:	460c      	mov	r4, r1
 800c118:	469a      	mov	sl, r3
 800c11a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c11e:	d807      	bhi.n	800c130 <_printf_i+0x28>
 800c120:	2f62      	cmp	r7, #98	; 0x62
 800c122:	d80a      	bhi.n	800c13a <_printf_i+0x32>
 800c124:	2f00      	cmp	r7, #0
 800c126:	f000 80d4 	beq.w	800c2d2 <_printf_i+0x1ca>
 800c12a:	2f58      	cmp	r7, #88	; 0x58
 800c12c:	f000 80c0 	beq.w	800c2b0 <_printf_i+0x1a8>
 800c130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c138:	e03a      	b.n	800c1b0 <_printf_i+0xa8>
 800c13a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c13e:	2b15      	cmp	r3, #21
 800c140:	d8f6      	bhi.n	800c130 <_printf_i+0x28>
 800c142:	a101      	add	r1, pc, #4	; (adr r1, 800c148 <_printf_i+0x40>)
 800c144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c148:	0800c1a1 	.word	0x0800c1a1
 800c14c:	0800c1b5 	.word	0x0800c1b5
 800c150:	0800c131 	.word	0x0800c131
 800c154:	0800c131 	.word	0x0800c131
 800c158:	0800c131 	.word	0x0800c131
 800c15c:	0800c131 	.word	0x0800c131
 800c160:	0800c1b5 	.word	0x0800c1b5
 800c164:	0800c131 	.word	0x0800c131
 800c168:	0800c131 	.word	0x0800c131
 800c16c:	0800c131 	.word	0x0800c131
 800c170:	0800c131 	.word	0x0800c131
 800c174:	0800c2b9 	.word	0x0800c2b9
 800c178:	0800c1e1 	.word	0x0800c1e1
 800c17c:	0800c273 	.word	0x0800c273
 800c180:	0800c131 	.word	0x0800c131
 800c184:	0800c131 	.word	0x0800c131
 800c188:	0800c2db 	.word	0x0800c2db
 800c18c:	0800c131 	.word	0x0800c131
 800c190:	0800c1e1 	.word	0x0800c1e1
 800c194:	0800c131 	.word	0x0800c131
 800c198:	0800c131 	.word	0x0800c131
 800c19c:	0800c27b 	.word	0x0800c27b
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	1d1a      	adds	r2, r3, #4
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	602a      	str	r2, [r5, #0]
 800c1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e09f      	b.n	800c2f4 <_printf_i+0x1ec>
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	682b      	ldr	r3, [r5, #0]
 800c1b8:	0607      	lsls	r7, r0, #24
 800c1ba:	f103 0104 	add.w	r1, r3, #4
 800c1be:	6029      	str	r1, [r5, #0]
 800c1c0:	d501      	bpl.n	800c1c6 <_printf_i+0xbe>
 800c1c2:	681e      	ldr	r6, [r3, #0]
 800c1c4:	e003      	b.n	800c1ce <_printf_i+0xc6>
 800c1c6:	0646      	lsls	r6, r0, #25
 800c1c8:	d5fb      	bpl.n	800c1c2 <_printf_i+0xba>
 800c1ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	da03      	bge.n	800c1da <_printf_i+0xd2>
 800c1d2:	232d      	movs	r3, #45	; 0x2d
 800c1d4:	4276      	negs	r6, r6
 800c1d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1da:	485a      	ldr	r0, [pc, #360]	; (800c344 <_printf_i+0x23c>)
 800c1dc:	230a      	movs	r3, #10
 800c1de:	e012      	b.n	800c206 <_printf_i+0xfe>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	6820      	ldr	r0, [r4, #0]
 800c1e4:	1d19      	adds	r1, r3, #4
 800c1e6:	6029      	str	r1, [r5, #0]
 800c1e8:	0605      	lsls	r5, r0, #24
 800c1ea:	d501      	bpl.n	800c1f0 <_printf_i+0xe8>
 800c1ec:	681e      	ldr	r6, [r3, #0]
 800c1ee:	e002      	b.n	800c1f6 <_printf_i+0xee>
 800c1f0:	0641      	lsls	r1, r0, #25
 800c1f2:	d5fb      	bpl.n	800c1ec <_printf_i+0xe4>
 800c1f4:	881e      	ldrh	r6, [r3, #0]
 800c1f6:	4853      	ldr	r0, [pc, #332]	; (800c344 <_printf_i+0x23c>)
 800c1f8:	2f6f      	cmp	r7, #111	; 0x6f
 800c1fa:	bf0c      	ite	eq
 800c1fc:	2308      	moveq	r3, #8
 800c1fe:	230a      	movne	r3, #10
 800c200:	2100      	movs	r1, #0
 800c202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c206:	6865      	ldr	r5, [r4, #4]
 800c208:	60a5      	str	r5, [r4, #8]
 800c20a:	2d00      	cmp	r5, #0
 800c20c:	bfa2      	ittt	ge
 800c20e:	6821      	ldrge	r1, [r4, #0]
 800c210:	f021 0104 	bicge.w	r1, r1, #4
 800c214:	6021      	strge	r1, [r4, #0]
 800c216:	b90e      	cbnz	r6, 800c21c <_printf_i+0x114>
 800c218:	2d00      	cmp	r5, #0
 800c21a:	d04b      	beq.n	800c2b4 <_printf_i+0x1ac>
 800c21c:	4615      	mov	r5, r2
 800c21e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c222:	fb03 6711 	mls	r7, r3, r1, r6
 800c226:	5dc7      	ldrb	r7, [r0, r7]
 800c228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c22c:	4637      	mov	r7, r6
 800c22e:	42bb      	cmp	r3, r7
 800c230:	460e      	mov	r6, r1
 800c232:	d9f4      	bls.n	800c21e <_printf_i+0x116>
 800c234:	2b08      	cmp	r3, #8
 800c236:	d10b      	bne.n	800c250 <_printf_i+0x148>
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	07de      	lsls	r6, r3, #31
 800c23c:	d508      	bpl.n	800c250 <_printf_i+0x148>
 800c23e:	6923      	ldr	r3, [r4, #16]
 800c240:	6861      	ldr	r1, [r4, #4]
 800c242:	4299      	cmp	r1, r3
 800c244:	bfde      	ittt	le
 800c246:	2330      	movle	r3, #48	; 0x30
 800c248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c24c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c250:	1b52      	subs	r2, r2, r5
 800c252:	6122      	str	r2, [r4, #16]
 800c254:	f8cd a000 	str.w	sl, [sp]
 800c258:	464b      	mov	r3, r9
 800c25a:	aa03      	add	r2, sp, #12
 800c25c:	4621      	mov	r1, r4
 800c25e:	4640      	mov	r0, r8
 800c260:	f7ff fee4 	bl	800c02c <_printf_common>
 800c264:	3001      	adds	r0, #1
 800c266:	d14a      	bne.n	800c2fe <_printf_i+0x1f6>
 800c268:	f04f 30ff 	mov.w	r0, #4294967295
 800c26c:	b004      	add	sp, #16
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	f043 0320 	orr.w	r3, r3, #32
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	4833      	ldr	r0, [pc, #204]	; (800c348 <_printf_i+0x240>)
 800c27c:	2778      	movs	r7, #120	; 0x78
 800c27e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	6829      	ldr	r1, [r5, #0]
 800c286:	061f      	lsls	r7, r3, #24
 800c288:	f851 6b04 	ldr.w	r6, [r1], #4
 800c28c:	d402      	bmi.n	800c294 <_printf_i+0x18c>
 800c28e:	065f      	lsls	r7, r3, #25
 800c290:	bf48      	it	mi
 800c292:	b2b6      	uxthmi	r6, r6
 800c294:	07df      	lsls	r7, r3, #31
 800c296:	bf48      	it	mi
 800c298:	f043 0320 	orrmi.w	r3, r3, #32
 800c29c:	6029      	str	r1, [r5, #0]
 800c29e:	bf48      	it	mi
 800c2a0:	6023      	strmi	r3, [r4, #0]
 800c2a2:	b91e      	cbnz	r6, 800c2ac <_printf_i+0x1a4>
 800c2a4:	6823      	ldr	r3, [r4, #0]
 800c2a6:	f023 0320 	bic.w	r3, r3, #32
 800c2aa:	6023      	str	r3, [r4, #0]
 800c2ac:	2310      	movs	r3, #16
 800c2ae:	e7a7      	b.n	800c200 <_printf_i+0xf8>
 800c2b0:	4824      	ldr	r0, [pc, #144]	; (800c344 <_printf_i+0x23c>)
 800c2b2:	e7e4      	b.n	800c27e <_printf_i+0x176>
 800c2b4:	4615      	mov	r5, r2
 800c2b6:	e7bd      	b.n	800c234 <_printf_i+0x12c>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	6826      	ldr	r6, [r4, #0]
 800c2bc:	6961      	ldr	r1, [r4, #20]
 800c2be:	1d18      	adds	r0, r3, #4
 800c2c0:	6028      	str	r0, [r5, #0]
 800c2c2:	0635      	lsls	r5, r6, #24
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	d501      	bpl.n	800c2cc <_printf_i+0x1c4>
 800c2c8:	6019      	str	r1, [r3, #0]
 800c2ca:	e002      	b.n	800c2d2 <_printf_i+0x1ca>
 800c2cc:	0670      	lsls	r0, r6, #25
 800c2ce:	d5fb      	bpl.n	800c2c8 <_printf_i+0x1c0>
 800c2d0:	8019      	strh	r1, [r3, #0]
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	6123      	str	r3, [r4, #16]
 800c2d6:	4615      	mov	r5, r2
 800c2d8:	e7bc      	b.n	800c254 <_printf_i+0x14c>
 800c2da:	682b      	ldr	r3, [r5, #0]
 800c2dc:	1d1a      	adds	r2, r3, #4
 800c2de:	602a      	str	r2, [r5, #0]
 800c2e0:	681d      	ldr	r5, [r3, #0]
 800c2e2:	6862      	ldr	r2, [r4, #4]
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f7f3 ff9a 	bl	8000220 <memchr>
 800c2ec:	b108      	cbz	r0, 800c2f2 <_printf_i+0x1ea>
 800c2ee:	1b40      	subs	r0, r0, r5
 800c2f0:	6060      	str	r0, [r4, #4]
 800c2f2:	6863      	ldr	r3, [r4, #4]
 800c2f4:	6123      	str	r3, [r4, #16]
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2fc:	e7aa      	b.n	800c254 <_printf_i+0x14c>
 800c2fe:	6923      	ldr	r3, [r4, #16]
 800c300:	462a      	mov	r2, r5
 800c302:	4649      	mov	r1, r9
 800c304:	4640      	mov	r0, r8
 800c306:	47d0      	blx	sl
 800c308:	3001      	adds	r0, #1
 800c30a:	d0ad      	beq.n	800c268 <_printf_i+0x160>
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	079b      	lsls	r3, r3, #30
 800c310:	d413      	bmi.n	800c33a <_printf_i+0x232>
 800c312:	68e0      	ldr	r0, [r4, #12]
 800c314:	9b03      	ldr	r3, [sp, #12]
 800c316:	4298      	cmp	r0, r3
 800c318:	bfb8      	it	lt
 800c31a:	4618      	movlt	r0, r3
 800c31c:	e7a6      	b.n	800c26c <_printf_i+0x164>
 800c31e:	2301      	movs	r3, #1
 800c320:	4632      	mov	r2, r6
 800c322:	4649      	mov	r1, r9
 800c324:	4640      	mov	r0, r8
 800c326:	47d0      	blx	sl
 800c328:	3001      	adds	r0, #1
 800c32a:	d09d      	beq.n	800c268 <_printf_i+0x160>
 800c32c:	3501      	adds	r5, #1
 800c32e:	68e3      	ldr	r3, [r4, #12]
 800c330:	9903      	ldr	r1, [sp, #12]
 800c332:	1a5b      	subs	r3, r3, r1
 800c334:	42ab      	cmp	r3, r5
 800c336:	dcf2      	bgt.n	800c31e <_printf_i+0x216>
 800c338:	e7eb      	b.n	800c312 <_printf_i+0x20a>
 800c33a:	2500      	movs	r5, #0
 800c33c:	f104 0619 	add.w	r6, r4, #25
 800c340:	e7f5      	b.n	800c32e <_printf_i+0x226>
 800c342:	bf00      	nop
 800c344:	0801038a 	.word	0x0801038a
 800c348:	0801039b 	.word	0x0801039b

0800c34c <_scanf_float>:
 800c34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c350:	b087      	sub	sp, #28
 800c352:	4617      	mov	r7, r2
 800c354:	9303      	str	r3, [sp, #12]
 800c356:	688b      	ldr	r3, [r1, #8]
 800c358:	1e5a      	subs	r2, r3, #1
 800c35a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c35e:	bf83      	ittte	hi
 800c360:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c364:	195b      	addhi	r3, r3, r5
 800c366:	9302      	strhi	r3, [sp, #8]
 800c368:	2300      	movls	r3, #0
 800c36a:	bf86      	itte	hi
 800c36c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c370:	608b      	strhi	r3, [r1, #8]
 800c372:	9302      	strls	r3, [sp, #8]
 800c374:	680b      	ldr	r3, [r1, #0]
 800c376:	468b      	mov	fp, r1
 800c378:	2500      	movs	r5, #0
 800c37a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c37e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c382:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c386:	4680      	mov	r8, r0
 800c388:	460c      	mov	r4, r1
 800c38a:	465e      	mov	r6, fp
 800c38c:	46aa      	mov	sl, r5
 800c38e:	46a9      	mov	r9, r5
 800c390:	9501      	str	r5, [sp, #4]
 800c392:	68a2      	ldr	r2, [r4, #8]
 800c394:	b152      	cbz	r2, 800c3ac <_scanf_float+0x60>
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	2b4e      	cmp	r3, #78	; 0x4e
 800c39c:	d864      	bhi.n	800c468 <_scanf_float+0x11c>
 800c39e:	2b40      	cmp	r3, #64	; 0x40
 800c3a0:	d83c      	bhi.n	800c41c <_scanf_float+0xd0>
 800c3a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c3a6:	b2c8      	uxtb	r0, r1
 800c3a8:	280e      	cmp	r0, #14
 800c3aa:	d93a      	bls.n	800c422 <_scanf_float+0xd6>
 800c3ac:	f1b9 0f00 	cmp.w	r9, #0
 800c3b0:	d003      	beq.n	800c3ba <_scanf_float+0x6e>
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3be:	f1ba 0f01 	cmp.w	sl, #1
 800c3c2:	f200 8113 	bhi.w	800c5ec <_scanf_float+0x2a0>
 800c3c6:	455e      	cmp	r6, fp
 800c3c8:	f200 8105 	bhi.w	800c5d6 <_scanf_float+0x28a>
 800c3cc:	2501      	movs	r5, #1
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	b007      	add	sp, #28
 800c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c3da:	2a0d      	cmp	r2, #13
 800c3dc:	d8e6      	bhi.n	800c3ac <_scanf_float+0x60>
 800c3de:	a101      	add	r1, pc, #4	; (adr r1, 800c3e4 <_scanf_float+0x98>)
 800c3e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c3e4:	0800c523 	.word	0x0800c523
 800c3e8:	0800c3ad 	.word	0x0800c3ad
 800c3ec:	0800c3ad 	.word	0x0800c3ad
 800c3f0:	0800c3ad 	.word	0x0800c3ad
 800c3f4:	0800c583 	.word	0x0800c583
 800c3f8:	0800c55b 	.word	0x0800c55b
 800c3fc:	0800c3ad 	.word	0x0800c3ad
 800c400:	0800c3ad 	.word	0x0800c3ad
 800c404:	0800c531 	.word	0x0800c531
 800c408:	0800c3ad 	.word	0x0800c3ad
 800c40c:	0800c3ad 	.word	0x0800c3ad
 800c410:	0800c3ad 	.word	0x0800c3ad
 800c414:	0800c3ad 	.word	0x0800c3ad
 800c418:	0800c4e9 	.word	0x0800c4e9
 800c41c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c420:	e7db      	b.n	800c3da <_scanf_float+0x8e>
 800c422:	290e      	cmp	r1, #14
 800c424:	d8c2      	bhi.n	800c3ac <_scanf_float+0x60>
 800c426:	a001      	add	r0, pc, #4	; (adr r0, 800c42c <_scanf_float+0xe0>)
 800c428:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c42c:	0800c4db 	.word	0x0800c4db
 800c430:	0800c3ad 	.word	0x0800c3ad
 800c434:	0800c4db 	.word	0x0800c4db
 800c438:	0800c56f 	.word	0x0800c56f
 800c43c:	0800c3ad 	.word	0x0800c3ad
 800c440:	0800c489 	.word	0x0800c489
 800c444:	0800c4c5 	.word	0x0800c4c5
 800c448:	0800c4c5 	.word	0x0800c4c5
 800c44c:	0800c4c5 	.word	0x0800c4c5
 800c450:	0800c4c5 	.word	0x0800c4c5
 800c454:	0800c4c5 	.word	0x0800c4c5
 800c458:	0800c4c5 	.word	0x0800c4c5
 800c45c:	0800c4c5 	.word	0x0800c4c5
 800c460:	0800c4c5 	.word	0x0800c4c5
 800c464:	0800c4c5 	.word	0x0800c4c5
 800c468:	2b6e      	cmp	r3, #110	; 0x6e
 800c46a:	d809      	bhi.n	800c480 <_scanf_float+0x134>
 800c46c:	2b60      	cmp	r3, #96	; 0x60
 800c46e:	d8b2      	bhi.n	800c3d6 <_scanf_float+0x8a>
 800c470:	2b54      	cmp	r3, #84	; 0x54
 800c472:	d077      	beq.n	800c564 <_scanf_float+0x218>
 800c474:	2b59      	cmp	r3, #89	; 0x59
 800c476:	d199      	bne.n	800c3ac <_scanf_float+0x60>
 800c478:	2d07      	cmp	r5, #7
 800c47a:	d197      	bne.n	800c3ac <_scanf_float+0x60>
 800c47c:	2508      	movs	r5, #8
 800c47e:	e029      	b.n	800c4d4 <_scanf_float+0x188>
 800c480:	2b74      	cmp	r3, #116	; 0x74
 800c482:	d06f      	beq.n	800c564 <_scanf_float+0x218>
 800c484:	2b79      	cmp	r3, #121	; 0x79
 800c486:	e7f6      	b.n	800c476 <_scanf_float+0x12a>
 800c488:	6821      	ldr	r1, [r4, #0]
 800c48a:	05c8      	lsls	r0, r1, #23
 800c48c:	d51a      	bpl.n	800c4c4 <_scanf_float+0x178>
 800c48e:	9b02      	ldr	r3, [sp, #8]
 800c490:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c494:	6021      	str	r1, [r4, #0]
 800c496:	f109 0901 	add.w	r9, r9, #1
 800c49a:	b11b      	cbz	r3, 800c4a4 <_scanf_float+0x158>
 800c49c:	3b01      	subs	r3, #1
 800c49e:	3201      	adds	r2, #1
 800c4a0:	9302      	str	r3, [sp, #8]
 800c4a2:	60a2      	str	r2, [r4, #8]
 800c4a4:	68a3      	ldr	r3, [r4, #8]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	60a3      	str	r3, [r4, #8]
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	6123      	str	r3, [r4, #16]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	607b      	str	r3, [r7, #4]
 800c4b8:	f340 8084 	ble.w	800c5c4 <_scanf_float+0x278>
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	603b      	str	r3, [r7, #0]
 800c4c2:	e766      	b.n	800c392 <_scanf_float+0x46>
 800c4c4:	eb1a 0f05 	cmn.w	sl, r5
 800c4c8:	f47f af70 	bne.w	800c3ac <_scanf_float+0x60>
 800c4cc:	6822      	ldr	r2, [r4, #0]
 800c4ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c4d2:	6022      	str	r2, [r4, #0]
 800c4d4:	f806 3b01 	strb.w	r3, [r6], #1
 800c4d8:	e7e4      	b.n	800c4a4 <_scanf_float+0x158>
 800c4da:	6822      	ldr	r2, [r4, #0]
 800c4dc:	0610      	lsls	r0, r2, #24
 800c4de:	f57f af65 	bpl.w	800c3ac <_scanf_float+0x60>
 800c4e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4e6:	e7f4      	b.n	800c4d2 <_scanf_float+0x186>
 800c4e8:	f1ba 0f00 	cmp.w	sl, #0
 800c4ec:	d10e      	bne.n	800c50c <_scanf_float+0x1c0>
 800c4ee:	f1b9 0f00 	cmp.w	r9, #0
 800c4f2:	d10e      	bne.n	800c512 <_scanf_float+0x1c6>
 800c4f4:	6822      	ldr	r2, [r4, #0]
 800c4f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c4fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c4fe:	d108      	bne.n	800c512 <_scanf_float+0x1c6>
 800c500:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c504:	6022      	str	r2, [r4, #0]
 800c506:	f04f 0a01 	mov.w	sl, #1
 800c50a:	e7e3      	b.n	800c4d4 <_scanf_float+0x188>
 800c50c:	f1ba 0f02 	cmp.w	sl, #2
 800c510:	d055      	beq.n	800c5be <_scanf_float+0x272>
 800c512:	2d01      	cmp	r5, #1
 800c514:	d002      	beq.n	800c51c <_scanf_float+0x1d0>
 800c516:	2d04      	cmp	r5, #4
 800c518:	f47f af48 	bne.w	800c3ac <_scanf_float+0x60>
 800c51c:	3501      	adds	r5, #1
 800c51e:	b2ed      	uxtb	r5, r5
 800c520:	e7d8      	b.n	800c4d4 <_scanf_float+0x188>
 800c522:	f1ba 0f01 	cmp.w	sl, #1
 800c526:	f47f af41 	bne.w	800c3ac <_scanf_float+0x60>
 800c52a:	f04f 0a02 	mov.w	sl, #2
 800c52e:	e7d1      	b.n	800c4d4 <_scanf_float+0x188>
 800c530:	b97d      	cbnz	r5, 800c552 <_scanf_float+0x206>
 800c532:	f1b9 0f00 	cmp.w	r9, #0
 800c536:	f47f af3c 	bne.w	800c3b2 <_scanf_float+0x66>
 800c53a:	6822      	ldr	r2, [r4, #0]
 800c53c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c540:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c544:	f47f af39 	bne.w	800c3ba <_scanf_float+0x6e>
 800c548:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c54c:	6022      	str	r2, [r4, #0]
 800c54e:	2501      	movs	r5, #1
 800c550:	e7c0      	b.n	800c4d4 <_scanf_float+0x188>
 800c552:	2d03      	cmp	r5, #3
 800c554:	d0e2      	beq.n	800c51c <_scanf_float+0x1d0>
 800c556:	2d05      	cmp	r5, #5
 800c558:	e7de      	b.n	800c518 <_scanf_float+0x1cc>
 800c55a:	2d02      	cmp	r5, #2
 800c55c:	f47f af26 	bne.w	800c3ac <_scanf_float+0x60>
 800c560:	2503      	movs	r5, #3
 800c562:	e7b7      	b.n	800c4d4 <_scanf_float+0x188>
 800c564:	2d06      	cmp	r5, #6
 800c566:	f47f af21 	bne.w	800c3ac <_scanf_float+0x60>
 800c56a:	2507      	movs	r5, #7
 800c56c:	e7b2      	b.n	800c4d4 <_scanf_float+0x188>
 800c56e:	6822      	ldr	r2, [r4, #0]
 800c570:	0591      	lsls	r1, r2, #22
 800c572:	f57f af1b 	bpl.w	800c3ac <_scanf_float+0x60>
 800c576:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c57a:	6022      	str	r2, [r4, #0]
 800c57c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c580:	e7a8      	b.n	800c4d4 <_scanf_float+0x188>
 800c582:	6822      	ldr	r2, [r4, #0]
 800c584:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c588:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c58c:	d006      	beq.n	800c59c <_scanf_float+0x250>
 800c58e:	0550      	lsls	r0, r2, #21
 800c590:	f57f af0c 	bpl.w	800c3ac <_scanf_float+0x60>
 800c594:	f1b9 0f00 	cmp.w	r9, #0
 800c598:	f43f af0f 	beq.w	800c3ba <_scanf_float+0x6e>
 800c59c:	0591      	lsls	r1, r2, #22
 800c59e:	bf58      	it	pl
 800c5a0:	9901      	ldrpl	r1, [sp, #4]
 800c5a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c5a6:	bf58      	it	pl
 800c5a8:	eba9 0101 	subpl.w	r1, r9, r1
 800c5ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c5b0:	bf58      	it	pl
 800c5b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c5b6:	6022      	str	r2, [r4, #0]
 800c5b8:	f04f 0900 	mov.w	r9, #0
 800c5bc:	e78a      	b.n	800c4d4 <_scanf_float+0x188>
 800c5be:	f04f 0a03 	mov.w	sl, #3
 800c5c2:	e787      	b.n	800c4d4 <_scanf_float+0x188>
 800c5c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	4798      	blx	r3
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	f43f aedf 	beq.w	800c392 <_scanf_float+0x46>
 800c5d4:	e6ea      	b.n	800c3ac <_scanf_float+0x60>
 800c5d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c5de:	463a      	mov	r2, r7
 800c5e0:	4640      	mov	r0, r8
 800c5e2:	4798      	blx	r3
 800c5e4:	6923      	ldr	r3, [r4, #16]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	6123      	str	r3, [r4, #16]
 800c5ea:	e6ec      	b.n	800c3c6 <_scanf_float+0x7a>
 800c5ec:	1e6b      	subs	r3, r5, #1
 800c5ee:	2b06      	cmp	r3, #6
 800c5f0:	d825      	bhi.n	800c63e <_scanf_float+0x2f2>
 800c5f2:	2d02      	cmp	r5, #2
 800c5f4:	d836      	bhi.n	800c664 <_scanf_float+0x318>
 800c5f6:	455e      	cmp	r6, fp
 800c5f8:	f67f aee8 	bls.w	800c3cc <_scanf_float+0x80>
 800c5fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c600:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c604:	463a      	mov	r2, r7
 800c606:	4640      	mov	r0, r8
 800c608:	4798      	blx	r3
 800c60a:	6923      	ldr	r3, [r4, #16]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	6123      	str	r3, [r4, #16]
 800c610:	e7f1      	b.n	800c5f6 <_scanf_float+0x2aa>
 800c612:	9802      	ldr	r0, [sp, #8]
 800c614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c618:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c61c:	9002      	str	r0, [sp, #8]
 800c61e:	463a      	mov	r2, r7
 800c620:	4640      	mov	r0, r8
 800c622:	4798      	blx	r3
 800c624:	6923      	ldr	r3, [r4, #16]
 800c626:	3b01      	subs	r3, #1
 800c628:	6123      	str	r3, [r4, #16]
 800c62a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c62e:	fa5f fa8a 	uxtb.w	sl, sl
 800c632:	f1ba 0f02 	cmp.w	sl, #2
 800c636:	d1ec      	bne.n	800c612 <_scanf_float+0x2c6>
 800c638:	3d03      	subs	r5, #3
 800c63a:	b2ed      	uxtb	r5, r5
 800c63c:	1b76      	subs	r6, r6, r5
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	05da      	lsls	r2, r3, #23
 800c642:	d52f      	bpl.n	800c6a4 <_scanf_float+0x358>
 800c644:	055b      	lsls	r3, r3, #21
 800c646:	d510      	bpl.n	800c66a <_scanf_float+0x31e>
 800c648:	455e      	cmp	r6, fp
 800c64a:	f67f aebf 	bls.w	800c3cc <_scanf_float+0x80>
 800c64e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c656:	463a      	mov	r2, r7
 800c658:	4640      	mov	r0, r8
 800c65a:	4798      	blx	r3
 800c65c:	6923      	ldr	r3, [r4, #16]
 800c65e:	3b01      	subs	r3, #1
 800c660:	6123      	str	r3, [r4, #16]
 800c662:	e7f1      	b.n	800c648 <_scanf_float+0x2fc>
 800c664:	46aa      	mov	sl, r5
 800c666:	9602      	str	r6, [sp, #8]
 800c668:	e7df      	b.n	800c62a <_scanf_float+0x2de>
 800c66a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c66e:	6923      	ldr	r3, [r4, #16]
 800c670:	2965      	cmp	r1, #101	; 0x65
 800c672:	f103 33ff 	add.w	r3, r3, #4294967295
 800c676:	f106 35ff 	add.w	r5, r6, #4294967295
 800c67a:	6123      	str	r3, [r4, #16]
 800c67c:	d00c      	beq.n	800c698 <_scanf_float+0x34c>
 800c67e:	2945      	cmp	r1, #69	; 0x45
 800c680:	d00a      	beq.n	800c698 <_scanf_float+0x34c>
 800c682:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c686:	463a      	mov	r2, r7
 800c688:	4640      	mov	r0, r8
 800c68a:	4798      	blx	r3
 800c68c:	6923      	ldr	r3, [r4, #16]
 800c68e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c692:	3b01      	subs	r3, #1
 800c694:	1eb5      	subs	r5, r6, #2
 800c696:	6123      	str	r3, [r4, #16]
 800c698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c69c:	463a      	mov	r2, r7
 800c69e:	4640      	mov	r0, r8
 800c6a0:	4798      	blx	r3
 800c6a2:	462e      	mov	r6, r5
 800c6a4:	6825      	ldr	r5, [r4, #0]
 800c6a6:	f015 0510 	ands.w	r5, r5, #16
 800c6aa:	d158      	bne.n	800c75e <_scanf_float+0x412>
 800c6ac:	7035      	strb	r5, [r6, #0]
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c6b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6b8:	d11c      	bne.n	800c6f4 <_scanf_float+0x3a8>
 800c6ba:	9b01      	ldr	r3, [sp, #4]
 800c6bc:	454b      	cmp	r3, r9
 800c6be:	eba3 0209 	sub.w	r2, r3, r9
 800c6c2:	d124      	bne.n	800c70e <_scanf_float+0x3c2>
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	4659      	mov	r1, fp
 800c6c8:	4640      	mov	r0, r8
 800c6ca:	f002 fbf9 	bl	800eec0 <_strtod_r>
 800c6ce:	9b03      	ldr	r3, [sp, #12]
 800c6d0:	6821      	ldr	r1, [r4, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f011 0f02 	tst.w	r1, #2
 800c6d8:	ec57 6b10 	vmov	r6, r7, d0
 800c6dc:	f103 0204 	add.w	r2, r3, #4
 800c6e0:	d020      	beq.n	800c724 <_scanf_float+0x3d8>
 800c6e2:	9903      	ldr	r1, [sp, #12]
 800c6e4:	600a      	str	r2, [r1, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	e9c3 6700 	strd	r6, r7, [r3]
 800c6ec:	68e3      	ldr	r3, [r4, #12]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	60e3      	str	r3, [r4, #12]
 800c6f2:	e66c      	b.n	800c3ce <_scanf_float+0x82>
 800c6f4:	9b04      	ldr	r3, [sp, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d0e4      	beq.n	800c6c4 <_scanf_float+0x378>
 800c6fa:	9905      	ldr	r1, [sp, #20]
 800c6fc:	230a      	movs	r3, #10
 800c6fe:	462a      	mov	r2, r5
 800c700:	3101      	adds	r1, #1
 800c702:	4640      	mov	r0, r8
 800c704:	f002 fc64 	bl	800efd0 <_strtol_r>
 800c708:	9b04      	ldr	r3, [sp, #16]
 800c70a:	9e05      	ldr	r6, [sp, #20]
 800c70c:	1ac2      	subs	r2, r0, r3
 800c70e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c712:	429e      	cmp	r6, r3
 800c714:	bf28      	it	cs
 800c716:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c71a:	4912      	ldr	r1, [pc, #72]	; (800c764 <_scanf_float+0x418>)
 800c71c:	4630      	mov	r0, r6
 800c71e:	f000 f8e7 	bl	800c8f0 <siprintf>
 800c722:	e7cf      	b.n	800c6c4 <_scanf_float+0x378>
 800c724:	f011 0f04 	tst.w	r1, #4
 800c728:	9903      	ldr	r1, [sp, #12]
 800c72a:	600a      	str	r2, [r1, #0]
 800c72c:	d1db      	bne.n	800c6e6 <_scanf_float+0x39a>
 800c72e:	f8d3 8000 	ldr.w	r8, [r3]
 800c732:	ee10 2a10 	vmov	r2, s0
 800c736:	ee10 0a10 	vmov	r0, s0
 800c73a:	463b      	mov	r3, r7
 800c73c:	4639      	mov	r1, r7
 800c73e:	f7f4 fa1d 	bl	8000b7c <__aeabi_dcmpun>
 800c742:	b128      	cbz	r0, 800c750 <_scanf_float+0x404>
 800c744:	4808      	ldr	r0, [pc, #32]	; (800c768 <_scanf_float+0x41c>)
 800c746:	f000 fa33 	bl	800cbb0 <nanf>
 800c74a:	ed88 0a00 	vstr	s0, [r8]
 800c74e:	e7cd      	b.n	800c6ec <_scanf_float+0x3a0>
 800c750:	4630      	mov	r0, r6
 800c752:	4639      	mov	r1, r7
 800c754:	f7f4 fa70 	bl	8000c38 <__aeabi_d2f>
 800c758:	f8c8 0000 	str.w	r0, [r8]
 800c75c:	e7c6      	b.n	800c6ec <_scanf_float+0x3a0>
 800c75e:	2500      	movs	r5, #0
 800c760:	e635      	b.n	800c3ce <_scanf_float+0x82>
 800c762:	bf00      	nop
 800c764:	080103ac 	.word	0x080103ac
 800c768:	0801073d 	.word	0x0801073d

0800c76c <std>:
 800c76c:	2300      	movs	r3, #0
 800c76e:	b510      	push	{r4, lr}
 800c770:	4604      	mov	r4, r0
 800c772:	e9c0 3300 	strd	r3, r3, [r0]
 800c776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c77a:	6083      	str	r3, [r0, #8]
 800c77c:	8181      	strh	r1, [r0, #12]
 800c77e:	6643      	str	r3, [r0, #100]	; 0x64
 800c780:	81c2      	strh	r2, [r0, #14]
 800c782:	6183      	str	r3, [r0, #24]
 800c784:	4619      	mov	r1, r3
 800c786:	2208      	movs	r2, #8
 800c788:	305c      	adds	r0, #92	; 0x5c
 800c78a:	f000 f92e 	bl	800c9ea <memset>
 800c78e:	4b0d      	ldr	r3, [pc, #52]	; (800c7c4 <std+0x58>)
 800c790:	6263      	str	r3, [r4, #36]	; 0x24
 800c792:	4b0d      	ldr	r3, [pc, #52]	; (800c7c8 <std+0x5c>)
 800c794:	62a3      	str	r3, [r4, #40]	; 0x28
 800c796:	4b0d      	ldr	r3, [pc, #52]	; (800c7cc <std+0x60>)
 800c798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c79a:	4b0d      	ldr	r3, [pc, #52]	; (800c7d0 <std+0x64>)
 800c79c:	6323      	str	r3, [r4, #48]	; 0x30
 800c79e:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <std+0x68>)
 800c7a0:	6224      	str	r4, [r4, #32]
 800c7a2:	429c      	cmp	r4, r3
 800c7a4:	d006      	beq.n	800c7b4 <std+0x48>
 800c7a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c7aa:	4294      	cmp	r4, r2
 800c7ac:	d002      	beq.n	800c7b4 <std+0x48>
 800c7ae:	33d0      	adds	r3, #208	; 0xd0
 800c7b0:	429c      	cmp	r4, r3
 800c7b2:	d105      	bne.n	800c7c0 <std+0x54>
 800c7b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7bc:	f000 b9e6 	b.w	800cb8c <__retarget_lock_init_recursive>
 800c7c0:	bd10      	pop	{r4, pc}
 800c7c2:	bf00      	nop
 800c7c4:	0800c931 	.word	0x0800c931
 800c7c8:	0800c953 	.word	0x0800c953
 800c7cc:	0800c98b 	.word	0x0800c98b
 800c7d0:	0800c9af 	.word	0x0800c9af
 800c7d4:	20000540 	.word	0x20000540

0800c7d8 <stdio_exit_handler>:
 800c7d8:	4a02      	ldr	r2, [pc, #8]	; (800c7e4 <stdio_exit_handler+0xc>)
 800c7da:	4903      	ldr	r1, [pc, #12]	; (800c7e8 <stdio_exit_handler+0x10>)
 800c7dc:	4803      	ldr	r0, [pc, #12]	; (800c7ec <stdio_exit_handler+0x14>)
 800c7de:	f000 b869 	b.w	800c8b4 <_fwalk_sglue>
 800c7e2:	bf00      	nop
 800c7e4:	2000000c 	.word	0x2000000c
 800c7e8:	0800f391 	.word	0x0800f391
 800c7ec:	20000018 	.word	0x20000018

0800c7f0 <cleanup_stdio>:
 800c7f0:	6841      	ldr	r1, [r0, #4]
 800c7f2:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <cleanup_stdio+0x34>)
 800c7f4:	4299      	cmp	r1, r3
 800c7f6:	b510      	push	{r4, lr}
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	d001      	beq.n	800c800 <cleanup_stdio+0x10>
 800c7fc:	f002 fdc8 	bl	800f390 <_fflush_r>
 800c800:	68a1      	ldr	r1, [r4, #8]
 800c802:	4b09      	ldr	r3, [pc, #36]	; (800c828 <cleanup_stdio+0x38>)
 800c804:	4299      	cmp	r1, r3
 800c806:	d002      	beq.n	800c80e <cleanup_stdio+0x1e>
 800c808:	4620      	mov	r0, r4
 800c80a:	f002 fdc1 	bl	800f390 <_fflush_r>
 800c80e:	68e1      	ldr	r1, [r4, #12]
 800c810:	4b06      	ldr	r3, [pc, #24]	; (800c82c <cleanup_stdio+0x3c>)
 800c812:	4299      	cmp	r1, r3
 800c814:	d004      	beq.n	800c820 <cleanup_stdio+0x30>
 800c816:	4620      	mov	r0, r4
 800c818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c81c:	f002 bdb8 	b.w	800f390 <_fflush_r>
 800c820:	bd10      	pop	{r4, pc}
 800c822:	bf00      	nop
 800c824:	20000540 	.word	0x20000540
 800c828:	200005a8 	.word	0x200005a8
 800c82c:	20000610 	.word	0x20000610

0800c830 <global_stdio_init.part.0>:
 800c830:	b510      	push	{r4, lr}
 800c832:	4b0b      	ldr	r3, [pc, #44]	; (800c860 <global_stdio_init.part.0+0x30>)
 800c834:	4c0b      	ldr	r4, [pc, #44]	; (800c864 <global_stdio_init.part.0+0x34>)
 800c836:	4a0c      	ldr	r2, [pc, #48]	; (800c868 <global_stdio_init.part.0+0x38>)
 800c838:	601a      	str	r2, [r3, #0]
 800c83a:	4620      	mov	r0, r4
 800c83c:	2200      	movs	r2, #0
 800c83e:	2104      	movs	r1, #4
 800c840:	f7ff ff94 	bl	800c76c <std>
 800c844:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c848:	2201      	movs	r2, #1
 800c84a:	2109      	movs	r1, #9
 800c84c:	f7ff ff8e 	bl	800c76c <std>
 800c850:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c854:	2202      	movs	r2, #2
 800c856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c85a:	2112      	movs	r1, #18
 800c85c:	f7ff bf86 	b.w	800c76c <std>
 800c860:	20000678 	.word	0x20000678
 800c864:	20000540 	.word	0x20000540
 800c868:	0800c7d9 	.word	0x0800c7d9

0800c86c <__sfp_lock_acquire>:
 800c86c:	4801      	ldr	r0, [pc, #4]	; (800c874 <__sfp_lock_acquire+0x8>)
 800c86e:	f000 b98e 	b.w	800cb8e <__retarget_lock_acquire_recursive>
 800c872:	bf00      	nop
 800c874:	20000681 	.word	0x20000681

0800c878 <__sfp_lock_release>:
 800c878:	4801      	ldr	r0, [pc, #4]	; (800c880 <__sfp_lock_release+0x8>)
 800c87a:	f000 b989 	b.w	800cb90 <__retarget_lock_release_recursive>
 800c87e:	bf00      	nop
 800c880:	20000681 	.word	0x20000681

0800c884 <__sinit>:
 800c884:	b510      	push	{r4, lr}
 800c886:	4604      	mov	r4, r0
 800c888:	f7ff fff0 	bl	800c86c <__sfp_lock_acquire>
 800c88c:	6a23      	ldr	r3, [r4, #32]
 800c88e:	b11b      	cbz	r3, 800c898 <__sinit+0x14>
 800c890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c894:	f7ff bff0 	b.w	800c878 <__sfp_lock_release>
 800c898:	4b04      	ldr	r3, [pc, #16]	; (800c8ac <__sinit+0x28>)
 800c89a:	6223      	str	r3, [r4, #32]
 800c89c:	4b04      	ldr	r3, [pc, #16]	; (800c8b0 <__sinit+0x2c>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1f5      	bne.n	800c890 <__sinit+0xc>
 800c8a4:	f7ff ffc4 	bl	800c830 <global_stdio_init.part.0>
 800c8a8:	e7f2      	b.n	800c890 <__sinit+0xc>
 800c8aa:	bf00      	nop
 800c8ac:	0800c7f1 	.word	0x0800c7f1
 800c8b0:	20000678 	.word	0x20000678

0800c8b4 <_fwalk_sglue>:
 800c8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	4688      	mov	r8, r1
 800c8bc:	4614      	mov	r4, r2
 800c8be:	2600      	movs	r6, #0
 800c8c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8c4:	f1b9 0901 	subs.w	r9, r9, #1
 800c8c8:	d505      	bpl.n	800c8d6 <_fwalk_sglue+0x22>
 800c8ca:	6824      	ldr	r4, [r4, #0]
 800c8cc:	2c00      	cmp	r4, #0
 800c8ce:	d1f7      	bne.n	800c8c0 <_fwalk_sglue+0xc>
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8d6:	89ab      	ldrh	r3, [r5, #12]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d907      	bls.n	800c8ec <_fwalk_sglue+0x38>
 800c8dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	d003      	beq.n	800c8ec <_fwalk_sglue+0x38>
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4638      	mov	r0, r7
 800c8e8:	47c0      	blx	r8
 800c8ea:	4306      	orrs	r6, r0
 800c8ec:	3568      	adds	r5, #104	; 0x68
 800c8ee:	e7e9      	b.n	800c8c4 <_fwalk_sglue+0x10>

0800c8f0 <siprintf>:
 800c8f0:	b40e      	push	{r1, r2, r3}
 800c8f2:	b500      	push	{lr}
 800c8f4:	b09c      	sub	sp, #112	; 0x70
 800c8f6:	ab1d      	add	r3, sp, #116	; 0x74
 800c8f8:	9002      	str	r0, [sp, #8]
 800c8fa:	9006      	str	r0, [sp, #24]
 800c8fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c900:	4809      	ldr	r0, [pc, #36]	; (800c928 <siprintf+0x38>)
 800c902:	9107      	str	r1, [sp, #28]
 800c904:	9104      	str	r1, [sp, #16]
 800c906:	4909      	ldr	r1, [pc, #36]	; (800c92c <siprintf+0x3c>)
 800c908:	f853 2b04 	ldr.w	r2, [r3], #4
 800c90c:	9105      	str	r1, [sp, #20]
 800c90e:	6800      	ldr	r0, [r0, #0]
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	a902      	add	r1, sp, #8
 800c914:	f002 fbb8 	bl	800f088 <_svfiprintf_r>
 800c918:	9b02      	ldr	r3, [sp, #8]
 800c91a:	2200      	movs	r2, #0
 800c91c:	701a      	strb	r2, [r3, #0]
 800c91e:	b01c      	add	sp, #112	; 0x70
 800c920:	f85d eb04 	ldr.w	lr, [sp], #4
 800c924:	b003      	add	sp, #12
 800c926:	4770      	bx	lr
 800c928:	20000064 	.word	0x20000064
 800c92c:	ffff0208 	.word	0xffff0208

0800c930 <__sread>:
 800c930:	b510      	push	{r4, lr}
 800c932:	460c      	mov	r4, r1
 800c934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c938:	f000 f8b6 	bl	800caa8 <_read_r>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	bfab      	itete	ge
 800c940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c942:	89a3      	ldrhlt	r3, [r4, #12]
 800c944:	181b      	addge	r3, r3, r0
 800c946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c94a:	bfac      	ite	ge
 800c94c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c94e:	81a3      	strhlt	r3, [r4, #12]
 800c950:	bd10      	pop	{r4, pc}

0800c952 <__swrite>:
 800c952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c956:	461f      	mov	r7, r3
 800c958:	898b      	ldrh	r3, [r1, #12]
 800c95a:	05db      	lsls	r3, r3, #23
 800c95c:	4605      	mov	r5, r0
 800c95e:	460c      	mov	r4, r1
 800c960:	4616      	mov	r6, r2
 800c962:	d505      	bpl.n	800c970 <__swrite+0x1e>
 800c964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c968:	2302      	movs	r3, #2
 800c96a:	2200      	movs	r2, #0
 800c96c:	f000 f88a 	bl	800ca84 <_lseek_r>
 800c970:	89a3      	ldrh	r3, [r4, #12]
 800c972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c97a:	81a3      	strh	r3, [r4, #12]
 800c97c:	4632      	mov	r2, r6
 800c97e:	463b      	mov	r3, r7
 800c980:	4628      	mov	r0, r5
 800c982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c986:	f000 b8c5 	b.w	800cb14 <_write_r>

0800c98a <__sseek>:
 800c98a:	b510      	push	{r4, lr}
 800c98c:	460c      	mov	r4, r1
 800c98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c992:	f000 f877 	bl	800ca84 <_lseek_r>
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	bf15      	itete	ne
 800c99c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c99e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9a6:	81a3      	strheq	r3, [r4, #12]
 800c9a8:	bf18      	it	ne
 800c9aa:	81a3      	strhne	r3, [r4, #12]
 800c9ac:	bd10      	pop	{r4, pc}

0800c9ae <__sclose>:
 800c9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b2:	f000 b857 	b.w	800ca64 <_close_r>

0800c9b6 <memmove>:
 800c9b6:	4288      	cmp	r0, r1
 800c9b8:	b510      	push	{r4, lr}
 800c9ba:	eb01 0402 	add.w	r4, r1, r2
 800c9be:	d902      	bls.n	800c9c6 <memmove+0x10>
 800c9c0:	4284      	cmp	r4, r0
 800c9c2:	4623      	mov	r3, r4
 800c9c4:	d807      	bhi.n	800c9d6 <memmove+0x20>
 800c9c6:	1e43      	subs	r3, r0, #1
 800c9c8:	42a1      	cmp	r1, r4
 800c9ca:	d008      	beq.n	800c9de <memmove+0x28>
 800c9cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9d4:	e7f8      	b.n	800c9c8 <memmove+0x12>
 800c9d6:	4402      	add	r2, r0
 800c9d8:	4601      	mov	r1, r0
 800c9da:	428a      	cmp	r2, r1
 800c9dc:	d100      	bne.n	800c9e0 <memmove+0x2a>
 800c9de:	bd10      	pop	{r4, pc}
 800c9e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9e8:	e7f7      	b.n	800c9da <memmove+0x24>

0800c9ea <memset>:
 800c9ea:	4402      	add	r2, r0
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d100      	bne.n	800c9f4 <memset+0xa>
 800c9f2:	4770      	bx	lr
 800c9f4:	f803 1b01 	strb.w	r1, [r3], #1
 800c9f8:	e7f9      	b.n	800c9ee <memset+0x4>

0800c9fa <_raise_r>:
 800c9fa:	291f      	cmp	r1, #31
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	d904      	bls.n	800ca0e <_raise_r+0x14>
 800ca04:	2316      	movs	r3, #22
 800ca06:	6003      	str	r3, [r0, #0]
 800ca08:	f04f 30ff 	mov.w	r0, #4294967295
 800ca0c:	bd38      	pop	{r3, r4, r5, pc}
 800ca0e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ca10:	b112      	cbz	r2, 800ca18 <_raise_r+0x1e>
 800ca12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca16:	b94b      	cbnz	r3, 800ca2c <_raise_r+0x32>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 f869 	bl	800caf0 <_getpid_r>
 800ca1e:	462a      	mov	r2, r5
 800ca20:	4601      	mov	r1, r0
 800ca22:	4620      	mov	r0, r4
 800ca24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca28:	f000 b850 	b.w	800cacc <_kill_r>
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d00a      	beq.n	800ca46 <_raise_r+0x4c>
 800ca30:	1c59      	adds	r1, r3, #1
 800ca32:	d103      	bne.n	800ca3c <_raise_r+0x42>
 800ca34:	2316      	movs	r3, #22
 800ca36:	6003      	str	r3, [r0, #0]
 800ca38:	2001      	movs	r0, #1
 800ca3a:	e7e7      	b.n	800ca0c <_raise_r+0x12>
 800ca3c:	2400      	movs	r4, #0
 800ca3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca42:	4628      	mov	r0, r5
 800ca44:	4798      	blx	r3
 800ca46:	2000      	movs	r0, #0
 800ca48:	e7e0      	b.n	800ca0c <_raise_r+0x12>
	...

0800ca4c <raise>:
 800ca4c:	4b02      	ldr	r3, [pc, #8]	; (800ca58 <raise+0xc>)
 800ca4e:	4601      	mov	r1, r0
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	f7ff bfd2 	b.w	800c9fa <_raise_r>
 800ca56:	bf00      	nop
 800ca58:	20000064 	.word	0x20000064

0800ca5c <_localeconv_r>:
 800ca5c:	4800      	ldr	r0, [pc, #0]	; (800ca60 <_localeconv_r+0x4>)
 800ca5e:	4770      	bx	lr
 800ca60:	20000158 	.word	0x20000158

0800ca64 <_close_r>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	4d06      	ldr	r5, [pc, #24]	; (800ca80 <_close_r+0x1c>)
 800ca68:	2300      	movs	r3, #0
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	602b      	str	r3, [r5, #0]
 800ca70:	f7f7 fe11 	bl	8004696 <_close>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	d102      	bne.n	800ca7e <_close_r+0x1a>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	b103      	cbz	r3, 800ca7e <_close_r+0x1a>
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	bd38      	pop	{r3, r4, r5, pc}
 800ca80:	2000067c 	.word	0x2000067c

0800ca84 <_lseek_r>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4d07      	ldr	r5, [pc, #28]	; (800caa4 <_lseek_r+0x20>)
 800ca88:	4604      	mov	r4, r0
 800ca8a:	4608      	mov	r0, r1
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	2200      	movs	r2, #0
 800ca90:	602a      	str	r2, [r5, #0]
 800ca92:	461a      	mov	r2, r3
 800ca94:	f7f7 fe26 	bl	80046e4 <_lseek>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_lseek_r+0x1e>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_lseek_r+0x1e>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	2000067c 	.word	0x2000067c

0800caa8 <_read_r>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4d07      	ldr	r5, [pc, #28]	; (800cac8 <_read_r+0x20>)
 800caac:	4604      	mov	r4, r0
 800caae:	4608      	mov	r0, r1
 800cab0:	4611      	mov	r1, r2
 800cab2:	2200      	movs	r2, #0
 800cab4:	602a      	str	r2, [r5, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	f7f7 fdb4 	bl	8004624 <_read>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <_read_r+0x1e>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	b103      	cbz	r3, 800cac6 <_read_r+0x1e>
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	2000067c 	.word	0x2000067c

0800cacc <_kill_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4d07      	ldr	r5, [pc, #28]	; (800caec <_kill_r+0x20>)
 800cad0:	2300      	movs	r3, #0
 800cad2:	4604      	mov	r4, r0
 800cad4:	4608      	mov	r0, r1
 800cad6:	4611      	mov	r1, r2
 800cad8:	602b      	str	r3, [r5, #0]
 800cada:	f7f7 fd89 	bl	80045f0 <_kill>
 800cade:	1c43      	adds	r3, r0, #1
 800cae0:	d102      	bne.n	800cae8 <_kill_r+0x1c>
 800cae2:	682b      	ldr	r3, [r5, #0]
 800cae4:	b103      	cbz	r3, 800cae8 <_kill_r+0x1c>
 800cae6:	6023      	str	r3, [r4, #0]
 800cae8:	bd38      	pop	{r3, r4, r5, pc}
 800caea:	bf00      	nop
 800caec:	2000067c 	.word	0x2000067c

0800caf0 <_getpid_r>:
 800caf0:	f7f7 bd76 	b.w	80045e0 <_getpid>

0800caf4 <_sbrk_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	4d06      	ldr	r5, [pc, #24]	; (800cb10 <_sbrk_r+0x1c>)
 800caf8:	2300      	movs	r3, #0
 800cafa:	4604      	mov	r4, r0
 800cafc:	4608      	mov	r0, r1
 800cafe:	602b      	str	r3, [r5, #0]
 800cb00:	f7f7 fdfe 	bl	8004700 <_sbrk>
 800cb04:	1c43      	adds	r3, r0, #1
 800cb06:	d102      	bne.n	800cb0e <_sbrk_r+0x1a>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	b103      	cbz	r3, 800cb0e <_sbrk_r+0x1a>
 800cb0c:	6023      	str	r3, [r4, #0]
 800cb0e:	bd38      	pop	{r3, r4, r5, pc}
 800cb10:	2000067c 	.word	0x2000067c

0800cb14 <_write_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4d07      	ldr	r5, [pc, #28]	; (800cb34 <_write_r+0x20>)
 800cb18:	4604      	mov	r4, r0
 800cb1a:	4608      	mov	r0, r1
 800cb1c:	4611      	mov	r1, r2
 800cb1e:	2200      	movs	r2, #0
 800cb20:	602a      	str	r2, [r5, #0]
 800cb22:	461a      	mov	r2, r3
 800cb24:	f7f7 fd9b 	bl	800465e <_write>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_write_r+0x1e>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_write_r+0x1e>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	2000067c 	.word	0x2000067c

0800cb38 <__errno>:
 800cb38:	4b01      	ldr	r3, [pc, #4]	; (800cb40 <__errno+0x8>)
 800cb3a:	6818      	ldr	r0, [r3, #0]
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	20000064 	.word	0x20000064

0800cb44 <__libc_init_array>:
 800cb44:	b570      	push	{r4, r5, r6, lr}
 800cb46:	4d0d      	ldr	r5, [pc, #52]	; (800cb7c <__libc_init_array+0x38>)
 800cb48:	4c0d      	ldr	r4, [pc, #52]	; (800cb80 <__libc_init_array+0x3c>)
 800cb4a:	1b64      	subs	r4, r4, r5
 800cb4c:	10a4      	asrs	r4, r4, #2
 800cb4e:	2600      	movs	r6, #0
 800cb50:	42a6      	cmp	r6, r4
 800cb52:	d109      	bne.n	800cb68 <__libc_init_array+0x24>
 800cb54:	4d0b      	ldr	r5, [pc, #44]	; (800cb84 <__libc_init_array+0x40>)
 800cb56:	4c0c      	ldr	r4, [pc, #48]	; (800cb88 <__libc_init_array+0x44>)
 800cb58:	f003 fab0 	bl	80100bc <_init>
 800cb5c:	1b64      	subs	r4, r4, r5
 800cb5e:	10a4      	asrs	r4, r4, #2
 800cb60:	2600      	movs	r6, #0
 800cb62:	42a6      	cmp	r6, r4
 800cb64:	d105      	bne.n	800cb72 <__libc_init_array+0x2e>
 800cb66:	bd70      	pop	{r4, r5, r6, pc}
 800cb68:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb6c:	4798      	blx	r3
 800cb6e:	3601      	adds	r6, #1
 800cb70:	e7ee      	b.n	800cb50 <__libc_init_array+0xc>
 800cb72:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb76:	4798      	blx	r3
 800cb78:	3601      	adds	r6, #1
 800cb7a:	e7f2      	b.n	800cb62 <__libc_init_array+0x1e>
 800cb7c:	080107a8 	.word	0x080107a8
 800cb80:	080107a8 	.word	0x080107a8
 800cb84:	080107a8 	.word	0x080107a8
 800cb88:	080107b0 	.word	0x080107b0

0800cb8c <__retarget_lock_init_recursive>:
 800cb8c:	4770      	bx	lr

0800cb8e <__retarget_lock_acquire_recursive>:
 800cb8e:	4770      	bx	lr

0800cb90 <__retarget_lock_release_recursive>:
 800cb90:	4770      	bx	lr

0800cb92 <memcpy>:
 800cb92:	440a      	add	r2, r1
 800cb94:	4291      	cmp	r1, r2
 800cb96:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb9a:	d100      	bne.n	800cb9e <memcpy+0xc>
 800cb9c:	4770      	bx	lr
 800cb9e:	b510      	push	{r4, lr}
 800cba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cba8:	4291      	cmp	r1, r2
 800cbaa:	d1f9      	bne.n	800cba0 <memcpy+0xe>
 800cbac:	bd10      	pop	{r4, pc}
	...

0800cbb0 <nanf>:
 800cbb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cbb8 <nanf+0x8>
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	7fc00000 	.word	0x7fc00000

0800cbbc <quorem>:
 800cbbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	6903      	ldr	r3, [r0, #16]
 800cbc2:	690c      	ldr	r4, [r1, #16]
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	db7e      	blt.n	800ccc8 <quorem+0x10c>
 800cbca:	3c01      	subs	r4, #1
 800cbcc:	f101 0814 	add.w	r8, r1, #20
 800cbd0:	f100 0514 	add.w	r5, r0, #20
 800cbd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbd8:	9301      	str	r3, [sp, #4]
 800cbda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cbea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cbee:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbf2:	d331      	bcc.n	800cc58 <quorem+0x9c>
 800cbf4:	f04f 0e00 	mov.w	lr, #0
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	46ac      	mov	ip, r5
 800cbfc:	46f2      	mov	sl, lr
 800cbfe:	f850 2b04 	ldr.w	r2, [r0], #4
 800cc02:	b293      	uxth	r3, r2
 800cc04:	fb06 e303 	mla	r3, r6, r3, lr
 800cc08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cc0c:	0c1a      	lsrs	r2, r3, #16
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	ebaa 0303 	sub.w	r3, sl, r3
 800cc14:	f8dc a000 	ldr.w	sl, [ip]
 800cc18:	fa13 f38a 	uxtah	r3, r3, sl
 800cc1c:	fb06 220e 	mla	r2, r6, lr, r2
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	9b00      	ldr	r3, [sp, #0]
 800cc24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cc28:	b292      	uxth	r2, r2
 800cc2a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cc2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc32:	f8bd 3000 	ldrh.w	r3, [sp]
 800cc36:	4581      	cmp	r9, r0
 800cc38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc3c:	f84c 3b04 	str.w	r3, [ip], #4
 800cc40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cc44:	d2db      	bcs.n	800cbfe <quorem+0x42>
 800cc46:	f855 300b 	ldr.w	r3, [r5, fp]
 800cc4a:	b92b      	cbnz	r3, 800cc58 <quorem+0x9c>
 800cc4c:	9b01      	ldr	r3, [sp, #4]
 800cc4e:	3b04      	subs	r3, #4
 800cc50:	429d      	cmp	r5, r3
 800cc52:	461a      	mov	r2, r3
 800cc54:	d32c      	bcc.n	800ccb0 <quorem+0xf4>
 800cc56:	613c      	str	r4, [r7, #16]
 800cc58:	4638      	mov	r0, r7
 800cc5a:	f001 f93d 	bl	800ded8 <__mcmp>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	db22      	blt.n	800cca8 <quorem+0xec>
 800cc62:	3601      	adds	r6, #1
 800cc64:	4629      	mov	r1, r5
 800cc66:	2000      	movs	r0, #0
 800cc68:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc6c:	f8d1 c000 	ldr.w	ip, [r1]
 800cc70:	b293      	uxth	r3, r2
 800cc72:	1ac3      	subs	r3, r0, r3
 800cc74:	0c12      	lsrs	r2, r2, #16
 800cc76:	fa13 f38c 	uxtah	r3, r3, ip
 800cc7a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cc7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc88:	45c1      	cmp	r9, r8
 800cc8a:	f841 3b04 	str.w	r3, [r1], #4
 800cc8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc92:	d2e9      	bcs.n	800cc68 <quorem+0xac>
 800cc94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc9c:	b922      	cbnz	r2, 800cca8 <quorem+0xec>
 800cc9e:	3b04      	subs	r3, #4
 800cca0:	429d      	cmp	r5, r3
 800cca2:	461a      	mov	r2, r3
 800cca4:	d30a      	bcc.n	800ccbc <quorem+0x100>
 800cca6:	613c      	str	r4, [r7, #16]
 800cca8:	4630      	mov	r0, r6
 800ccaa:	b003      	add	sp, #12
 800ccac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb0:	6812      	ldr	r2, [r2, #0]
 800ccb2:	3b04      	subs	r3, #4
 800ccb4:	2a00      	cmp	r2, #0
 800ccb6:	d1ce      	bne.n	800cc56 <quorem+0x9a>
 800ccb8:	3c01      	subs	r4, #1
 800ccba:	e7c9      	b.n	800cc50 <quorem+0x94>
 800ccbc:	6812      	ldr	r2, [r2, #0]
 800ccbe:	3b04      	subs	r3, #4
 800ccc0:	2a00      	cmp	r2, #0
 800ccc2:	d1f0      	bne.n	800cca6 <quorem+0xea>
 800ccc4:	3c01      	subs	r4, #1
 800ccc6:	e7eb      	b.n	800cca0 <quorem+0xe4>
 800ccc8:	2000      	movs	r0, #0
 800ccca:	e7ee      	b.n	800ccaa <quorem+0xee>
 800cccc:	0000      	movs	r0, r0
	...

0800ccd0 <_dtoa_r>:
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	ed2d 8b04 	vpush	{d8-d9}
 800ccd8:	69c5      	ldr	r5, [r0, #28]
 800ccda:	b093      	sub	sp, #76	; 0x4c
 800ccdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cce0:	ec57 6b10 	vmov	r6, r7, d0
 800cce4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cce8:	9107      	str	r1, [sp, #28]
 800ccea:	4604      	mov	r4, r0
 800ccec:	920a      	str	r2, [sp, #40]	; 0x28
 800ccee:	930d      	str	r3, [sp, #52]	; 0x34
 800ccf0:	b975      	cbnz	r5, 800cd10 <_dtoa_r+0x40>
 800ccf2:	2010      	movs	r0, #16
 800ccf4:	f7fe fe08 	bl	800b908 <malloc>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	61e0      	str	r0, [r4, #28]
 800ccfc:	b920      	cbnz	r0, 800cd08 <_dtoa_r+0x38>
 800ccfe:	4bae      	ldr	r3, [pc, #696]	; (800cfb8 <_dtoa_r+0x2e8>)
 800cd00:	21ef      	movs	r1, #239	; 0xef
 800cd02:	48ae      	ldr	r0, [pc, #696]	; (800cfbc <_dtoa_r+0x2ec>)
 800cd04:	f002 fb88 	bl	800f418 <__assert_func>
 800cd08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd0c:	6005      	str	r5, [r0, #0]
 800cd0e:	60c5      	str	r5, [r0, #12]
 800cd10:	69e3      	ldr	r3, [r4, #28]
 800cd12:	6819      	ldr	r1, [r3, #0]
 800cd14:	b151      	cbz	r1, 800cd2c <_dtoa_r+0x5c>
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	604a      	str	r2, [r1, #4]
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	4093      	lsls	r3, r2
 800cd1e:	608b      	str	r3, [r1, #8]
 800cd20:	4620      	mov	r0, r4
 800cd22:	f000 fe53 	bl	800d9cc <_Bfree>
 800cd26:	69e3      	ldr	r3, [r4, #28]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	1e3b      	subs	r3, r7, #0
 800cd2e:	bfbb      	ittet	lt
 800cd30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cd34:	9303      	strlt	r3, [sp, #12]
 800cd36:	2300      	movge	r3, #0
 800cd38:	2201      	movlt	r2, #1
 800cd3a:	bfac      	ite	ge
 800cd3c:	f8c8 3000 	strge.w	r3, [r8]
 800cd40:	f8c8 2000 	strlt.w	r2, [r8]
 800cd44:	4b9e      	ldr	r3, [pc, #632]	; (800cfc0 <_dtoa_r+0x2f0>)
 800cd46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cd4a:	ea33 0308 	bics.w	r3, r3, r8
 800cd4e:	d11b      	bne.n	800cd88 <_dtoa_r+0xb8>
 800cd50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd52:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cd5c:	4333      	orrs	r3, r6
 800cd5e:	f000 8593 	beq.w	800d888 <_dtoa_r+0xbb8>
 800cd62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd64:	b963      	cbnz	r3, 800cd80 <_dtoa_r+0xb0>
 800cd66:	4b97      	ldr	r3, [pc, #604]	; (800cfc4 <_dtoa_r+0x2f4>)
 800cd68:	e027      	b.n	800cdba <_dtoa_r+0xea>
 800cd6a:	4b97      	ldr	r3, [pc, #604]	; (800cfc8 <_dtoa_r+0x2f8>)
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	3308      	adds	r3, #8
 800cd70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd72:	6013      	str	r3, [r2, #0]
 800cd74:	9800      	ldr	r0, [sp, #0]
 800cd76:	b013      	add	sp, #76	; 0x4c
 800cd78:	ecbd 8b04 	vpop	{d8-d9}
 800cd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd80:	4b90      	ldr	r3, [pc, #576]	; (800cfc4 <_dtoa_r+0x2f4>)
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	3303      	adds	r3, #3
 800cd86:	e7f3      	b.n	800cd70 <_dtoa_r+0xa0>
 800cd88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	ec51 0b17 	vmov	r0, r1, d7
 800cd92:	eeb0 8a47 	vmov.f32	s16, s14
 800cd96:	eef0 8a67 	vmov.f32	s17, s15
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f7f3 febc 	bl	8000b18 <__aeabi_dcmpeq>
 800cda0:	4681      	mov	r9, r0
 800cda2:	b160      	cbz	r0, 800cdbe <_dtoa_r+0xee>
 800cda4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cda6:	2301      	movs	r3, #1
 800cda8:	6013      	str	r3, [r2, #0]
 800cdaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 8568 	beq.w	800d882 <_dtoa_r+0xbb2>
 800cdb2:	4b86      	ldr	r3, [pc, #536]	; (800cfcc <_dtoa_r+0x2fc>)
 800cdb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdb6:	6013      	str	r3, [r2, #0]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	e7da      	b.n	800cd74 <_dtoa_r+0xa4>
 800cdbe:	aa10      	add	r2, sp, #64	; 0x40
 800cdc0:	a911      	add	r1, sp, #68	; 0x44
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	eeb0 0a48 	vmov.f32	s0, s16
 800cdc8:	eef0 0a68 	vmov.f32	s1, s17
 800cdcc:	f001 f99a 	bl	800e104 <__d2b>
 800cdd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cdd4:	4682      	mov	sl, r0
 800cdd6:	2d00      	cmp	r5, #0
 800cdd8:	d07f      	beq.n	800ceda <_dtoa_r+0x20a>
 800cdda:	ee18 3a90 	vmov	r3, s17
 800cdde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cde2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cde6:	ec51 0b18 	vmov	r0, r1, d8
 800cdea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cdee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cdf2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	4b75      	ldr	r3, [pc, #468]	; (800cfd0 <_dtoa_r+0x300>)
 800cdfc:	f7f3 fa6c 	bl	80002d8 <__aeabi_dsub>
 800ce00:	a367      	add	r3, pc, #412	; (adr r3, 800cfa0 <_dtoa_r+0x2d0>)
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	f7f3 fc1f 	bl	8000648 <__aeabi_dmul>
 800ce0a:	a367      	add	r3, pc, #412	; (adr r3, 800cfa8 <_dtoa_r+0x2d8>)
 800ce0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce10:	f7f3 fa64 	bl	80002dc <__adddf3>
 800ce14:	4606      	mov	r6, r0
 800ce16:	4628      	mov	r0, r5
 800ce18:	460f      	mov	r7, r1
 800ce1a:	f7f3 fbab 	bl	8000574 <__aeabi_i2d>
 800ce1e:	a364      	add	r3, pc, #400	; (adr r3, 800cfb0 <_dtoa_r+0x2e0>)
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	f7f3 fc10 	bl	8000648 <__aeabi_dmul>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	4639      	mov	r1, r7
 800ce30:	f7f3 fa54 	bl	80002dc <__adddf3>
 800ce34:	4606      	mov	r6, r0
 800ce36:	460f      	mov	r7, r1
 800ce38:	f7f3 feb6 	bl	8000ba8 <__aeabi_d2iz>
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	4683      	mov	fp, r0
 800ce40:	2300      	movs	r3, #0
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 fe71 	bl	8000b2c <__aeabi_dcmplt>
 800ce4a:	b148      	cbz	r0, 800ce60 <_dtoa_r+0x190>
 800ce4c:	4658      	mov	r0, fp
 800ce4e:	f7f3 fb91 	bl	8000574 <__aeabi_i2d>
 800ce52:	4632      	mov	r2, r6
 800ce54:	463b      	mov	r3, r7
 800ce56:	f7f3 fe5f 	bl	8000b18 <__aeabi_dcmpeq>
 800ce5a:	b908      	cbnz	r0, 800ce60 <_dtoa_r+0x190>
 800ce5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce60:	f1bb 0f16 	cmp.w	fp, #22
 800ce64:	d857      	bhi.n	800cf16 <_dtoa_r+0x246>
 800ce66:	4b5b      	ldr	r3, [pc, #364]	; (800cfd4 <_dtoa_r+0x304>)
 800ce68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce70:	ec51 0b18 	vmov	r0, r1, d8
 800ce74:	f7f3 fe5a 	bl	8000b2c <__aeabi_dcmplt>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d04e      	beq.n	800cf1a <_dtoa_r+0x24a>
 800ce7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce80:	2300      	movs	r3, #0
 800ce82:	930c      	str	r3, [sp, #48]	; 0x30
 800ce84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce86:	1b5b      	subs	r3, r3, r5
 800ce88:	1e5a      	subs	r2, r3, #1
 800ce8a:	bf45      	ittet	mi
 800ce8c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ce90:	9305      	strmi	r3, [sp, #20]
 800ce92:	2300      	movpl	r3, #0
 800ce94:	2300      	movmi	r3, #0
 800ce96:	9206      	str	r2, [sp, #24]
 800ce98:	bf54      	ite	pl
 800ce9a:	9305      	strpl	r3, [sp, #20]
 800ce9c:	9306      	strmi	r3, [sp, #24]
 800ce9e:	f1bb 0f00 	cmp.w	fp, #0
 800cea2:	db3c      	blt.n	800cf1e <_dtoa_r+0x24e>
 800cea4:	9b06      	ldr	r3, [sp, #24]
 800cea6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ceaa:	445b      	add	r3, fp
 800ceac:	9306      	str	r3, [sp, #24]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	9308      	str	r3, [sp, #32]
 800ceb2:	9b07      	ldr	r3, [sp, #28]
 800ceb4:	2b09      	cmp	r3, #9
 800ceb6:	d868      	bhi.n	800cf8a <_dtoa_r+0x2ba>
 800ceb8:	2b05      	cmp	r3, #5
 800ceba:	bfc4      	itt	gt
 800cebc:	3b04      	subgt	r3, #4
 800cebe:	9307      	strgt	r3, [sp, #28]
 800cec0:	9b07      	ldr	r3, [sp, #28]
 800cec2:	f1a3 0302 	sub.w	r3, r3, #2
 800cec6:	bfcc      	ite	gt
 800cec8:	2500      	movgt	r5, #0
 800ceca:	2501      	movle	r5, #1
 800cecc:	2b03      	cmp	r3, #3
 800cece:	f200 8085 	bhi.w	800cfdc <_dtoa_r+0x30c>
 800ced2:	e8df f003 	tbb	[pc, r3]
 800ced6:	3b2e      	.short	0x3b2e
 800ced8:	5839      	.short	0x5839
 800ceda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cede:	441d      	add	r5, r3
 800cee0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cee4:	2b20      	cmp	r3, #32
 800cee6:	bfc1      	itttt	gt
 800cee8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ceec:	fa08 f803 	lslgt.w	r8, r8, r3
 800cef0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cef4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cef8:	bfd6      	itet	le
 800cefa:	f1c3 0320 	rsble	r3, r3, #32
 800cefe:	ea48 0003 	orrgt.w	r0, r8, r3
 800cf02:	fa06 f003 	lslle.w	r0, r6, r3
 800cf06:	f7f3 fb25 	bl	8000554 <__aeabi_ui2d>
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cf10:	3d01      	subs	r5, #1
 800cf12:	920e      	str	r2, [sp, #56]	; 0x38
 800cf14:	e76f      	b.n	800cdf6 <_dtoa_r+0x126>
 800cf16:	2301      	movs	r3, #1
 800cf18:	e7b3      	b.n	800ce82 <_dtoa_r+0x1b2>
 800cf1a:	900c      	str	r0, [sp, #48]	; 0x30
 800cf1c:	e7b2      	b.n	800ce84 <_dtoa_r+0x1b4>
 800cf1e:	9b05      	ldr	r3, [sp, #20]
 800cf20:	eba3 030b 	sub.w	r3, r3, fp
 800cf24:	9305      	str	r3, [sp, #20]
 800cf26:	f1cb 0300 	rsb	r3, fp, #0
 800cf2a:	9308      	str	r3, [sp, #32]
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf30:	e7bf      	b.n	800ceb2 <_dtoa_r+0x1e2>
 800cf32:	2300      	movs	r3, #0
 800cf34:	9309      	str	r3, [sp, #36]	; 0x24
 800cf36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	dc52      	bgt.n	800cfe2 <_dtoa_r+0x312>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	9304      	str	r3, [sp, #16]
 800cf42:	461a      	mov	r2, r3
 800cf44:	920a      	str	r2, [sp, #40]	; 0x28
 800cf46:	e00b      	b.n	800cf60 <_dtoa_r+0x290>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e7f3      	b.n	800cf34 <_dtoa_r+0x264>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf52:	445b      	add	r3, fp
 800cf54:	9301      	str	r3, [sp, #4]
 800cf56:	3301      	adds	r3, #1
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	9304      	str	r3, [sp, #16]
 800cf5c:	bfb8      	it	lt
 800cf5e:	2301      	movlt	r3, #1
 800cf60:	69e0      	ldr	r0, [r4, #28]
 800cf62:	2100      	movs	r1, #0
 800cf64:	2204      	movs	r2, #4
 800cf66:	f102 0614 	add.w	r6, r2, #20
 800cf6a:	429e      	cmp	r6, r3
 800cf6c:	d93d      	bls.n	800cfea <_dtoa_r+0x31a>
 800cf6e:	6041      	str	r1, [r0, #4]
 800cf70:	4620      	mov	r0, r4
 800cf72:	f000 fceb 	bl	800d94c <_Balloc>
 800cf76:	9000      	str	r0, [sp, #0]
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d139      	bne.n	800cff0 <_dtoa_r+0x320>
 800cf7c:	4b16      	ldr	r3, [pc, #88]	; (800cfd8 <_dtoa_r+0x308>)
 800cf7e:	4602      	mov	r2, r0
 800cf80:	f240 11af 	movw	r1, #431	; 0x1af
 800cf84:	e6bd      	b.n	800cd02 <_dtoa_r+0x32>
 800cf86:	2301      	movs	r3, #1
 800cf88:	e7e1      	b.n	800cf4e <_dtoa_r+0x27e>
 800cf8a:	2501      	movs	r5, #1
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	9307      	str	r3, [sp, #28]
 800cf90:	9509      	str	r5, [sp, #36]	; 0x24
 800cf92:	f04f 33ff 	mov.w	r3, #4294967295
 800cf96:	9301      	str	r3, [sp, #4]
 800cf98:	9304      	str	r3, [sp, #16]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2312      	movs	r3, #18
 800cf9e:	e7d1      	b.n	800cf44 <_dtoa_r+0x274>
 800cfa0:	636f4361 	.word	0x636f4361
 800cfa4:	3fd287a7 	.word	0x3fd287a7
 800cfa8:	8b60c8b3 	.word	0x8b60c8b3
 800cfac:	3fc68a28 	.word	0x3fc68a28
 800cfb0:	509f79fb 	.word	0x509f79fb
 800cfb4:	3fd34413 	.word	0x3fd34413
 800cfb8:	080103be 	.word	0x080103be
 800cfbc:	080103d5 	.word	0x080103d5
 800cfc0:	7ff00000 	.word	0x7ff00000
 800cfc4:	080103ba 	.word	0x080103ba
 800cfc8:	080103b1 	.word	0x080103b1
 800cfcc:	08010389 	.word	0x08010389
 800cfd0:	3ff80000 	.word	0x3ff80000
 800cfd4:	080104c0 	.word	0x080104c0
 800cfd8:	0801042d 	.word	0x0801042d
 800cfdc:	2301      	movs	r3, #1
 800cfde:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe0:	e7d7      	b.n	800cf92 <_dtoa_r+0x2c2>
 800cfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	9304      	str	r3, [sp, #16]
 800cfe8:	e7ba      	b.n	800cf60 <_dtoa_r+0x290>
 800cfea:	3101      	adds	r1, #1
 800cfec:	0052      	lsls	r2, r2, #1
 800cfee:	e7ba      	b.n	800cf66 <_dtoa_r+0x296>
 800cff0:	69e3      	ldr	r3, [r4, #28]
 800cff2:	9a00      	ldr	r2, [sp, #0]
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	9b04      	ldr	r3, [sp, #16]
 800cff8:	2b0e      	cmp	r3, #14
 800cffa:	f200 80a8 	bhi.w	800d14e <_dtoa_r+0x47e>
 800cffe:	2d00      	cmp	r5, #0
 800d000:	f000 80a5 	beq.w	800d14e <_dtoa_r+0x47e>
 800d004:	f1bb 0f00 	cmp.w	fp, #0
 800d008:	dd38      	ble.n	800d07c <_dtoa_r+0x3ac>
 800d00a:	4bc0      	ldr	r3, [pc, #768]	; (800d30c <_dtoa_r+0x63c>)
 800d00c:	f00b 020f 	and.w	r2, fp, #15
 800d010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d014:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d018:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d01c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d020:	d019      	beq.n	800d056 <_dtoa_r+0x386>
 800d022:	4bbb      	ldr	r3, [pc, #748]	; (800d310 <_dtoa_r+0x640>)
 800d024:	ec51 0b18 	vmov	r0, r1, d8
 800d028:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d02c:	f7f3 fc36 	bl	800089c <__aeabi_ddiv>
 800d030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d034:	f008 080f 	and.w	r8, r8, #15
 800d038:	2503      	movs	r5, #3
 800d03a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d310 <_dtoa_r+0x640>
 800d03e:	f1b8 0f00 	cmp.w	r8, #0
 800d042:	d10a      	bne.n	800d05a <_dtoa_r+0x38a>
 800d044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d048:	4632      	mov	r2, r6
 800d04a:	463b      	mov	r3, r7
 800d04c:	f7f3 fc26 	bl	800089c <__aeabi_ddiv>
 800d050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d054:	e02b      	b.n	800d0ae <_dtoa_r+0x3de>
 800d056:	2502      	movs	r5, #2
 800d058:	e7ef      	b.n	800d03a <_dtoa_r+0x36a>
 800d05a:	f018 0f01 	tst.w	r8, #1
 800d05e:	d008      	beq.n	800d072 <_dtoa_r+0x3a2>
 800d060:	4630      	mov	r0, r6
 800d062:	4639      	mov	r1, r7
 800d064:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d068:	f7f3 faee 	bl	8000648 <__aeabi_dmul>
 800d06c:	3501      	adds	r5, #1
 800d06e:	4606      	mov	r6, r0
 800d070:	460f      	mov	r7, r1
 800d072:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d076:	f109 0908 	add.w	r9, r9, #8
 800d07a:	e7e0      	b.n	800d03e <_dtoa_r+0x36e>
 800d07c:	f000 809f 	beq.w	800d1be <_dtoa_r+0x4ee>
 800d080:	f1cb 0600 	rsb	r6, fp, #0
 800d084:	4ba1      	ldr	r3, [pc, #644]	; (800d30c <_dtoa_r+0x63c>)
 800d086:	4fa2      	ldr	r7, [pc, #648]	; (800d310 <_dtoa_r+0x640>)
 800d088:	f006 020f 	and.w	r2, r6, #15
 800d08c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	ec51 0b18 	vmov	r0, r1, d8
 800d098:	f7f3 fad6 	bl	8000648 <__aeabi_dmul>
 800d09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0a0:	1136      	asrs	r6, r6, #4
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	2502      	movs	r5, #2
 800d0a6:	2e00      	cmp	r6, #0
 800d0a8:	d17e      	bne.n	800d1a8 <_dtoa_r+0x4d8>
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1d0      	bne.n	800d050 <_dtoa_r+0x380>
 800d0ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 8084 	beq.w	800d1c2 <_dtoa_r+0x4f2>
 800d0ba:	4b96      	ldr	r3, [pc, #600]	; (800d314 <_dtoa_r+0x644>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	4640      	mov	r0, r8
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	f7f3 fd33 	bl	8000b2c <__aeabi_dcmplt>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d07b      	beq.n	800d1c2 <_dtoa_r+0x4f2>
 800d0ca:	9b04      	ldr	r3, [sp, #16]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d078      	beq.n	800d1c2 <_dtoa_r+0x4f2>
 800d0d0:	9b01      	ldr	r3, [sp, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dd39      	ble.n	800d14a <_dtoa_r+0x47a>
 800d0d6:	4b90      	ldr	r3, [pc, #576]	; (800d318 <_dtoa_r+0x648>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	4640      	mov	r0, r8
 800d0dc:	4649      	mov	r1, r9
 800d0de:	f7f3 fab3 	bl	8000648 <__aeabi_dmul>
 800d0e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0e6:	9e01      	ldr	r6, [sp, #4]
 800d0e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d0ec:	3501      	adds	r5, #1
 800d0ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	f7f3 fa3e 	bl	8000574 <__aeabi_i2d>
 800d0f8:	4642      	mov	r2, r8
 800d0fa:	464b      	mov	r3, r9
 800d0fc:	f7f3 faa4 	bl	8000648 <__aeabi_dmul>
 800d100:	4b86      	ldr	r3, [pc, #536]	; (800d31c <_dtoa_r+0x64c>)
 800d102:	2200      	movs	r2, #0
 800d104:	f7f3 f8ea 	bl	80002dc <__adddf3>
 800d108:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d10c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d110:	9303      	str	r3, [sp, #12]
 800d112:	2e00      	cmp	r6, #0
 800d114:	d158      	bne.n	800d1c8 <_dtoa_r+0x4f8>
 800d116:	4b82      	ldr	r3, [pc, #520]	; (800d320 <_dtoa_r+0x650>)
 800d118:	2200      	movs	r2, #0
 800d11a:	4640      	mov	r0, r8
 800d11c:	4649      	mov	r1, r9
 800d11e:	f7f3 f8db 	bl	80002d8 <__aeabi_dsub>
 800d122:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d126:	4680      	mov	r8, r0
 800d128:	4689      	mov	r9, r1
 800d12a:	f7f3 fd1d 	bl	8000b68 <__aeabi_dcmpgt>
 800d12e:	2800      	cmp	r0, #0
 800d130:	f040 8296 	bne.w	800d660 <_dtoa_r+0x990>
 800d134:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d138:	4640      	mov	r0, r8
 800d13a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d13e:	4649      	mov	r1, r9
 800d140:	f7f3 fcf4 	bl	8000b2c <__aeabi_dcmplt>
 800d144:	2800      	cmp	r0, #0
 800d146:	f040 8289 	bne.w	800d65c <_dtoa_r+0x98c>
 800d14a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d14e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d150:	2b00      	cmp	r3, #0
 800d152:	f2c0 814e 	blt.w	800d3f2 <_dtoa_r+0x722>
 800d156:	f1bb 0f0e 	cmp.w	fp, #14
 800d15a:	f300 814a 	bgt.w	800d3f2 <_dtoa_r+0x722>
 800d15e:	4b6b      	ldr	r3, [pc, #428]	; (800d30c <_dtoa_r+0x63c>)
 800d160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d164:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f280 80dc 	bge.w	800d328 <_dtoa_r+0x658>
 800d170:	9b04      	ldr	r3, [sp, #16]
 800d172:	2b00      	cmp	r3, #0
 800d174:	f300 80d8 	bgt.w	800d328 <_dtoa_r+0x658>
 800d178:	f040 826f 	bne.w	800d65a <_dtoa_r+0x98a>
 800d17c:	4b68      	ldr	r3, [pc, #416]	; (800d320 <_dtoa_r+0x650>)
 800d17e:	2200      	movs	r2, #0
 800d180:	4640      	mov	r0, r8
 800d182:	4649      	mov	r1, r9
 800d184:	f7f3 fa60 	bl	8000648 <__aeabi_dmul>
 800d188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d18c:	f7f3 fce2 	bl	8000b54 <__aeabi_dcmpge>
 800d190:	9e04      	ldr	r6, [sp, #16]
 800d192:	4637      	mov	r7, r6
 800d194:	2800      	cmp	r0, #0
 800d196:	f040 8245 	bne.w	800d624 <_dtoa_r+0x954>
 800d19a:	9d00      	ldr	r5, [sp, #0]
 800d19c:	2331      	movs	r3, #49	; 0x31
 800d19e:	f805 3b01 	strb.w	r3, [r5], #1
 800d1a2:	f10b 0b01 	add.w	fp, fp, #1
 800d1a6:	e241      	b.n	800d62c <_dtoa_r+0x95c>
 800d1a8:	07f2      	lsls	r2, r6, #31
 800d1aa:	d505      	bpl.n	800d1b8 <_dtoa_r+0x4e8>
 800d1ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1b0:	f7f3 fa4a 	bl	8000648 <__aeabi_dmul>
 800d1b4:	3501      	adds	r5, #1
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	1076      	asrs	r6, r6, #1
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	e773      	b.n	800d0a6 <_dtoa_r+0x3d6>
 800d1be:	2502      	movs	r5, #2
 800d1c0:	e775      	b.n	800d0ae <_dtoa_r+0x3de>
 800d1c2:	9e04      	ldr	r6, [sp, #16]
 800d1c4:	465f      	mov	r7, fp
 800d1c6:	e792      	b.n	800d0ee <_dtoa_r+0x41e>
 800d1c8:	9900      	ldr	r1, [sp, #0]
 800d1ca:	4b50      	ldr	r3, [pc, #320]	; (800d30c <_dtoa_r+0x63c>)
 800d1cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1d0:	4431      	add	r1, r6
 800d1d2:	9102      	str	r1, [sp, #8]
 800d1d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d1d6:	eeb0 9a47 	vmov.f32	s18, s14
 800d1da:	eef0 9a67 	vmov.f32	s19, s15
 800d1de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d1e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d1e6:	2900      	cmp	r1, #0
 800d1e8:	d044      	beq.n	800d274 <_dtoa_r+0x5a4>
 800d1ea:	494e      	ldr	r1, [pc, #312]	; (800d324 <_dtoa_r+0x654>)
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	f7f3 fb55 	bl	800089c <__aeabi_ddiv>
 800d1f2:	ec53 2b19 	vmov	r2, r3, d9
 800d1f6:	f7f3 f86f 	bl	80002d8 <__aeabi_dsub>
 800d1fa:	9d00      	ldr	r5, [sp, #0]
 800d1fc:	ec41 0b19 	vmov	d9, r0, r1
 800d200:	4649      	mov	r1, r9
 800d202:	4640      	mov	r0, r8
 800d204:	f7f3 fcd0 	bl	8000ba8 <__aeabi_d2iz>
 800d208:	4606      	mov	r6, r0
 800d20a:	f7f3 f9b3 	bl	8000574 <__aeabi_i2d>
 800d20e:	4602      	mov	r2, r0
 800d210:	460b      	mov	r3, r1
 800d212:	4640      	mov	r0, r8
 800d214:	4649      	mov	r1, r9
 800d216:	f7f3 f85f 	bl	80002d8 <__aeabi_dsub>
 800d21a:	3630      	adds	r6, #48	; 0x30
 800d21c:	f805 6b01 	strb.w	r6, [r5], #1
 800d220:	ec53 2b19 	vmov	r2, r3, d9
 800d224:	4680      	mov	r8, r0
 800d226:	4689      	mov	r9, r1
 800d228:	f7f3 fc80 	bl	8000b2c <__aeabi_dcmplt>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d164      	bne.n	800d2fa <_dtoa_r+0x62a>
 800d230:	4642      	mov	r2, r8
 800d232:	464b      	mov	r3, r9
 800d234:	4937      	ldr	r1, [pc, #220]	; (800d314 <_dtoa_r+0x644>)
 800d236:	2000      	movs	r0, #0
 800d238:	f7f3 f84e 	bl	80002d8 <__aeabi_dsub>
 800d23c:	ec53 2b19 	vmov	r2, r3, d9
 800d240:	f7f3 fc74 	bl	8000b2c <__aeabi_dcmplt>
 800d244:	2800      	cmp	r0, #0
 800d246:	f040 80b6 	bne.w	800d3b6 <_dtoa_r+0x6e6>
 800d24a:	9b02      	ldr	r3, [sp, #8]
 800d24c:	429d      	cmp	r5, r3
 800d24e:	f43f af7c 	beq.w	800d14a <_dtoa_r+0x47a>
 800d252:	4b31      	ldr	r3, [pc, #196]	; (800d318 <_dtoa_r+0x648>)
 800d254:	ec51 0b19 	vmov	r0, r1, d9
 800d258:	2200      	movs	r2, #0
 800d25a:	f7f3 f9f5 	bl	8000648 <__aeabi_dmul>
 800d25e:	4b2e      	ldr	r3, [pc, #184]	; (800d318 <_dtoa_r+0x648>)
 800d260:	ec41 0b19 	vmov	d9, r0, r1
 800d264:	2200      	movs	r2, #0
 800d266:	4640      	mov	r0, r8
 800d268:	4649      	mov	r1, r9
 800d26a:	f7f3 f9ed 	bl	8000648 <__aeabi_dmul>
 800d26e:	4680      	mov	r8, r0
 800d270:	4689      	mov	r9, r1
 800d272:	e7c5      	b.n	800d200 <_dtoa_r+0x530>
 800d274:	ec51 0b17 	vmov	r0, r1, d7
 800d278:	f7f3 f9e6 	bl	8000648 <__aeabi_dmul>
 800d27c:	9b02      	ldr	r3, [sp, #8]
 800d27e:	9d00      	ldr	r5, [sp, #0]
 800d280:	930f      	str	r3, [sp, #60]	; 0x3c
 800d282:	ec41 0b19 	vmov	d9, r0, r1
 800d286:	4649      	mov	r1, r9
 800d288:	4640      	mov	r0, r8
 800d28a:	f7f3 fc8d 	bl	8000ba8 <__aeabi_d2iz>
 800d28e:	4606      	mov	r6, r0
 800d290:	f7f3 f970 	bl	8000574 <__aeabi_i2d>
 800d294:	3630      	adds	r6, #48	; 0x30
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4640      	mov	r0, r8
 800d29c:	4649      	mov	r1, r9
 800d29e:	f7f3 f81b 	bl	80002d8 <__aeabi_dsub>
 800d2a2:	f805 6b01 	strb.w	r6, [r5], #1
 800d2a6:	9b02      	ldr	r3, [sp, #8]
 800d2a8:	429d      	cmp	r5, r3
 800d2aa:	4680      	mov	r8, r0
 800d2ac:	4689      	mov	r9, r1
 800d2ae:	f04f 0200 	mov.w	r2, #0
 800d2b2:	d124      	bne.n	800d2fe <_dtoa_r+0x62e>
 800d2b4:	4b1b      	ldr	r3, [pc, #108]	; (800d324 <_dtoa_r+0x654>)
 800d2b6:	ec51 0b19 	vmov	r0, r1, d9
 800d2ba:	f7f3 f80f 	bl	80002dc <__adddf3>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	4649      	mov	r1, r9
 800d2c6:	f7f3 fc4f 	bl	8000b68 <__aeabi_dcmpgt>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d173      	bne.n	800d3b6 <_dtoa_r+0x6e6>
 800d2ce:	ec53 2b19 	vmov	r2, r3, d9
 800d2d2:	4914      	ldr	r1, [pc, #80]	; (800d324 <_dtoa_r+0x654>)
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	f7f2 ffff 	bl	80002d8 <__aeabi_dsub>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	4640      	mov	r0, r8
 800d2e0:	4649      	mov	r1, r9
 800d2e2:	f7f3 fc23 	bl	8000b2c <__aeabi_dcmplt>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	f43f af2f 	beq.w	800d14a <_dtoa_r+0x47a>
 800d2ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d2ee:	1e6b      	subs	r3, r5, #1
 800d2f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d2f6:	2b30      	cmp	r3, #48	; 0x30
 800d2f8:	d0f8      	beq.n	800d2ec <_dtoa_r+0x61c>
 800d2fa:	46bb      	mov	fp, r7
 800d2fc:	e04a      	b.n	800d394 <_dtoa_r+0x6c4>
 800d2fe:	4b06      	ldr	r3, [pc, #24]	; (800d318 <_dtoa_r+0x648>)
 800d300:	f7f3 f9a2 	bl	8000648 <__aeabi_dmul>
 800d304:	4680      	mov	r8, r0
 800d306:	4689      	mov	r9, r1
 800d308:	e7bd      	b.n	800d286 <_dtoa_r+0x5b6>
 800d30a:	bf00      	nop
 800d30c:	080104c0 	.word	0x080104c0
 800d310:	08010498 	.word	0x08010498
 800d314:	3ff00000 	.word	0x3ff00000
 800d318:	40240000 	.word	0x40240000
 800d31c:	401c0000 	.word	0x401c0000
 800d320:	40140000 	.word	0x40140000
 800d324:	3fe00000 	.word	0x3fe00000
 800d328:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d32c:	9d00      	ldr	r5, [sp, #0]
 800d32e:	4642      	mov	r2, r8
 800d330:	464b      	mov	r3, r9
 800d332:	4630      	mov	r0, r6
 800d334:	4639      	mov	r1, r7
 800d336:	f7f3 fab1 	bl	800089c <__aeabi_ddiv>
 800d33a:	f7f3 fc35 	bl	8000ba8 <__aeabi_d2iz>
 800d33e:	9001      	str	r0, [sp, #4]
 800d340:	f7f3 f918 	bl	8000574 <__aeabi_i2d>
 800d344:	4642      	mov	r2, r8
 800d346:	464b      	mov	r3, r9
 800d348:	f7f3 f97e 	bl	8000648 <__aeabi_dmul>
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	4630      	mov	r0, r6
 800d352:	4639      	mov	r1, r7
 800d354:	f7f2 ffc0 	bl	80002d8 <__aeabi_dsub>
 800d358:	9e01      	ldr	r6, [sp, #4]
 800d35a:	9f04      	ldr	r7, [sp, #16]
 800d35c:	3630      	adds	r6, #48	; 0x30
 800d35e:	f805 6b01 	strb.w	r6, [r5], #1
 800d362:	9e00      	ldr	r6, [sp, #0]
 800d364:	1bae      	subs	r6, r5, r6
 800d366:	42b7      	cmp	r7, r6
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	d134      	bne.n	800d3d8 <_dtoa_r+0x708>
 800d36e:	f7f2 ffb5 	bl	80002dc <__adddf3>
 800d372:	4642      	mov	r2, r8
 800d374:	464b      	mov	r3, r9
 800d376:	4606      	mov	r6, r0
 800d378:	460f      	mov	r7, r1
 800d37a:	f7f3 fbf5 	bl	8000b68 <__aeabi_dcmpgt>
 800d37e:	b9c8      	cbnz	r0, 800d3b4 <_dtoa_r+0x6e4>
 800d380:	4642      	mov	r2, r8
 800d382:	464b      	mov	r3, r9
 800d384:	4630      	mov	r0, r6
 800d386:	4639      	mov	r1, r7
 800d388:	f7f3 fbc6 	bl	8000b18 <__aeabi_dcmpeq>
 800d38c:	b110      	cbz	r0, 800d394 <_dtoa_r+0x6c4>
 800d38e:	9b01      	ldr	r3, [sp, #4]
 800d390:	07db      	lsls	r3, r3, #31
 800d392:	d40f      	bmi.n	800d3b4 <_dtoa_r+0x6e4>
 800d394:	4651      	mov	r1, sl
 800d396:	4620      	mov	r0, r4
 800d398:	f000 fb18 	bl	800d9cc <_Bfree>
 800d39c:	2300      	movs	r3, #0
 800d39e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3a0:	702b      	strb	r3, [r5, #0]
 800d3a2:	f10b 0301 	add.w	r3, fp, #1
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f43f ace2 	beq.w	800cd74 <_dtoa_r+0xa4>
 800d3b0:	601d      	str	r5, [r3, #0]
 800d3b2:	e4df      	b.n	800cd74 <_dtoa_r+0xa4>
 800d3b4:	465f      	mov	r7, fp
 800d3b6:	462b      	mov	r3, r5
 800d3b8:	461d      	mov	r5, r3
 800d3ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3be:	2a39      	cmp	r2, #57	; 0x39
 800d3c0:	d106      	bne.n	800d3d0 <_dtoa_r+0x700>
 800d3c2:	9a00      	ldr	r2, [sp, #0]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d1f7      	bne.n	800d3b8 <_dtoa_r+0x6e8>
 800d3c8:	9900      	ldr	r1, [sp, #0]
 800d3ca:	2230      	movs	r2, #48	; 0x30
 800d3cc:	3701      	adds	r7, #1
 800d3ce:	700a      	strb	r2, [r1, #0]
 800d3d0:	781a      	ldrb	r2, [r3, #0]
 800d3d2:	3201      	adds	r2, #1
 800d3d4:	701a      	strb	r2, [r3, #0]
 800d3d6:	e790      	b.n	800d2fa <_dtoa_r+0x62a>
 800d3d8:	4ba3      	ldr	r3, [pc, #652]	; (800d668 <_dtoa_r+0x998>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f7f3 f934 	bl	8000648 <__aeabi_dmul>
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	f7f3 fb96 	bl	8000b18 <__aeabi_dcmpeq>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	d09e      	beq.n	800d32e <_dtoa_r+0x65e>
 800d3f0:	e7d0      	b.n	800d394 <_dtoa_r+0x6c4>
 800d3f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3f4:	2a00      	cmp	r2, #0
 800d3f6:	f000 80ca 	beq.w	800d58e <_dtoa_r+0x8be>
 800d3fa:	9a07      	ldr	r2, [sp, #28]
 800d3fc:	2a01      	cmp	r2, #1
 800d3fe:	f300 80ad 	bgt.w	800d55c <_dtoa_r+0x88c>
 800d402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d404:	2a00      	cmp	r2, #0
 800d406:	f000 80a5 	beq.w	800d554 <_dtoa_r+0x884>
 800d40a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d40e:	9e08      	ldr	r6, [sp, #32]
 800d410:	9d05      	ldr	r5, [sp, #20]
 800d412:	9a05      	ldr	r2, [sp, #20]
 800d414:	441a      	add	r2, r3
 800d416:	9205      	str	r2, [sp, #20]
 800d418:	9a06      	ldr	r2, [sp, #24]
 800d41a:	2101      	movs	r1, #1
 800d41c:	441a      	add	r2, r3
 800d41e:	4620      	mov	r0, r4
 800d420:	9206      	str	r2, [sp, #24]
 800d422:	f000 fbd3 	bl	800dbcc <__i2b>
 800d426:	4607      	mov	r7, r0
 800d428:	b165      	cbz	r5, 800d444 <_dtoa_r+0x774>
 800d42a:	9b06      	ldr	r3, [sp, #24]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	dd09      	ble.n	800d444 <_dtoa_r+0x774>
 800d430:	42ab      	cmp	r3, r5
 800d432:	9a05      	ldr	r2, [sp, #20]
 800d434:	bfa8      	it	ge
 800d436:	462b      	movge	r3, r5
 800d438:	1ad2      	subs	r2, r2, r3
 800d43a:	9205      	str	r2, [sp, #20]
 800d43c:	9a06      	ldr	r2, [sp, #24]
 800d43e:	1aed      	subs	r5, r5, r3
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	9306      	str	r3, [sp, #24]
 800d444:	9b08      	ldr	r3, [sp, #32]
 800d446:	b1f3      	cbz	r3, 800d486 <_dtoa_r+0x7b6>
 800d448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f000 80a3 	beq.w	800d596 <_dtoa_r+0x8c6>
 800d450:	2e00      	cmp	r6, #0
 800d452:	dd10      	ble.n	800d476 <_dtoa_r+0x7a6>
 800d454:	4639      	mov	r1, r7
 800d456:	4632      	mov	r2, r6
 800d458:	4620      	mov	r0, r4
 800d45a:	f000 fc77 	bl	800dd4c <__pow5mult>
 800d45e:	4652      	mov	r2, sl
 800d460:	4601      	mov	r1, r0
 800d462:	4607      	mov	r7, r0
 800d464:	4620      	mov	r0, r4
 800d466:	f000 fbc7 	bl	800dbf8 <__multiply>
 800d46a:	4651      	mov	r1, sl
 800d46c:	4680      	mov	r8, r0
 800d46e:	4620      	mov	r0, r4
 800d470:	f000 faac 	bl	800d9cc <_Bfree>
 800d474:	46c2      	mov	sl, r8
 800d476:	9b08      	ldr	r3, [sp, #32]
 800d478:	1b9a      	subs	r2, r3, r6
 800d47a:	d004      	beq.n	800d486 <_dtoa_r+0x7b6>
 800d47c:	4651      	mov	r1, sl
 800d47e:	4620      	mov	r0, r4
 800d480:	f000 fc64 	bl	800dd4c <__pow5mult>
 800d484:	4682      	mov	sl, r0
 800d486:	2101      	movs	r1, #1
 800d488:	4620      	mov	r0, r4
 800d48a:	f000 fb9f 	bl	800dbcc <__i2b>
 800d48e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d490:	2b00      	cmp	r3, #0
 800d492:	4606      	mov	r6, r0
 800d494:	f340 8081 	ble.w	800d59a <_dtoa_r+0x8ca>
 800d498:	461a      	mov	r2, r3
 800d49a:	4601      	mov	r1, r0
 800d49c:	4620      	mov	r0, r4
 800d49e:	f000 fc55 	bl	800dd4c <__pow5mult>
 800d4a2:	9b07      	ldr	r3, [sp, #28]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	dd7a      	ble.n	800d5a0 <_dtoa_r+0x8d0>
 800d4aa:	f04f 0800 	mov.w	r8, #0
 800d4ae:	6933      	ldr	r3, [r6, #16]
 800d4b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d4b4:	6918      	ldr	r0, [r3, #16]
 800d4b6:	f000 fb3b 	bl	800db30 <__hi0bits>
 800d4ba:	f1c0 0020 	rsb	r0, r0, #32
 800d4be:	9b06      	ldr	r3, [sp, #24]
 800d4c0:	4418      	add	r0, r3
 800d4c2:	f010 001f 	ands.w	r0, r0, #31
 800d4c6:	f000 8094 	beq.w	800d5f2 <_dtoa_r+0x922>
 800d4ca:	f1c0 0320 	rsb	r3, r0, #32
 800d4ce:	2b04      	cmp	r3, #4
 800d4d0:	f340 8085 	ble.w	800d5de <_dtoa_r+0x90e>
 800d4d4:	9b05      	ldr	r3, [sp, #20]
 800d4d6:	f1c0 001c 	rsb	r0, r0, #28
 800d4da:	4403      	add	r3, r0
 800d4dc:	9305      	str	r3, [sp, #20]
 800d4de:	9b06      	ldr	r3, [sp, #24]
 800d4e0:	4403      	add	r3, r0
 800d4e2:	4405      	add	r5, r0
 800d4e4:	9306      	str	r3, [sp, #24]
 800d4e6:	9b05      	ldr	r3, [sp, #20]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	dd05      	ble.n	800d4f8 <_dtoa_r+0x828>
 800d4ec:	4651      	mov	r1, sl
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f000 fc85 	bl	800de00 <__lshift>
 800d4f6:	4682      	mov	sl, r0
 800d4f8:	9b06      	ldr	r3, [sp, #24]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dd05      	ble.n	800d50a <_dtoa_r+0x83a>
 800d4fe:	4631      	mov	r1, r6
 800d500:	461a      	mov	r2, r3
 800d502:	4620      	mov	r0, r4
 800d504:	f000 fc7c 	bl	800de00 <__lshift>
 800d508:	4606      	mov	r6, r0
 800d50a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d072      	beq.n	800d5f6 <_dtoa_r+0x926>
 800d510:	4631      	mov	r1, r6
 800d512:	4650      	mov	r0, sl
 800d514:	f000 fce0 	bl	800ded8 <__mcmp>
 800d518:	2800      	cmp	r0, #0
 800d51a:	da6c      	bge.n	800d5f6 <_dtoa_r+0x926>
 800d51c:	2300      	movs	r3, #0
 800d51e:	4651      	mov	r1, sl
 800d520:	220a      	movs	r2, #10
 800d522:	4620      	mov	r0, r4
 800d524:	f000 fa74 	bl	800da10 <__multadd>
 800d528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d52a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d52e:	4682      	mov	sl, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	f000 81b0 	beq.w	800d896 <_dtoa_r+0xbc6>
 800d536:	2300      	movs	r3, #0
 800d538:	4639      	mov	r1, r7
 800d53a:	220a      	movs	r2, #10
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 fa67 	bl	800da10 <__multadd>
 800d542:	9b01      	ldr	r3, [sp, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	4607      	mov	r7, r0
 800d548:	f300 8096 	bgt.w	800d678 <_dtoa_r+0x9a8>
 800d54c:	9b07      	ldr	r3, [sp, #28]
 800d54e:	2b02      	cmp	r3, #2
 800d550:	dc59      	bgt.n	800d606 <_dtoa_r+0x936>
 800d552:	e091      	b.n	800d678 <_dtoa_r+0x9a8>
 800d554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d556:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d55a:	e758      	b.n	800d40e <_dtoa_r+0x73e>
 800d55c:	9b04      	ldr	r3, [sp, #16]
 800d55e:	1e5e      	subs	r6, r3, #1
 800d560:	9b08      	ldr	r3, [sp, #32]
 800d562:	42b3      	cmp	r3, r6
 800d564:	bfbf      	itttt	lt
 800d566:	9b08      	ldrlt	r3, [sp, #32]
 800d568:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d56a:	9608      	strlt	r6, [sp, #32]
 800d56c:	1af3      	sublt	r3, r6, r3
 800d56e:	bfb4      	ite	lt
 800d570:	18d2      	addlt	r2, r2, r3
 800d572:	1b9e      	subge	r6, r3, r6
 800d574:	9b04      	ldr	r3, [sp, #16]
 800d576:	bfbc      	itt	lt
 800d578:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d57a:	2600      	movlt	r6, #0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	bfb7      	itett	lt
 800d580:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d584:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d588:	1a9d      	sublt	r5, r3, r2
 800d58a:	2300      	movlt	r3, #0
 800d58c:	e741      	b.n	800d412 <_dtoa_r+0x742>
 800d58e:	9e08      	ldr	r6, [sp, #32]
 800d590:	9d05      	ldr	r5, [sp, #20]
 800d592:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d594:	e748      	b.n	800d428 <_dtoa_r+0x758>
 800d596:	9a08      	ldr	r2, [sp, #32]
 800d598:	e770      	b.n	800d47c <_dtoa_r+0x7ac>
 800d59a:	9b07      	ldr	r3, [sp, #28]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	dc19      	bgt.n	800d5d4 <_dtoa_r+0x904>
 800d5a0:	9b02      	ldr	r3, [sp, #8]
 800d5a2:	b9bb      	cbnz	r3, 800d5d4 <_dtoa_r+0x904>
 800d5a4:	9b03      	ldr	r3, [sp, #12]
 800d5a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5aa:	b99b      	cbnz	r3, 800d5d4 <_dtoa_r+0x904>
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5b2:	0d1b      	lsrs	r3, r3, #20
 800d5b4:	051b      	lsls	r3, r3, #20
 800d5b6:	b183      	cbz	r3, 800d5da <_dtoa_r+0x90a>
 800d5b8:	9b05      	ldr	r3, [sp, #20]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	9305      	str	r3, [sp, #20]
 800d5be:	9b06      	ldr	r3, [sp, #24]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	9306      	str	r3, [sp, #24]
 800d5c4:	f04f 0801 	mov.w	r8, #1
 800d5c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f47f af6f 	bne.w	800d4ae <_dtoa_r+0x7de>
 800d5d0:	2001      	movs	r0, #1
 800d5d2:	e774      	b.n	800d4be <_dtoa_r+0x7ee>
 800d5d4:	f04f 0800 	mov.w	r8, #0
 800d5d8:	e7f6      	b.n	800d5c8 <_dtoa_r+0x8f8>
 800d5da:	4698      	mov	r8, r3
 800d5dc:	e7f4      	b.n	800d5c8 <_dtoa_r+0x8f8>
 800d5de:	d082      	beq.n	800d4e6 <_dtoa_r+0x816>
 800d5e0:	9a05      	ldr	r2, [sp, #20]
 800d5e2:	331c      	adds	r3, #28
 800d5e4:	441a      	add	r2, r3
 800d5e6:	9205      	str	r2, [sp, #20]
 800d5e8:	9a06      	ldr	r2, [sp, #24]
 800d5ea:	441a      	add	r2, r3
 800d5ec:	441d      	add	r5, r3
 800d5ee:	9206      	str	r2, [sp, #24]
 800d5f0:	e779      	b.n	800d4e6 <_dtoa_r+0x816>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	e7f4      	b.n	800d5e0 <_dtoa_r+0x910>
 800d5f6:	9b04      	ldr	r3, [sp, #16]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dc37      	bgt.n	800d66c <_dtoa_r+0x99c>
 800d5fc:	9b07      	ldr	r3, [sp, #28]
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	dd34      	ble.n	800d66c <_dtoa_r+0x99c>
 800d602:	9b04      	ldr	r3, [sp, #16]
 800d604:	9301      	str	r3, [sp, #4]
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	b963      	cbnz	r3, 800d624 <_dtoa_r+0x954>
 800d60a:	4631      	mov	r1, r6
 800d60c:	2205      	movs	r2, #5
 800d60e:	4620      	mov	r0, r4
 800d610:	f000 f9fe 	bl	800da10 <__multadd>
 800d614:	4601      	mov	r1, r0
 800d616:	4606      	mov	r6, r0
 800d618:	4650      	mov	r0, sl
 800d61a:	f000 fc5d 	bl	800ded8 <__mcmp>
 800d61e:	2800      	cmp	r0, #0
 800d620:	f73f adbb 	bgt.w	800d19a <_dtoa_r+0x4ca>
 800d624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d626:	9d00      	ldr	r5, [sp, #0]
 800d628:	ea6f 0b03 	mvn.w	fp, r3
 800d62c:	f04f 0800 	mov.w	r8, #0
 800d630:	4631      	mov	r1, r6
 800d632:	4620      	mov	r0, r4
 800d634:	f000 f9ca 	bl	800d9cc <_Bfree>
 800d638:	2f00      	cmp	r7, #0
 800d63a:	f43f aeab 	beq.w	800d394 <_dtoa_r+0x6c4>
 800d63e:	f1b8 0f00 	cmp.w	r8, #0
 800d642:	d005      	beq.n	800d650 <_dtoa_r+0x980>
 800d644:	45b8      	cmp	r8, r7
 800d646:	d003      	beq.n	800d650 <_dtoa_r+0x980>
 800d648:	4641      	mov	r1, r8
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 f9be 	bl	800d9cc <_Bfree>
 800d650:	4639      	mov	r1, r7
 800d652:	4620      	mov	r0, r4
 800d654:	f000 f9ba 	bl	800d9cc <_Bfree>
 800d658:	e69c      	b.n	800d394 <_dtoa_r+0x6c4>
 800d65a:	2600      	movs	r6, #0
 800d65c:	4637      	mov	r7, r6
 800d65e:	e7e1      	b.n	800d624 <_dtoa_r+0x954>
 800d660:	46bb      	mov	fp, r7
 800d662:	4637      	mov	r7, r6
 800d664:	e599      	b.n	800d19a <_dtoa_r+0x4ca>
 800d666:	bf00      	nop
 800d668:	40240000 	.word	0x40240000
 800d66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f000 80c8 	beq.w	800d804 <_dtoa_r+0xb34>
 800d674:	9b04      	ldr	r3, [sp, #16]
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	2d00      	cmp	r5, #0
 800d67a:	dd05      	ble.n	800d688 <_dtoa_r+0x9b8>
 800d67c:	4639      	mov	r1, r7
 800d67e:	462a      	mov	r2, r5
 800d680:	4620      	mov	r0, r4
 800d682:	f000 fbbd 	bl	800de00 <__lshift>
 800d686:	4607      	mov	r7, r0
 800d688:	f1b8 0f00 	cmp.w	r8, #0
 800d68c:	d05b      	beq.n	800d746 <_dtoa_r+0xa76>
 800d68e:	6879      	ldr	r1, [r7, #4]
 800d690:	4620      	mov	r0, r4
 800d692:	f000 f95b 	bl	800d94c <_Balloc>
 800d696:	4605      	mov	r5, r0
 800d698:	b928      	cbnz	r0, 800d6a6 <_dtoa_r+0x9d6>
 800d69a:	4b83      	ldr	r3, [pc, #524]	; (800d8a8 <_dtoa_r+0xbd8>)
 800d69c:	4602      	mov	r2, r0
 800d69e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d6a2:	f7ff bb2e 	b.w	800cd02 <_dtoa_r+0x32>
 800d6a6:	693a      	ldr	r2, [r7, #16]
 800d6a8:	3202      	adds	r2, #2
 800d6aa:	0092      	lsls	r2, r2, #2
 800d6ac:	f107 010c 	add.w	r1, r7, #12
 800d6b0:	300c      	adds	r0, #12
 800d6b2:	f7ff fa6e 	bl	800cb92 <memcpy>
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f000 fba0 	bl	800de00 <__lshift>
 800d6c0:	9b00      	ldr	r3, [sp, #0]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	9304      	str	r3, [sp, #16]
 800d6c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	9308      	str	r3, [sp, #32]
 800d6ce:	9b02      	ldr	r3, [sp, #8]
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	46b8      	mov	r8, r7
 800d6d6:	9306      	str	r3, [sp, #24]
 800d6d8:	4607      	mov	r7, r0
 800d6da:	9b04      	ldr	r3, [sp, #16]
 800d6dc:	4631      	mov	r1, r6
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	9301      	str	r3, [sp, #4]
 800d6e4:	f7ff fa6a 	bl	800cbbc <quorem>
 800d6e8:	4641      	mov	r1, r8
 800d6ea:	9002      	str	r0, [sp, #8]
 800d6ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d6f0:	4650      	mov	r0, sl
 800d6f2:	f000 fbf1 	bl	800ded8 <__mcmp>
 800d6f6:	463a      	mov	r2, r7
 800d6f8:	9005      	str	r0, [sp, #20]
 800d6fa:	4631      	mov	r1, r6
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f000 fc07 	bl	800df10 <__mdiff>
 800d702:	68c2      	ldr	r2, [r0, #12]
 800d704:	4605      	mov	r5, r0
 800d706:	bb02      	cbnz	r2, 800d74a <_dtoa_r+0xa7a>
 800d708:	4601      	mov	r1, r0
 800d70a:	4650      	mov	r0, sl
 800d70c:	f000 fbe4 	bl	800ded8 <__mcmp>
 800d710:	4602      	mov	r2, r0
 800d712:	4629      	mov	r1, r5
 800d714:	4620      	mov	r0, r4
 800d716:	9209      	str	r2, [sp, #36]	; 0x24
 800d718:	f000 f958 	bl	800d9cc <_Bfree>
 800d71c:	9b07      	ldr	r3, [sp, #28]
 800d71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d720:	9d04      	ldr	r5, [sp, #16]
 800d722:	ea43 0102 	orr.w	r1, r3, r2
 800d726:	9b06      	ldr	r3, [sp, #24]
 800d728:	4319      	orrs	r1, r3
 800d72a:	d110      	bne.n	800d74e <_dtoa_r+0xa7e>
 800d72c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d730:	d029      	beq.n	800d786 <_dtoa_r+0xab6>
 800d732:	9b05      	ldr	r3, [sp, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	dd02      	ble.n	800d73e <_dtoa_r+0xa6e>
 800d738:	9b02      	ldr	r3, [sp, #8]
 800d73a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d73e:	9b01      	ldr	r3, [sp, #4]
 800d740:	f883 9000 	strb.w	r9, [r3]
 800d744:	e774      	b.n	800d630 <_dtoa_r+0x960>
 800d746:	4638      	mov	r0, r7
 800d748:	e7ba      	b.n	800d6c0 <_dtoa_r+0x9f0>
 800d74a:	2201      	movs	r2, #1
 800d74c:	e7e1      	b.n	800d712 <_dtoa_r+0xa42>
 800d74e:	9b05      	ldr	r3, [sp, #20]
 800d750:	2b00      	cmp	r3, #0
 800d752:	db04      	blt.n	800d75e <_dtoa_r+0xa8e>
 800d754:	9907      	ldr	r1, [sp, #28]
 800d756:	430b      	orrs	r3, r1
 800d758:	9906      	ldr	r1, [sp, #24]
 800d75a:	430b      	orrs	r3, r1
 800d75c:	d120      	bne.n	800d7a0 <_dtoa_r+0xad0>
 800d75e:	2a00      	cmp	r2, #0
 800d760:	dded      	ble.n	800d73e <_dtoa_r+0xa6e>
 800d762:	4651      	mov	r1, sl
 800d764:	2201      	movs	r2, #1
 800d766:	4620      	mov	r0, r4
 800d768:	f000 fb4a 	bl	800de00 <__lshift>
 800d76c:	4631      	mov	r1, r6
 800d76e:	4682      	mov	sl, r0
 800d770:	f000 fbb2 	bl	800ded8 <__mcmp>
 800d774:	2800      	cmp	r0, #0
 800d776:	dc03      	bgt.n	800d780 <_dtoa_r+0xab0>
 800d778:	d1e1      	bne.n	800d73e <_dtoa_r+0xa6e>
 800d77a:	f019 0f01 	tst.w	r9, #1
 800d77e:	d0de      	beq.n	800d73e <_dtoa_r+0xa6e>
 800d780:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d784:	d1d8      	bne.n	800d738 <_dtoa_r+0xa68>
 800d786:	9a01      	ldr	r2, [sp, #4]
 800d788:	2339      	movs	r3, #57	; 0x39
 800d78a:	7013      	strb	r3, [r2, #0]
 800d78c:	462b      	mov	r3, r5
 800d78e:	461d      	mov	r5, r3
 800d790:	3b01      	subs	r3, #1
 800d792:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d796:	2a39      	cmp	r2, #57	; 0x39
 800d798:	d06c      	beq.n	800d874 <_dtoa_r+0xba4>
 800d79a:	3201      	adds	r2, #1
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	e747      	b.n	800d630 <_dtoa_r+0x960>
 800d7a0:	2a00      	cmp	r2, #0
 800d7a2:	dd07      	ble.n	800d7b4 <_dtoa_r+0xae4>
 800d7a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d7a8:	d0ed      	beq.n	800d786 <_dtoa_r+0xab6>
 800d7aa:	9a01      	ldr	r2, [sp, #4]
 800d7ac:	f109 0301 	add.w	r3, r9, #1
 800d7b0:	7013      	strb	r3, [r2, #0]
 800d7b2:	e73d      	b.n	800d630 <_dtoa_r+0x960>
 800d7b4:	9b04      	ldr	r3, [sp, #16]
 800d7b6:	9a08      	ldr	r2, [sp, #32]
 800d7b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d043      	beq.n	800d848 <_dtoa_r+0xb78>
 800d7c0:	4651      	mov	r1, sl
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	220a      	movs	r2, #10
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f000 f922 	bl	800da10 <__multadd>
 800d7cc:	45b8      	cmp	r8, r7
 800d7ce:	4682      	mov	sl, r0
 800d7d0:	f04f 0300 	mov.w	r3, #0
 800d7d4:	f04f 020a 	mov.w	r2, #10
 800d7d8:	4641      	mov	r1, r8
 800d7da:	4620      	mov	r0, r4
 800d7dc:	d107      	bne.n	800d7ee <_dtoa_r+0xb1e>
 800d7de:	f000 f917 	bl	800da10 <__multadd>
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	4607      	mov	r7, r0
 800d7e6:	9b04      	ldr	r3, [sp, #16]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	9304      	str	r3, [sp, #16]
 800d7ec:	e775      	b.n	800d6da <_dtoa_r+0xa0a>
 800d7ee:	f000 f90f 	bl	800da10 <__multadd>
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	4680      	mov	r8, r0
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	220a      	movs	r2, #10
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f000 f908 	bl	800da10 <__multadd>
 800d800:	4607      	mov	r7, r0
 800d802:	e7f0      	b.n	800d7e6 <_dtoa_r+0xb16>
 800d804:	9b04      	ldr	r3, [sp, #16]
 800d806:	9301      	str	r3, [sp, #4]
 800d808:	9d00      	ldr	r5, [sp, #0]
 800d80a:	4631      	mov	r1, r6
 800d80c:	4650      	mov	r0, sl
 800d80e:	f7ff f9d5 	bl	800cbbc <quorem>
 800d812:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d816:	9b00      	ldr	r3, [sp, #0]
 800d818:	f805 9b01 	strb.w	r9, [r5], #1
 800d81c:	1aea      	subs	r2, r5, r3
 800d81e:	9b01      	ldr	r3, [sp, #4]
 800d820:	4293      	cmp	r3, r2
 800d822:	dd07      	ble.n	800d834 <_dtoa_r+0xb64>
 800d824:	4651      	mov	r1, sl
 800d826:	2300      	movs	r3, #0
 800d828:	220a      	movs	r2, #10
 800d82a:	4620      	mov	r0, r4
 800d82c:	f000 f8f0 	bl	800da10 <__multadd>
 800d830:	4682      	mov	sl, r0
 800d832:	e7ea      	b.n	800d80a <_dtoa_r+0xb3a>
 800d834:	9b01      	ldr	r3, [sp, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	bfc8      	it	gt
 800d83a:	461d      	movgt	r5, r3
 800d83c:	9b00      	ldr	r3, [sp, #0]
 800d83e:	bfd8      	it	le
 800d840:	2501      	movle	r5, #1
 800d842:	441d      	add	r5, r3
 800d844:	f04f 0800 	mov.w	r8, #0
 800d848:	4651      	mov	r1, sl
 800d84a:	2201      	movs	r2, #1
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 fad7 	bl	800de00 <__lshift>
 800d852:	4631      	mov	r1, r6
 800d854:	4682      	mov	sl, r0
 800d856:	f000 fb3f 	bl	800ded8 <__mcmp>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	dc96      	bgt.n	800d78c <_dtoa_r+0xabc>
 800d85e:	d102      	bne.n	800d866 <_dtoa_r+0xb96>
 800d860:	f019 0f01 	tst.w	r9, #1
 800d864:	d192      	bne.n	800d78c <_dtoa_r+0xabc>
 800d866:	462b      	mov	r3, r5
 800d868:	461d      	mov	r5, r3
 800d86a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d86e:	2a30      	cmp	r2, #48	; 0x30
 800d870:	d0fa      	beq.n	800d868 <_dtoa_r+0xb98>
 800d872:	e6dd      	b.n	800d630 <_dtoa_r+0x960>
 800d874:	9a00      	ldr	r2, [sp, #0]
 800d876:	429a      	cmp	r2, r3
 800d878:	d189      	bne.n	800d78e <_dtoa_r+0xabe>
 800d87a:	f10b 0b01 	add.w	fp, fp, #1
 800d87e:	2331      	movs	r3, #49	; 0x31
 800d880:	e796      	b.n	800d7b0 <_dtoa_r+0xae0>
 800d882:	4b0a      	ldr	r3, [pc, #40]	; (800d8ac <_dtoa_r+0xbdc>)
 800d884:	f7ff ba99 	b.w	800cdba <_dtoa_r+0xea>
 800d888:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f47f aa6d 	bne.w	800cd6a <_dtoa_r+0x9a>
 800d890:	4b07      	ldr	r3, [pc, #28]	; (800d8b0 <_dtoa_r+0xbe0>)
 800d892:	f7ff ba92 	b.w	800cdba <_dtoa_r+0xea>
 800d896:	9b01      	ldr	r3, [sp, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	dcb5      	bgt.n	800d808 <_dtoa_r+0xb38>
 800d89c:	9b07      	ldr	r3, [sp, #28]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	f73f aeb1 	bgt.w	800d606 <_dtoa_r+0x936>
 800d8a4:	e7b0      	b.n	800d808 <_dtoa_r+0xb38>
 800d8a6:	bf00      	nop
 800d8a8:	0801042d 	.word	0x0801042d
 800d8ac:	08010388 	.word	0x08010388
 800d8b0:	080103b1 	.word	0x080103b1

0800d8b4 <_free_r>:
 800d8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8b6:	2900      	cmp	r1, #0
 800d8b8:	d044      	beq.n	800d944 <_free_r+0x90>
 800d8ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8be:	9001      	str	r0, [sp, #4]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f1a1 0404 	sub.w	r4, r1, #4
 800d8c6:	bfb8      	it	lt
 800d8c8:	18e4      	addlt	r4, r4, r3
 800d8ca:	f7fe f8cd 	bl	800ba68 <__malloc_lock>
 800d8ce:	4a1e      	ldr	r2, [pc, #120]	; (800d948 <_free_r+0x94>)
 800d8d0:	9801      	ldr	r0, [sp, #4]
 800d8d2:	6813      	ldr	r3, [r2, #0]
 800d8d4:	b933      	cbnz	r3, 800d8e4 <_free_r+0x30>
 800d8d6:	6063      	str	r3, [r4, #4]
 800d8d8:	6014      	str	r4, [r2, #0]
 800d8da:	b003      	add	sp, #12
 800d8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8e0:	f7fe b8c8 	b.w	800ba74 <__malloc_unlock>
 800d8e4:	42a3      	cmp	r3, r4
 800d8e6:	d908      	bls.n	800d8fa <_free_r+0x46>
 800d8e8:	6825      	ldr	r5, [r4, #0]
 800d8ea:	1961      	adds	r1, r4, r5
 800d8ec:	428b      	cmp	r3, r1
 800d8ee:	bf01      	itttt	eq
 800d8f0:	6819      	ldreq	r1, [r3, #0]
 800d8f2:	685b      	ldreq	r3, [r3, #4]
 800d8f4:	1949      	addeq	r1, r1, r5
 800d8f6:	6021      	streq	r1, [r4, #0]
 800d8f8:	e7ed      	b.n	800d8d6 <_free_r+0x22>
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	b10b      	cbz	r3, 800d904 <_free_r+0x50>
 800d900:	42a3      	cmp	r3, r4
 800d902:	d9fa      	bls.n	800d8fa <_free_r+0x46>
 800d904:	6811      	ldr	r1, [r2, #0]
 800d906:	1855      	adds	r5, r2, r1
 800d908:	42a5      	cmp	r5, r4
 800d90a:	d10b      	bne.n	800d924 <_free_r+0x70>
 800d90c:	6824      	ldr	r4, [r4, #0]
 800d90e:	4421      	add	r1, r4
 800d910:	1854      	adds	r4, r2, r1
 800d912:	42a3      	cmp	r3, r4
 800d914:	6011      	str	r1, [r2, #0]
 800d916:	d1e0      	bne.n	800d8da <_free_r+0x26>
 800d918:	681c      	ldr	r4, [r3, #0]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	6053      	str	r3, [r2, #4]
 800d91e:	440c      	add	r4, r1
 800d920:	6014      	str	r4, [r2, #0]
 800d922:	e7da      	b.n	800d8da <_free_r+0x26>
 800d924:	d902      	bls.n	800d92c <_free_r+0x78>
 800d926:	230c      	movs	r3, #12
 800d928:	6003      	str	r3, [r0, #0]
 800d92a:	e7d6      	b.n	800d8da <_free_r+0x26>
 800d92c:	6825      	ldr	r5, [r4, #0]
 800d92e:	1961      	adds	r1, r4, r5
 800d930:	428b      	cmp	r3, r1
 800d932:	bf04      	itt	eq
 800d934:	6819      	ldreq	r1, [r3, #0]
 800d936:	685b      	ldreq	r3, [r3, #4]
 800d938:	6063      	str	r3, [r4, #4]
 800d93a:	bf04      	itt	eq
 800d93c:	1949      	addeq	r1, r1, r5
 800d93e:	6021      	streq	r1, [r4, #0]
 800d940:	6054      	str	r4, [r2, #4]
 800d942:	e7ca      	b.n	800d8da <_free_r+0x26>
 800d944:	b003      	add	sp, #12
 800d946:	bd30      	pop	{r4, r5, pc}
 800d948:	20000538 	.word	0x20000538

0800d94c <_Balloc>:
 800d94c:	b570      	push	{r4, r5, r6, lr}
 800d94e:	69c6      	ldr	r6, [r0, #28]
 800d950:	4604      	mov	r4, r0
 800d952:	460d      	mov	r5, r1
 800d954:	b976      	cbnz	r6, 800d974 <_Balloc+0x28>
 800d956:	2010      	movs	r0, #16
 800d958:	f7fd ffd6 	bl	800b908 <malloc>
 800d95c:	4602      	mov	r2, r0
 800d95e:	61e0      	str	r0, [r4, #28]
 800d960:	b920      	cbnz	r0, 800d96c <_Balloc+0x20>
 800d962:	4b18      	ldr	r3, [pc, #96]	; (800d9c4 <_Balloc+0x78>)
 800d964:	4818      	ldr	r0, [pc, #96]	; (800d9c8 <_Balloc+0x7c>)
 800d966:	216b      	movs	r1, #107	; 0x6b
 800d968:	f001 fd56 	bl	800f418 <__assert_func>
 800d96c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d970:	6006      	str	r6, [r0, #0]
 800d972:	60c6      	str	r6, [r0, #12]
 800d974:	69e6      	ldr	r6, [r4, #28]
 800d976:	68f3      	ldr	r3, [r6, #12]
 800d978:	b183      	cbz	r3, 800d99c <_Balloc+0x50>
 800d97a:	69e3      	ldr	r3, [r4, #28]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d982:	b9b8      	cbnz	r0, 800d9b4 <_Balloc+0x68>
 800d984:	2101      	movs	r1, #1
 800d986:	fa01 f605 	lsl.w	r6, r1, r5
 800d98a:	1d72      	adds	r2, r6, #5
 800d98c:	0092      	lsls	r2, r2, #2
 800d98e:	4620      	mov	r0, r4
 800d990:	f001 fd60 	bl	800f454 <_calloc_r>
 800d994:	b160      	cbz	r0, 800d9b0 <_Balloc+0x64>
 800d996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d99a:	e00e      	b.n	800d9ba <_Balloc+0x6e>
 800d99c:	2221      	movs	r2, #33	; 0x21
 800d99e:	2104      	movs	r1, #4
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f001 fd57 	bl	800f454 <_calloc_r>
 800d9a6:	69e3      	ldr	r3, [r4, #28]
 800d9a8:	60f0      	str	r0, [r6, #12]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1e4      	bne.n	800d97a <_Balloc+0x2e>
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	bd70      	pop	{r4, r5, r6, pc}
 800d9b4:	6802      	ldr	r2, [r0, #0]
 800d9b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9c0:	e7f7      	b.n	800d9b2 <_Balloc+0x66>
 800d9c2:	bf00      	nop
 800d9c4:	080103be 	.word	0x080103be
 800d9c8:	0801043e 	.word	0x0801043e

0800d9cc <_Bfree>:
 800d9cc:	b570      	push	{r4, r5, r6, lr}
 800d9ce:	69c6      	ldr	r6, [r0, #28]
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	b976      	cbnz	r6, 800d9f4 <_Bfree+0x28>
 800d9d6:	2010      	movs	r0, #16
 800d9d8:	f7fd ff96 	bl	800b908 <malloc>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	61e8      	str	r0, [r5, #28]
 800d9e0:	b920      	cbnz	r0, 800d9ec <_Bfree+0x20>
 800d9e2:	4b09      	ldr	r3, [pc, #36]	; (800da08 <_Bfree+0x3c>)
 800d9e4:	4809      	ldr	r0, [pc, #36]	; (800da0c <_Bfree+0x40>)
 800d9e6:	218f      	movs	r1, #143	; 0x8f
 800d9e8:	f001 fd16 	bl	800f418 <__assert_func>
 800d9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9f0:	6006      	str	r6, [r0, #0]
 800d9f2:	60c6      	str	r6, [r0, #12]
 800d9f4:	b13c      	cbz	r4, 800da06 <_Bfree+0x3a>
 800d9f6:	69eb      	ldr	r3, [r5, #28]
 800d9f8:	6862      	ldr	r2, [r4, #4]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da00:	6021      	str	r1, [r4, #0]
 800da02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da06:	bd70      	pop	{r4, r5, r6, pc}
 800da08:	080103be 	.word	0x080103be
 800da0c:	0801043e 	.word	0x0801043e

0800da10 <__multadd>:
 800da10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da14:	690d      	ldr	r5, [r1, #16]
 800da16:	4607      	mov	r7, r0
 800da18:	460c      	mov	r4, r1
 800da1a:	461e      	mov	r6, r3
 800da1c:	f101 0c14 	add.w	ip, r1, #20
 800da20:	2000      	movs	r0, #0
 800da22:	f8dc 3000 	ldr.w	r3, [ip]
 800da26:	b299      	uxth	r1, r3
 800da28:	fb02 6101 	mla	r1, r2, r1, r6
 800da2c:	0c1e      	lsrs	r6, r3, #16
 800da2e:	0c0b      	lsrs	r3, r1, #16
 800da30:	fb02 3306 	mla	r3, r2, r6, r3
 800da34:	b289      	uxth	r1, r1
 800da36:	3001      	adds	r0, #1
 800da38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da3c:	4285      	cmp	r5, r0
 800da3e:	f84c 1b04 	str.w	r1, [ip], #4
 800da42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da46:	dcec      	bgt.n	800da22 <__multadd+0x12>
 800da48:	b30e      	cbz	r6, 800da8e <__multadd+0x7e>
 800da4a:	68a3      	ldr	r3, [r4, #8]
 800da4c:	42ab      	cmp	r3, r5
 800da4e:	dc19      	bgt.n	800da84 <__multadd+0x74>
 800da50:	6861      	ldr	r1, [r4, #4]
 800da52:	4638      	mov	r0, r7
 800da54:	3101      	adds	r1, #1
 800da56:	f7ff ff79 	bl	800d94c <_Balloc>
 800da5a:	4680      	mov	r8, r0
 800da5c:	b928      	cbnz	r0, 800da6a <__multadd+0x5a>
 800da5e:	4602      	mov	r2, r0
 800da60:	4b0c      	ldr	r3, [pc, #48]	; (800da94 <__multadd+0x84>)
 800da62:	480d      	ldr	r0, [pc, #52]	; (800da98 <__multadd+0x88>)
 800da64:	21ba      	movs	r1, #186	; 0xba
 800da66:	f001 fcd7 	bl	800f418 <__assert_func>
 800da6a:	6922      	ldr	r2, [r4, #16]
 800da6c:	3202      	adds	r2, #2
 800da6e:	f104 010c 	add.w	r1, r4, #12
 800da72:	0092      	lsls	r2, r2, #2
 800da74:	300c      	adds	r0, #12
 800da76:	f7ff f88c 	bl	800cb92 <memcpy>
 800da7a:	4621      	mov	r1, r4
 800da7c:	4638      	mov	r0, r7
 800da7e:	f7ff ffa5 	bl	800d9cc <_Bfree>
 800da82:	4644      	mov	r4, r8
 800da84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da88:	3501      	adds	r5, #1
 800da8a:	615e      	str	r6, [r3, #20]
 800da8c:	6125      	str	r5, [r4, #16]
 800da8e:	4620      	mov	r0, r4
 800da90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da94:	0801042d 	.word	0x0801042d
 800da98:	0801043e 	.word	0x0801043e

0800da9c <__s2b>:
 800da9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daa0:	460c      	mov	r4, r1
 800daa2:	4615      	mov	r5, r2
 800daa4:	461f      	mov	r7, r3
 800daa6:	2209      	movs	r2, #9
 800daa8:	3308      	adds	r3, #8
 800daaa:	4606      	mov	r6, r0
 800daac:	fb93 f3f2 	sdiv	r3, r3, r2
 800dab0:	2100      	movs	r1, #0
 800dab2:	2201      	movs	r2, #1
 800dab4:	429a      	cmp	r2, r3
 800dab6:	db09      	blt.n	800dacc <__s2b+0x30>
 800dab8:	4630      	mov	r0, r6
 800daba:	f7ff ff47 	bl	800d94c <_Balloc>
 800dabe:	b940      	cbnz	r0, 800dad2 <__s2b+0x36>
 800dac0:	4602      	mov	r2, r0
 800dac2:	4b19      	ldr	r3, [pc, #100]	; (800db28 <__s2b+0x8c>)
 800dac4:	4819      	ldr	r0, [pc, #100]	; (800db2c <__s2b+0x90>)
 800dac6:	21d3      	movs	r1, #211	; 0xd3
 800dac8:	f001 fca6 	bl	800f418 <__assert_func>
 800dacc:	0052      	lsls	r2, r2, #1
 800dace:	3101      	adds	r1, #1
 800dad0:	e7f0      	b.n	800dab4 <__s2b+0x18>
 800dad2:	9b08      	ldr	r3, [sp, #32]
 800dad4:	6143      	str	r3, [r0, #20]
 800dad6:	2d09      	cmp	r5, #9
 800dad8:	f04f 0301 	mov.w	r3, #1
 800dadc:	6103      	str	r3, [r0, #16]
 800dade:	dd16      	ble.n	800db0e <__s2b+0x72>
 800dae0:	f104 0909 	add.w	r9, r4, #9
 800dae4:	46c8      	mov	r8, r9
 800dae6:	442c      	add	r4, r5
 800dae8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800daec:	4601      	mov	r1, r0
 800daee:	3b30      	subs	r3, #48	; 0x30
 800daf0:	220a      	movs	r2, #10
 800daf2:	4630      	mov	r0, r6
 800daf4:	f7ff ff8c 	bl	800da10 <__multadd>
 800daf8:	45a0      	cmp	r8, r4
 800dafa:	d1f5      	bne.n	800dae8 <__s2b+0x4c>
 800dafc:	f1a5 0408 	sub.w	r4, r5, #8
 800db00:	444c      	add	r4, r9
 800db02:	1b2d      	subs	r5, r5, r4
 800db04:	1963      	adds	r3, r4, r5
 800db06:	42bb      	cmp	r3, r7
 800db08:	db04      	blt.n	800db14 <__s2b+0x78>
 800db0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0e:	340a      	adds	r4, #10
 800db10:	2509      	movs	r5, #9
 800db12:	e7f6      	b.n	800db02 <__s2b+0x66>
 800db14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db18:	4601      	mov	r1, r0
 800db1a:	3b30      	subs	r3, #48	; 0x30
 800db1c:	220a      	movs	r2, #10
 800db1e:	4630      	mov	r0, r6
 800db20:	f7ff ff76 	bl	800da10 <__multadd>
 800db24:	e7ee      	b.n	800db04 <__s2b+0x68>
 800db26:	bf00      	nop
 800db28:	0801042d 	.word	0x0801042d
 800db2c:	0801043e 	.word	0x0801043e

0800db30 <__hi0bits>:
 800db30:	0c03      	lsrs	r3, r0, #16
 800db32:	041b      	lsls	r3, r3, #16
 800db34:	b9d3      	cbnz	r3, 800db6c <__hi0bits+0x3c>
 800db36:	0400      	lsls	r0, r0, #16
 800db38:	2310      	movs	r3, #16
 800db3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db3e:	bf04      	itt	eq
 800db40:	0200      	lsleq	r0, r0, #8
 800db42:	3308      	addeq	r3, #8
 800db44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db48:	bf04      	itt	eq
 800db4a:	0100      	lsleq	r0, r0, #4
 800db4c:	3304      	addeq	r3, #4
 800db4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db52:	bf04      	itt	eq
 800db54:	0080      	lsleq	r0, r0, #2
 800db56:	3302      	addeq	r3, #2
 800db58:	2800      	cmp	r0, #0
 800db5a:	db05      	blt.n	800db68 <__hi0bits+0x38>
 800db5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db60:	f103 0301 	add.w	r3, r3, #1
 800db64:	bf08      	it	eq
 800db66:	2320      	moveq	r3, #32
 800db68:	4618      	mov	r0, r3
 800db6a:	4770      	bx	lr
 800db6c:	2300      	movs	r3, #0
 800db6e:	e7e4      	b.n	800db3a <__hi0bits+0xa>

0800db70 <__lo0bits>:
 800db70:	6803      	ldr	r3, [r0, #0]
 800db72:	f013 0207 	ands.w	r2, r3, #7
 800db76:	d00c      	beq.n	800db92 <__lo0bits+0x22>
 800db78:	07d9      	lsls	r1, r3, #31
 800db7a:	d422      	bmi.n	800dbc2 <__lo0bits+0x52>
 800db7c:	079a      	lsls	r2, r3, #30
 800db7e:	bf49      	itett	mi
 800db80:	085b      	lsrmi	r3, r3, #1
 800db82:	089b      	lsrpl	r3, r3, #2
 800db84:	6003      	strmi	r3, [r0, #0]
 800db86:	2201      	movmi	r2, #1
 800db88:	bf5c      	itt	pl
 800db8a:	6003      	strpl	r3, [r0, #0]
 800db8c:	2202      	movpl	r2, #2
 800db8e:	4610      	mov	r0, r2
 800db90:	4770      	bx	lr
 800db92:	b299      	uxth	r1, r3
 800db94:	b909      	cbnz	r1, 800db9a <__lo0bits+0x2a>
 800db96:	0c1b      	lsrs	r3, r3, #16
 800db98:	2210      	movs	r2, #16
 800db9a:	b2d9      	uxtb	r1, r3
 800db9c:	b909      	cbnz	r1, 800dba2 <__lo0bits+0x32>
 800db9e:	3208      	adds	r2, #8
 800dba0:	0a1b      	lsrs	r3, r3, #8
 800dba2:	0719      	lsls	r1, r3, #28
 800dba4:	bf04      	itt	eq
 800dba6:	091b      	lsreq	r3, r3, #4
 800dba8:	3204      	addeq	r2, #4
 800dbaa:	0799      	lsls	r1, r3, #30
 800dbac:	bf04      	itt	eq
 800dbae:	089b      	lsreq	r3, r3, #2
 800dbb0:	3202      	addeq	r2, #2
 800dbb2:	07d9      	lsls	r1, r3, #31
 800dbb4:	d403      	bmi.n	800dbbe <__lo0bits+0x4e>
 800dbb6:	085b      	lsrs	r3, r3, #1
 800dbb8:	f102 0201 	add.w	r2, r2, #1
 800dbbc:	d003      	beq.n	800dbc6 <__lo0bits+0x56>
 800dbbe:	6003      	str	r3, [r0, #0]
 800dbc0:	e7e5      	b.n	800db8e <__lo0bits+0x1e>
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	e7e3      	b.n	800db8e <__lo0bits+0x1e>
 800dbc6:	2220      	movs	r2, #32
 800dbc8:	e7e1      	b.n	800db8e <__lo0bits+0x1e>
	...

0800dbcc <__i2b>:
 800dbcc:	b510      	push	{r4, lr}
 800dbce:	460c      	mov	r4, r1
 800dbd0:	2101      	movs	r1, #1
 800dbd2:	f7ff febb 	bl	800d94c <_Balloc>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	b928      	cbnz	r0, 800dbe6 <__i2b+0x1a>
 800dbda:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <__i2b+0x24>)
 800dbdc:	4805      	ldr	r0, [pc, #20]	; (800dbf4 <__i2b+0x28>)
 800dbde:	f240 1145 	movw	r1, #325	; 0x145
 800dbe2:	f001 fc19 	bl	800f418 <__assert_func>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	6144      	str	r4, [r0, #20]
 800dbea:	6103      	str	r3, [r0, #16]
 800dbec:	bd10      	pop	{r4, pc}
 800dbee:	bf00      	nop
 800dbf0:	0801042d 	.word	0x0801042d
 800dbf4:	0801043e 	.word	0x0801043e

0800dbf8 <__multiply>:
 800dbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	4691      	mov	r9, r2
 800dbfe:	690a      	ldr	r2, [r1, #16]
 800dc00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	bfb8      	it	lt
 800dc08:	460b      	movlt	r3, r1
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	bfbc      	itt	lt
 800dc0e:	464c      	movlt	r4, r9
 800dc10:	4699      	movlt	r9, r3
 800dc12:	6927      	ldr	r7, [r4, #16]
 800dc14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc18:	68a3      	ldr	r3, [r4, #8]
 800dc1a:	6861      	ldr	r1, [r4, #4]
 800dc1c:	eb07 060a 	add.w	r6, r7, sl
 800dc20:	42b3      	cmp	r3, r6
 800dc22:	b085      	sub	sp, #20
 800dc24:	bfb8      	it	lt
 800dc26:	3101      	addlt	r1, #1
 800dc28:	f7ff fe90 	bl	800d94c <_Balloc>
 800dc2c:	b930      	cbnz	r0, 800dc3c <__multiply+0x44>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	4b44      	ldr	r3, [pc, #272]	; (800dd44 <__multiply+0x14c>)
 800dc32:	4845      	ldr	r0, [pc, #276]	; (800dd48 <__multiply+0x150>)
 800dc34:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dc38:	f001 fbee 	bl	800f418 <__assert_func>
 800dc3c:	f100 0514 	add.w	r5, r0, #20
 800dc40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc44:	462b      	mov	r3, r5
 800dc46:	2200      	movs	r2, #0
 800dc48:	4543      	cmp	r3, r8
 800dc4a:	d321      	bcc.n	800dc90 <__multiply+0x98>
 800dc4c:	f104 0314 	add.w	r3, r4, #20
 800dc50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc54:	f109 0314 	add.w	r3, r9, #20
 800dc58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dc5c:	9202      	str	r2, [sp, #8]
 800dc5e:	1b3a      	subs	r2, r7, r4
 800dc60:	3a15      	subs	r2, #21
 800dc62:	f022 0203 	bic.w	r2, r2, #3
 800dc66:	3204      	adds	r2, #4
 800dc68:	f104 0115 	add.w	r1, r4, #21
 800dc6c:	428f      	cmp	r7, r1
 800dc6e:	bf38      	it	cc
 800dc70:	2204      	movcc	r2, #4
 800dc72:	9201      	str	r2, [sp, #4]
 800dc74:	9a02      	ldr	r2, [sp, #8]
 800dc76:	9303      	str	r3, [sp, #12]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d80c      	bhi.n	800dc96 <__multiply+0x9e>
 800dc7c:	2e00      	cmp	r6, #0
 800dc7e:	dd03      	ble.n	800dc88 <__multiply+0x90>
 800dc80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d05b      	beq.n	800dd40 <__multiply+0x148>
 800dc88:	6106      	str	r6, [r0, #16]
 800dc8a:	b005      	add	sp, #20
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc90:	f843 2b04 	str.w	r2, [r3], #4
 800dc94:	e7d8      	b.n	800dc48 <__multiply+0x50>
 800dc96:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc9a:	f1ba 0f00 	cmp.w	sl, #0
 800dc9e:	d024      	beq.n	800dcea <__multiply+0xf2>
 800dca0:	f104 0e14 	add.w	lr, r4, #20
 800dca4:	46a9      	mov	r9, r5
 800dca6:	f04f 0c00 	mov.w	ip, #0
 800dcaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dcae:	f8d9 1000 	ldr.w	r1, [r9]
 800dcb2:	fa1f fb82 	uxth.w	fp, r2
 800dcb6:	b289      	uxth	r1, r1
 800dcb8:	fb0a 110b 	mla	r1, sl, fp, r1
 800dcbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dcc0:	f8d9 2000 	ldr.w	r2, [r9]
 800dcc4:	4461      	add	r1, ip
 800dcc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dcca:	fb0a c20b 	mla	r2, sl, fp, ip
 800dcce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dcd2:	b289      	uxth	r1, r1
 800dcd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dcd8:	4577      	cmp	r7, lr
 800dcda:	f849 1b04 	str.w	r1, [r9], #4
 800dcde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dce2:	d8e2      	bhi.n	800dcaa <__multiply+0xb2>
 800dce4:	9a01      	ldr	r2, [sp, #4]
 800dce6:	f845 c002 	str.w	ip, [r5, r2]
 800dcea:	9a03      	ldr	r2, [sp, #12]
 800dcec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	f1b9 0f00 	cmp.w	r9, #0
 800dcf6:	d021      	beq.n	800dd3c <__multiply+0x144>
 800dcf8:	6829      	ldr	r1, [r5, #0]
 800dcfa:	f104 0c14 	add.w	ip, r4, #20
 800dcfe:	46ae      	mov	lr, r5
 800dd00:	f04f 0a00 	mov.w	sl, #0
 800dd04:	f8bc b000 	ldrh.w	fp, [ip]
 800dd08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd0c:	fb09 220b 	mla	r2, r9, fp, r2
 800dd10:	4452      	add	r2, sl
 800dd12:	b289      	uxth	r1, r1
 800dd14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd18:	f84e 1b04 	str.w	r1, [lr], #4
 800dd1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dd20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd24:	f8be 1000 	ldrh.w	r1, [lr]
 800dd28:	fb09 110a 	mla	r1, r9, sl, r1
 800dd2c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dd30:	4567      	cmp	r7, ip
 800dd32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd36:	d8e5      	bhi.n	800dd04 <__multiply+0x10c>
 800dd38:	9a01      	ldr	r2, [sp, #4]
 800dd3a:	50a9      	str	r1, [r5, r2]
 800dd3c:	3504      	adds	r5, #4
 800dd3e:	e799      	b.n	800dc74 <__multiply+0x7c>
 800dd40:	3e01      	subs	r6, #1
 800dd42:	e79b      	b.n	800dc7c <__multiply+0x84>
 800dd44:	0801042d 	.word	0x0801042d
 800dd48:	0801043e 	.word	0x0801043e

0800dd4c <__pow5mult>:
 800dd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd50:	4615      	mov	r5, r2
 800dd52:	f012 0203 	ands.w	r2, r2, #3
 800dd56:	4606      	mov	r6, r0
 800dd58:	460f      	mov	r7, r1
 800dd5a:	d007      	beq.n	800dd6c <__pow5mult+0x20>
 800dd5c:	4c25      	ldr	r4, [pc, #148]	; (800ddf4 <__pow5mult+0xa8>)
 800dd5e:	3a01      	subs	r2, #1
 800dd60:	2300      	movs	r3, #0
 800dd62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd66:	f7ff fe53 	bl	800da10 <__multadd>
 800dd6a:	4607      	mov	r7, r0
 800dd6c:	10ad      	asrs	r5, r5, #2
 800dd6e:	d03d      	beq.n	800ddec <__pow5mult+0xa0>
 800dd70:	69f4      	ldr	r4, [r6, #28]
 800dd72:	b97c      	cbnz	r4, 800dd94 <__pow5mult+0x48>
 800dd74:	2010      	movs	r0, #16
 800dd76:	f7fd fdc7 	bl	800b908 <malloc>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	61f0      	str	r0, [r6, #28]
 800dd7e:	b928      	cbnz	r0, 800dd8c <__pow5mult+0x40>
 800dd80:	4b1d      	ldr	r3, [pc, #116]	; (800ddf8 <__pow5mult+0xac>)
 800dd82:	481e      	ldr	r0, [pc, #120]	; (800ddfc <__pow5mult+0xb0>)
 800dd84:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dd88:	f001 fb46 	bl	800f418 <__assert_func>
 800dd8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd90:	6004      	str	r4, [r0, #0]
 800dd92:	60c4      	str	r4, [r0, #12]
 800dd94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dd98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd9c:	b94c      	cbnz	r4, 800ddb2 <__pow5mult+0x66>
 800dd9e:	f240 2171 	movw	r1, #625	; 0x271
 800dda2:	4630      	mov	r0, r6
 800dda4:	f7ff ff12 	bl	800dbcc <__i2b>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddae:	4604      	mov	r4, r0
 800ddb0:	6003      	str	r3, [r0, #0]
 800ddb2:	f04f 0900 	mov.w	r9, #0
 800ddb6:	07eb      	lsls	r3, r5, #31
 800ddb8:	d50a      	bpl.n	800ddd0 <__pow5mult+0x84>
 800ddba:	4639      	mov	r1, r7
 800ddbc:	4622      	mov	r2, r4
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f7ff ff1a 	bl	800dbf8 <__multiply>
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	4680      	mov	r8, r0
 800ddc8:	4630      	mov	r0, r6
 800ddca:	f7ff fdff 	bl	800d9cc <_Bfree>
 800ddce:	4647      	mov	r7, r8
 800ddd0:	106d      	asrs	r5, r5, #1
 800ddd2:	d00b      	beq.n	800ddec <__pow5mult+0xa0>
 800ddd4:	6820      	ldr	r0, [r4, #0]
 800ddd6:	b938      	cbnz	r0, 800dde8 <__pow5mult+0x9c>
 800ddd8:	4622      	mov	r2, r4
 800ddda:	4621      	mov	r1, r4
 800dddc:	4630      	mov	r0, r6
 800ddde:	f7ff ff0b 	bl	800dbf8 <__multiply>
 800dde2:	6020      	str	r0, [r4, #0]
 800dde4:	f8c0 9000 	str.w	r9, [r0]
 800dde8:	4604      	mov	r4, r0
 800ddea:	e7e4      	b.n	800ddb6 <__pow5mult+0x6a>
 800ddec:	4638      	mov	r0, r7
 800ddee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddf2:	bf00      	nop
 800ddf4:	08010588 	.word	0x08010588
 800ddf8:	080103be 	.word	0x080103be
 800ddfc:	0801043e 	.word	0x0801043e

0800de00 <__lshift>:
 800de00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de04:	460c      	mov	r4, r1
 800de06:	6849      	ldr	r1, [r1, #4]
 800de08:	6923      	ldr	r3, [r4, #16]
 800de0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de0e:	68a3      	ldr	r3, [r4, #8]
 800de10:	4607      	mov	r7, r0
 800de12:	4691      	mov	r9, r2
 800de14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de18:	f108 0601 	add.w	r6, r8, #1
 800de1c:	42b3      	cmp	r3, r6
 800de1e:	db0b      	blt.n	800de38 <__lshift+0x38>
 800de20:	4638      	mov	r0, r7
 800de22:	f7ff fd93 	bl	800d94c <_Balloc>
 800de26:	4605      	mov	r5, r0
 800de28:	b948      	cbnz	r0, 800de3e <__lshift+0x3e>
 800de2a:	4602      	mov	r2, r0
 800de2c:	4b28      	ldr	r3, [pc, #160]	; (800ded0 <__lshift+0xd0>)
 800de2e:	4829      	ldr	r0, [pc, #164]	; (800ded4 <__lshift+0xd4>)
 800de30:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800de34:	f001 faf0 	bl	800f418 <__assert_func>
 800de38:	3101      	adds	r1, #1
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	e7ee      	b.n	800de1c <__lshift+0x1c>
 800de3e:	2300      	movs	r3, #0
 800de40:	f100 0114 	add.w	r1, r0, #20
 800de44:	f100 0210 	add.w	r2, r0, #16
 800de48:	4618      	mov	r0, r3
 800de4a:	4553      	cmp	r3, sl
 800de4c:	db33      	blt.n	800deb6 <__lshift+0xb6>
 800de4e:	6920      	ldr	r0, [r4, #16]
 800de50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de54:	f104 0314 	add.w	r3, r4, #20
 800de58:	f019 091f 	ands.w	r9, r9, #31
 800de5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de64:	d02b      	beq.n	800debe <__lshift+0xbe>
 800de66:	f1c9 0e20 	rsb	lr, r9, #32
 800de6a:	468a      	mov	sl, r1
 800de6c:	2200      	movs	r2, #0
 800de6e:	6818      	ldr	r0, [r3, #0]
 800de70:	fa00 f009 	lsl.w	r0, r0, r9
 800de74:	4310      	orrs	r0, r2
 800de76:	f84a 0b04 	str.w	r0, [sl], #4
 800de7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de7e:	459c      	cmp	ip, r3
 800de80:	fa22 f20e 	lsr.w	r2, r2, lr
 800de84:	d8f3      	bhi.n	800de6e <__lshift+0x6e>
 800de86:	ebac 0304 	sub.w	r3, ip, r4
 800de8a:	3b15      	subs	r3, #21
 800de8c:	f023 0303 	bic.w	r3, r3, #3
 800de90:	3304      	adds	r3, #4
 800de92:	f104 0015 	add.w	r0, r4, #21
 800de96:	4584      	cmp	ip, r0
 800de98:	bf38      	it	cc
 800de9a:	2304      	movcc	r3, #4
 800de9c:	50ca      	str	r2, [r1, r3]
 800de9e:	b10a      	cbz	r2, 800dea4 <__lshift+0xa4>
 800dea0:	f108 0602 	add.w	r6, r8, #2
 800dea4:	3e01      	subs	r6, #1
 800dea6:	4638      	mov	r0, r7
 800dea8:	612e      	str	r6, [r5, #16]
 800deaa:	4621      	mov	r1, r4
 800deac:	f7ff fd8e 	bl	800d9cc <_Bfree>
 800deb0:	4628      	mov	r0, r5
 800deb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800deba:	3301      	adds	r3, #1
 800debc:	e7c5      	b.n	800de4a <__lshift+0x4a>
 800debe:	3904      	subs	r1, #4
 800dec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dec4:	f841 2f04 	str.w	r2, [r1, #4]!
 800dec8:	459c      	cmp	ip, r3
 800deca:	d8f9      	bhi.n	800dec0 <__lshift+0xc0>
 800decc:	e7ea      	b.n	800dea4 <__lshift+0xa4>
 800dece:	bf00      	nop
 800ded0:	0801042d 	.word	0x0801042d
 800ded4:	0801043e 	.word	0x0801043e

0800ded8 <__mcmp>:
 800ded8:	b530      	push	{r4, r5, lr}
 800deda:	6902      	ldr	r2, [r0, #16]
 800dedc:	690c      	ldr	r4, [r1, #16]
 800dede:	1b12      	subs	r2, r2, r4
 800dee0:	d10e      	bne.n	800df00 <__mcmp+0x28>
 800dee2:	f100 0314 	add.w	r3, r0, #20
 800dee6:	3114      	adds	r1, #20
 800dee8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800deec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800def0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800def4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800def8:	42a5      	cmp	r5, r4
 800defa:	d003      	beq.n	800df04 <__mcmp+0x2c>
 800defc:	d305      	bcc.n	800df0a <__mcmp+0x32>
 800defe:	2201      	movs	r2, #1
 800df00:	4610      	mov	r0, r2
 800df02:	bd30      	pop	{r4, r5, pc}
 800df04:	4283      	cmp	r3, r0
 800df06:	d3f3      	bcc.n	800def0 <__mcmp+0x18>
 800df08:	e7fa      	b.n	800df00 <__mcmp+0x28>
 800df0a:	f04f 32ff 	mov.w	r2, #4294967295
 800df0e:	e7f7      	b.n	800df00 <__mcmp+0x28>

0800df10 <__mdiff>:
 800df10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df14:	460c      	mov	r4, r1
 800df16:	4606      	mov	r6, r0
 800df18:	4611      	mov	r1, r2
 800df1a:	4620      	mov	r0, r4
 800df1c:	4690      	mov	r8, r2
 800df1e:	f7ff ffdb 	bl	800ded8 <__mcmp>
 800df22:	1e05      	subs	r5, r0, #0
 800df24:	d110      	bne.n	800df48 <__mdiff+0x38>
 800df26:	4629      	mov	r1, r5
 800df28:	4630      	mov	r0, r6
 800df2a:	f7ff fd0f 	bl	800d94c <_Balloc>
 800df2e:	b930      	cbnz	r0, 800df3e <__mdiff+0x2e>
 800df30:	4b3a      	ldr	r3, [pc, #232]	; (800e01c <__mdiff+0x10c>)
 800df32:	4602      	mov	r2, r0
 800df34:	f240 2137 	movw	r1, #567	; 0x237
 800df38:	4839      	ldr	r0, [pc, #228]	; (800e020 <__mdiff+0x110>)
 800df3a:	f001 fa6d 	bl	800f418 <__assert_func>
 800df3e:	2301      	movs	r3, #1
 800df40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df48:	bfa4      	itt	ge
 800df4a:	4643      	movge	r3, r8
 800df4c:	46a0      	movge	r8, r4
 800df4e:	4630      	mov	r0, r6
 800df50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df54:	bfa6      	itte	ge
 800df56:	461c      	movge	r4, r3
 800df58:	2500      	movge	r5, #0
 800df5a:	2501      	movlt	r5, #1
 800df5c:	f7ff fcf6 	bl	800d94c <_Balloc>
 800df60:	b920      	cbnz	r0, 800df6c <__mdiff+0x5c>
 800df62:	4b2e      	ldr	r3, [pc, #184]	; (800e01c <__mdiff+0x10c>)
 800df64:	4602      	mov	r2, r0
 800df66:	f240 2145 	movw	r1, #581	; 0x245
 800df6a:	e7e5      	b.n	800df38 <__mdiff+0x28>
 800df6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df70:	6926      	ldr	r6, [r4, #16]
 800df72:	60c5      	str	r5, [r0, #12]
 800df74:	f104 0914 	add.w	r9, r4, #20
 800df78:	f108 0514 	add.w	r5, r8, #20
 800df7c:	f100 0e14 	add.w	lr, r0, #20
 800df80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df88:	f108 0210 	add.w	r2, r8, #16
 800df8c:	46f2      	mov	sl, lr
 800df8e:	2100      	movs	r1, #0
 800df90:	f859 3b04 	ldr.w	r3, [r9], #4
 800df94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df98:	fa11 f88b 	uxtah	r8, r1, fp
 800df9c:	b299      	uxth	r1, r3
 800df9e:	0c1b      	lsrs	r3, r3, #16
 800dfa0:	eba8 0801 	sub.w	r8, r8, r1
 800dfa4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dfa8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dfac:	fa1f f888 	uxth.w	r8, r8
 800dfb0:	1419      	asrs	r1, r3, #16
 800dfb2:	454e      	cmp	r6, r9
 800dfb4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dfb8:	f84a 3b04 	str.w	r3, [sl], #4
 800dfbc:	d8e8      	bhi.n	800df90 <__mdiff+0x80>
 800dfbe:	1b33      	subs	r3, r6, r4
 800dfc0:	3b15      	subs	r3, #21
 800dfc2:	f023 0303 	bic.w	r3, r3, #3
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	3415      	adds	r4, #21
 800dfca:	42a6      	cmp	r6, r4
 800dfcc:	bf38      	it	cc
 800dfce:	2304      	movcc	r3, #4
 800dfd0:	441d      	add	r5, r3
 800dfd2:	4473      	add	r3, lr
 800dfd4:	469e      	mov	lr, r3
 800dfd6:	462e      	mov	r6, r5
 800dfd8:	4566      	cmp	r6, ip
 800dfda:	d30e      	bcc.n	800dffa <__mdiff+0xea>
 800dfdc:	f10c 0203 	add.w	r2, ip, #3
 800dfe0:	1b52      	subs	r2, r2, r5
 800dfe2:	f022 0203 	bic.w	r2, r2, #3
 800dfe6:	3d03      	subs	r5, #3
 800dfe8:	45ac      	cmp	ip, r5
 800dfea:	bf38      	it	cc
 800dfec:	2200      	movcc	r2, #0
 800dfee:	4413      	add	r3, r2
 800dff0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dff4:	b17a      	cbz	r2, 800e016 <__mdiff+0x106>
 800dff6:	6107      	str	r7, [r0, #16]
 800dff8:	e7a4      	b.n	800df44 <__mdiff+0x34>
 800dffa:	f856 8b04 	ldr.w	r8, [r6], #4
 800dffe:	fa11 f288 	uxtah	r2, r1, r8
 800e002:	1414      	asrs	r4, r2, #16
 800e004:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e008:	b292      	uxth	r2, r2
 800e00a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e00e:	f84e 2b04 	str.w	r2, [lr], #4
 800e012:	1421      	asrs	r1, r4, #16
 800e014:	e7e0      	b.n	800dfd8 <__mdiff+0xc8>
 800e016:	3f01      	subs	r7, #1
 800e018:	e7ea      	b.n	800dff0 <__mdiff+0xe0>
 800e01a:	bf00      	nop
 800e01c:	0801042d 	.word	0x0801042d
 800e020:	0801043e 	.word	0x0801043e

0800e024 <__ulp>:
 800e024:	b082      	sub	sp, #8
 800e026:	ed8d 0b00 	vstr	d0, [sp]
 800e02a:	9a01      	ldr	r2, [sp, #4]
 800e02c:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <__ulp+0x48>)
 800e02e:	4013      	ands	r3, r2
 800e030:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e034:	2b00      	cmp	r3, #0
 800e036:	dc08      	bgt.n	800e04a <__ulp+0x26>
 800e038:	425b      	negs	r3, r3
 800e03a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e03e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e042:	da04      	bge.n	800e04e <__ulp+0x2a>
 800e044:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e048:	4113      	asrs	r3, r2
 800e04a:	2200      	movs	r2, #0
 800e04c:	e008      	b.n	800e060 <__ulp+0x3c>
 800e04e:	f1a2 0314 	sub.w	r3, r2, #20
 800e052:	2b1e      	cmp	r3, #30
 800e054:	bfda      	itte	le
 800e056:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e05a:	40da      	lsrle	r2, r3
 800e05c:	2201      	movgt	r2, #1
 800e05e:	2300      	movs	r3, #0
 800e060:	4619      	mov	r1, r3
 800e062:	4610      	mov	r0, r2
 800e064:	ec41 0b10 	vmov	d0, r0, r1
 800e068:	b002      	add	sp, #8
 800e06a:	4770      	bx	lr
 800e06c:	7ff00000 	.word	0x7ff00000

0800e070 <__b2d>:
 800e070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e074:	6906      	ldr	r6, [r0, #16]
 800e076:	f100 0814 	add.w	r8, r0, #20
 800e07a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e07e:	1f37      	subs	r7, r6, #4
 800e080:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e084:	4610      	mov	r0, r2
 800e086:	f7ff fd53 	bl	800db30 <__hi0bits>
 800e08a:	f1c0 0320 	rsb	r3, r0, #32
 800e08e:	280a      	cmp	r0, #10
 800e090:	600b      	str	r3, [r1, #0]
 800e092:	491b      	ldr	r1, [pc, #108]	; (800e100 <__b2d+0x90>)
 800e094:	dc15      	bgt.n	800e0c2 <__b2d+0x52>
 800e096:	f1c0 0c0b 	rsb	ip, r0, #11
 800e09a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e09e:	45b8      	cmp	r8, r7
 800e0a0:	ea43 0501 	orr.w	r5, r3, r1
 800e0a4:	bf34      	ite	cc
 800e0a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e0aa:	2300      	movcs	r3, #0
 800e0ac:	3015      	adds	r0, #21
 800e0ae:	fa02 f000 	lsl.w	r0, r2, r0
 800e0b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800e0b6:	4303      	orrs	r3, r0
 800e0b8:	461c      	mov	r4, r3
 800e0ba:	ec45 4b10 	vmov	d0, r4, r5
 800e0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c2:	45b8      	cmp	r8, r7
 800e0c4:	bf3a      	itte	cc
 800e0c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e0ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800e0ce:	2300      	movcs	r3, #0
 800e0d0:	380b      	subs	r0, #11
 800e0d2:	d012      	beq.n	800e0fa <__b2d+0x8a>
 800e0d4:	f1c0 0120 	rsb	r1, r0, #32
 800e0d8:	fa23 f401 	lsr.w	r4, r3, r1
 800e0dc:	4082      	lsls	r2, r0
 800e0de:	4322      	orrs	r2, r4
 800e0e0:	4547      	cmp	r7, r8
 800e0e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e0e6:	bf8c      	ite	hi
 800e0e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e0ec:	2200      	movls	r2, #0
 800e0ee:	4083      	lsls	r3, r0
 800e0f0:	40ca      	lsrs	r2, r1
 800e0f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	e7de      	b.n	800e0b8 <__b2d+0x48>
 800e0fa:	ea42 0501 	orr.w	r5, r2, r1
 800e0fe:	e7db      	b.n	800e0b8 <__b2d+0x48>
 800e100:	3ff00000 	.word	0x3ff00000

0800e104 <__d2b>:
 800e104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e108:	460f      	mov	r7, r1
 800e10a:	2101      	movs	r1, #1
 800e10c:	ec59 8b10 	vmov	r8, r9, d0
 800e110:	4616      	mov	r6, r2
 800e112:	f7ff fc1b 	bl	800d94c <_Balloc>
 800e116:	4604      	mov	r4, r0
 800e118:	b930      	cbnz	r0, 800e128 <__d2b+0x24>
 800e11a:	4602      	mov	r2, r0
 800e11c:	4b24      	ldr	r3, [pc, #144]	; (800e1b0 <__d2b+0xac>)
 800e11e:	4825      	ldr	r0, [pc, #148]	; (800e1b4 <__d2b+0xb0>)
 800e120:	f240 310f 	movw	r1, #783	; 0x30f
 800e124:	f001 f978 	bl	800f418 <__assert_func>
 800e128:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e12c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e130:	bb2d      	cbnz	r5, 800e17e <__d2b+0x7a>
 800e132:	9301      	str	r3, [sp, #4]
 800e134:	f1b8 0300 	subs.w	r3, r8, #0
 800e138:	d026      	beq.n	800e188 <__d2b+0x84>
 800e13a:	4668      	mov	r0, sp
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	f7ff fd17 	bl	800db70 <__lo0bits>
 800e142:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e146:	b1e8      	cbz	r0, 800e184 <__d2b+0x80>
 800e148:	f1c0 0320 	rsb	r3, r0, #32
 800e14c:	fa02 f303 	lsl.w	r3, r2, r3
 800e150:	430b      	orrs	r3, r1
 800e152:	40c2      	lsrs	r2, r0
 800e154:	6163      	str	r3, [r4, #20]
 800e156:	9201      	str	r2, [sp, #4]
 800e158:	9b01      	ldr	r3, [sp, #4]
 800e15a:	61a3      	str	r3, [r4, #24]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	bf14      	ite	ne
 800e160:	2202      	movne	r2, #2
 800e162:	2201      	moveq	r2, #1
 800e164:	6122      	str	r2, [r4, #16]
 800e166:	b1bd      	cbz	r5, 800e198 <__d2b+0x94>
 800e168:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e16c:	4405      	add	r5, r0
 800e16e:	603d      	str	r5, [r7, #0]
 800e170:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e174:	6030      	str	r0, [r6, #0]
 800e176:	4620      	mov	r0, r4
 800e178:	b003      	add	sp, #12
 800e17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e17e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e182:	e7d6      	b.n	800e132 <__d2b+0x2e>
 800e184:	6161      	str	r1, [r4, #20]
 800e186:	e7e7      	b.n	800e158 <__d2b+0x54>
 800e188:	a801      	add	r0, sp, #4
 800e18a:	f7ff fcf1 	bl	800db70 <__lo0bits>
 800e18e:	9b01      	ldr	r3, [sp, #4]
 800e190:	6163      	str	r3, [r4, #20]
 800e192:	3020      	adds	r0, #32
 800e194:	2201      	movs	r2, #1
 800e196:	e7e5      	b.n	800e164 <__d2b+0x60>
 800e198:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e19c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e1a0:	6038      	str	r0, [r7, #0]
 800e1a2:	6918      	ldr	r0, [r3, #16]
 800e1a4:	f7ff fcc4 	bl	800db30 <__hi0bits>
 800e1a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1ac:	e7e2      	b.n	800e174 <__d2b+0x70>
 800e1ae:	bf00      	nop
 800e1b0:	0801042d 	.word	0x0801042d
 800e1b4:	0801043e 	.word	0x0801043e

0800e1b8 <__ratio>:
 800e1b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1bc:	4688      	mov	r8, r1
 800e1be:	4669      	mov	r1, sp
 800e1c0:	4681      	mov	r9, r0
 800e1c2:	f7ff ff55 	bl	800e070 <__b2d>
 800e1c6:	a901      	add	r1, sp, #4
 800e1c8:	4640      	mov	r0, r8
 800e1ca:	ec55 4b10 	vmov	r4, r5, d0
 800e1ce:	f7ff ff4f 	bl	800e070 <__b2d>
 800e1d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e1da:	eba3 0c02 	sub.w	ip, r3, r2
 800e1de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e1e2:	1a9b      	subs	r3, r3, r2
 800e1e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e1e8:	ec51 0b10 	vmov	r0, r1, d0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	bfd6      	itet	le
 800e1f0:	460a      	movle	r2, r1
 800e1f2:	462a      	movgt	r2, r5
 800e1f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e1f8:	468b      	mov	fp, r1
 800e1fa:	462f      	mov	r7, r5
 800e1fc:	bfd4      	ite	le
 800e1fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e202:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e206:	4620      	mov	r0, r4
 800e208:	ee10 2a10 	vmov	r2, s0
 800e20c:	465b      	mov	r3, fp
 800e20e:	4639      	mov	r1, r7
 800e210:	f7f2 fb44 	bl	800089c <__aeabi_ddiv>
 800e214:	ec41 0b10 	vmov	d0, r0, r1
 800e218:	b003      	add	sp, #12
 800e21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e21e <__copybits>:
 800e21e:	3901      	subs	r1, #1
 800e220:	b570      	push	{r4, r5, r6, lr}
 800e222:	1149      	asrs	r1, r1, #5
 800e224:	6914      	ldr	r4, [r2, #16]
 800e226:	3101      	adds	r1, #1
 800e228:	f102 0314 	add.w	r3, r2, #20
 800e22c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e230:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e234:	1f05      	subs	r5, r0, #4
 800e236:	42a3      	cmp	r3, r4
 800e238:	d30c      	bcc.n	800e254 <__copybits+0x36>
 800e23a:	1aa3      	subs	r3, r4, r2
 800e23c:	3b11      	subs	r3, #17
 800e23e:	f023 0303 	bic.w	r3, r3, #3
 800e242:	3211      	adds	r2, #17
 800e244:	42a2      	cmp	r2, r4
 800e246:	bf88      	it	hi
 800e248:	2300      	movhi	r3, #0
 800e24a:	4418      	add	r0, r3
 800e24c:	2300      	movs	r3, #0
 800e24e:	4288      	cmp	r0, r1
 800e250:	d305      	bcc.n	800e25e <__copybits+0x40>
 800e252:	bd70      	pop	{r4, r5, r6, pc}
 800e254:	f853 6b04 	ldr.w	r6, [r3], #4
 800e258:	f845 6f04 	str.w	r6, [r5, #4]!
 800e25c:	e7eb      	b.n	800e236 <__copybits+0x18>
 800e25e:	f840 3b04 	str.w	r3, [r0], #4
 800e262:	e7f4      	b.n	800e24e <__copybits+0x30>

0800e264 <__any_on>:
 800e264:	f100 0214 	add.w	r2, r0, #20
 800e268:	6900      	ldr	r0, [r0, #16]
 800e26a:	114b      	asrs	r3, r1, #5
 800e26c:	4298      	cmp	r0, r3
 800e26e:	b510      	push	{r4, lr}
 800e270:	db11      	blt.n	800e296 <__any_on+0x32>
 800e272:	dd0a      	ble.n	800e28a <__any_on+0x26>
 800e274:	f011 011f 	ands.w	r1, r1, #31
 800e278:	d007      	beq.n	800e28a <__any_on+0x26>
 800e27a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e27e:	fa24 f001 	lsr.w	r0, r4, r1
 800e282:	fa00 f101 	lsl.w	r1, r0, r1
 800e286:	428c      	cmp	r4, r1
 800e288:	d10b      	bne.n	800e2a2 <__any_on+0x3e>
 800e28a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e28e:	4293      	cmp	r3, r2
 800e290:	d803      	bhi.n	800e29a <__any_on+0x36>
 800e292:	2000      	movs	r0, #0
 800e294:	bd10      	pop	{r4, pc}
 800e296:	4603      	mov	r3, r0
 800e298:	e7f7      	b.n	800e28a <__any_on+0x26>
 800e29a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e29e:	2900      	cmp	r1, #0
 800e2a0:	d0f5      	beq.n	800e28e <__any_on+0x2a>
 800e2a2:	2001      	movs	r0, #1
 800e2a4:	e7f6      	b.n	800e294 <__any_on+0x30>

0800e2a6 <sulp>:
 800e2a6:	b570      	push	{r4, r5, r6, lr}
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	460d      	mov	r5, r1
 800e2ac:	ec45 4b10 	vmov	d0, r4, r5
 800e2b0:	4616      	mov	r6, r2
 800e2b2:	f7ff feb7 	bl	800e024 <__ulp>
 800e2b6:	ec51 0b10 	vmov	r0, r1, d0
 800e2ba:	b17e      	cbz	r6, 800e2dc <sulp+0x36>
 800e2bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e2c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	dd09      	ble.n	800e2dc <sulp+0x36>
 800e2c8:	051b      	lsls	r3, r3, #20
 800e2ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e2ce:	2400      	movs	r4, #0
 800e2d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e2d4:	4622      	mov	r2, r4
 800e2d6:	462b      	mov	r3, r5
 800e2d8:	f7f2 f9b6 	bl	8000648 <__aeabi_dmul>
 800e2dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e2e0 <_strtod_l>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	ed2d 8b02 	vpush	{d8}
 800e2e8:	b09b      	sub	sp, #108	; 0x6c
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	9216      	str	r2, [sp, #88]	; 0x58
 800e2f2:	460d      	mov	r5, r1
 800e2f4:	f04f 0800 	mov.w	r8, #0
 800e2f8:	f04f 0900 	mov.w	r9, #0
 800e2fc:	460a      	mov	r2, r1
 800e2fe:	9215      	str	r2, [sp, #84]	; 0x54
 800e300:	7811      	ldrb	r1, [r2, #0]
 800e302:	292b      	cmp	r1, #43	; 0x2b
 800e304:	d04c      	beq.n	800e3a0 <_strtod_l+0xc0>
 800e306:	d83a      	bhi.n	800e37e <_strtod_l+0x9e>
 800e308:	290d      	cmp	r1, #13
 800e30a:	d834      	bhi.n	800e376 <_strtod_l+0x96>
 800e30c:	2908      	cmp	r1, #8
 800e30e:	d834      	bhi.n	800e37a <_strtod_l+0x9a>
 800e310:	2900      	cmp	r1, #0
 800e312:	d03d      	beq.n	800e390 <_strtod_l+0xb0>
 800e314:	2200      	movs	r2, #0
 800e316:	920a      	str	r2, [sp, #40]	; 0x28
 800e318:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e31a:	7832      	ldrb	r2, [r6, #0]
 800e31c:	2a30      	cmp	r2, #48	; 0x30
 800e31e:	f040 80b4 	bne.w	800e48a <_strtod_l+0x1aa>
 800e322:	7872      	ldrb	r2, [r6, #1]
 800e324:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e328:	2a58      	cmp	r2, #88	; 0x58
 800e32a:	d170      	bne.n	800e40e <_strtod_l+0x12e>
 800e32c:	9302      	str	r3, [sp, #8]
 800e32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e330:	9301      	str	r3, [sp, #4]
 800e332:	ab16      	add	r3, sp, #88	; 0x58
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	4a8e      	ldr	r2, [pc, #568]	; (800e570 <_strtod_l+0x290>)
 800e338:	ab17      	add	r3, sp, #92	; 0x5c
 800e33a:	a915      	add	r1, sp, #84	; 0x54
 800e33c:	4620      	mov	r0, r4
 800e33e:	f001 f907 	bl	800f550 <__gethex>
 800e342:	f010 070f 	ands.w	r7, r0, #15
 800e346:	4605      	mov	r5, r0
 800e348:	d005      	beq.n	800e356 <_strtod_l+0x76>
 800e34a:	2f06      	cmp	r7, #6
 800e34c:	d12a      	bne.n	800e3a4 <_strtod_l+0xc4>
 800e34e:	3601      	adds	r6, #1
 800e350:	2300      	movs	r3, #0
 800e352:	9615      	str	r6, [sp, #84]	; 0x54
 800e354:	930a      	str	r3, [sp, #40]	; 0x28
 800e356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f040 857f 	bne.w	800ee5c <_strtod_l+0xb7c>
 800e35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e360:	b1db      	cbz	r3, 800e39a <_strtod_l+0xba>
 800e362:	4642      	mov	r2, r8
 800e364:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e368:	ec43 2b10 	vmov	d0, r2, r3
 800e36c:	b01b      	add	sp, #108	; 0x6c
 800e36e:	ecbd 8b02 	vpop	{d8}
 800e372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e376:	2920      	cmp	r1, #32
 800e378:	d1cc      	bne.n	800e314 <_strtod_l+0x34>
 800e37a:	3201      	adds	r2, #1
 800e37c:	e7bf      	b.n	800e2fe <_strtod_l+0x1e>
 800e37e:	292d      	cmp	r1, #45	; 0x2d
 800e380:	d1c8      	bne.n	800e314 <_strtod_l+0x34>
 800e382:	2101      	movs	r1, #1
 800e384:	910a      	str	r1, [sp, #40]	; 0x28
 800e386:	1c51      	adds	r1, r2, #1
 800e388:	9115      	str	r1, [sp, #84]	; 0x54
 800e38a:	7852      	ldrb	r2, [r2, #1]
 800e38c:	2a00      	cmp	r2, #0
 800e38e:	d1c3      	bne.n	800e318 <_strtod_l+0x38>
 800e390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e392:	9515      	str	r5, [sp, #84]	; 0x54
 800e394:	2b00      	cmp	r3, #0
 800e396:	f040 855f 	bne.w	800ee58 <_strtod_l+0xb78>
 800e39a:	4642      	mov	r2, r8
 800e39c:	464b      	mov	r3, r9
 800e39e:	e7e3      	b.n	800e368 <_strtod_l+0x88>
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	e7ef      	b.n	800e384 <_strtod_l+0xa4>
 800e3a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e3a6:	b13a      	cbz	r2, 800e3b8 <_strtod_l+0xd8>
 800e3a8:	2135      	movs	r1, #53	; 0x35
 800e3aa:	a818      	add	r0, sp, #96	; 0x60
 800e3ac:	f7ff ff37 	bl	800e21e <__copybits>
 800e3b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f7ff fb0a 	bl	800d9cc <_Bfree>
 800e3b8:	3f01      	subs	r7, #1
 800e3ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e3bc:	2f04      	cmp	r7, #4
 800e3be:	d806      	bhi.n	800e3ce <_strtod_l+0xee>
 800e3c0:	e8df f007 	tbb	[pc, r7]
 800e3c4:	201d0314 	.word	0x201d0314
 800e3c8:	14          	.byte	0x14
 800e3c9:	00          	.byte	0x00
 800e3ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800e3ce:	05e9      	lsls	r1, r5, #23
 800e3d0:	bf48      	it	mi
 800e3d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e3d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3da:	0d1b      	lsrs	r3, r3, #20
 800e3dc:	051b      	lsls	r3, r3, #20
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1b9      	bne.n	800e356 <_strtod_l+0x76>
 800e3e2:	f7fe fba9 	bl	800cb38 <__errno>
 800e3e6:	2322      	movs	r3, #34	; 0x22
 800e3e8:	6003      	str	r3, [r0, #0]
 800e3ea:	e7b4      	b.n	800e356 <_strtod_l+0x76>
 800e3ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800e3f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e3f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e3f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e3fc:	e7e7      	b.n	800e3ce <_strtod_l+0xee>
 800e3fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e578 <_strtod_l+0x298>
 800e402:	e7e4      	b.n	800e3ce <_strtod_l+0xee>
 800e404:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e408:	f04f 38ff 	mov.w	r8, #4294967295
 800e40c:	e7df      	b.n	800e3ce <_strtod_l+0xee>
 800e40e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	9215      	str	r2, [sp, #84]	; 0x54
 800e414:	785b      	ldrb	r3, [r3, #1]
 800e416:	2b30      	cmp	r3, #48	; 0x30
 800e418:	d0f9      	beq.n	800e40e <_strtod_l+0x12e>
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d09b      	beq.n	800e356 <_strtod_l+0x76>
 800e41e:	2301      	movs	r3, #1
 800e420:	f04f 0a00 	mov.w	sl, #0
 800e424:	9304      	str	r3, [sp, #16]
 800e426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e428:	930b      	str	r3, [sp, #44]	; 0x2c
 800e42a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e42e:	46d3      	mov	fp, sl
 800e430:	220a      	movs	r2, #10
 800e432:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e434:	7806      	ldrb	r6, [r0, #0]
 800e436:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e43a:	b2d9      	uxtb	r1, r3
 800e43c:	2909      	cmp	r1, #9
 800e43e:	d926      	bls.n	800e48e <_strtod_l+0x1ae>
 800e440:	494c      	ldr	r1, [pc, #304]	; (800e574 <_strtod_l+0x294>)
 800e442:	2201      	movs	r2, #1
 800e444:	f000 ffcc 	bl	800f3e0 <strncmp>
 800e448:	2800      	cmp	r0, #0
 800e44a:	d030      	beq.n	800e4ae <_strtod_l+0x1ce>
 800e44c:	2000      	movs	r0, #0
 800e44e:	4632      	mov	r2, r6
 800e450:	9005      	str	r0, [sp, #20]
 800e452:	465e      	mov	r6, fp
 800e454:	4603      	mov	r3, r0
 800e456:	2a65      	cmp	r2, #101	; 0x65
 800e458:	d001      	beq.n	800e45e <_strtod_l+0x17e>
 800e45a:	2a45      	cmp	r2, #69	; 0x45
 800e45c:	d113      	bne.n	800e486 <_strtod_l+0x1a6>
 800e45e:	b91e      	cbnz	r6, 800e468 <_strtod_l+0x188>
 800e460:	9a04      	ldr	r2, [sp, #16]
 800e462:	4302      	orrs	r2, r0
 800e464:	d094      	beq.n	800e390 <_strtod_l+0xb0>
 800e466:	2600      	movs	r6, #0
 800e468:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e46a:	1c6a      	adds	r2, r5, #1
 800e46c:	9215      	str	r2, [sp, #84]	; 0x54
 800e46e:	786a      	ldrb	r2, [r5, #1]
 800e470:	2a2b      	cmp	r2, #43	; 0x2b
 800e472:	d074      	beq.n	800e55e <_strtod_l+0x27e>
 800e474:	2a2d      	cmp	r2, #45	; 0x2d
 800e476:	d078      	beq.n	800e56a <_strtod_l+0x28a>
 800e478:	f04f 0c00 	mov.w	ip, #0
 800e47c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e480:	2909      	cmp	r1, #9
 800e482:	d97f      	bls.n	800e584 <_strtod_l+0x2a4>
 800e484:	9515      	str	r5, [sp, #84]	; 0x54
 800e486:	2700      	movs	r7, #0
 800e488:	e09e      	b.n	800e5c8 <_strtod_l+0x2e8>
 800e48a:	2300      	movs	r3, #0
 800e48c:	e7c8      	b.n	800e420 <_strtod_l+0x140>
 800e48e:	f1bb 0f08 	cmp.w	fp, #8
 800e492:	bfd8      	it	le
 800e494:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e496:	f100 0001 	add.w	r0, r0, #1
 800e49a:	bfda      	itte	le
 800e49c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e4a0:	9309      	strle	r3, [sp, #36]	; 0x24
 800e4a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e4a6:	f10b 0b01 	add.w	fp, fp, #1
 800e4aa:	9015      	str	r0, [sp, #84]	; 0x54
 800e4ac:	e7c1      	b.n	800e432 <_strtod_l+0x152>
 800e4ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	9215      	str	r2, [sp, #84]	; 0x54
 800e4b4:	785a      	ldrb	r2, [r3, #1]
 800e4b6:	f1bb 0f00 	cmp.w	fp, #0
 800e4ba:	d037      	beq.n	800e52c <_strtod_l+0x24c>
 800e4bc:	9005      	str	r0, [sp, #20]
 800e4be:	465e      	mov	r6, fp
 800e4c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e4c4:	2b09      	cmp	r3, #9
 800e4c6:	d912      	bls.n	800e4ee <_strtod_l+0x20e>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e7c4      	b.n	800e456 <_strtod_l+0x176>
 800e4cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	9215      	str	r2, [sp, #84]	; 0x54
 800e4d2:	785a      	ldrb	r2, [r3, #1]
 800e4d4:	3001      	adds	r0, #1
 800e4d6:	2a30      	cmp	r2, #48	; 0x30
 800e4d8:	d0f8      	beq.n	800e4cc <_strtod_l+0x1ec>
 800e4da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e4de:	2b08      	cmp	r3, #8
 800e4e0:	f200 84c1 	bhi.w	800ee66 <_strtod_l+0xb86>
 800e4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4e6:	9005      	str	r0, [sp, #20]
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	3a30      	subs	r2, #48	; 0x30
 800e4f0:	f100 0301 	add.w	r3, r0, #1
 800e4f4:	d014      	beq.n	800e520 <_strtod_l+0x240>
 800e4f6:	9905      	ldr	r1, [sp, #20]
 800e4f8:	4419      	add	r1, r3
 800e4fa:	9105      	str	r1, [sp, #20]
 800e4fc:	4633      	mov	r3, r6
 800e4fe:	eb00 0c06 	add.w	ip, r0, r6
 800e502:	210a      	movs	r1, #10
 800e504:	4563      	cmp	r3, ip
 800e506:	d113      	bne.n	800e530 <_strtod_l+0x250>
 800e508:	1833      	adds	r3, r6, r0
 800e50a:	2b08      	cmp	r3, #8
 800e50c:	f106 0601 	add.w	r6, r6, #1
 800e510:	4406      	add	r6, r0
 800e512:	dc1a      	bgt.n	800e54a <_strtod_l+0x26a>
 800e514:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e516:	230a      	movs	r3, #10
 800e518:	fb03 2301 	mla	r3, r3, r1, r2
 800e51c:	9309      	str	r3, [sp, #36]	; 0x24
 800e51e:	2300      	movs	r3, #0
 800e520:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e522:	1c51      	adds	r1, r2, #1
 800e524:	9115      	str	r1, [sp, #84]	; 0x54
 800e526:	7852      	ldrb	r2, [r2, #1]
 800e528:	4618      	mov	r0, r3
 800e52a:	e7c9      	b.n	800e4c0 <_strtod_l+0x1e0>
 800e52c:	4658      	mov	r0, fp
 800e52e:	e7d2      	b.n	800e4d6 <_strtod_l+0x1f6>
 800e530:	2b08      	cmp	r3, #8
 800e532:	f103 0301 	add.w	r3, r3, #1
 800e536:	dc03      	bgt.n	800e540 <_strtod_l+0x260>
 800e538:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e53a:	434f      	muls	r7, r1
 800e53c:	9709      	str	r7, [sp, #36]	; 0x24
 800e53e:	e7e1      	b.n	800e504 <_strtod_l+0x224>
 800e540:	2b10      	cmp	r3, #16
 800e542:	bfd8      	it	le
 800e544:	fb01 fa0a 	mulle.w	sl, r1, sl
 800e548:	e7dc      	b.n	800e504 <_strtod_l+0x224>
 800e54a:	2e10      	cmp	r6, #16
 800e54c:	bfdc      	itt	le
 800e54e:	230a      	movle	r3, #10
 800e550:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800e554:	e7e3      	b.n	800e51e <_strtod_l+0x23e>
 800e556:	2300      	movs	r3, #0
 800e558:	9305      	str	r3, [sp, #20]
 800e55a:	2301      	movs	r3, #1
 800e55c:	e780      	b.n	800e460 <_strtod_l+0x180>
 800e55e:	f04f 0c00 	mov.w	ip, #0
 800e562:	1caa      	adds	r2, r5, #2
 800e564:	9215      	str	r2, [sp, #84]	; 0x54
 800e566:	78aa      	ldrb	r2, [r5, #2]
 800e568:	e788      	b.n	800e47c <_strtod_l+0x19c>
 800e56a:	f04f 0c01 	mov.w	ip, #1
 800e56e:	e7f8      	b.n	800e562 <_strtod_l+0x282>
 800e570:	08010598 	.word	0x08010598
 800e574:	08010594 	.word	0x08010594
 800e578:	7ff00000 	.word	0x7ff00000
 800e57c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e57e:	1c51      	adds	r1, r2, #1
 800e580:	9115      	str	r1, [sp, #84]	; 0x54
 800e582:	7852      	ldrb	r2, [r2, #1]
 800e584:	2a30      	cmp	r2, #48	; 0x30
 800e586:	d0f9      	beq.n	800e57c <_strtod_l+0x29c>
 800e588:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e58c:	2908      	cmp	r1, #8
 800e58e:	f63f af7a 	bhi.w	800e486 <_strtod_l+0x1a6>
 800e592:	3a30      	subs	r2, #48	; 0x30
 800e594:	9208      	str	r2, [sp, #32]
 800e596:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e598:	920c      	str	r2, [sp, #48]	; 0x30
 800e59a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e59c:	1c57      	adds	r7, r2, #1
 800e59e:	9715      	str	r7, [sp, #84]	; 0x54
 800e5a0:	7852      	ldrb	r2, [r2, #1]
 800e5a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e5a6:	f1be 0f09 	cmp.w	lr, #9
 800e5aa:	d938      	bls.n	800e61e <_strtod_l+0x33e>
 800e5ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5ae:	1a7f      	subs	r7, r7, r1
 800e5b0:	2f08      	cmp	r7, #8
 800e5b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e5b6:	dc03      	bgt.n	800e5c0 <_strtod_l+0x2e0>
 800e5b8:	9908      	ldr	r1, [sp, #32]
 800e5ba:	428f      	cmp	r7, r1
 800e5bc:	bfa8      	it	ge
 800e5be:	460f      	movge	r7, r1
 800e5c0:	f1bc 0f00 	cmp.w	ip, #0
 800e5c4:	d000      	beq.n	800e5c8 <_strtod_l+0x2e8>
 800e5c6:	427f      	negs	r7, r7
 800e5c8:	2e00      	cmp	r6, #0
 800e5ca:	d14f      	bne.n	800e66c <_strtod_l+0x38c>
 800e5cc:	9904      	ldr	r1, [sp, #16]
 800e5ce:	4301      	orrs	r1, r0
 800e5d0:	f47f aec1 	bne.w	800e356 <_strtod_l+0x76>
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f47f aedb 	bne.w	800e390 <_strtod_l+0xb0>
 800e5da:	2a69      	cmp	r2, #105	; 0x69
 800e5dc:	d029      	beq.n	800e632 <_strtod_l+0x352>
 800e5de:	dc26      	bgt.n	800e62e <_strtod_l+0x34e>
 800e5e0:	2a49      	cmp	r2, #73	; 0x49
 800e5e2:	d026      	beq.n	800e632 <_strtod_l+0x352>
 800e5e4:	2a4e      	cmp	r2, #78	; 0x4e
 800e5e6:	f47f aed3 	bne.w	800e390 <_strtod_l+0xb0>
 800e5ea:	499b      	ldr	r1, [pc, #620]	; (800e858 <_strtod_l+0x578>)
 800e5ec:	a815      	add	r0, sp, #84	; 0x54
 800e5ee:	f001 f9ef 	bl	800f9d0 <__match>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	f43f aecc 	beq.w	800e390 <_strtod_l+0xb0>
 800e5f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	2b28      	cmp	r3, #40	; 0x28
 800e5fe:	d12f      	bne.n	800e660 <_strtod_l+0x380>
 800e600:	4996      	ldr	r1, [pc, #600]	; (800e85c <_strtod_l+0x57c>)
 800e602:	aa18      	add	r2, sp, #96	; 0x60
 800e604:	a815      	add	r0, sp, #84	; 0x54
 800e606:	f001 f9f7 	bl	800f9f8 <__hexnan>
 800e60a:	2805      	cmp	r0, #5
 800e60c:	d128      	bne.n	800e660 <_strtod_l+0x380>
 800e60e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e610:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e614:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e618:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e61c:	e69b      	b.n	800e356 <_strtod_l+0x76>
 800e61e:	9f08      	ldr	r7, [sp, #32]
 800e620:	210a      	movs	r1, #10
 800e622:	fb01 2107 	mla	r1, r1, r7, r2
 800e626:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e62a:	9208      	str	r2, [sp, #32]
 800e62c:	e7b5      	b.n	800e59a <_strtod_l+0x2ba>
 800e62e:	2a6e      	cmp	r2, #110	; 0x6e
 800e630:	e7d9      	b.n	800e5e6 <_strtod_l+0x306>
 800e632:	498b      	ldr	r1, [pc, #556]	; (800e860 <_strtod_l+0x580>)
 800e634:	a815      	add	r0, sp, #84	; 0x54
 800e636:	f001 f9cb 	bl	800f9d0 <__match>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	f43f aea8 	beq.w	800e390 <_strtod_l+0xb0>
 800e640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e642:	4988      	ldr	r1, [pc, #544]	; (800e864 <_strtod_l+0x584>)
 800e644:	3b01      	subs	r3, #1
 800e646:	a815      	add	r0, sp, #84	; 0x54
 800e648:	9315      	str	r3, [sp, #84]	; 0x54
 800e64a:	f001 f9c1 	bl	800f9d0 <__match>
 800e64e:	b910      	cbnz	r0, 800e656 <_strtod_l+0x376>
 800e650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e652:	3301      	adds	r3, #1
 800e654:	9315      	str	r3, [sp, #84]	; 0x54
 800e656:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e874 <_strtod_l+0x594>
 800e65a:	f04f 0800 	mov.w	r8, #0
 800e65e:	e67a      	b.n	800e356 <_strtod_l+0x76>
 800e660:	4881      	ldr	r0, [pc, #516]	; (800e868 <_strtod_l+0x588>)
 800e662:	f000 fed1 	bl	800f408 <nan>
 800e666:	ec59 8b10 	vmov	r8, r9, d0
 800e66a:	e674      	b.n	800e356 <_strtod_l+0x76>
 800e66c:	9b05      	ldr	r3, [sp, #20]
 800e66e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e670:	1afb      	subs	r3, r7, r3
 800e672:	f1bb 0f00 	cmp.w	fp, #0
 800e676:	bf08      	it	eq
 800e678:	46b3      	moveq	fp, r6
 800e67a:	2e10      	cmp	r6, #16
 800e67c:	9308      	str	r3, [sp, #32]
 800e67e:	4635      	mov	r5, r6
 800e680:	bfa8      	it	ge
 800e682:	2510      	movge	r5, #16
 800e684:	f7f1 ff66 	bl	8000554 <__aeabi_ui2d>
 800e688:	2e09      	cmp	r6, #9
 800e68a:	4680      	mov	r8, r0
 800e68c:	4689      	mov	r9, r1
 800e68e:	dd13      	ble.n	800e6b8 <_strtod_l+0x3d8>
 800e690:	4b76      	ldr	r3, [pc, #472]	; (800e86c <_strtod_l+0x58c>)
 800e692:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e696:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e69a:	f7f1 ffd5 	bl	8000648 <__aeabi_dmul>
 800e69e:	4680      	mov	r8, r0
 800e6a0:	4650      	mov	r0, sl
 800e6a2:	4689      	mov	r9, r1
 800e6a4:	f7f1 ff56 	bl	8000554 <__aeabi_ui2d>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	4649      	mov	r1, r9
 800e6b0:	f7f1 fe14 	bl	80002dc <__adddf3>
 800e6b4:	4680      	mov	r8, r0
 800e6b6:	4689      	mov	r9, r1
 800e6b8:	2e0f      	cmp	r6, #15
 800e6ba:	dc38      	bgt.n	800e72e <_strtod_l+0x44e>
 800e6bc:	9b08      	ldr	r3, [sp, #32]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f43f ae49 	beq.w	800e356 <_strtod_l+0x76>
 800e6c4:	dd24      	ble.n	800e710 <_strtod_l+0x430>
 800e6c6:	2b16      	cmp	r3, #22
 800e6c8:	dc0b      	bgt.n	800e6e2 <_strtod_l+0x402>
 800e6ca:	4968      	ldr	r1, [pc, #416]	; (800e86c <_strtod_l+0x58c>)
 800e6cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6d4:	4642      	mov	r2, r8
 800e6d6:	464b      	mov	r3, r9
 800e6d8:	f7f1 ffb6 	bl	8000648 <__aeabi_dmul>
 800e6dc:	4680      	mov	r8, r0
 800e6de:	4689      	mov	r9, r1
 800e6e0:	e639      	b.n	800e356 <_strtod_l+0x76>
 800e6e2:	9a08      	ldr	r2, [sp, #32]
 800e6e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	db20      	blt.n	800e72e <_strtod_l+0x44e>
 800e6ec:	4c5f      	ldr	r4, [pc, #380]	; (800e86c <_strtod_l+0x58c>)
 800e6ee:	f1c6 060f 	rsb	r6, r6, #15
 800e6f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e6f6:	4642      	mov	r2, r8
 800e6f8:	464b      	mov	r3, r9
 800e6fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6fe:	f7f1 ffa3 	bl	8000648 <__aeabi_dmul>
 800e702:	9b08      	ldr	r3, [sp, #32]
 800e704:	1b9e      	subs	r6, r3, r6
 800e706:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e70a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e70e:	e7e3      	b.n	800e6d8 <_strtod_l+0x3f8>
 800e710:	9b08      	ldr	r3, [sp, #32]
 800e712:	3316      	adds	r3, #22
 800e714:	db0b      	blt.n	800e72e <_strtod_l+0x44e>
 800e716:	9b05      	ldr	r3, [sp, #20]
 800e718:	1bdf      	subs	r7, r3, r7
 800e71a:	4b54      	ldr	r3, [pc, #336]	; (800e86c <_strtod_l+0x58c>)
 800e71c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e724:	4640      	mov	r0, r8
 800e726:	4649      	mov	r1, r9
 800e728:	f7f2 f8b8 	bl	800089c <__aeabi_ddiv>
 800e72c:	e7d6      	b.n	800e6dc <_strtod_l+0x3fc>
 800e72e:	9b08      	ldr	r3, [sp, #32]
 800e730:	1b75      	subs	r5, r6, r5
 800e732:	441d      	add	r5, r3
 800e734:	2d00      	cmp	r5, #0
 800e736:	dd70      	ble.n	800e81a <_strtod_l+0x53a>
 800e738:	f015 030f 	ands.w	r3, r5, #15
 800e73c:	d00a      	beq.n	800e754 <_strtod_l+0x474>
 800e73e:	494b      	ldr	r1, [pc, #300]	; (800e86c <_strtod_l+0x58c>)
 800e740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e744:	4642      	mov	r2, r8
 800e746:	464b      	mov	r3, r9
 800e748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e74c:	f7f1 ff7c 	bl	8000648 <__aeabi_dmul>
 800e750:	4680      	mov	r8, r0
 800e752:	4689      	mov	r9, r1
 800e754:	f035 050f 	bics.w	r5, r5, #15
 800e758:	d04d      	beq.n	800e7f6 <_strtod_l+0x516>
 800e75a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e75e:	dd22      	ble.n	800e7a6 <_strtod_l+0x4c6>
 800e760:	2500      	movs	r5, #0
 800e762:	46ab      	mov	fp, r5
 800e764:	9509      	str	r5, [sp, #36]	; 0x24
 800e766:	9505      	str	r5, [sp, #20]
 800e768:	2322      	movs	r3, #34	; 0x22
 800e76a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e874 <_strtod_l+0x594>
 800e76e:	6023      	str	r3, [r4, #0]
 800e770:	f04f 0800 	mov.w	r8, #0
 800e774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e776:	2b00      	cmp	r3, #0
 800e778:	f43f aded 	beq.w	800e356 <_strtod_l+0x76>
 800e77c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e77e:	4620      	mov	r0, r4
 800e780:	f7ff f924 	bl	800d9cc <_Bfree>
 800e784:	9905      	ldr	r1, [sp, #20]
 800e786:	4620      	mov	r0, r4
 800e788:	f7ff f920 	bl	800d9cc <_Bfree>
 800e78c:	4659      	mov	r1, fp
 800e78e:	4620      	mov	r0, r4
 800e790:	f7ff f91c 	bl	800d9cc <_Bfree>
 800e794:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e796:	4620      	mov	r0, r4
 800e798:	f7ff f918 	bl	800d9cc <_Bfree>
 800e79c:	4629      	mov	r1, r5
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f7ff f914 	bl	800d9cc <_Bfree>
 800e7a4:	e5d7      	b.n	800e356 <_strtod_l+0x76>
 800e7a6:	4b32      	ldr	r3, [pc, #200]	; (800e870 <_strtod_l+0x590>)
 800e7a8:	9304      	str	r3, [sp, #16]
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	112d      	asrs	r5, r5, #4
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	469a      	mov	sl, r3
 800e7b4:	2d01      	cmp	r5, #1
 800e7b6:	dc21      	bgt.n	800e7fc <_strtod_l+0x51c>
 800e7b8:	b10b      	cbz	r3, 800e7be <_strtod_l+0x4de>
 800e7ba:	4680      	mov	r8, r0
 800e7bc:	4689      	mov	r9, r1
 800e7be:	492c      	ldr	r1, [pc, #176]	; (800e870 <_strtod_l+0x590>)
 800e7c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e7c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e7c8:	4642      	mov	r2, r8
 800e7ca:	464b      	mov	r3, r9
 800e7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7d0:	f7f1 ff3a 	bl	8000648 <__aeabi_dmul>
 800e7d4:	4b27      	ldr	r3, [pc, #156]	; (800e874 <_strtod_l+0x594>)
 800e7d6:	460a      	mov	r2, r1
 800e7d8:	400b      	ands	r3, r1
 800e7da:	4927      	ldr	r1, [pc, #156]	; (800e878 <_strtod_l+0x598>)
 800e7dc:	428b      	cmp	r3, r1
 800e7de:	4680      	mov	r8, r0
 800e7e0:	d8be      	bhi.n	800e760 <_strtod_l+0x480>
 800e7e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e7e6:	428b      	cmp	r3, r1
 800e7e8:	bf86      	itte	hi
 800e7ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e87c <_strtod_l+0x59c>
 800e7ee:	f04f 38ff 	movhi.w	r8, #4294967295
 800e7f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	e07b      	b.n	800e8f4 <_strtod_l+0x614>
 800e7fc:	07ea      	lsls	r2, r5, #31
 800e7fe:	d505      	bpl.n	800e80c <_strtod_l+0x52c>
 800e800:	9b04      	ldr	r3, [sp, #16]
 800e802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e806:	f7f1 ff1f 	bl	8000648 <__aeabi_dmul>
 800e80a:	2301      	movs	r3, #1
 800e80c:	9a04      	ldr	r2, [sp, #16]
 800e80e:	3208      	adds	r2, #8
 800e810:	f10a 0a01 	add.w	sl, sl, #1
 800e814:	106d      	asrs	r5, r5, #1
 800e816:	9204      	str	r2, [sp, #16]
 800e818:	e7cc      	b.n	800e7b4 <_strtod_l+0x4d4>
 800e81a:	d0ec      	beq.n	800e7f6 <_strtod_l+0x516>
 800e81c:	426d      	negs	r5, r5
 800e81e:	f015 020f 	ands.w	r2, r5, #15
 800e822:	d00a      	beq.n	800e83a <_strtod_l+0x55a>
 800e824:	4b11      	ldr	r3, [pc, #68]	; (800e86c <_strtod_l+0x58c>)
 800e826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e82a:	4640      	mov	r0, r8
 800e82c:	4649      	mov	r1, r9
 800e82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e832:	f7f2 f833 	bl	800089c <__aeabi_ddiv>
 800e836:	4680      	mov	r8, r0
 800e838:	4689      	mov	r9, r1
 800e83a:	112d      	asrs	r5, r5, #4
 800e83c:	d0db      	beq.n	800e7f6 <_strtod_l+0x516>
 800e83e:	2d1f      	cmp	r5, #31
 800e840:	dd1e      	ble.n	800e880 <_strtod_l+0x5a0>
 800e842:	2500      	movs	r5, #0
 800e844:	46ab      	mov	fp, r5
 800e846:	9509      	str	r5, [sp, #36]	; 0x24
 800e848:	9505      	str	r5, [sp, #20]
 800e84a:	2322      	movs	r3, #34	; 0x22
 800e84c:	f04f 0800 	mov.w	r8, #0
 800e850:	f04f 0900 	mov.w	r9, #0
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	e78d      	b.n	800e774 <_strtod_l+0x494>
 800e858:	08010385 	.word	0x08010385
 800e85c:	080105ac 	.word	0x080105ac
 800e860:	0801037d 	.word	0x0801037d
 800e864:	080103b4 	.word	0x080103b4
 800e868:	0801073d 	.word	0x0801073d
 800e86c:	080104c0 	.word	0x080104c0
 800e870:	08010498 	.word	0x08010498
 800e874:	7ff00000 	.word	0x7ff00000
 800e878:	7ca00000 	.word	0x7ca00000
 800e87c:	7fefffff 	.word	0x7fefffff
 800e880:	f015 0310 	ands.w	r3, r5, #16
 800e884:	bf18      	it	ne
 800e886:	236a      	movne	r3, #106	; 0x6a
 800e888:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ec2c <_strtod_l+0x94c>
 800e88c:	9304      	str	r3, [sp, #16]
 800e88e:	4640      	mov	r0, r8
 800e890:	4649      	mov	r1, r9
 800e892:	2300      	movs	r3, #0
 800e894:	07ea      	lsls	r2, r5, #31
 800e896:	d504      	bpl.n	800e8a2 <_strtod_l+0x5c2>
 800e898:	e9da 2300 	ldrd	r2, r3, [sl]
 800e89c:	f7f1 fed4 	bl	8000648 <__aeabi_dmul>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	106d      	asrs	r5, r5, #1
 800e8a4:	f10a 0a08 	add.w	sl, sl, #8
 800e8a8:	d1f4      	bne.n	800e894 <_strtod_l+0x5b4>
 800e8aa:	b10b      	cbz	r3, 800e8b0 <_strtod_l+0x5d0>
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	4689      	mov	r9, r1
 800e8b0:	9b04      	ldr	r3, [sp, #16]
 800e8b2:	b1bb      	cbz	r3, 800e8e4 <_strtod_l+0x604>
 800e8b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e8b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	4649      	mov	r1, r9
 800e8c0:	dd10      	ble.n	800e8e4 <_strtod_l+0x604>
 800e8c2:	2b1f      	cmp	r3, #31
 800e8c4:	f340 811e 	ble.w	800eb04 <_strtod_l+0x824>
 800e8c8:	2b34      	cmp	r3, #52	; 0x34
 800e8ca:	bfde      	ittt	le
 800e8cc:	f04f 33ff 	movle.w	r3, #4294967295
 800e8d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e8d4:	4093      	lslle	r3, r2
 800e8d6:	f04f 0800 	mov.w	r8, #0
 800e8da:	bfcc      	ite	gt
 800e8dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e8e0:	ea03 0901 	andle.w	r9, r3, r1
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	f7f2 f914 	bl	8000b18 <__aeabi_dcmpeq>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d1a6      	bne.n	800e842 <_strtod_l+0x562>
 800e8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8fa:	4633      	mov	r3, r6
 800e8fc:	465a      	mov	r2, fp
 800e8fe:	4620      	mov	r0, r4
 800e900:	f7ff f8cc 	bl	800da9c <__s2b>
 800e904:	9009      	str	r0, [sp, #36]	; 0x24
 800e906:	2800      	cmp	r0, #0
 800e908:	f43f af2a 	beq.w	800e760 <_strtod_l+0x480>
 800e90c:	9a08      	ldr	r2, [sp, #32]
 800e90e:	9b05      	ldr	r3, [sp, #20]
 800e910:	2a00      	cmp	r2, #0
 800e912:	eba3 0307 	sub.w	r3, r3, r7
 800e916:	bfa8      	it	ge
 800e918:	2300      	movge	r3, #0
 800e91a:	930c      	str	r3, [sp, #48]	; 0x30
 800e91c:	2500      	movs	r5, #0
 800e91e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e922:	9312      	str	r3, [sp, #72]	; 0x48
 800e924:	46ab      	mov	fp, r5
 800e926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e928:	4620      	mov	r0, r4
 800e92a:	6859      	ldr	r1, [r3, #4]
 800e92c:	f7ff f80e 	bl	800d94c <_Balloc>
 800e930:	9005      	str	r0, [sp, #20]
 800e932:	2800      	cmp	r0, #0
 800e934:	f43f af18 	beq.w	800e768 <_strtod_l+0x488>
 800e938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e93a:	691a      	ldr	r2, [r3, #16]
 800e93c:	3202      	adds	r2, #2
 800e93e:	f103 010c 	add.w	r1, r3, #12
 800e942:	0092      	lsls	r2, r2, #2
 800e944:	300c      	adds	r0, #12
 800e946:	f7fe f924 	bl	800cb92 <memcpy>
 800e94a:	ec49 8b10 	vmov	d0, r8, r9
 800e94e:	aa18      	add	r2, sp, #96	; 0x60
 800e950:	a917      	add	r1, sp, #92	; 0x5c
 800e952:	4620      	mov	r0, r4
 800e954:	f7ff fbd6 	bl	800e104 <__d2b>
 800e958:	ec49 8b18 	vmov	d8, r8, r9
 800e95c:	9016      	str	r0, [sp, #88]	; 0x58
 800e95e:	2800      	cmp	r0, #0
 800e960:	f43f af02 	beq.w	800e768 <_strtod_l+0x488>
 800e964:	2101      	movs	r1, #1
 800e966:	4620      	mov	r0, r4
 800e968:	f7ff f930 	bl	800dbcc <__i2b>
 800e96c:	4683      	mov	fp, r0
 800e96e:	2800      	cmp	r0, #0
 800e970:	f43f aefa 	beq.w	800e768 <_strtod_l+0x488>
 800e974:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e976:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e978:	2e00      	cmp	r6, #0
 800e97a:	bfab      	itete	ge
 800e97c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e97e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e980:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e982:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e986:	bfac      	ite	ge
 800e988:	eb06 0a03 	addge.w	sl, r6, r3
 800e98c:	1b9f      	sublt	r7, r3, r6
 800e98e:	9b04      	ldr	r3, [sp, #16]
 800e990:	1af6      	subs	r6, r6, r3
 800e992:	4416      	add	r6, r2
 800e994:	4ba0      	ldr	r3, [pc, #640]	; (800ec18 <_strtod_l+0x938>)
 800e996:	3e01      	subs	r6, #1
 800e998:	429e      	cmp	r6, r3
 800e99a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e99e:	f280 80c4 	bge.w	800eb2a <_strtod_l+0x84a>
 800e9a2:	1b9b      	subs	r3, r3, r6
 800e9a4:	2b1f      	cmp	r3, #31
 800e9a6:	eba2 0203 	sub.w	r2, r2, r3
 800e9aa:	f04f 0101 	mov.w	r1, #1
 800e9ae:	f300 80b0 	bgt.w	800eb12 <_strtod_l+0x832>
 800e9b2:	fa01 f303 	lsl.w	r3, r1, r3
 800e9b6:	930e      	str	r3, [sp, #56]	; 0x38
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	930d      	str	r3, [sp, #52]	; 0x34
 800e9bc:	eb0a 0602 	add.w	r6, sl, r2
 800e9c0:	9b04      	ldr	r3, [sp, #16]
 800e9c2:	45b2      	cmp	sl, r6
 800e9c4:	4417      	add	r7, r2
 800e9c6:	441f      	add	r7, r3
 800e9c8:	4653      	mov	r3, sl
 800e9ca:	bfa8      	it	ge
 800e9cc:	4633      	movge	r3, r6
 800e9ce:	42bb      	cmp	r3, r7
 800e9d0:	bfa8      	it	ge
 800e9d2:	463b      	movge	r3, r7
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	bfc2      	ittt	gt
 800e9d8:	1af6      	subgt	r6, r6, r3
 800e9da:	1aff      	subgt	r7, r7, r3
 800e9dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	dd17      	ble.n	800ea16 <_strtod_l+0x736>
 800e9e6:	4659      	mov	r1, fp
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f7ff f9ae 	bl	800dd4c <__pow5mult>
 800e9f0:	4683      	mov	fp, r0
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	f43f aeb8 	beq.w	800e768 <_strtod_l+0x488>
 800e9f8:	4601      	mov	r1, r0
 800e9fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f7ff f8fb 	bl	800dbf8 <__multiply>
 800ea02:	900b      	str	r0, [sp, #44]	; 0x2c
 800ea04:	2800      	cmp	r0, #0
 800ea06:	f43f aeaf 	beq.w	800e768 <_strtod_l+0x488>
 800ea0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f7fe ffdd 	bl	800d9cc <_Bfree>
 800ea12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea14:	9316      	str	r3, [sp, #88]	; 0x58
 800ea16:	2e00      	cmp	r6, #0
 800ea18:	f300 808c 	bgt.w	800eb34 <_strtod_l+0x854>
 800ea1c:	9b08      	ldr	r3, [sp, #32]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	dd08      	ble.n	800ea34 <_strtod_l+0x754>
 800ea22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea24:	9905      	ldr	r1, [sp, #20]
 800ea26:	4620      	mov	r0, r4
 800ea28:	f7ff f990 	bl	800dd4c <__pow5mult>
 800ea2c:	9005      	str	r0, [sp, #20]
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	f43f ae9a 	beq.w	800e768 <_strtod_l+0x488>
 800ea34:	2f00      	cmp	r7, #0
 800ea36:	dd08      	ble.n	800ea4a <_strtod_l+0x76a>
 800ea38:	9905      	ldr	r1, [sp, #20]
 800ea3a:	463a      	mov	r2, r7
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	f7ff f9df 	bl	800de00 <__lshift>
 800ea42:	9005      	str	r0, [sp, #20]
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f43f ae8f 	beq.w	800e768 <_strtod_l+0x488>
 800ea4a:	f1ba 0f00 	cmp.w	sl, #0
 800ea4e:	dd08      	ble.n	800ea62 <_strtod_l+0x782>
 800ea50:	4659      	mov	r1, fp
 800ea52:	4652      	mov	r2, sl
 800ea54:	4620      	mov	r0, r4
 800ea56:	f7ff f9d3 	bl	800de00 <__lshift>
 800ea5a:	4683      	mov	fp, r0
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	f43f ae83 	beq.w	800e768 <_strtod_l+0x488>
 800ea62:	9a05      	ldr	r2, [sp, #20]
 800ea64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ea66:	4620      	mov	r0, r4
 800ea68:	f7ff fa52 	bl	800df10 <__mdiff>
 800ea6c:	4605      	mov	r5, r0
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	f43f ae7a 	beq.w	800e768 <_strtod_l+0x488>
 800ea74:	68c3      	ldr	r3, [r0, #12]
 800ea76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea78:	2300      	movs	r3, #0
 800ea7a:	60c3      	str	r3, [r0, #12]
 800ea7c:	4659      	mov	r1, fp
 800ea7e:	f7ff fa2b 	bl	800ded8 <__mcmp>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	da60      	bge.n	800eb48 <_strtod_l+0x868>
 800ea86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea88:	ea53 0308 	orrs.w	r3, r3, r8
 800ea8c:	f040 8084 	bne.w	800eb98 <_strtod_l+0x8b8>
 800ea90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d17f      	bne.n	800eb98 <_strtod_l+0x8b8>
 800ea98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea9c:	0d1b      	lsrs	r3, r3, #20
 800ea9e:	051b      	lsls	r3, r3, #20
 800eaa0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eaa4:	d978      	bls.n	800eb98 <_strtod_l+0x8b8>
 800eaa6:	696b      	ldr	r3, [r5, #20]
 800eaa8:	b913      	cbnz	r3, 800eab0 <_strtod_l+0x7d0>
 800eaaa:	692b      	ldr	r3, [r5, #16]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	dd73      	ble.n	800eb98 <_strtod_l+0x8b8>
 800eab0:	4629      	mov	r1, r5
 800eab2:	2201      	movs	r2, #1
 800eab4:	4620      	mov	r0, r4
 800eab6:	f7ff f9a3 	bl	800de00 <__lshift>
 800eaba:	4659      	mov	r1, fp
 800eabc:	4605      	mov	r5, r0
 800eabe:	f7ff fa0b 	bl	800ded8 <__mcmp>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	dd68      	ble.n	800eb98 <_strtod_l+0x8b8>
 800eac6:	9904      	ldr	r1, [sp, #16]
 800eac8:	4a54      	ldr	r2, [pc, #336]	; (800ec1c <_strtod_l+0x93c>)
 800eaca:	464b      	mov	r3, r9
 800eacc:	2900      	cmp	r1, #0
 800eace:	f000 8084 	beq.w	800ebda <_strtod_l+0x8fa>
 800ead2:	ea02 0109 	and.w	r1, r2, r9
 800ead6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eada:	dc7e      	bgt.n	800ebda <_strtod_l+0x8fa>
 800eadc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eae0:	f77f aeb3 	ble.w	800e84a <_strtod_l+0x56a>
 800eae4:	4b4e      	ldr	r3, [pc, #312]	; (800ec20 <_strtod_l+0x940>)
 800eae6:	4640      	mov	r0, r8
 800eae8:	4649      	mov	r1, r9
 800eaea:	2200      	movs	r2, #0
 800eaec:	f7f1 fdac 	bl	8000648 <__aeabi_dmul>
 800eaf0:	4b4a      	ldr	r3, [pc, #296]	; (800ec1c <_strtod_l+0x93c>)
 800eaf2:	400b      	ands	r3, r1
 800eaf4:	4680      	mov	r8, r0
 800eaf6:	4689      	mov	r9, r1
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f47f ae3f 	bne.w	800e77c <_strtod_l+0x49c>
 800eafe:	2322      	movs	r3, #34	; 0x22
 800eb00:	6023      	str	r3, [r4, #0]
 800eb02:	e63b      	b.n	800e77c <_strtod_l+0x49c>
 800eb04:	f04f 32ff 	mov.w	r2, #4294967295
 800eb08:	fa02 f303 	lsl.w	r3, r2, r3
 800eb0c:	ea03 0808 	and.w	r8, r3, r8
 800eb10:	e6e8      	b.n	800e8e4 <_strtod_l+0x604>
 800eb12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800eb16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800eb1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800eb1e:	36e2      	adds	r6, #226	; 0xe2
 800eb20:	fa01 f306 	lsl.w	r3, r1, r6
 800eb24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800eb28:	e748      	b.n	800e9bc <_strtod_l+0x6dc>
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800eb32:	e743      	b.n	800e9bc <_strtod_l+0x6dc>
 800eb34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800eb36:	4632      	mov	r2, r6
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f7ff f961 	bl	800de00 <__lshift>
 800eb3e:	9016      	str	r0, [sp, #88]	; 0x58
 800eb40:	2800      	cmp	r0, #0
 800eb42:	f47f af6b 	bne.w	800ea1c <_strtod_l+0x73c>
 800eb46:	e60f      	b.n	800e768 <_strtod_l+0x488>
 800eb48:	46ca      	mov	sl, r9
 800eb4a:	d171      	bne.n	800ec30 <_strtod_l+0x950>
 800eb4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb52:	b352      	cbz	r2, 800ebaa <_strtod_l+0x8ca>
 800eb54:	4a33      	ldr	r2, [pc, #204]	; (800ec24 <_strtod_l+0x944>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d12a      	bne.n	800ebb0 <_strtod_l+0x8d0>
 800eb5a:	9b04      	ldr	r3, [sp, #16]
 800eb5c:	4641      	mov	r1, r8
 800eb5e:	b1fb      	cbz	r3, 800eba0 <_strtod_l+0x8c0>
 800eb60:	4b2e      	ldr	r3, [pc, #184]	; (800ec1c <_strtod_l+0x93c>)
 800eb62:	ea09 0303 	and.w	r3, r9, r3
 800eb66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb6e:	d81a      	bhi.n	800eba6 <_strtod_l+0x8c6>
 800eb70:	0d1b      	lsrs	r3, r3, #20
 800eb72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb76:	fa02 f303 	lsl.w	r3, r2, r3
 800eb7a:	4299      	cmp	r1, r3
 800eb7c:	d118      	bne.n	800ebb0 <_strtod_l+0x8d0>
 800eb7e:	4b2a      	ldr	r3, [pc, #168]	; (800ec28 <_strtod_l+0x948>)
 800eb80:	459a      	cmp	sl, r3
 800eb82:	d102      	bne.n	800eb8a <_strtod_l+0x8aa>
 800eb84:	3101      	adds	r1, #1
 800eb86:	f43f adef 	beq.w	800e768 <_strtod_l+0x488>
 800eb8a:	4b24      	ldr	r3, [pc, #144]	; (800ec1c <_strtod_l+0x93c>)
 800eb8c:	ea0a 0303 	and.w	r3, sl, r3
 800eb90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800eb94:	f04f 0800 	mov.w	r8, #0
 800eb98:	9b04      	ldr	r3, [sp, #16]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1a2      	bne.n	800eae4 <_strtod_l+0x804>
 800eb9e:	e5ed      	b.n	800e77c <_strtod_l+0x49c>
 800eba0:	f04f 33ff 	mov.w	r3, #4294967295
 800eba4:	e7e9      	b.n	800eb7a <_strtod_l+0x89a>
 800eba6:	4613      	mov	r3, r2
 800eba8:	e7e7      	b.n	800eb7a <_strtod_l+0x89a>
 800ebaa:	ea53 0308 	orrs.w	r3, r3, r8
 800ebae:	d08a      	beq.n	800eac6 <_strtod_l+0x7e6>
 800ebb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebb2:	b1e3      	cbz	r3, 800ebee <_strtod_l+0x90e>
 800ebb4:	ea13 0f0a 	tst.w	r3, sl
 800ebb8:	d0ee      	beq.n	800eb98 <_strtod_l+0x8b8>
 800ebba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebbc:	9a04      	ldr	r2, [sp, #16]
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	b1c3      	cbz	r3, 800ebf6 <_strtod_l+0x916>
 800ebc4:	f7ff fb6f 	bl	800e2a6 <sulp>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	ec51 0b18 	vmov	r0, r1, d8
 800ebd0:	f7f1 fb84 	bl	80002dc <__adddf3>
 800ebd4:	4680      	mov	r8, r0
 800ebd6:	4689      	mov	r9, r1
 800ebd8:	e7de      	b.n	800eb98 <_strtod_l+0x8b8>
 800ebda:	4013      	ands	r3, r2
 800ebdc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ebe0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ebe4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ebe8:	f04f 38ff 	mov.w	r8, #4294967295
 800ebec:	e7d4      	b.n	800eb98 <_strtod_l+0x8b8>
 800ebee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebf0:	ea13 0f08 	tst.w	r3, r8
 800ebf4:	e7e0      	b.n	800ebb8 <_strtod_l+0x8d8>
 800ebf6:	f7ff fb56 	bl	800e2a6 <sulp>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	ec51 0b18 	vmov	r0, r1, d8
 800ec02:	f7f1 fb69 	bl	80002d8 <__aeabi_dsub>
 800ec06:	2200      	movs	r2, #0
 800ec08:	2300      	movs	r3, #0
 800ec0a:	4680      	mov	r8, r0
 800ec0c:	4689      	mov	r9, r1
 800ec0e:	f7f1 ff83 	bl	8000b18 <__aeabi_dcmpeq>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d0c0      	beq.n	800eb98 <_strtod_l+0x8b8>
 800ec16:	e618      	b.n	800e84a <_strtod_l+0x56a>
 800ec18:	fffffc02 	.word	0xfffffc02
 800ec1c:	7ff00000 	.word	0x7ff00000
 800ec20:	39500000 	.word	0x39500000
 800ec24:	000fffff 	.word	0x000fffff
 800ec28:	7fefffff 	.word	0x7fefffff
 800ec2c:	080105c0 	.word	0x080105c0
 800ec30:	4659      	mov	r1, fp
 800ec32:	4628      	mov	r0, r5
 800ec34:	f7ff fac0 	bl	800e1b8 <__ratio>
 800ec38:	ec57 6b10 	vmov	r6, r7, d0
 800ec3c:	ee10 0a10 	vmov	r0, s0
 800ec40:	2200      	movs	r2, #0
 800ec42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec46:	4639      	mov	r1, r7
 800ec48:	f7f1 ff7a 	bl	8000b40 <__aeabi_dcmple>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d071      	beq.n	800ed34 <_strtod_l+0xa54>
 800ec50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d17c      	bne.n	800ed50 <_strtod_l+0xa70>
 800ec56:	f1b8 0f00 	cmp.w	r8, #0
 800ec5a:	d15a      	bne.n	800ed12 <_strtod_l+0xa32>
 800ec5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d15d      	bne.n	800ed20 <_strtod_l+0xa40>
 800ec64:	4b90      	ldr	r3, [pc, #576]	; (800eea8 <_strtod_l+0xbc8>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	4630      	mov	r0, r6
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 ff5e 	bl	8000b2c <__aeabi_dcmplt>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d15c      	bne.n	800ed2e <_strtod_l+0xa4e>
 800ec74:	4630      	mov	r0, r6
 800ec76:	4639      	mov	r1, r7
 800ec78:	4b8c      	ldr	r3, [pc, #560]	; (800eeac <_strtod_l+0xbcc>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f7f1 fce4 	bl	8000648 <__aeabi_dmul>
 800ec80:	4606      	mov	r6, r0
 800ec82:	460f      	mov	r7, r1
 800ec84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ec88:	9606      	str	r6, [sp, #24]
 800ec8a:	9307      	str	r3, [sp, #28]
 800ec8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ec94:	4b86      	ldr	r3, [pc, #536]	; (800eeb0 <_strtod_l+0xbd0>)
 800ec96:	ea0a 0303 	and.w	r3, sl, r3
 800ec9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ec9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec9e:	4b85      	ldr	r3, [pc, #532]	; (800eeb4 <_strtod_l+0xbd4>)
 800eca0:	429a      	cmp	r2, r3
 800eca2:	f040 8090 	bne.w	800edc6 <_strtod_l+0xae6>
 800eca6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ecaa:	ec49 8b10 	vmov	d0, r8, r9
 800ecae:	f7ff f9b9 	bl	800e024 <__ulp>
 800ecb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecb6:	ec51 0b10 	vmov	r0, r1, d0
 800ecba:	f7f1 fcc5 	bl	8000648 <__aeabi_dmul>
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	464b      	mov	r3, r9
 800ecc2:	f7f1 fb0b 	bl	80002dc <__adddf3>
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	4979      	ldr	r1, [pc, #484]	; (800eeb0 <_strtod_l+0xbd0>)
 800ecca:	4a7b      	ldr	r2, [pc, #492]	; (800eeb8 <_strtod_l+0xbd8>)
 800eccc:	4019      	ands	r1, r3
 800ecce:	4291      	cmp	r1, r2
 800ecd0:	4680      	mov	r8, r0
 800ecd2:	d944      	bls.n	800ed5e <_strtod_l+0xa7e>
 800ecd4:	ee18 2a90 	vmov	r2, s17
 800ecd8:	4b78      	ldr	r3, [pc, #480]	; (800eebc <_strtod_l+0xbdc>)
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d104      	bne.n	800ece8 <_strtod_l+0xa08>
 800ecde:	ee18 3a10 	vmov	r3, s16
 800ece2:	3301      	adds	r3, #1
 800ece4:	f43f ad40 	beq.w	800e768 <_strtod_l+0x488>
 800ece8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800eebc <_strtod_l+0xbdc>
 800ecec:	f04f 38ff 	mov.w	r8, #4294967295
 800ecf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f7fe fe6a 	bl	800d9cc <_Bfree>
 800ecf8:	9905      	ldr	r1, [sp, #20]
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f7fe fe66 	bl	800d9cc <_Bfree>
 800ed00:	4659      	mov	r1, fp
 800ed02:	4620      	mov	r0, r4
 800ed04:	f7fe fe62 	bl	800d9cc <_Bfree>
 800ed08:	4629      	mov	r1, r5
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f7fe fe5e 	bl	800d9cc <_Bfree>
 800ed10:	e609      	b.n	800e926 <_strtod_l+0x646>
 800ed12:	f1b8 0f01 	cmp.w	r8, #1
 800ed16:	d103      	bne.n	800ed20 <_strtod_l+0xa40>
 800ed18:	f1b9 0f00 	cmp.w	r9, #0
 800ed1c:	f43f ad95 	beq.w	800e84a <_strtod_l+0x56a>
 800ed20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ee78 <_strtod_l+0xb98>
 800ed24:	4f60      	ldr	r7, [pc, #384]	; (800eea8 <_strtod_l+0xbc8>)
 800ed26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed2a:	2600      	movs	r6, #0
 800ed2c:	e7ae      	b.n	800ec8c <_strtod_l+0x9ac>
 800ed2e:	4f5f      	ldr	r7, [pc, #380]	; (800eeac <_strtod_l+0xbcc>)
 800ed30:	2600      	movs	r6, #0
 800ed32:	e7a7      	b.n	800ec84 <_strtod_l+0x9a4>
 800ed34:	4b5d      	ldr	r3, [pc, #372]	; (800eeac <_strtod_l+0xbcc>)
 800ed36:	4630      	mov	r0, r6
 800ed38:	4639      	mov	r1, r7
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f7f1 fc84 	bl	8000648 <__aeabi_dmul>
 800ed40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed42:	4606      	mov	r6, r0
 800ed44:	460f      	mov	r7, r1
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d09c      	beq.n	800ec84 <_strtod_l+0x9a4>
 800ed4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ed4e:	e79d      	b.n	800ec8c <_strtod_l+0x9ac>
 800ed50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ee80 <_strtod_l+0xba0>
 800ed54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed58:	ec57 6b17 	vmov	r6, r7, d7
 800ed5c:	e796      	b.n	800ec8c <_strtod_l+0x9ac>
 800ed5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ed62:	9b04      	ldr	r3, [sp, #16]
 800ed64:	46ca      	mov	sl, r9
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1c2      	bne.n	800ecf0 <_strtod_l+0xa10>
 800ed6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed70:	0d1b      	lsrs	r3, r3, #20
 800ed72:	051b      	lsls	r3, r3, #20
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d1bb      	bne.n	800ecf0 <_strtod_l+0xa10>
 800ed78:	4630      	mov	r0, r6
 800ed7a:	4639      	mov	r1, r7
 800ed7c:	f7f1 ffc4 	bl	8000d08 <__aeabi_d2lz>
 800ed80:	f7f1 fc34 	bl	80005ec <__aeabi_l2d>
 800ed84:	4602      	mov	r2, r0
 800ed86:	460b      	mov	r3, r1
 800ed88:	4630      	mov	r0, r6
 800ed8a:	4639      	mov	r1, r7
 800ed8c:	f7f1 faa4 	bl	80002d8 <__aeabi_dsub>
 800ed90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed96:	ea43 0308 	orr.w	r3, r3, r8
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	460f      	mov	r7, r1
 800eda0:	d054      	beq.n	800ee4c <_strtod_l+0xb6c>
 800eda2:	a339      	add	r3, pc, #228	; (adr r3, 800ee88 <_strtod_l+0xba8>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	f7f1 fec0 	bl	8000b2c <__aeabi_dcmplt>
 800edac:	2800      	cmp	r0, #0
 800edae:	f47f ace5 	bne.w	800e77c <_strtod_l+0x49c>
 800edb2:	a337      	add	r3, pc, #220	; (adr r3, 800ee90 <_strtod_l+0xbb0>)
 800edb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f1 fed4 	bl	8000b68 <__aeabi_dcmpgt>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d095      	beq.n	800ecf0 <_strtod_l+0xa10>
 800edc4:	e4da      	b.n	800e77c <_strtod_l+0x49c>
 800edc6:	9b04      	ldr	r3, [sp, #16]
 800edc8:	b333      	cbz	r3, 800ee18 <_strtod_l+0xb38>
 800edca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edcc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800edd0:	d822      	bhi.n	800ee18 <_strtod_l+0xb38>
 800edd2:	a331      	add	r3, pc, #196	; (adr r3, 800ee98 <_strtod_l+0xbb8>)
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	4630      	mov	r0, r6
 800edda:	4639      	mov	r1, r7
 800eddc:	f7f1 feb0 	bl	8000b40 <__aeabi_dcmple>
 800ede0:	b1a0      	cbz	r0, 800ee0c <_strtod_l+0xb2c>
 800ede2:	4639      	mov	r1, r7
 800ede4:	4630      	mov	r0, r6
 800ede6:	f7f1 ff07 	bl	8000bf8 <__aeabi_d2uiz>
 800edea:	2801      	cmp	r0, #1
 800edec:	bf38      	it	cc
 800edee:	2001      	movcc	r0, #1
 800edf0:	f7f1 fbb0 	bl	8000554 <__aeabi_ui2d>
 800edf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edf6:	4606      	mov	r6, r0
 800edf8:	460f      	mov	r7, r1
 800edfa:	bb23      	cbnz	r3, 800ee46 <_strtod_l+0xb66>
 800edfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee00:	9010      	str	r0, [sp, #64]	; 0x40
 800ee02:	9311      	str	r3, [sp, #68]	; 0x44
 800ee04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ee08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ee0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ee14:	1a9b      	subs	r3, r3, r2
 800ee16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ee1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ee20:	eef0 0a68 	vmov.f32	s1, s17
 800ee24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ee28:	f7ff f8fc 	bl	800e024 <__ulp>
 800ee2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ee30:	ec53 2b10 	vmov	r2, r3, d0
 800ee34:	f7f1 fc08 	bl	8000648 <__aeabi_dmul>
 800ee38:	ec53 2b18 	vmov	r2, r3, d8
 800ee3c:	f7f1 fa4e 	bl	80002dc <__adddf3>
 800ee40:	4680      	mov	r8, r0
 800ee42:	4689      	mov	r9, r1
 800ee44:	e78d      	b.n	800ed62 <_strtod_l+0xa82>
 800ee46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ee4a:	e7db      	b.n	800ee04 <_strtod_l+0xb24>
 800ee4c:	a314      	add	r3, pc, #80	; (adr r3, 800eea0 <_strtod_l+0xbc0>)
 800ee4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee52:	f7f1 fe6b 	bl	8000b2c <__aeabi_dcmplt>
 800ee56:	e7b3      	b.n	800edc0 <_strtod_l+0xae0>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ee5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	f7ff ba7c 	b.w	800e35e <_strtod_l+0x7e>
 800ee66:	2a65      	cmp	r2, #101	; 0x65
 800ee68:	f43f ab75 	beq.w	800e556 <_strtod_l+0x276>
 800ee6c:	2a45      	cmp	r2, #69	; 0x45
 800ee6e:	f43f ab72 	beq.w	800e556 <_strtod_l+0x276>
 800ee72:	2301      	movs	r3, #1
 800ee74:	f7ff bbaa 	b.w	800e5cc <_strtod_l+0x2ec>
 800ee78:	00000000 	.word	0x00000000
 800ee7c:	bff00000 	.word	0xbff00000
 800ee80:	00000000 	.word	0x00000000
 800ee84:	3ff00000 	.word	0x3ff00000
 800ee88:	94a03595 	.word	0x94a03595
 800ee8c:	3fdfffff 	.word	0x3fdfffff
 800ee90:	35afe535 	.word	0x35afe535
 800ee94:	3fe00000 	.word	0x3fe00000
 800ee98:	ffc00000 	.word	0xffc00000
 800ee9c:	41dfffff 	.word	0x41dfffff
 800eea0:	94a03595 	.word	0x94a03595
 800eea4:	3fcfffff 	.word	0x3fcfffff
 800eea8:	3ff00000 	.word	0x3ff00000
 800eeac:	3fe00000 	.word	0x3fe00000
 800eeb0:	7ff00000 	.word	0x7ff00000
 800eeb4:	7fe00000 	.word	0x7fe00000
 800eeb8:	7c9fffff 	.word	0x7c9fffff
 800eebc:	7fefffff 	.word	0x7fefffff

0800eec0 <_strtod_r>:
 800eec0:	4b01      	ldr	r3, [pc, #4]	; (800eec8 <_strtod_r+0x8>)
 800eec2:	f7ff ba0d 	b.w	800e2e0 <_strtod_l>
 800eec6:	bf00      	nop
 800eec8:	20000068 	.word	0x20000068

0800eecc <_strtol_l.constprop.0>:
 800eecc:	2b01      	cmp	r3, #1
 800eece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eed2:	d001      	beq.n	800eed8 <_strtol_l.constprop.0+0xc>
 800eed4:	2b24      	cmp	r3, #36	; 0x24
 800eed6:	d906      	bls.n	800eee6 <_strtol_l.constprop.0+0x1a>
 800eed8:	f7fd fe2e 	bl	800cb38 <__errno>
 800eedc:	2316      	movs	r3, #22
 800eede:	6003      	str	r3, [r0, #0]
 800eee0:	2000      	movs	r0, #0
 800eee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800efcc <_strtol_l.constprop.0+0x100>
 800eeea:	460d      	mov	r5, r1
 800eeec:	462e      	mov	r6, r5
 800eeee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eef2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800eef6:	f017 0708 	ands.w	r7, r7, #8
 800eefa:	d1f7      	bne.n	800eeec <_strtol_l.constprop.0+0x20>
 800eefc:	2c2d      	cmp	r4, #45	; 0x2d
 800eefe:	d132      	bne.n	800ef66 <_strtol_l.constprop.0+0x9a>
 800ef00:	782c      	ldrb	r4, [r5, #0]
 800ef02:	2701      	movs	r7, #1
 800ef04:	1cb5      	adds	r5, r6, #2
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d05b      	beq.n	800efc2 <_strtol_l.constprop.0+0xf6>
 800ef0a:	2b10      	cmp	r3, #16
 800ef0c:	d109      	bne.n	800ef22 <_strtol_l.constprop.0+0x56>
 800ef0e:	2c30      	cmp	r4, #48	; 0x30
 800ef10:	d107      	bne.n	800ef22 <_strtol_l.constprop.0+0x56>
 800ef12:	782c      	ldrb	r4, [r5, #0]
 800ef14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ef18:	2c58      	cmp	r4, #88	; 0x58
 800ef1a:	d14d      	bne.n	800efb8 <_strtol_l.constprop.0+0xec>
 800ef1c:	786c      	ldrb	r4, [r5, #1]
 800ef1e:	2310      	movs	r3, #16
 800ef20:	3502      	adds	r5, #2
 800ef22:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ef26:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef2a:	f04f 0e00 	mov.w	lr, #0
 800ef2e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ef32:	4676      	mov	r6, lr
 800ef34:	fb03 8a19 	mls	sl, r3, r9, r8
 800ef38:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ef3c:	f1bc 0f09 	cmp.w	ip, #9
 800ef40:	d816      	bhi.n	800ef70 <_strtol_l.constprop.0+0xa4>
 800ef42:	4664      	mov	r4, ip
 800ef44:	42a3      	cmp	r3, r4
 800ef46:	dd24      	ble.n	800ef92 <_strtol_l.constprop.0+0xc6>
 800ef48:	f1be 3fff 	cmp.w	lr, #4294967295
 800ef4c:	d008      	beq.n	800ef60 <_strtol_l.constprop.0+0x94>
 800ef4e:	45b1      	cmp	r9, r6
 800ef50:	d31c      	bcc.n	800ef8c <_strtol_l.constprop.0+0xc0>
 800ef52:	d101      	bne.n	800ef58 <_strtol_l.constprop.0+0x8c>
 800ef54:	45a2      	cmp	sl, r4
 800ef56:	db19      	blt.n	800ef8c <_strtol_l.constprop.0+0xc0>
 800ef58:	fb06 4603 	mla	r6, r6, r3, r4
 800ef5c:	f04f 0e01 	mov.w	lr, #1
 800ef60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef64:	e7e8      	b.n	800ef38 <_strtol_l.constprop.0+0x6c>
 800ef66:	2c2b      	cmp	r4, #43	; 0x2b
 800ef68:	bf04      	itt	eq
 800ef6a:	782c      	ldrbeq	r4, [r5, #0]
 800ef6c:	1cb5      	addeq	r5, r6, #2
 800ef6e:	e7ca      	b.n	800ef06 <_strtol_l.constprop.0+0x3a>
 800ef70:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ef74:	f1bc 0f19 	cmp.w	ip, #25
 800ef78:	d801      	bhi.n	800ef7e <_strtol_l.constprop.0+0xb2>
 800ef7a:	3c37      	subs	r4, #55	; 0x37
 800ef7c:	e7e2      	b.n	800ef44 <_strtol_l.constprop.0+0x78>
 800ef7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ef82:	f1bc 0f19 	cmp.w	ip, #25
 800ef86:	d804      	bhi.n	800ef92 <_strtol_l.constprop.0+0xc6>
 800ef88:	3c57      	subs	r4, #87	; 0x57
 800ef8a:	e7db      	b.n	800ef44 <_strtol_l.constprop.0+0x78>
 800ef8c:	f04f 3eff 	mov.w	lr, #4294967295
 800ef90:	e7e6      	b.n	800ef60 <_strtol_l.constprop.0+0x94>
 800ef92:	f1be 3fff 	cmp.w	lr, #4294967295
 800ef96:	d105      	bne.n	800efa4 <_strtol_l.constprop.0+0xd8>
 800ef98:	2322      	movs	r3, #34	; 0x22
 800ef9a:	6003      	str	r3, [r0, #0]
 800ef9c:	4646      	mov	r6, r8
 800ef9e:	b942      	cbnz	r2, 800efb2 <_strtol_l.constprop.0+0xe6>
 800efa0:	4630      	mov	r0, r6
 800efa2:	e79e      	b.n	800eee2 <_strtol_l.constprop.0+0x16>
 800efa4:	b107      	cbz	r7, 800efa8 <_strtol_l.constprop.0+0xdc>
 800efa6:	4276      	negs	r6, r6
 800efa8:	2a00      	cmp	r2, #0
 800efaa:	d0f9      	beq.n	800efa0 <_strtol_l.constprop.0+0xd4>
 800efac:	f1be 0f00 	cmp.w	lr, #0
 800efb0:	d000      	beq.n	800efb4 <_strtol_l.constprop.0+0xe8>
 800efb2:	1e69      	subs	r1, r5, #1
 800efb4:	6011      	str	r1, [r2, #0]
 800efb6:	e7f3      	b.n	800efa0 <_strtol_l.constprop.0+0xd4>
 800efb8:	2430      	movs	r4, #48	; 0x30
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d1b1      	bne.n	800ef22 <_strtol_l.constprop.0+0x56>
 800efbe:	2308      	movs	r3, #8
 800efc0:	e7af      	b.n	800ef22 <_strtol_l.constprop.0+0x56>
 800efc2:	2c30      	cmp	r4, #48	; 0x30
 800efc4:	d0a5      	beq.n	800ef12 <_strtol_l.constprop.0+0x46>
 800efc6:	230a      	movs	r3, #10
 800efc8:	e7ab      	b.n	800ef22 <_strtol_l.constprop.0+0x56>
 800efca:	bf00      	nop
 800efcc:	080105e9 	.word	0x080105e9

0800efd0 <_strtol_r>:
 800efd0:	f7ff bf7c 	b.w	800eecc <_strtol_l.constprop.0>

0800efd4 <__ssputs_r>:
 800efd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd8:	688e      	ldr	r6, [r1, #8]
 800efda:	461f      	mov	r7, r3
 800efdc:	42be      	cmp	r6, r7
 800efde:	680b      	ldr	r3, [r1, #0]
 800efe0:	4682      	mov	sl, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	4690      	mov	r8, r2
 800efe6:	d82c      	bhi.n	800f042 <__ssputs_r+0x6e>
 800efe8:	898a      	ldrh	r2, [r1, #12]
 800efea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800efee:	d026      	beq.n	800f03e <__ssputs_r+0x6a>
 800eff0:	6965      	ldr	r5, [r4, #20]
 800eff2:	6909      	ldr	r1, [r1, #16]
 800eff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eff8:	eba3 0901 	sub.w	r9, r3, r1
 800effc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f000:	1c7b      	adds	r3, r7, #1
 800f002:	444b      	add	r3, r9
 800f004:	106d      	asrs	r5, r5, #1
 800f006:	429d      	cmp	r5, r3
 800f008:	bf38      	it	cc
 800f00a:	461d      	movcc	r5, r3
 800f00c:	0553      	lsls	r3, r2, #21
 800f00e:	d527      	bpl.n	800f060 <__ssputs_r+0x8c>
 800f010:	4629      	mov	r1, r5
 800f012:	f7fc fca9 	bl	800b968 <_malloc_r>
 800f016:	4606      	mov	r6, r0
 800f018:	b360      	cbz	r0, 800f074 <__ssputs_r+0xa0>
 800f01a:	6921      	ldr	r1, [r4, #16]
 800f01c:	464a      	mov	r2, r9
 800f01e:	f7fd fdb8 	bl	800cb92 <memcpy>
 800f022:	89a3      	ldrh	r3, [r4, #12]
 800f024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	6126      	str	r6, [r4, #16]
 800f030:	6165      	str	r5, [r4, #20]
 800f032:	444e      	add	r6, r9
 800f034:	eba5 0509 	sub.w	r5, r5, r9
 800f038:	6026      	str	r6, [r4, #0]
 800f03a:	60a5      	str	r5, [r4, #8]
 800f03c:	463e      	mov	r6, r7
 800f03e:	42be      	cmp	r6, r7
 800f040:	d900      	bls.n	800f044 <__ssputs_r+0x70>
 800f042:	463e      	mov	r6, r7
 800f044:	6820      	ldr	r0, [r4, #0]
 800f046:	4632      	mov	r2, r6
 800f048:	4641      	mov	r1, r8
 800f04a:	f7fd fcb4 	bl	800c9b6 <memmove>
 800f04e:	68a3      	ldr	r3, [r4, #8]
 800f050:	1b9b      	subs	r3, r3, r6
 800f052:	60a3      	str	r3, [r4, #8]
 800f054:	6823      	ldr	r3, [r4, #0]
 800f056:	4433      	add	r3, r6
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	2000      	movs	r0, #0
 800f05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f060:	462a      	mov	r2, r5
 800f062:	f000 fd76 	bl	800fb52 <_realloc_r>
 800f066:	4606      	mov	r6, r0
 800f068:	2800      	cmp	r0, #0
 800f06a:	d1e0      	bne.n	800f02e <__ssputs_r+0x5a>
 800f06c:	6921      	ldr	r1, [r4, #16]
 800f06e:	4650      	mov	r0, sl
 800f070:	f7fe fc20 	bl	800d8b4 <_free_r>
 800f074:	230c      	movs	r3, #12
 800f076:	f8ca 3000 	str.w	r3, [sl]
 800f07a:	89a3      	ldrh	r3, [r4, #12]
 800f07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f080:	81a3      	strh	r3, [r4, #12]
 800f082:	f04f 30ff 	mov.w	r0, #4294967295
 800f086:	e7e9      	b.n	800f05c <__ssputs_r+0x88>

0800f088 <_svfiprintf_r>:
 800f088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08c:	4698      	mov	r8, r3
 800f08e:	898b      	ldrh	r3, [r1, #12]
 800f090:	061b      	lsls	r3, r3, #24
 800f092:	b09d      	sub	sp, #116	; 0x74
 800f094:	4607      	mov	r7, r0
 800f096:	460d      	mov	r5, r1
 800f098:	4614      	mov	r4, r2
 800f09a:	d50e      	bpl.n	800f0ba <_svfiprintf_r+0x32>
 800f09c:	690b      	ldr	r3, [r1, #16]
 800f09e:	b963      	cbnz	r3, 800f0ba <_svfiprintf_r+0x32>
 800f0a0:	2140      	movs	r1, #64	; 0x40
 800f0a2:	f7fc fc61 	bl	800b968 <_malloc_r>
 800f0a6:	6028      	str	r0, [r5, #0]
 800f0a8:	6128      	str	r0, [r5, #16]
 800f0aa:	b920      	cbnz	r0, 800f0b6 <_svfiprintf_r+0x2e>
 800f0ac:	230c      	movs	r3, #12
 800f0ae:	603b      	str	r3, [r7, #0]
 800f0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b4:	e0d0      	b.n	800f258 <_svfiprintf_r+0x1d0>
 800f0b6:	2340      	movs	r3, #64	; 0x40
 800f0b8:	616b      	str	r3, [r5, #20]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f0be:	2320      	movs	r3, #32
 800f0c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0c8:	2330      	movs	r3, #48	; 0x30
 800f0ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f270 <_svfiprintf_r+0x1e8>
 800f0ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0d2:	f04f 0901 	mov.w	r9, #1
 800f0d6:	4623      	mov	r3, r4
 800f0d8:	469a      	mov	sl, r3
 800f0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0de:	b10a      	cbz	r2, 800f0e4 <_svfiprintf_r+0x5c>
 800f0e0:	2a25      	cmp	r2, #37	; 0x25
 800f0e2:	d1f9      	bne.n	800f0d8 <_svfiprintf_r+0x50>
 800f0e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f0e8:	d00b      	beq.n	800f102 <_svfiprintf_r+0x7a>
 800f0ea:	465b      	mov	r3, fp
 800f0ec:	4622      	mov	r2, r4
 800f0ee:	4629      	mov	r1, r5
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f7ff ff6f 	bl	800efd4 <__ssputs_r>
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	f000 80a9 	beq.w	800f24e <_svfiprintf_r+0x1c6>
 800f0fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0fe:	445a      	add	r2, fp
 800f100:	9209      	str	r2, [sp, #36]	; 0x24
 800f102:	f89a 3000 	ldrb.w	r3, [sl]
 800f106:	2b00      	cmp	r3, #0
 800f108:	f000 80a1 	beq.w	800f24e <_svfiprintf_r+0x1c6>
 800f10c:	2300      	movs	r3, #0
 800f10e:	f04f 32ff 	mov.w	r2, #4294967295
 800f112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f116:	f10a 0a01 	add.w	sl, sl, #1
 800f11a:	9304      	str	r3, [sp, #16]
 800f11c:	9307      	str	r3, [sp, #28]
 800f11e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f122:	931a      	str	r3, [sp, #104]	; 0x68
 800f124:	4654      	mov	r4, sl
 800f126:	2205      	movs	r2, #5
 800f128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f12c:	4850      	ldr	r0, [pc, #320]	; (800f270 <_svfiprintf_r+0x1e8>)
 800f12e:	f7f1 f877 	bl	8000220 <memchr>
 800f132:	9a04      	ldr	r2, [sp, #16]
 800f134:	b9d8      	cbnz	r0, 800f16e <_svfiprintf_r+0xe6>
 800f136:	06d0      	lsls	r0, r2, #27
 800f138:	bf44      	itt	mi
 800f13a:	2320      	movmi	r3, #32
 800f13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f140:	0711      	lsls	r1, r2, #28
 800f142:	bf44      	itt	mi
 800f144:	232b      	movmi	r3, #43	; 0x2b
 800f146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f14a:	f89a 3000 	ldrb.w	r3, [sl]
 800f14e:	2b2a      	cmp	r3, #42	; 0x2a
 800f150:	d015      	beq.n	800f17e <_svfiprintf_r+0xf6>
 800f152:	9a07      	ldr	r2, [sp, #28]
 800f154:	4654      	mov	r4, sl
 800f156:	2000      	movs	r0, #0
 800f158:	f04f 0c0a 	mov.w	ip, #10
 800f15c:	4621      	mov	r1, r4
 800f15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f162:	3b30      	subs	r3, #48	; 0x30
 800f164:	2b09      	cmp	r3, #9
 800f166:	d94d      	bls.n	800f204 <_svfiprintf_r+0x17c>
 800f168:	b1b0      	cbz	r0, 800f198 <_svfiprintf_r+0x110>
 800f16a:	9207      	str	r2, [sp, #28]
 800f16c:	e014      	b.n	800f198 <_svfiprintf_r+0x110>
 800f16e:	eba0 0308 	sub.w	r3, r0, r8
 800f172:	fa09 f303 	lsl.w	r3, r9, r3
 800f176:	4313      	orrs	r3, r2
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	46a2      	mov	sl, r4
 800f17c:	e7d2      	b.n	800f124 <_svfiprintf_r+0x9c>
 800f17e:	9b03      	ldr	r3, [sp, #12]
 800f180:	1d19      	adds	r1, r3, #4
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	9103      	str	r1, [sp, #12]
 800f186:	2b00      	cmp	r3, #0
 800f188:	bfbb      	ittet	lt
 800f18a:	425b      	neglt	r3, r3
 800f18c:	f042 0202 	orrlt.w	r2, r2, #2
 800f190:	9307      	strge	r3, [sp, #28]
 800f192:	9307      	strlt	r3, [sp, #28]
 800f194:	bfb8      	it	lt
 800f196:	9204      	strlt	r2, [sp, #16]
 800f198:	7823      	ldrb	r3, [r4, #0]
 800f19a:	2b2e      	cmp	r3, #46	; 0x2e
 800f19c:	d10c      	bne.n	800f1b8 <_svfiprintf_r+0x130>
 800f19e:	7863      	ldrb	r3, [r4, #1]
 800f1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1a2:	d134      	bne.n	800f20e <_svfiprintf_r+0x186>
 800f1a4:	9b03      	ldr	r3, [sp, #12]
 800f1a6:	1d1a      	adds	r2, r3, #4
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	9203      	str	r2, [sp, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	bfb8      	it	lt
 800f1b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1b4:	3402      	adds	r4, #2
 800f1b6:	9305      	str	r3, [sp, #20]
 800f1b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f280 <_svfiprintf_r+0x1f8>
 800f1bc:	7821      	ldrb	r1, [r4, #0]
 800f1be:	2203      	movs	r2, #3
 800f1c0:	4650      	mov	r0, sl
 800f1c2:	f7f1 f82d 	bl	8000220 <memchr>
 800f1c6:	b138      	cbz	r0, 800f1d8 <_svfiprintf_r+0x150>
 800f1c8:	9b04      	ldr	r3, [sp, #16]
 800f1ca:	eba0 000a 	sub.w	r0, r0, sl
 800f1ce:	2240      	movs	r2, #64	; 0x40
 800f1d0:	4082      	lsls	r2, r0
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	3401      	adds	r4, #1
 800f1d6:	9304      	str	r3, [sp, #16]
 800f1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1dc:	4825      	ldr	r0, [pc, #148]	; (800f274 <_svfiprintf_r+0x1ec>)
 800f1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1e2:	2206      	movs	r2, #6
 800f1e4:	f7f1 f81c 	bl	8000220 <memchr>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d038      	beq.n	800f25e <_svfiprintf_r+0x1d6>
 800f1ec:	4b22      	ldr	r3, [pc, #136]	; (800f278 <_svfiprintf_r+0x1f0>)
 800f1ee:	bb1b      	cbnz	r3, 800f238 <_svfiprintf_r+0x1b0>
 800f1f0:	9b03      	ldr	r3, [sp, #12]
 800f1f2:	3307      	adds	r3, #7
 800f1f4:	f023 0307 	bic.w	r3, r3, #7
 800f1f8:	3308      	adds	r3, #8
 800f1fa:	9303      	str	r3, [sp, #12]
 800f1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1fe:	4433      	add	r3, r6
 800f200:	9309      	str	r3, [sp, #36]	; 0x24
 800f202:	e768      	b.n	800f0d6 <_svfiprintf_r+0x4e>
 800f204:	fb0c 3202 	mla	r2, ip, r2, r3
 800f208:	460c      	mov	r4, r1
 800f20a:	2001      	movs	r0, #1
 800f20c:	e7a6      	b.n	800f15c <_svfiprintf_r+0xd4>
 800f20e:	2300      	movs	r3, #0
 800f210:	3401      	adds	r4, #1
 800f212:	9305      	str	r3, [sp, #20]
 800f214:	4619      	mov	r1, r3
 800f216:	f04f 0c0a 	mov.w	ip, #10
 800f21a:	4620      	mov	r0, r4
 800f21c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f220:	3a30      	subs	r2, #48	; 0x30
 800f222:	2a09      	cmp	r2, #9
 800f224:	d903      	bls.n	800f22e <_svfiprintf_r+0x1a6>
 800f226:	2b00      	cmp	r3, #0
 800f228:	d0c6      	beq.n	800f1b8 <_svfiprintf_r+0x130>
 800f22a:	9105      	str	r1, [sp, #20]
 800f22c:	e7c4      	b.n	800f1b8 <_svfiprintf_r+0x130>
 800f22e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f232:	4604      	mov	r4, r0
 800f234:	2301      	movs	r3, #1
 800f236:	e7f0      	b.n	800f21a <_svfiprintf_r+0x192>
 800f238:	ab03      	add	r3, sp, #12
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	462a      	mov	r2, r5
 800f23e:	4b0f      	ldr	r3, [pc, #60]	; (800f27c <_svfiprintf_r+0x1f4>)
 800f240:	a904      	add	r1, sp, #16
 800f242:	4638      	mov	r0, r7
 800f244:	f7fc fcbc 	bl	800bbc0 <_printf_float>
 800f248:	1c42      	adds	r2, r0, #1
 800f24a:	4606      	mov	r6, r0
 800f24c:	d1d6      	bne.n	800f1fc <_svfiprintf_r+0x174>
 800f24e:	89ab      	ldrh	r3, [r5, #12]
 800f250:	065b      	lsls	r3, r3, #25
 800f252:	f53f af2d 	bmi.w	800f0b0 <_svfiprintf_r+0x28>
 800f256:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f258:	b01d      	add	sp, #116	; 0x74
 800f25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25e:	ab03      	add	r3, sp, #12
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	462a      	mov	r2, r5
 800f264:	4b05      	ldr	r3, [pc, #20]	; (800f27c <_svfiprintf_r+0x1f4>)
 800f266:	a904      	add	r1, sp, #16
 800f268:	4638      	mov	r0, r7
 800f26a:	f7fc ff4d 	bl	800c108 <_printf_i>
 800f26e:	e7eb      	b.n	800f248 <_svfiprintf_r+0x1c0>
 800f270:	080106e9 	.word	0x080106e9
 800f274:	080106f3 	.word	0x080106f3
 800f278:	0800bbc1 	.word	0x0800bbc1
 800f27c:	0800efd5 	.word	0x0800efd5
 800f280:	080106ef 	.word	0x080106ef

0800f284 <__sflush_r>:
 800f284:	898a      	ldrh	r2, [r1, #12]
 800f286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f28a:	4605      	mov	r5, r0
 800f28c:	0710      	lsls	r0, r2, #28
 800f28e:	460c      	mov	r4, r1
 800f290:	d458      	bmi.n	800f344 <__sflush_r+0xc0>
 800f292:	684b      	ldr	r3, [r1, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	dc05      	bgt.n	800f2a4 <__sflush_r+0x20>
 800f298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	dc02      	bgt.n	800f2a4 <__sflush_r+0x20>
 800f29e:	2000      	movs	r0, #0
 800f2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2a6:	2e00      	cmp	r6, #0
 800f2a8:	d0f9      	beq.n	800f29e <__sflush_r+0x1a>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2b0:	682f      	ldr	r7, [r5, #0]
 800f2b2:	6a21      	ldr	r1, [r4, #32]
 800f2b4:	602b      	str	r3, [r5, #0]
 800f2b6:	d032      	beq.n	800f31e <__sflush_r+0x9a>
 800f2b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2ba:	89a3      	ldrh	r3, [r4, #12]
 800f2bc:	075a      	lsls	r2, r3, #29
 800f2be:	d505      	bpl.n	800f2cc <__sflush_r+0x48>
 800f2c0:	6863      	ldr	r3, [r4, #4]
 800f2c2:	1ac0      	subs	r0, r0, r3
 800f2c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2c6:	b10b      	cbz	r3, 800f2cc <__sflush_r+0x48>
 800f2c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2ca:	1ac0      	subs	r0, r0, r3
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2d2:	6a21      	ldr	r1, [r4, #32]
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	47b0      	blx	r6
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	89a3      	ldrh	r3, [r4, #12]
 800f2dc:	d106      	bne.n	800f2ec <__sflush_r+0x68>
 800f2de:	6829      	ldr	r1, [r5, #0]
 800f2e0:	291d      	cmp	r1, #29
 800f2e2:	d82b      	bhi.n	800f33c <__sflush_r+0xb8>
 800f2e4:	4a29      	ldr	r2, [pc, #164]	; (800f38c <__sflush_r+0x108>)
 800f2e6:	410a      	asrs	r2, r1
 800f2e8:	07d6      	lsls	r6, r2, #31
 800f2ea:	d427      	bmi.n	800f33c <__sflush_r+0xb8>
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	6062      	str	r2, [r4, #4]
 800f2f0:	04d9      	lsls	r1, r3, #19
 800f2f2:	6922      	ldr	r2, [r4, #16]
 800f2f4:	6022      	str	r2, [r4, #0]
 800f2f6:	d504      	bpl.n	800f302 <__sflush_r+0x7e>
 800f2f8:	1c42      	adds	r2, r0, #1
 800f2fa:	d101      	bne.n	800f300 <__sflush_r+0x7c>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	b903      	cbnz	r3, 800f302 <__sflush_r+0x7e>
 800f300:	6560      	str	r0, [r4, #84]	; 0x54
 800f302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f304:	602f      	str	r7, [r5, #0]
 800f306:	2900      	cmp	r1, #0
 800f308:	d0c9      	beq.n	800f29e <__sflush_r+0x1a>
 800f30a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f30e:	4299      	cmp	r1, r3
 800f310:	d002      	beq.n	800f318 <__sflush_r+0x94>
 800f312:	4628      	mov	r0, r5
 800f314:	f7fe face 	bl	800d8b4 <_free_r>
 800f318:	2000      	movs	r0, #0
 800f31a:	6360      	str	r0, [r4, #52]	; 0x34
 800f31c:	e7c0      	b.n	800f2a0 <__sflush_r+0x1c>
 800f31e:	2301      	movs	r3, #1
 800f320:	4628      	mov	r0, r5
 800f322:	47b0      	blx	r6
 800f324:	1c41      	adds	r1, r0, #1
 800f326:	d1c8      	bne.n	800f2ba <__sflush_r+0x36>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d0c5      	beq.n	800f2ba <__sflush_r+0x36>
 800f32e:	2b1d      	cmp	r3, #29
 800f330:	d001      	beq.n	800f336 <__sflush_r+0xb2>
 800f332:	2b16      	cmp	r3, #22
 800f334:	d101      	bne.n	800f33a <__sflush_r+0xb6>
 800f336:	602f      	str	r7, [r5, #0]
 800f338:	e7b1      	b.n	800f29e <__sflush_r+0x1a>
 800f33a:	89a3      	ldrh	r3, [r4, #12]
 800f33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	e7ad      	b.n	800f2a0 <__sflush_r+0x1c>
 800f344:	690f      	ldr	r7, [r1, #16]
 800f346:	2f00      	cmp	r7, #0
 800f348:	d0a9      	beq.n	800f29e <__sflush_r+0x1a>
 800f34a:	0793      	lsls	r3, r2, #30
 800f34c:	680e      	ldr	r6, [r1, #0]
 800f34e:	bf08      	it	eq
 800f350:	694b      	ldreq	r3, [r1, #20]
 800f352:	600f      	str	r7, [r1, #0]
 800f354:	bf18      	it	ne
 800f356:	2300      	movne	r3, #0
 800f358:	eba6 0807 	sub.w	r8, r6, r7
 800f35c:	608b      	str	r3, [r1, #8]
 800f35e:	f1b8 0f00 	cmp.w	r8, #0
 800f362:	dd9c      	ble.n	800f29e <__sflush_r+0x1a>
 800f364:	6a21      	ldr	r1, [r4, #32]
 800f366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f368:	4643      	mov	r3, r8
 800f36a:	463a      	mov	r2, r7
 800f36c:	4628      	mov	r0, r5
 800f36e:	47b0      	blx	r6
 800f370:	2800      	cmp	r0, #0
 800f372:	dc06      	bgt.n	800f382 <__sflush_r+0xfe>
 800f374:	89a3      	ldrh	r3, [r4, #12]
 800f376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f37a:	81a3      	strh	r3, [r4, #12]
 800f37c:	f04f 30ff 	mov.w	r0, #4294967295
 800f380:	e78e      	b.n	800f2a0 <__sflush_r+0x1c>
 800f382:	4407      	add	r7, r0
 800f384:	eba8 0800 	sub.w	r8, r8, r0
 800f388:	e7e9      	b.n	800f35e <__sflush_r+0xda>
 800f38a:	bf00      	nop
 800f38c:	dfbffffe 	.word	0xdfbffffe

0800f390 <_fflush_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	690b      	ldr	r3, [r1, #16]
 800f394:	4605      	mov	r5, r0
 800f396:	460c      	mov	r4, r1
 800f398:	b913      	cbnz	r3, 800f3a0 <_fflush_r+0x10>
 800f39a:	2500      	movs	r5, #0
 800f39c:	4628      	mov	r0, r5
 800f39e:	bd38      	pop	{r3, r4, r5, pc}
 800f3a0:	b118      	cbz	r0, 800f3aa <_fflush_r+0x1a>
 800f3a2:	6a03      	ldr	r3, [r0, #32]
 800f3a4:	b90b      	cbnz	r3, 800f3aa <_fflush_r+0x1a>
 800f3a6:	f7fd fa6d 	bl	800c884 <__sinit>
 800f3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d0f3      	beq.n	800f39a <_fflush_r+0xa>
 800f3b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3b4:	07d0      	lsls	r0, r2, #31
 800f3b6:	d404      	bmi.n	800f3c2 <_fflush_r+0x32>
 800f3b8:	0599      	lsls	r1, r3, #22
 800f3ba:	d402      	bmi.n	800f3c2 <_fflush_r+0x32>
 800f3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3be:	f7fd fbe6 	bl	800cb8e <__retarget_lock_acquire_recursive>
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	f7ff ff5d 	bl	800f284 <__sflush_r>
 800f3ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3cc:	07da      	lsls	r2, r3, #31
 800f3ce:	4605      	mov	r5, r0
 800f3d0:	d4e4      	bmi.n	800f39c <_fflush_r+0xc>
 800f3d2:	89a3      	ldrh	r3, [r4, #12]
 800f3d4:	059b      	lsls	r3, r3, #22
 800f3d6:	d4e1      	bmi.n	800f39c <_fflush_r+0xc>
 800f3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3da:	f7fd fbd9 	bl	800cb90 <__retarget_lock_release_recursive>
 800f3de:	e7dd      	b.n	800f39c <_fflush_r+0xc>

0800f3e0 <strncmp>:
 800f3e0:	b510      	push	{r4, lr}
 800f3e2:	b16a      	cbz	r2, 800f400 <strncmp+0x20>
 800f3e4:	3901      	subs	r1, #1
 800f3e6:	1884      	adds	r4, r0, r2
 800f3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d103      	bne.n	800f3fc <strncmp+0x1c>
 800f3f4:	42a0      	cmp	r0, r4
 800f3f6:	d001      	beq.n	800f3fc <strncmp+0x1c>
 800f3f8:	2a00      	cmp	r2, #0
 800f3fa:	d1f5      	bne.n	800f3e8 <strncmp+0x8>
 800f3fc:	1ad0      	subs	r0, r2, r3
 800f3fe:	bd10      	pop	{r4, pc}
 800f400:	4610      	mov	r0, r2
 800f402:	e7fc      	b.n	800f3fe <strncmp+0x1e>
 800f404:	0000      	movs	r0, r0
	...

0800f408 <nan>:
 800f408:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f410 <nan+0x8>
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	00000000 	.word	0x00000000
 800f414:	7ff80000 	.word	0x7ff80000

0800f418 <__assert_func>:
 800f418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f41a:	4614      	mov	r4, r2
 800f41c:	461a      	mov	r2, r3
 800f41e:	4b09      	ldr	r3, [pc, #36]	; (800f444 <__assert_func+0x2c>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	4605      	mov	r5, r0
 800f424:	68d8      	ldr	r0, [r3, #12]
 800f426:	b14c      	cbz	r4, 800f43c <__assert_func+0x24>
 800f428:	4b07      	ldr	r3, [pc, #28]	; (800f448 <__assert_func+0x30>)
 800f42a:	9100      	str	r1, [sp, #0]
 800f42c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f430:	4906      	ldr	r1, [pc, #24]	; (800f44c <__assert_func+0x34>)
 800f432:	462b      	mov	r3, r5
 800f434:	f000 fbca 	bl	800fbcc <fiprintf>
 800f438:	f7fc fa5e 	bl	800b8f8 <abort>
 800f43c:	4b04      	ldr	r3, [pc, #16]	; (800f450 <__assert_func+0x38>)
 800f43e:	461c      	mov	r4, r3
 800f440:	e7f3      	b.n	800f42a <__assert_func+0x12>
 800f442:	bf00      	nop
 800f444:	20000064 	.word	0x20000064
 800f448:	08010702 	.word	0x08010702
 800f44c:	0801070f 	.word	0x0801070f
 800f450:	0801073d 	.word	0x0801073d

0800f454 <_calloc_r>:
 800f454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f456:	fba1 2402 	umull	r2, r4, r1, r2
 800f45a:	b94c      	cbnz	r4, 800f470 <_calloc_r+0x1c>
 800f45c:	4611      	mov	r1, r2
 800f45e:	9201      	str	r2, [sp, #4]
 800f460:	f7fc fa82 	bl	800b968 <_malloc_r>
 800f464:	9a01      	ldr	r2, [sp, #4]
 800f466:	4605      	mov	r5, r0
 800f468:	b930      	cbnz	r0, 800f478 <_calloc_r+0x24>
 800f46a:	4628      	mov	r0, r5
 800f46c:	b003      	add	sp, #12
 800f46e:	bd30      	pop	{r4, r5, pc}
 800f470:	220c      	movs	r2, #12
 800f472:	6002      	str	r2, [r0, #0]
 800f474:	2500      	movs	r5, #0
 800f476:	e7f8      	b.n	800f46a <_calloc_r+0x16>
 800f478:	4621      	mov	r1, r4
 800f47a:	f7fd fab6 	bl	800c9ea <memset>
 800f47e:	e7f4      	b.n	800f46a <_calloc_r+0x16>

0800f480 <rshift>:
 800f480:	6903      	ldr	r3, [r0, #16]
 800f482:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f486:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f48a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f48e:	f100 0414 	add.w	r4, r0, #20
 800f492:	dd45      	ble.n	800f520 <rshift+0xa0>
 800f494:	f011 011f 	ands.w	r1, r1, #31
 800f498:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f49c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f4a0:	d10c      	bne.n	800f4bc <rshift+0x3c>
 800f4a2:	f100 0710 	add.w	r7, r0, #16
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	42b1      	cmp	r1, r6
 800f4aa:	d334      	bcc.n	800f516 <rshift+0x96>
 800f4ac:	1a9b      	subs	r3, r3, r2
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	1eea      	subs	r2, r5, #3
 800f4b2:	4296      	cmp	r6, r2
 800f4b4:	bf38      	it	cc
 800f4b6:	2300      	movcc	r3, #0
 800f4b8:	4423      	add	r3, r4
 800f4ba:	e015      	b.n	800f4e8 <rshift+0x68>
 800f4bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f4c0:	f1c1 0820 	rsb	r8, r1, #32
 800f4c4:	40cf      	lsrs	r7, r1
 800f4c6:	f105 0e04 	add.w	lr, r5, #4
 800f4ca:	46a1      	mov	r9, r4
 800f4cc:	4576      	cmp	r6, lr
 800f4ce:	46f4      	mov	ip, lr
 800f4d0:	d815      	bhi.n	800f4fe <rshift+0x7e>
 800f4d2:	1a9a      	subs	r2, r3, r2
 800f4d4:	0092      	lsls	r2, r2, #2
 800f4d6:	3a04      	subs	r2, #4
 800f4d8:	3501      	adds	r5, #1
 800f4da:	42ae      	cmp	r6, r5
 800f4dc:	bf38      	it	cc
 800f4de:	2200      	movcc	r2, #0
 800f4e0:	18a3      	adds	r3, r4, r2
 800f4e2:	50a7      	str	r7, [r4, r2]
 800f4e4:	b107      	cbz	r7, 800f4e8 <rshift+0x68>
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	1b1a      	subs	r2, r3, r4
 800f4ea:	42a3      	cmp	r3, r4
 800f4ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f4f0:	bf08      	it	eq
 800f4f2:	2300      	moveq	r3, #0
 800f4f4:	6102      	str	r2, [r0, #16]
 800f4f6:	bf08      	it	eq
 800f4f8:	6143      	streq	r3, [r0, #20]
 800f4fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4fe:	f8dc c000 	ldr.w	ip, [ip]
 800f502:	fa0c fc08 	lsl.w	ip, ip, r8
 800f506:	ea4c 0707 	orr.w	r7, ip, r7
 800f50a:	f849 7b04 	str.w	r7, [r9], #4
 800f50e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f512:	40cf      	lsrs	r7, r1
 800f514:	e7da      	b.n	800f4cc <rshift+0x4c>
 800f516:	f851 cb04 	ldr.w	ip, [r1], #4
 800f51a:	f847 cf04 	str.w	ip, [r7, #4]!
 800f51e:	e7c3      	b.n	800f4a8 <rshift+0x28>
 800f520:	4623      	mov	r3, r4
 800f522:	e7e1      	b.n	800f4e8 <rshift+0x68>

0800f524 <__hexdig_fun>:
 800f524:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f528:	2b09      	cmp	r3, #9
 800f52a:	d802      	bhi.n	800f532 <__hexdig_fun+0xe>
 800f52c:	3820      	subs	r0, #32
 800f52e:	b2c0      	uxtb	r0, r0
 800f530:	4770      	bx	lr
 800f532:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f536:	2b05      	cmp	r3, #5
 800f538:	d801      	bhi.n	800f53e <__hexdig_fun+0x1a>
 800f53a:	3847      	subs	r0, #71	; 0x47
 800f53c:	e7f7      	b.n	800f52e <__hexdig_fun+0xa>
 800f53e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f542:	2b05      	cmp	r3, #5
 800f544:	d801      	bhi.n	800f54a <__hexdig_fun+0x26>
 800f546:	3827      	subs	r0, #39	; 0x27
 800f548:	e7f1      	b.n	800f52e <__hexdig_fun+0xa>
 800f54a:	2000      	movs	r0, #0
 800f54c:	4770      	bx	lr
	...

0800f550 <__gethex>:
 800f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	4617      	mov	r7, r2
 800f556:	680a      	ldr	r2, [r1, #0]
 800f558:	b085      	sub	sp, #20
 800f55a:	f102 0b02 	add.w	fp, r2, #2
 800f55e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f562:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f566:	4681      	mov	r9, r0
 800f568:	468a      	mov	sl, r1
 800f56a:	9302      	str	r3, [sp, #8]
 800f56c:	32fe      	adds	r2, #254	; 0xfe
 800f56e:	eb02 030b 	add.w	r3, r2, fp
 800f572:	46d8      	mov	r8, fp
 800f574:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f578:	9301      	str	r3, [sp, #4]
 800f57a:	2830      	cmp	r0, #48	; 0x30
 800f57c:	d0f7      	beq.n	800f56e <__gethex+0x1e>
 800f57e:	f7ff ffd1 	bl	800f524 <__hexdig_fun>
 800f582:	4604      	mov	r4, r0
 800f584:	2800      	cmp	r0, #0
 800f586:	d138      	bne.n	800f5fa <__gethex+0xaa>
 800f588:	49a7      	ldr	r1, [pc, #668]	; (800f828 <__gethex+0x2d8>)
 800f58a:	2201      	movs	r2, #1
 800f58c:	4640      	mov	r0, r8
 800f58e:	f7ff ff27 	bl	800f3e0 <strncmp>
 800f592:	4606      	mov	r6, r0
 800f594:	2800      	cmp	r0, #0
 800f596:	d169      	bne.n	800f66c <__gethex+0x11c>
 800f598:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f59c:	465d      	mov	r5, fp
 800f59e:	f7ff ffc1 	bl	800f524 <__hexdig_fun>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d064      	beq.n	800f670 <__gethex+0x120>
 800f5a6:	465a      	mov	r2, fp
 800f5a8:	7810      	ldrb	r0, [r2, #0]
 800f5aa:	2830      	cmp	r0, #48	; 0x30
 800f5ac:	4690      	mov	r8, r2
 800f5ae:	f102 0201 	add.w	r2, r2, #1
 800f5b2:	d0f9      	beq.n	800f5a8 <__gethex+0x58>
 800f5b4:	f7ff ffb6 	bl	800f524 <__hexdig_fun>
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	fab0 f480 	clz	r4, r0
 800f5be:	0964      	lsrs	r4, r4, #5
 800f5c0:	465e      	mov	r6, fp
 800f5c2:	9301      	str	r3, [sp, #4]
 800f5c4:	4642      	mov	r2, r8
 800f5c6:	4615      	mov	r5, r2
 800f5c8:	3201      	adds	r2, #1
 800f5ca:	7828      	ldrb	r0, [r5, #0]
 800f5cc:	f7ff ffaa 	bl	800f524 <__hexdig_fun>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d1f8      	bne.n	800f5c6 <__gethex+0x76>
 800f5d4:	4994      	ldr	r1, [pc, #592]	; (800f828 <__gethex+0x2d8>)
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f7ff ff01 	bl	800f3e0 <strncmp>
 800f5de:	b978      	cbnz	r0, 800f600 <__gethex+0xb0>
 800f5e0:	b946      	cbnz	r6, 800f5f4 <__gethex+0xa4>
 800f5e2:	1c6e      	adds	r6, r5, #1
 800f5e4:	4632      	mov	r2, r6
 800f5e6:	4615      	mov	r5, r2
 800f5e8:	3201      	adds	r2, #1
 800f5ea:	7828      	ldrb	r0, [r5, #0]
 800f5ec:	f7ff ff9a 	bl	800f524 <__hexdig_fun>
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d1f8      	bne.n	800f5e6 <__gethex+0x96>
 800f5f4:	1b73      	subs	r3, r6, r5
 800f5f6:	009e      	lsls	r6, r3, #2
 800f5f8:	e004      	b.n	800f604 <__gethex+0xb4>
 800f5fa:	2400      	movs	r4, #0
 800f5fc:	4626      	mov	r6, r4
 800f5fe:	e7e1      	b.n	800f5c4 <__gethex+0x74>
 800f600:	2e00      	cmp	r6, #0
 800f602:	d1f7      	bne.n	800f5f4 <__gethex+0xa4>
 800f604:	782b      	ldrb	r3, [r5, #0]
 800f606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f60a:	2b50      	cmp	r3, #80	; 0x50
 800f60c:	d13d      	bne.n	800f68a <__gethex+0x13a>
 800f60e:	786b      	ldrb	r3, [r5, #1]
 800f610:	2b2b      	cmp	r3, #43	; 0x2b
 800f612:	d02f      	beq.n	800f674 <__gethex+0x124>
 800f614:	2b2d      	cmp	r3, #45	; 0x2d
 800f616:	d031      	beq.n	800f67c <__gethex+0x12c>
 800f618:	1c69      	adds	r1, r5, #1
 800f61a:	f04f 0b00 	mov.w	fp, #0
 800f61e:	7808      	ldrb	r0, [r1, #0]
 800f620:	f7ff ff80 	bl	800f524 <__hexdig_fun>
 800f624:	1e42      	subs	r2, r0, #1
 800f626:	b2d2      	uxtb	r2, r2
 800f628:	2a18      	cmp	r2, #24
 800f62a:	d82e      	bhi.n	800f68a <__gethex+0x13a>
 800f62c:	f1a0 0210 	sub.w	r2, r0, #16
 800f630:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f634:	f7ff ff76 	bl	800f524 <__hexdig_fun>
 800f638:	f100 3cff 	add.w	ip, r0, #4294967295
 800f63c:	fa5f fc8c 	uxtb.w	ip, ip
 800f640:	f1bc 0f18 	cmp.w	ip, #24
 800f644:	d91d      	bls.n	800f682 <__gethex+0x132>
 800f646:	f1bb 0f00 	cmp.w	fp, #0
 800f64a:	d000      	beq.n	800f64e <__gethex+0xfe>
 800f64c:	4252      	negs	r2, r2
 800f64e:	4416      	add	r6, r2
 800f650:	f8ca 1000 	str.w	r1, [sl]
 800f654:	b1dc      	cbz	r4, 800f68e <__gethex+0x13e>
 800f656:	9b01      	ldr	r3, [sp, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	bf14      	ite	ne
 800f65c:	f04f 0800 	movne.w	r8, #0
 800f660:	f04f 0806 	moveq.w	r8, #6
 800f664:	4640      	mov	r0, r8
 800f666:	b005      	add	sp, #20
 800f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66c:	4645      	mov	r5, r8
 800f66e:	4626      	mov	r6, r4
 800f670:	2401      	movs	r4, #1
 800f672:	e7c7      	b.n	800f604 <__gethex+0xb4>
 800f674:	f04f 0b00 	mov.w	fp, #0
 800f678:	1ca9      	adds	r1, r5, #2
 800f67a:	e7d0      	b.n	800f61e <__gethex+0xce>
 800f67c:	f04f 0b01 	mov.w	fp, #1
 800f680:	e7fa      	b.n	800f678 <__gethex+0x128>
 800f682:	230a      	movs	r3, #10
 800f684:	fb03 0002 	mla	r0, r3, r2, r0
 800f688:	e7d0      	b.n	800f62c <__gethex+0xdc>
 800f68a:	4629      	mov	r1, r5
 800f68c:	e7e0      	b.n	800f650 <__gethex+0x100>
 800f68e:	eba5 0308 	sub.w	r3, r5, r8
 800f692:	3b01      	subs	r3, #1
 800f694:	4621      	mov	r1, r4
 800f696:	2b07      	cmp	r3, #7
 800f698:	dc0a      	bgt.n	800f6b0 <__gethex+0x160>
 800f69a:	4648      	mov	r0, r9
 800f69c:	f7fe f956 	bl	800d94c <_Balloc>
 800f6a0:	4604      	mov	r4, r0
 800f6a2:	b940      	cbnz	r0, 800f6b6 <__gethex+0x166>
 800f6a4:	4b61      	ldr	r3, [pc, #388]	; (800f82c <__gethex+0x2dc>)
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	21e4      	movs	r1, #228	; 0xe4
 800f6aa:	4861      	ldr	r0, [pc, #388]	; (800f830 <__gethex+0x2e0>)
 800f6ac:	f7ff feb4 	bl	800f418 <__assert_func>
 800f6b0:	3101      	adds	r1, #1
 800f6b2:	105b      	asrs	r3, r3, #1
 800f6b4:	e7ef      	b.n	800f696 <__gethex+0x146>
 800f6b6:	f100 0a14 	add.w	sl, r0, #20
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	495a      	ldr	r1, [pc, #360]	; (800f828 <__gethex+0x2d8>)
 800f6be:	f8cd a004 	str.w	sl, [sp, #4]
 800f6c2:	469b      	mov	fp, r3
 800f6c4:	45a8      	cmp	r8, r5
 800f6c6:	d342      	bcc.n	800f74e <__gethex+0x1fe>
 800f6c8:	9801      	ldr	r0, [sp, #4]
 800f6ca:	f840 bb04 	str.w	fp, [r0], #4
 800f6ce:	eba0 000a 	sub.w	r0, r0, sl
 800f6d2:	1080      	asrs	r0, r0, #2
 800f6d4:	6120      	str	r0, [r4, #16]
 800f6d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f6da:	4658      	mov	r0, fp
 800f6dc:	f7fe fa28 	bl	800db30 <__hi0bits>
 800f6e0:	683d      	ldr	r5, [r7, #0]
 800f6e2:	eba8 0000 	sub.w	r0, r8, r0
 800f6e6:	42a8      	cmp	r0, r5
 800f6e8:	dd59      	ble.n	800f79e <__gethex+0x24e>
 800f6ea:	eba0 0805 	sub.w	r8, r0, r5
 800f6ee:	4641      	mov	r1, r8
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f7fe fdb7 	bl	800e264 <__any_on>
 800f6f6:	4683      	mov	fp, r0
 800f6f8:	b1b8      	cbz	r0, 800f72a <__gethex+0x1da>
 800f6fa:	f108 33ff 	add.w	r3, r8, #4294967295
 800f6fe:	1159      	asrs	r1, r3, #5
 800f700:	f003 021f 	and.w	r2, r3, #31
 800f704:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f708:	f04f 0b01 	mov.w	fp, #1
 800f70c:	fa0b f202 	lsl.w	r2, fp, r2
 800f710:	420a      	tst	r2, r1
 800f712:	d00a      	beq.n	800f72a <__gethex+0x1da>
 800f714:	455b      	cmp	r3, fp
 800f716:	dd06      	ble.n	800f726 <__gethex+0x1d6>
 800f718:	f1a8 0102 	sub.w	r1, r8, #2
 800f71c:	4620      	mov	r0, r4
 800f71e:	f7fe fda1 	bl	800e264 <__any_on>
 800f722:	2800      	cmp	r0, #0
 800f724:	d138      	bne.n	800f798 <__gethex+0x248>
 800f726:	f04f 0b02 	mov.w	fp, #2
 800f72a:	4641      	mov	r1, r8
 800f72c:	4620      	mov	r0, r4
 800f72e:	f7ff fea7 	bl	800f480 <rshift>
 800f732:	4446      	add	r6, r8
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	42b3      	cmp	r3, r6
 800f738:	da41      	bge.n	800f7be <__gethex+0x26e>
 800f73a:	4621      	mov	r1, r4
 800f73c:	4648      	mov	r0, r9
 800f73e:	f7fe f945 	bl	800d9cc <_Bfree>
 800f742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f744:	2300      	movs	r3, #0
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f74c:	e78a      	b.n	800f664 <__gethex+0x114>
 800f74e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f752:	2a2e      	cmp	r2, #46	; 0x2e
 800f754:	d014      	beq.n	800f780 <__gethex+0x230>
 800f756:	2b20      	cmp	r3, #32
 800f758:	d106      	bne.n	800f768 <__gethex+0x218>
 800f75a:	9b01      	ldr	r3, [sp, #4]
 800f75c:	f843 bb04 	str.w	fp, [r3], #4
 800f760:	f04f 0b00 	mov.w	fp, #0
 800f764:	9301      	str	r3, [sp, #4]
 800f766:	465b      	mov	r3, fp
 800f768:	7828      	ldrb	r0, [r5, #0]
 800f76a:	9303      	str	r3, [sp, #12]
 800f76c:	f7ff feda 	bl	800f524 <__hexdig_fun>
 800f770:	9b03      	ldr	r3, [sp, #12]
 800f772:	f000 000f 	and.w	r0, r0, #15
 800f776:	4098      	lsls	r0, r3
 800f778:	ea4b 0b00 	orr.w	fp, fp, r0
 800f77c:	3304      	adds	r3, #4
 800f77e:	e7a1      	b.n	800f6c4 <__gethex+0x174>
 800f780:	45a8      	cmp	r8, r5
 800f782:	d8e8      	bhi.n	800f756 <__gethex+0x206>
 800f784:	2201      	movs	r2, #1
 800f786:	4628      	mov	r0, r5
 800f788:	9303      	str	r3, [sp, #12]
 800f78a:	f7ff fe29 	bl	800f3e0 <strncmp>
 800f78e:	4926      	ldr	r1, [pc, #152]	; (800f828 <__gethex+0x2d8>)
 800f790:	9b03      	ldr	r3, [sp, #12]
 800f792:	2800      	cmp	r0, #0
 800f794:	d1df      	bne.n	800f756 <__gethex+0x206>
 800f796:	e795      	b.n	800f6c4 <__gethex+0x174>
 800f798:	f04f 0b03 	mov.w	fp, #3
 800f79c:	e7c5      	b.n	800f72a <__gethex+0x1da>
 800f79e:	da0b      	bge.n	800f7b8 <__gethex+0x268>
 800f7a0:	eba5 0800 	sub.w	r8, r5, r0
 800f7a4:	4621      	mov	r1, r4
 800f7a6:	4642      	mov	r2, r8
 800f7a8:	4648      	mov	r0, r9
 800f7aa:	f7fe fb29 	bl	800de00 <__lshift>
 800f7ae:	eba6 0608 	sub.w	r6, r6, r8
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	f100 0a14 	add.w	sl, r0, #20
 800f7b8:	f04f 0b00 	mov.w	fp, #0
 800f7bc:	e7ba      	b.n	800f734 <__gethex+0x1e4>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	42b3      	cmp	r3, r6
 800f7c2:	dd73      	ble.n	800f8ac <__gethex+0x35c>
 800f7c4:	1b9e      	subs	r6, r3, r6
 800f7c6:	42b5      	cmp	r5, r6
 800f7c8:	dc34      	bgt.n	800f834 <__gethex+0x2e4>
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2b02      	cmp	r3, #2
 800f7ce:	d023      	beq.n	800f818 <__gethex+0x2c8>
 800f7d0:	2b03      	cmp	r3, #3
 800f7d2:	d025      	beq.n	800f820 <__gethex+0x2d0>
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d115      	bne.n	800f804 <__gethex+0x2b4>
 800f7d8:	42b5      	cmp	r5, r6
 800f7da:	d113      	bne.n	800f804 <__gethex+0x2b4>
 800f7dc:	2d01      	cmp	r5, #1
 800f7de:	d10b      	bne.n	800f7f8 <__gethex+0x2a8>
 800f7e0:	9a02      	ldr	r2, [sp, #8]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6013      	str	r3, [r2, #0]
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	6123      	str	r3, [r4, #16]
 800f7ea:	f8ca 3000 	str.w	r3, [sl]
 800f7ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7f0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f7f4:	601c      	str	r4, [r3, #0]
 800f7f6:	e735      	b.n	800f664 <__gethex+0x114>
 800f7f8:	1e69      	subs	r1, r5, #1
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	f7fe fd32 	bl	800e264 <__any_on>
 800f800:	2800      	cmp	r0, #0
 800f802:	d1ed      	bne.n	800f7e0 <__gethex+0x290>
 800f804:	4621      	mov	r1, r4
 800f806:	4648      	mov	r0, r9
 800f808:	f7fe f8e0 	bl	800d9cc <_Bfree>
 800f80c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f80e:	2300      	movs	r3, #0
 800f810:	6013      	str	r3, [r2, #0]
 800f812:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f816:	e725      	b.n	800f664 <__gethex+0x114>
 800f818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d1f2      	bne.n	800f804 <__gethex+0x2b4>
 800f81e:	e7df      	b.n	800f7e0 <__gethex+0x290>
 800f820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1dc      	bne.n	800f7e0 <__gethex+0x290>
 800f826:	e7ed      	b.n	800f804 <__gethex+0x2b4>
 800f828:	08010594 	.word	0x08010594
 800f82c:	0801042d 	.word	0x0801042d
 800f830:	0801073e 	.word	0x0801073e
 800f834:	f106 38ff 	add.w	r8, r6, #4294967295
 800f838:	f1bb 0f00 	cmp.w	fp, #0
 800f83c:	d133      	bne.n	800f8a6 <__gethex+0x356>
 800f83e:	f1b8 0f00 	cmp.w	r8, #0
 800f842:	d004      	beq.n	800f84e <__gethex+0x2fe>
 800f844:	4641      	mov	r1, r8
 800f846:	4620      	mov	r0, r4
 800f848:	f7fe fd0c 	bl	800e264 <__any_on>
 800f84c:	4683      	mov	fp, r0
 800f84e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f852:	2301      	movs	r3, #1
 800f854:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f858:	f008 081f 	and.w	r8, r8, #31
 800f85c:	fa03 f308 	lsl.w	r3, r3, r8
 800f860:	4213      	tst	r3, r2
 800f862:	4631      	mov	r1, r6
 800f864:	4620      	mov	r0, r4
 800f866:	bf18      	it	ne
 800f868:	f04b 0b02 	orrne.w	fp, fp, #2
 800f86c:	1bad      	subs	r5, r5, r6
 800f86e:	f7ff fe07 	bl	800f480 <rshift>
 800f872:	687e      	ldr	r6, [r7, #4]
 800f874:	f04f 0802 	mov.w	r8, #2
 800f878:	f1bb 0f00 	cmp.w	fp, #0
 800f87c:	d04a      	beq.n	800f914 <__gethex+0x3c4>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2b02      	cmp	r3, #2
 800f882:	d016      	beq.n	800f8b2 <__gethex+0x362>
 800f884:	2b03      	cmp	r3, #3
 800f886:	d018      	beq.n	800f8ba <__gethex+0x36a>
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d109      	bne.n	800f8a0 <__gethex+0x350>
 800f88c:	f01b 0f02 	tst.w	fp, #2
 800f890:	d006      	beq.n	800f8a0 <__gethex+0x350>
 800f892:	f8da 3000 	ldr.w	r3, [sl]
 800f896:	ea4b 0b03 	orr.w	fp, fp, r3
 800f89a:	f01b 0f01 	tst.w	fp, #1
 800f89e:	d10f      	bne.n	800f8c0 <__gethex+0x370>
 800f8a0:	f048 0810 	orr.w	r8, r8, #16
 800f8a4:	e036      	b.n	800f914 <__gethex+0x3c4>
 800f8a6:	f04f 0b01 	mov.w	fp, #1
 800f8aa:	e7d0      	b.n	800f84e <__gethex+0x2fe>
 800f8ac:	f04f 0801 	mov.w	r8, #1
 800f8b0:	e7e2      	b.n	800f878 <__gethex+0x328>
 800f8b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8b4:	f1c3 0301 	rsb	r3, r3, #1
 800f8b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d0ef      	beq.n	800f8a0 <__gethex+0x350>
 800f8c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f8c4:	f104 0214 	add.w	r2, r4, #20
 800f8c8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f8cc:	9301      	str	r3, [sp, #4]
 800f8ce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	4694      	mov	ip, r2
 800f8d6:	f852 1b04 	ldr.w	r1, [r2], #4
 800f8da:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f8de:	d01e      	beq.n	800f91e <__gethex+0x3ce>
 800f8e0:	3101      	adds	r1, #1
 800f8e2:	f8cc 1000 	str.w	r1, [ip]
 800f8e6:	f1b8 0f02 	cmp.w	r8, #2
 800f8ea:	f104 0214 	add.w	r2, r4, #20
 800f8ee:	d13d      	bne.n	800f96c <__gethex+0x41c>
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	42ab      	cmp	r3, r5
 800f8f6:	d10b      	bne.n	800f910 <__gethex+0x3c0>
 800f8f8:	1169      	asrs	r1, r5, #5
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	f005 051f 	and.w	r5, r5, #31
 800f900:	fa03 f505 	lsl.w	r5, r3, r5
 800f904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f908:	421d      	tst	r5, r3
 800f90a:	bf18      	it	ne
 800f90c:	f04f 0801 	movne.w	r8, #1
 800f910:	f048 0820 	orr.w	r8, r8, #32
 800f914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f916:	601c      	str	r4, [r3, #0]
 800f918:	9b02      	ldr	r3, [sp, #8]
 800f91a:	601e      	str	r6, [r3, #0]
 800f91c:	e6a2      	b.n	800f664 <__gethex+0x114>
 800f91e:	4290      	cmp	r0, r2
 800f920:	f842 3c04 	str.w	r3, [r2, #-4]
 800f924:	d8d6      	bhi.n	800f8d4 <__gethex+0x384>
 800f926:	68a2      	ldr	r2, [r4, #8]
 800f928:	4593      	cmp	fp, r2
 800f92a:	db17      	blt.n	800f95c <__gethex+0x40c>
 800f92c:	6861      	ldr	r1, [r4, #4]
 800f92e:	4648      	mov	r0, r9
 800f930:	3101      	adds	r1, #1
 800f932:	f7fe f80b 	bl	800d94c <_Balloc>
 800f936:	4682      	mov	sl, r0
 800f938:	b918      	cbnz	r0, 800f942 <__gethex+0x3f2>
 800f93a:	4b1b      	ldr	r3, [pc, #108]	; (800f9a8 <__gethex+0x458>)
 800f93c:	4602      	mov	r2, r0
 800f93e:	2184      	movs	r1, #132	; 0x84
 800f940:	e6b3      	b.n	800f6aa <__gethex+0x15a>
 800f942:	6922      	ldr	r2, [r4, #16]
 800f944:	3202      	adds	r2, #2
 800f946:	f104 010c 	add.w	r1, r4, #12
 800f94a:	0092      	lsls	r2, r2, #2
 800f94c:	300c      	adds	r0, #12
 800f94e:	f7fd f920 	bl	800cb92 <memcpy>
 800f952:	4621      	mov	r1, r4
 800f954:	4648      	mov	r0, r9
 800f956:	f7fe f839 	bl	800d9cc <_Bfree>
 800f95a:	4654      	mov	r4, sl
 800f95c:	6922      	ldr	r2, [r4, #16]
 800f95e:	1c51      	adds	r1, r2, #1
 800f960:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f964:	6121      	str	r1, [r4, #16]
 800f966:	2101      	movs	r1, #1
 800f968:	6151      	str	r1, [r2, #20]
 800f96a:	e7bc      	b.n	800f8e6 <__gethex+0x396>
 800f96c:	6921      	ldr	r1, [r4, #16]
 800f96e:	4559      	cmp	r1, fp
 800f970:	dd0b      	ble.n	800f98a <__gethex+0x43a>
 800f972:	2101      	movs	r1, #1
 800f974:	4620      	mov	r0, r4
 800f976:	f7ff fd83 	bl	800f480 <rshift>
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	3601      	adds	r6, #1
 800f97e:	42b3      	cmp	r3, r6
 800f980:	f6ff aedb 	blt.w	800f73a <__gethex+0x1ea>
 800f984:	f04f 0801 	mov.w	r8, #1
 800f988:	e7c2      	b.n	800f910 <__gethex+0x3c0>
 800f98a:	f015 051f 	ands.w	r5, r5, #31
 800f98e:	d0f9      	beq.n	800f984 <__gethex+0x434>
 800f990:	9b01      	ldr	r3, [sp, #4]
 800f992:	441a      	add	r2, r3
 800f994:	f1c5 0520 	rsb	r5, r5, #32
 800f998:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f99c:	f7fe f8c8 	bl	800db30 <__hi0bits>
 800f9a0:	42a8      	cmp	r0, r5
 800f9a2:	dbe6      	blt.n	800f972 <__gethex+0x422>
 800f9a4:	e7ee      	b.n	800f984 <__gethex+0x434>
 800f9a6:	bf00      	nop
 800f9a8:	0801042d 	.word	0x0801042d

0800f9ac <L_shift>:
 800f9ac:	f1c2 0208 	rsb	r2, r2, #8
 800f9b0:	0092      	lsls	r2, r2, #2
 800f9b2:	b570      	push	{r4, r5, r6, lr}
 800f9b4:	f1c2 0620 	rsb	r6, r2, #32
 800f9b8:	6843      	ldr	r3, [r0, #4]
 800f9ba:	6804      	ldr	r4, [r0, #0]
 800f9bc:	fa03 f506 	lsl.w	r5, r3, r6
 800f9c0:	432c      	orrs	r4, r5
 800f9c2:	40d3      	lsrs	r3, r2
 800f9c4:	6004      	str	r4, [r0, #0]
 800f9c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f9ca:	4288      	cmp	r0, r1
 800f9cc:	d3f4      	bcc.n	800f9b8 <L_shift+0xc>
 800f9ce:	bd70      	pop	{r4, r5, r6, pc}

0800f9d0 <__match>:
 800f9d0:	b530      	push	{r4, r5, lr}
 800f9d2:	6803      	ldr	r3, [r0, #0]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9da:	b914      	cbnz	r4, 800f9e2 <__match+0x12>
 800f9dc:	6003      	str	r3, [r0, #0]
 800f9de:	2001      	movs	r0, #1
 800f9e0:	bd30      	pop	{r4, r5, pc}
 800f9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f9ea:	2d19      	cmp	r5, #25
 800f9ec:	bf98      	it	ls
 800f9ee:	3220      	addls	r2, #32
 800f9f0:	42a2      	cmp	r2, r4
 800f9f2:	d0f0      	beq.n	800f9d6 <__match+0x6>
 800f9f4:	2000      	movs	r0, #0
 800f9f6:	e7f3      	b.n	800f9e0 <__match+0x10>

0800f9f8 <__hexnan>:
 800f9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9fc:	680b      	ldr	r3, [r1, #0]
 800f9fe:	6801      	ldr	r1, [r0, #0]
 800fa00:	115e      	asrs	r6, r3, #5
 800fa02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fa06:	f013 031f 	ands.w	r3, r3, #31
 800fa0a:	b087      	sub	sp, #28
 800fa0c:	bf18      	it	ne
 800fa0e:	3604      	addne	r6, #4
 800fa10:	2500      	movs	r5, #0
 800fa12:	1f37      	subs	r7, r6, #4
 800fa14:	4682      	mov	sl, r0
 800fa16:	4690      	mov	r8, r2
 800fa18:	9301      	str	r3, [sp, #4]
 800fa1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fa1e:	46b9      	mov	r9, r7
 800fa20:	463c      	mov	r4, r7
 800fa22:	9502      	str	r5, [sp, #8]
 800fa24:	46ab      	mov	fp, r5
 800fa26:	784a      	ldrb	r2, [r1, #1]
 800fa28:	1c4b      	adds	r3, r1, #1
 800fa2a:	9303      	str	r3, [sp, #12]
 800fa2c:	b342      	cbz	r2, 800fa80 <__hexnan+0x88>
 800fa2e:	4610      	mov	r0, r2
 800fa30:	9105      	str	r1, [sp, #20]
 800fa32:	9204      	str	r2, [sp, #16]
 800fa34:	f7ff fd76 	bl	800f524 <__hexdig_fun>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d14f      	bne.n	800fadc <__hexnan+0xe4>
 800fa3c:	9a04      	ldr	r2, [sp, #16]
 800fa3e:	9905      	ldr	r1, [sp, #20]
 800fa40:	2a20      	cmp	r2, #32
 800fa42:	d818      	bhi.n	800fa76 <__hexnan+0x7e>
 800fa44:	9b02      	ldr	r3, [sp, #8]
 800fa46:	459b      	cmp	fp, r3
 800fa48:	dd13      	ble.n	800fa72 <__hexnan+0x7a>
 800fa4a:	454c      	cmp	r4, r9
 800fa4c:	d206      	bcs.n	800fa5c <__hexnan+0x64>
 800fa4e:	2d07      	cmp	r5, #7
 800fa50:	dc04      	bgt.n	800fa5c <__hexnan+0x64>
 800fa52:	462a      	mov	r2, r5
 800fa54:	4649      	mov	r1, r9
 800fa56:	4620      	mov	r0, r4
 800fa58:	f7ff ffa8 	bl	800f9ac <L_shift>
 800fa5c:	4544      	cmp	r4, r8
 800fa5e:	d950      	bls.n	800fb02 <__hexnan+0x10a>
 800fa60:	2300      	movs	r3, #0
 800fa62:	f1a4 0904 	sub.w	r9, r4, #4
 800fa66:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa6a:	f8cd b008 	str.w	fp, [sp, #8]
 800fa6e:	464c      	mov	r4, r9
 800fa70:	461d      	mov	r5, r3
 800fa72:	9903      	ldr	r1, [sp, #12]
 800fa74:	e7d7      	b.n	800fa26 <__hexnan+0x2e>
 800fa76:	2a29      	cmp	r2, #41	; 0x29
 800fa78:	d155      	bne.n	800fb26 <__hexnan+0x12e>
 800fa7a:	3102      	adds	r1, #2
 800fa7c:	f8ca 1000 	str.w	r1, [sl]
 800fa80:	f1bb 0f00 	cmp.w	fp, #0
 800fa84:	d04f      	beq.n	800fb26 <__hexnan+0x12e>
 800fa86:	454c      	cmp	r4, r9
 800fa88:	d206      	bcs.n	800fa98 <__hexnan+0xa0>
 800fa8a:	2d07      	cmp	r5, #7
 800fa8c:	dc04      	bgt.n	800fa98 <__hexnan+0xa0>
 800fa8e:	462a      	mov	r2, r5
 800fa90:	4649      	mov	r1, r9
 800fa92:	4620      	mov	r0, r4
 800fa94:	f7ff ff8a 	bl	800f9ac <L_shift>
 800fa98:	4544      	cmp	r4, r8
 800fa9a:	d934      	bls.n	800fb06 <__hexnan+0x10e>
 800fa9c:	f1a8 0204 	sub.w	r2, r8, #4
 800faa0:	4623      	mov	r3, r4
 800faa2:	f853 1b04 	ldr.w	r1, [r3], #4
 800faa6:	f842 1f04 	str.w	r1, [r2, #4]!
 800faaa:	429f      	cmp	r7, r3
 800faac:	d2f9      	bcs.n	800faa2 <__hexnan+0xaa>
 800faae:	1b3b      	subs	r3, r7, r4
 800fab0:	f023 0303 	bic.w	r3, r3, #3
 800fab4:	3304      	adds	r3, #4
 800fab6:	3e03      	subs	r6, #3
 800fab8:	3401      	adds	r4, #1
 800faba:	42a6      	cmp	r6, r4
 800fabc:	bf38      	it	cc
 800fabe:	2304      	movcc	r3, #4
 800fac0:	4443      	add	r3, r8
 800fac2:	2200      	movs	r2, #0
 800fac4:	f843 2b04 	str.w	r2, [r3], #4
 800fac8:	429f      	cmp	r7, r3
 800faca:	d2fb      	bcs.n	800fac4 <__hexnan+0xcc>
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	b91b      	cbnz	r3, 800fad8 <__hexnan+0xe0>
 800fad0:	4547      	cmp	r7, r8
 800fad2:	d126      	bne.n	800fb22 <__hexnan+0x12a>
 800fad4:	2301      	movs	r3, #1
 800fad6:	603b      	str	r3, [r7, #0]
 800fad8:	2005      	movs	r0, #5
 800fada:	e025      	b.n	800fb28 <__hexnan+0x130>
 800fadc:	3501      	adds	r5, #1
 800fade:	2d08      	cmp	r5, #8
 800fae0:	f10b 0b01 	add.w	fp, fp, #1
 800fae4:	dd06      	ble.n	800faf4 <__hexnan+0xfc>
 800fae6:	4544      	cmp	r4, r8
 800fae8:	d9c3      	bls.n	800fa72 <__hexnan+0x7a>
 800faea:	2300      	movs	r3, #0
 800faec:	f844 3c04 	str.w	r3, [r4, #-4]
 800faf0:	2501      	movs	r5, #1
 800faf2:	3c04      	subs	r4, #4
 800faf4:	6822      	ldr	r2, [r4, #0]
 800faf6:	f000 000f 	and.w	r0, r0, #15
 800fafa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fafe:	6020      	str	r0, [r4, #0]
 800fb00:	e7b7      	b.n	800fa72 <__hexnan+0x7a>
 800fb02:	2508      	movs	r5, #8
 800fb04:	e7b5      	b.n	800fa72 <__hexnan+0x7a>
 800fb06:	9b01      	ldr	r3, [sp, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d0df      	beq.n	800facc <__hexnan+0xd4>
 800fb0c:	f1c3 0320 	rsb	r3, r3, #32
 800fb10:	f04f 32ff 	mov.w	r2, #4294967295
 800fb14:	40da      	lsrs	r2, r3
 800fb16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fb1a:	4013      	ands	r3, r2
 800fb1c:	f846 3c04 	str.w	r3, [r6, #-4]
 800fb20:	e7d4      	b.n	800facc <__hexnan+0xd4>
 800fb22:	3f04      	subs	r7, #4
 800fb24:	e7d2      	b.n	800facc <__hexnan+0xd4>
 800fb26:	2004      	movs	r0, #4
 800fb28:	b007      	add	sp, #28
 800fb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb2e <__ascii_mbtowc>:
 800fb2e:	b082      	sub	sp, #8
 800fb30:	b901      	cbnz	r1, 800fb34 <__ascii_mbtowc+0x6>
 800fb32:	a901      	add	r1, sp, #4
 800fb34:	b142      	cbz	r2, 800fb48 <__ascii_mbtowc+0x1a>
 800fb36:	b14b      	cbz	r3, 800fb4c <__ascii_mbtowc+0x1e>
 800fb38:	7813      	ldrb	r3, [r2, #0]
 800fb3a:	600b      	str	r3, [r1, #0]
 800fb3c:	7812      	ldrb	r2, [r2, #0]
 800fb3e:	1e10      	subs	r0, r2, #0
 800fb40:	bf18      	it	ne
 800fb42:	2001      	movne	r0, #1
 800fb44:	b002      	add	sp, #8
 800fb46:	4770      	bx	lr
 800fb48:	4610      	mov	r0, r2
 800fb4a:	e7fb      	b.n	800fb44 <__ascii_mbtowc+0x16>
 800fb4c:	f06f 0001 	mvn.w	r0, #1
 800fb50:	e7f8      	b.n	800fb44 <__ascii_mbtowc+0x16>

0800fb52 <_realloc_r>:
 800fb52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb56:	4680      	mov	r8, r0
 800fb58:	4614      	mov	r4, r2
 800fb5a:	460e      	mov	r6, r1
 800fb5c:	b921      	cbnz	r1, 800fb68 <_realloc_r+0x16>
 800fb5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb62:	4611      	mov	r1, r2
 800fb64:	f7fb bf00 	b.w	800b968 <_malloc_r>
 800fb68:	b92a      	cbnz	r2, 800fb76 <_realloc_r+0x24>
 800fb6a:	f7fd fea3 	bl	800d8b4 <_free_r>
 800fb6e:	4625      	mov	r5, r4
 800fb70:	4628      	mov	r0, r5
 800fb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb76:	f000 f83b 	bl	800fbf0 <_malloc_usable_size_r>
 800fb7a:	4284      	cmp	r4, r0
 800fb7c:	4607      	mov	r7, r0
 800fb7e:	d802      	bhi.n	800fb86 <_realloc_r+0x34>
 800fb80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb84:	d812      	bhi.n	800fbac <_realloc_r+0x5a>
 800fb86:	4621      	mov	r1, r4
 800fb88:	4640      	mov	r0, r8
 800fb8a:	f7fb feed 	bl	800b968 <_malloc_r>
 800fb8e:	4605      	mov	r5, r0
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d0ed      	beq.n	800fb70 <_realloc_r+0x1e>
 800fb94:	42bc      	cmp	r4, r7
 800fb96:	4622      	mov	r2, r4
 800fb98:	4631      	mov	r1, r6
 800fb9a:	bf28      	it	cs
 800fb9c:	463a      	movcs	r2, r7
 800fb9e:	f7fc fff8 	bl	800cb92 <memcpy>
 800fba2:	4631      	mov	r1, r6
 800fba4:	4640      	mov	r0, r8
 800fba6:	f7fd fe85 	bl	800d8b4 <_free_r>
 800fbaa:	e7e1      	b.n	800fb70 <_realloc_r+0x1e>
 800fbac:	4635      	mov	r5, r6
 800fbae:	e7df      	b.n	800fb70 <_realloc_r+0x1e>

0800fbb0 <__ascii_wctomb>:
 800fbb0:	b149      	cbz	r1, 800fbc6 <__ascii_wctomb+0x16>
 800fbb2:	2aff      	cmp	r2, #255	; 0xff
 800fbb4:	bf85      	ittet	hi
 800fbb6:	238a      	movhi	r3, #138	; 0x8a
 800fbb8:	6003      	strhi	r3, [r0, #0]
 800fbba:	700a      	strbls	r2, [r1, #0]
 800fbbc:	f04f 30ff 	movhi.w	r0, #4294967295
 800fbc0:	bf98      	it	ls
 800fbc2:	2001      	movls	r0, #1
 800fbc4:	4770      	bx	lr
 800fbc6:	4608      	mov	r0, r1
 800fbc8:	4770      	bx	lr
	...

0800fbcc <fiprintf>:
 800fbcc:	b40e      	push	{r1, r2, r3}
 800fbce:	b503      	push	{r0, r1, lr}
 800fbd0:	4601      	mov	r1, r0
 800fbd2:	ab03      	add	r3, sp, #12
 800fbd4:	4805      	ldr	r0, [pc, #20]	; (800fbec <fiprintf+0x20>)
 800fbd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbda:	6800      	ldr	r0, [r0, #0]
 800fbdc:	9301      	str	r3, [sp, #4]
 800fbde:	f000 f839 	bl	800fc54 <_vfiprintf_r>
 800fbe2:	b002      	add	sp, #8
 800fbe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbe8:	b003      	add	sp, #12
 800fbea:	4770      	bx	lr
 800fbec:	20000064 	.word	0x20000064

0800fbf0 <_malloc_usable_size_r>:
 800fbf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbf4:	1f18      	subs	r0, r3, #4
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	bfbc      	itt	lt
 800fbfa:	580b      	ldrlt	r3, [r1, r0]
 800fbfc:	18c0      	addlt	r0, r0, r3
 800fbfe:	4770      	bx	lr

0800fc00 <__sfputc_r>:
 800fc00:	6893      	ldr	r3, [r2, #8]
 800fc02:	3b01      	subs	r3, #1
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	b410      	push	{r4}
 800fc08:	6093      	str	r3, [r2, #8]
 800fc0a:	da08      	bge.n	800fc1e <__sfputc_r+0x1e>
 800fc0c:	6994      	ldr	r4, [r2, #24]
 800fc0e:	42a3      	cmp	r3, r4
 800fc10:	db01      	blt.n	800fc16 <__sfputc_r+0x16>
 800fc12:	290a      	cmp	r1, #10
 800fc14:	d103      	bne.n	800fc1e <__sfputc_r+0x1e>
 800fc16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc1a:	f000 b935 	b.w	800fe88 <__swbuf_r>
 800fc1e:	6813      	ldr	r3, [r2, #0]
 800fc20:	1c58      	adds	r0, r3, #1
 800fc22:	6010      	str	r0, [r2, #0]
 800fc24:	7019      	strb	r1, [r3, #0]
 800fc26:	4608      	mov	r0, r1
 800fc28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <__sfputs_r>:
 800fc2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc30:	4606      	mov	r6, r0
 800fc32:	460f      	mov	r7, r1
 800fc34:	4614      	mov	r4, r2
 800fc36:	18d5      	adds	r5, r2, r3
 800fc38:	42ac      	cmp	r4, r5
 800fc3a:	d101      	bne.n	800fc40 <__sfputs_r+0x12>
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	e007      	b.n	800fc50 <__sfputs_r+0x22>
 800fc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc44:	463a      	mov	r2, r7
 800fc46:	4630      	mov	r0, r6
 800fc48:	f7ff ffda 	bl	800fc00 <__sfputc_r>
 800fc4c:	1c43      	adds	r3, r0, #1
 800fc4e:	d1f3      	bne.n	800fc38 <__sfputs_r+0xa>
 800fc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc54 <_vfiprintf_r>:
 800fc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc58:	460d      	mov	r5, r1
 800fc5a:	b09d      	sub	sp, #116	; 0x74
 800fc5c:	4614      	mov	r4, r2
 800fc5e:	4698      	mov	r8, r3
 800fc60:	4606      	mov	r6, r0
 800fc62:	b118      	cbz	r0, 800fc6c <_vfiprintf_r+0x18>
 800fc64:	6a03      	ldr	r3, [r0, #32]
 800fc66:	b90b      	cbnz	r3, 800fc6c <_vfiprintf_r+0x18>
 800fc68:	f7fc fe0c 	bl	800c884 <__sinit>
 800fc6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc6e:	07d9      	lsls	r1, r3, #31
 800fc70:	d405      	bmi.n	800fc7e <_vfiprintf_r+0x2a>
 800fc72:	89ab      	ldrh	r3, [r5, #12]
 800fc74:	059a      	lsls	r2, r3, #22
 800fc76:	d402      	bmi.n	800fc7e <_vfiprintf_r+0x2a>
 800fc78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc7a:	f7fc ff88 	bl	800cb8e <__retarget_lock_acquire_recursive>
 800fc7e:	89ab      	ldrh	r3, [r5, #12]
 800fc80:	071b      	lsls	r3, r3, #28
 800fc82:	d501      	bpl.n	800fc88 <_vfiprintf_r+0x34>
 800fc84:	692b      	ldr	r3, [r5, #16]
 800fc86:	b99b      	cbnz	r3, 800fcb0 <_vfiprintf_r+0x5c>
 800fc88:	4629      	mov	r1, r5
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	f000 f93a 	bl	800ff04 <__swsetup_r>
 800fc90:	b170      	cbz	r0, 800fcb0 <_vfiprintf_r+0x5c>
 800fc92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc94:	07dc      	lsls	r4, r3, #31
 800fc96:	d504      	bpl.n	800fca2 <_vfiprintf_r+0x4e>
 800fc98:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9c:	b01d      	add	sp, #116	; 0x74
 800fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca2:	89ab      	ldrh	r3, [r5, #12]
 800fca4:	0598      	lsls	r0, r3, #22
 800fca6:	d4f7      	bmi.n	800fc98 <_vfiprintf_r+0x44>
 800fca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcaa:	f7fc ff71 	bl	800cb90 <__retarget_lock_release_recursive>
 800fcae:	e7f3      	b.n	800fc98 <_vfiprintf_r+0x44>
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	9309      	str	r3, [sp, #36]	; 0x24
 800fcb4:	2320      	movs	r3, #32
 800fcb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcba:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcbe:	2330      	movs	r3, #48	; 0x30
 800fcc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fe74 <_vfiprintf_r+0x220>
 800fcc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcc8:	f04f 0901 	mov.w	r9, #1
 800fccc:	4623      	mov	r3, r4
 800fcce:	469a      	mov	sl, r3
 800fcd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcd4:	b10a      	cbz	r2, 800fcda <_vfiprintf_r+0x86>
 800fcd6:	2a25      	cmp	r2, #37	; 0x25
 800fcd8:	d1f9      	bne.n	800fcce <_vfiprintf_r+0x7a>
 800fcda:	ebba 0b04 	subs.w	fp, sl, r4
 800fcde:	d00b      	beq.n	800fcf8 <_vfiprintf_r+0xa4>
 800fce0:	465b      	mov	r3, fp
 800fce2:	4622      	mov	r2, r4
 800fce4:	4629      	mov	r1, r5
 800fce6:	4630      	mov	r0, r6
 800fce8:	f7ff ffa1 	bl	800fc2e <__sfputs_r>
 800fcec:	3001      	adds	r0, #1
 800fcee:	f000 80a9 	beq.w	800fe44 <_vfiprintf_r+0x1f0>
 800fcf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcf4:	445a      	add	r2, fp
 800fcf6:	9209      	str	r2, [sp, #36]	; 0x24
 800fcf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	f000 80a1 	beq.w	800fe44 <_vfiprintf_r+0x1f0>
 800fd02:	2300      	movs	r3, #0
 800fd04:	f04f 32ff 	mov.w	r2, #4294967295
 800fd08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd0c:	f10a 0a01 	add.w	sl, sl, #1
 800fd10:	9304      	str	r3, [sp, #16]
 800fd12:	9307      	str	r3, [sp, #28]
 800fd14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd18:	931a      	str	r3, [sp, #104]	; 0x68
 800fd1a:	4654      	mov	r4, sl
 800fd1c:	2205      	movs	r2, #5
 800fd1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd22:	4854      	ldr	r0, [pc, #336]	; (800fe74 <_vfiprintf_r+0x220>)
 800fd24:	f7f0 fa7c 	bl	8000220 <memchr>
 800fd28:	9a04      	ldr	r2, [sp, #16]
 800fd2a:	b9d8      	cbnz	r0, 800fd64 <_vfiprintf_r+0x110>
 800fd2c:	06d1      	lsls	r1, r2, #27
 800fd2e:	bf44      	itt	mi
 800fd30:	2320      	movmi	r3, #32
 800fd32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd36:	0713      	lsls	r3, r2, #28
 800fd38:	bf44      	itt	mi
 800fd3a:	232b      	movmi	r3, #43	; 0x2b
 800fd3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd40:	f89a 3000 	ldrb.w	r3, [sl]
 800fd44:	2b2a      	cmp	r3, #42	; 0x2a
 800fd46:	d015      	beq.n	800fd74 <_vfiprintf_r+0x120>
 800fd48:	9a07      	ldr	r2, [sp, #28]
 800fd4a:	4654      	mov	r4, sl
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	f04f 0c0a 	mov.w	ip, #10
 800fd52:	4621      	mov	r1, r4
 800fd54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd58:	3b30      	subs	r3, #48	; 0x30
 800fd5a:	2b09      	cmp	r3, #9
 800fd5c:	d94d      	bls.n	800fdfa <_vfiprintf_r+0x1a6>
 800fd5e:	b1b0      	cbz	r0, 800fd8e <_vfiprintf_r+0x13a>
 800fd60:	9207      	str	r2, [sp, #28]
 800fd62:	e014      	b.n	800fd8e <_vfiprintf_r+0x13a>
 800fd64:	eba0 0308 	sub.w	r3, r0, r8
 800fd68:	fa09 f303 	lsl.w	r3, r9, r3
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	9304      	str	r3, [sp, #16]
 800fd70:	46a2      	mov	sl, r4
 800fd72:	e7d2      	b.n	800fd1a <_vfiprintf_r+0xc6>
 800fd74:	9b03      	ldr	r3, [sp, #12]
 800fd76:	1d19      	adds	r1, r3, #4
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	9103      	str	r1, [sp, #12]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	bfbb      	ittet	lt
 800fd80:	425b      	neglt	r3, r3
 800fd82:	f042 0202 	orrlt.w	r2, r2, #2
 800fd86:	9307      	strge	r3, [sp, #28]
 800fd88:	9307      	strlt	r3, [sp, #28]
 800fd8a:	bfb8      	it	lt
 800fd8c:	9204      	strlt	r2, [sp, #16]
 800fd8e:	7823      	ldrb	r3, [r4, #0]
 800fd90:	2b2e      	cmp	r3, #46	; 0x2e
 800fd92:	d10c      	bne.n	800fdae <_vfiprintf_r+0x15a>
 800fd94:	7863      	ldrb	r3, [r4, #1]
 800fd96:	2b2a      	cmp	r3, #42	; 0x2a
 800fd98:	d134      	bne.n	800fe04 <_vfiprintf_r+0x1b0>
 800fd9a:	9b03      	ldr	r3, [sp, #12]
 800fd9c:	1d1a      	adds	r2, r3, #4
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	9203      	str	r2, [sp, #12]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	bfb8      	it	lt
 800fda6:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdaa:	3402      	adds	r4, #2
 800fdac:	9305      	str	r3, [sp, #20]
 800fdae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fe84 <_vfiprintf_r+0x230>
 800fdb2:	7821      	ldrb	r1, [r4, #0]
 800fdb4:	2203      	movs	r2, #3
 800fdb6:	4650      	mov	r0, sl
 800fdb8:	f7f0 fa32 	bl	8000220 <memchr>
 800fdbc:	b138      	cbz	r0, 800fdce <_vfiprintf_r+0x17a>
 800fdbe:	9b04      	ldr	r3, [sp, #16]
 800fdc0:	eba0 000a 	sub.w	r0, r0, sl
 800fdc4:	2240      	movs	r2, #64	; 0x40
 800fdc6:	4082      	lsls	r2, r0
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	3401      	adds	r4, #1
 800fdcc:	9304      	str	r3, [sp, #16]
 800fdce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdd2:	4829      	ldr	r0, [pc, #164]	; (800fe78 <_vfiprintf_r+0x224>)
 800fdd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdd8:	2206      	movs	r2, #6
 800fdda:	f7f0 fa21 	bl	8000220 <memchr>
 800fdde:	2800      	cmp	r0, #0
 800fde0:	d03f      	beq.n	800fe62 <_vfiprintf_r+0x20e>
 800fde2:	4b26      	ldr	r3, [pc, #152]	; (800fe7c <_vfiprintf_r+0x228>)
 800fde4:	bb1b      	cbnz	r3, 800fe2e <_vfiprintf_r+0x1da>
 800fde6:	9b03      	ldr	r3, [sp, #12]
 800fde8:	3307      	adds	r3, #7
 800fdea:	f023 0307 	bic.w	r3, r3, #7
 800fdee:	3308      	adds	r3, #8
 800fdf0:	9303      	str	r3, [sp, #12]
 800fdf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdf4:	443b      	add	r3, r7
 800fdf6:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf8:	e768      	b.n	800fccc <_vfiprintf_r+0x78>
 800fdfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdfe:	460c      	mov	r4, r1
 800fe00:	2001      	movs	r0, #1
 800fe02:	e7a6      	b.n	800fd52 <_vfiprintf_r+0xfe>
 800fe04:	2300      	movs	r3, #0
 800fe06:	3401      	adds	r4, #1
 800fe08:	9305      	str	r3, [sp, #20]
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	f04f 0c0a 	mov.w	ip, #10
 800fe10:	4620      	mov	r0, r4
 800fe12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe16:	3a30      	subs	r2, #48	; 0x30
 800fe18:	2a09      	cmp	r2, #9
 800fe1a:	d903      	bls.n	800fe24 <_vfiprintf_r+0x1d0>
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d0c6      	beq.n	800fdae <_vfiprintf_r+0x15a>
 800fe20:	9105      	str	r1, [sp, #20]
 800fe22:	e7c4      	b.n	800fdae <_vfiprintf_r+0x15a>
 800fe24:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe28:	4604      	mov	r4, r0
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e7f0      	b.n	800fe10 <_vfiprintf_r+0x1bc>
 800fe2e:	ab03      	add	r3, sp, #12
 800fe30:	9300      	str	r3, [sp, #0]
 800fe32:	462a      	mov	r2, r5
 800fe34:	4b12      	ldr	r3, [pc, #72]	; (800fe80 <_vfiprintf_r+0x22c>)
 800fe36:	a904      	add	r1, sp, #16
 800fe38:	4630      	mov	r0, r6
 800fe3a:	f7fb fec1 	bl	800bbc0 <_printf_float>
 800fe3e:	4607      	mov	r7, r0
 800fe40:	1c78      	adds	r0, r7, #1
 800fe42:	d1d6      	bne.n	800fdf2 <_vfiprintf_r+0x19e>
 800fe44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe46:	07d9      	lsls	r1, r3, #31
 800fe48:	d405      	bmi.n	800fe56 <_vfiprintf_r+0x202>
 800fe4a:	89ab      	ldrh	r3, [r5, #12]
 800fe4c:	059a      	lsls	r2, r3, #22
 800fe4e:	d402      	bmi.n	800fe56 <_vfiprintf_r+0x202>
 800fe50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe52:	f7fc fe9d 	bl	800cb90 <__retarget_lock_release_recursive>
 800fe56:	89ab      	ldrh	r3, [r5, #12]
 800fe58:	065b      	lsls	r3, r3, #25
 800fe5a:	f53f af1d 	bmi.w	800fc98 <_vfiprintf_r+0x44>
 800fe5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe60:	e71c      	b.n	800fc9c <_vfiprintf_r+0x48>
 800fe62:	ab03      	add	r3, sp, #12
 800fe64:	9300      	str	r3, [sp, #0]
 800fe66:	462a      	mov	r2, r5
 800fe68:	4b05      	ldr	r3, [pc, #20]	; (800fe80 <_vfiprintf_r+0x22c>)
 800fe6a:	a904      	add	r1, sp, #16
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	f7fc f94b 	bl	800c108 <_printf_i>
 800fe72:	e7e4      	b.n	800fe3e <_vfiprintf_r+0x1ea>
 800fe74:	080106e9 	.word	0x080106e9
 800fe78:	080106f3 	.word	0x080106f3
 800fe7c:	0800bbc1 	.word	0x0800bbc1
 800fe80:	0800fc2f 	.word	0x0800fc2f
 800fe84:	080106ef 	.word	0x080106ef

0800fe88 <__swbuf_r>:
 800fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8a:	460e      	mov	r6, r1
 800fe8c:	4614      	mov	r4, r2
 800fe8e:	4605      	mov	r5, r0
 800fe90:	b118      	cbz	r0, 800fe9a <__swbuf_r+0x12>
 800fe92:	6a03      	ldr	r3, [r0, #32]
 800fe94:	b90b      	cbnz	r3, 800fe9a <__swbuf_r+0x12>
 800fe96:	f7fc fcf5 	bl	800c884 <__sinit>
 800fe9a:	69a3      	ldr	r3, [r4, #24]
 800fe9c:	60a3      	str	r3, [r4, #8]
 800fe9e:	89a3      	ldrh	r3, [r4, #12]
 800fea0:	071a      	lsls	r2, r3, #28
 800fea2:	d525      	bpl.n	800fef0 <__swbuf_r+0x68>
 800fea4:	6923      	ldr	r3, [r4, #16]
 800fea6:	b31b      	cbz	r3, 800fef0 <__swbuf_r+0x68>
 800fea8:	6823      	ldr	r3, [r4, #0]
 800feaa:	6922      	ldr	r2, [r4, #16]
 800feac:	1a98      	subs	r0, r3, r2
 800feae:	6963      	ldr	r3, [r4, #20]
 800feb0:	b2f6      	uxtb	r6, r6
 800feb2:	4283      	cmp	r3, r0
 800feb4:	4637      	mov	r7, r6
 800feb6:	dc04      	bgt.n	800fec2 <__swbuf_r+0x3a>
 800feb8:	4621      	mov	r1, r4
 800feba:	4628      	mov	r0, r5
 800febc:	f7ff fa68 	bl	800f390 <_fflush_r>
 800fec0:	b9e0      	cbnz	r0, 800fefc <__swbuf_r+0x74>
 800fec2:	68a3      	ldr	r3, [r4, #8]
 800fec4:	3b01      	subs	r3, #1
 800fec6:	60a3      	str	r3, [r4, #8]
 800fec8:	6823      	ldr	r3, [r4, #0]
 800feca:	1c5a      	adds	r2, r3, #1
 800fecc:	6022      	str	r2, [r4, #0]
 800fece:	701e      	strb	r6, [r3, #0]
 800fed0:	6962      	ldr	r2, [r4, #20]
 800fed2:	1c43      	adds	r3, r0, #1
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d004      	beq.n	800fee2 <__swbuf_r+0x5a>
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	07db      	lsls	r3, r3, #31
 800fedc:	d506      	bpl.n	800feec <__swbuf_r+0x64>
 800fede:	2e0a      	cmp	r6, #10
 800fee0:	d104      	bne.n	800feec <__swbuf_r+0x64>
 800fee2:	4621      	mov	r1, r4
 800fee4:	4628      	mov	r0, r5
 800fee6:	f7ff fa53 	bl	800f390 <_fflush_r>
 800feea:	b938      	cbnz	r0, 800fefc <__swbuf_r+0x74>
 800feec:	4638      	mov	r0, r7
 800feee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fef0:	4621      	mov	r1, r4
 800fef2:	4628      	mov	r0, r5
 800fef4:	f000 f806 	bl	800ff04 <__swsetup_r>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d0d5      	beq.n	800fea8 <__swbuf_r+0x20>
 800fefc:	f04f 37ff 	mov.w	r7, #4294967295
 800ff00:	e7f4      	b.n	800feec <__swbuf_r+0x64>
	...

0800ff04 <__swsetup_r>:
 800ff04:	b538      	push	{r3, r4, r5, lr}
 800ff06:	4b2a      	ldr	r3, [pc, #168]	; (800ffb0 <__swsetup_r+0xac>)
 800ff08:	4605      	mov	r5, r0
 800ff0a:	6818      	ldr	r0, [r3, #0]
 800ff0c:	460c      	mov	r4, r1
 800ff0e:	b118      	cbz	r0, 800ff18 <__swsetup_r+0x14>
 800ff10:	6a03      	ldr	r3, [r0, #32]
 800ff12:	b90b      	cbnz	r3, 800ff18 <__swsetup_r+0x14>
 800ff14:	f7fc fcb6 	bl	800c884 <__sinit>
 800ff18:	89a3      	ldrh	r3, [r4, #12]
 800ff1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff1e:	0718      	lsls	r0, r3, #28
 800ff20:	d422      	bmi.n	800ff68 <__swsetup_r+0x64>
 800ff22:	06d9      	lsls	r1, r3, #27
 800ff24:	d407      	bmi.n	800ff36 <__swsetup_r+0x32>
 800ff26:	2309      	movs	r3, #9
 800ff28:	602b      	str	r3, [r5, #0]
 800ff2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ff2e:	81a3      	strh	r3, [r4, #12]
 800ff30:	f04f 30ff 	mov.w	r0, #4294967295
 800ff34:	e034      	b.n	800ffa0 <__swsetup_r+0x9c>
 800ff36:	0758      	lsls	r0, r3, #29
 800ff38:	d512      	bpl.n	800ff60 <__swsetup_r+0x5c>
 800ff3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff3c:	b141      	cbz	r1, 800ff50 <__swsetup_r+0x4c>
 800ff3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff42:	4299      	cmp	r1, r3
 800ff44:	d002      	beq.n	800ff4c <__swsetup_r+0x48>
 800ff46:	4628      	mov	r0, r5
 800ff48:	f7fd fcb4 	bl	800d8b4 <_free_r>
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	6363      	str	r3, [r4, #52]	; 0x34
 800ff50:	89a3      	ldrh	r3, [r4, #12]
 800ff52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff56:	81a3      	strh	r3, [r4, #12]
 800ff58:	2300      	movs	r3, #0
 800ff5a:	6063      	str	r3, [r4, #4]
 800ff5c:	6923      	ldr	r3, [r4, #16]
 800ff5e:	6023      	str	r3, [r4, #0]
 800ff60:	89a3      	ldrh	r3, [r4, #12]
 800ff62:	f043 0308 	orr.w	r3, r3, #8
 800ff66:	81a3      	strh	r3, [r4, #12]
 800ff68:	6923      	ldr	r3, [r4, #16]
 800ff6a:	b94b      	cbnz	r3, 800ff80 <__swsetup_r+0x7c>
 800ff6c:	89a3      	ldrh	r3, [r4, #12]
 800ff6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff76:	d003      	beq.n	800ff80 <__swsetup_r+0x7c>
 800ff78:	4621      	mov	r1, r4
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	f000 f840 	bl	8010000 <__smakebuf_r>
 800ff80:	89a0      	ldrh	r0, [r4, #12]
 800ff82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff86:	f010 0301 	ands.w	r3, r0, #1
 800ff8a:	d00a      	beq.n	800ffa2 <__swsetup_r+0x9e>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	60a3      	str	r3, [r4, #8]
 800ff90:	6963      	ldr	r3, [r4, #20]
 800ff92:	425b      	negs	r3, r3
 800ff94:	61a3      	str	r3, [r4, #24]
 800ff96:	6923      	ldr	r3, [r4, #16]
 800ff98:	b943      	cbnz	r3, 800ffac <__swsetup_r+0xa8>
 800ff9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff9e:	d1c4      	bne.n	800ff2a <__swsetup_r+0x26>
 800ffa0:	bd38      	pop	{r3, r4, r5, pc}
 800ffa2:	0781      	lsls	r1, r0, #30
 800ffa4:	bf58      	it	pl
 800ffa6:	6963      	ldrpl	r3, [r4, #20]
 800ffa8:	60a3      	str	r3, [r4, #8]
 800ffaa:	e7f4      	b.n	800ff96 <__swsetup_r+0x92>
 800ffac:	2000      	movs	r0, #0
 800ffae:	e7f7      	b.n	800ffa0 <__swsetup_r+0x9c>
 800ffb0:	20000064 	.word	0x20000064

0800ffb4 <__swhatbuf_r>:
 800ffb4:	b570      	push	{r4, r5, r6, lr}
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffbc:	2900      	cmp	r1, #0
 800ffbe:	b096      	sub	sp, #88	; 0x58
 800ffc0:	4615      	mov	r5, r2
 800ffc2:	461e      	mov	r6, r3
 800ffc4:	da0d      	bge.n	800ffe2 <__swhatbuf_r+0x2e>
 800ffc6:	89a3      	ldrh	r3, [r4, #12]
 800ffc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ffcc:	f04f 0100 	mov.w	r1, #0
 800ffd0:	bf0c      	ite	eq
 800ffd2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ffd6:	2340      	movne	r3, #64	; 0x40
 800ffd8:	2000      	movs	r0, #0
 800ffda:	6031      	str	r1, [r6, #0]
 800ffdc:	602b      	str	r3, [r5, #0]
 800ffde:	b016      	add	sp, #88	; 0x58
 800ffe0:	bd70      	pop	{r4, r5, r6, pc}
 800ffe2:	466a      	mov	r2, sp
 800ffe4:	f000 f848 	bl	8010078 <_fstat_r>
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	dbec      	blt.n	800ffc6 <__swhatbuf_r+0x12>
 800ffec:	9901      	ldr	r1, [sp, #4]
 800ffee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fff2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fff6:	4259      	negs	r1, r3
 800fff8:	4159      	adcs	r1, r3
 800fffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fffe:	e7eb      	b.n	800ffd8 <__swhatbuf_r+0x24>

08010000 <__smakebuf_r>:
 8010000:	898b      	ldrh	r3, [r1, #12]
 8010002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010004:	079d      	lsls	r5, r3, #30
 8010006:	4606      	mov	r6, r0
 8010008:	460c      	mov	r4, r1
 801000a:	d507      	bpl.n	801001c <__smakebuf_r+0x1c>
 801000c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010010:	6023      	str	r3, [r4, #0]
 8010012:	6123      	str	r3, [r4, #16]
 8010014:	2301      	movs	r3, #1
 8010016:	6163      	str	r3, [r4, #20]
 8010018:	b002      	add	sp, #8
 801001a:	bd70      	pop	{r4, r5, r6, pc}
 801001c:	ab01      	add	r3, sp, #4
 801001e:	466a      	mov	r2, sp
 8010020:	f7ff ffc8 	bl	800ffb4 <__swhatbuf_r>
 8010024:	9900      	ldr	r1, [sp, #0]
 8010026:	4605      	mov	r5, r0
 8010028:	4630      	mov	r0, r6
 801002a:	f7fb fc9d 	bl	800b968 <_malloc_r>
 801002e:	b948      	cbnz	r0, 8010044 <__smakebuf_r+0x44>
 8010030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010034:	059a      	lsls	r2, r3, #22
 8010036:	d4ef      	bmi.n	8010018 <__smakebuf_r+0x18>
 8010038:	f023 0303 	bic.w	r3, r3, #3
 801003c:	f043 0302 	orr.w	r3, r3, #2
 8010040:	81a3      	strh	r3, [r4, #12]
 8010042:	e7e3      	b.n	801000c <__smakebuf_r+0xc>
 8010044:	89a3      	ldrh	r3, [r4, #12]
 8010046:	6020      	str	r0, [r4, #0]
 8010048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801004c:	81a3      	strh	r3, [r4, #12]
 801004e:	9b00      	ldr	r3, [sp, #0]
 8010050:	6163      	str	r3, [r4, #20]
 8010052:	9b01      	ldr	r3, [sp, #4]
 8010054:	6120      	str	r0, [r4, #16]
 8010056:	b15b      	cbz	r3, 8010070 <__smakebuf_r+0x70>
 8010058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801005c:	4630      	mov	r0, r6
 801005e:	f000 f81d 	bl	801009c <_isatty_r>
 8010062:	b128      	cbz	r0, 8010070 <__smakebuf_r+0x70>
 8010064:	89a3      	ldrh	r3, [r4, #12]
 8010066:	f023 0303 	bic.w	r3, r3, #3
 801006a:	f043 0301 	orr.w	r3, r3, #1
 801006e:	81a3      	strh	r3, [r4, #12]
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	431d      	orrs	r5, r3
 8010074:	81a5      	strh	r5, [r4, #12]
 8010076:	e7cf      	b.n	8010018 <__smakebuf_r+0x18>

08010078 <_fstat_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4d07      	ldr	r5, [pc, #28]	; (8010098 <_fstat_r+0x20>)
 801007c:	2300      	movs	r3, #0
 801007e:	4604      	mov	r4, r0
 8010080:	4608      	mov	r0, r1
 8010082:	4611      	mov	r1, r2
 8010084:	602b      	str	r3, [r5, #0]
 8010086:	f7f4 fb12 	bl	80046ae <_fstat>
 801008a:	1c43      	adds	r3, r0, #1
 801008c:	d102      	bne.n	8010094 <_fstat_r+0x1c>
 801008e:	682b      	ldr	r3, [r5, #0]
 8010090:	b103      	cbz	r3, 8010094 <_fstat_r+0x1c>
 8010092:	6023      	str	r3, [r4, #0]
 8010094:	bd38      	pop	{r3, r4, r5, pc}
 8010096:	bf00      	nop
 8010098:	2000067c 	.word	0x2000067c

0801009c <_isatty_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4d06      	ldr	r5, [pc, #24]	; (80100b8 <_isatty_r+0x1c>)
 80100a0:	2300      	movs	r3, #0
 80100a2:	4604      	mov	r4, r0
 80100a4:	4608      	mov	r0, r1
 80100a6:	602b      	str	r3, [r5, #0]
 80100a8:	f7f4 fb11 	bl	80046ce <_isatty>
 80100ac:	1c43      	adds	r3, r0, #1
 80100ae:	d102      	bne.n	80100b6 <_isatty_r+0x1a>
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	b103      	cbz	r3, 80100b6 <_isatty_r+0x1a>
 80100b4:	6023      	str	r3, [r4, #0]
 80100b6:	bd38      	pop	{r3, r4, r5, pc}
 80100b8:	2000067c 	.word	0x2000067c

080100bc <_init>:
 80100bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100be:	bf00      	nop
 80100c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100c2:	bc08      	pop	{r3}
 80100c4:	469e      	mov	lr, r3
 80100c6:	4770      	bx	lr

080100c8 <_fini>:
 80100c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ca:	bf00      	nop
 80100cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ce:	bc08      	pop	{r3}
 80100d0:	469e      	mov	lr, r3
 80100d2:	4770      	bx	lr

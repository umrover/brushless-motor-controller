
Brushless_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000973c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08009918  08009918  00019918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b48  08009b48  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08009b48  08009b48  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b48  08009b48  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000060  08009bb4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08009bb4  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f31c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004205  00000000  00000000  0003f3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  000435f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001498  00000000  00000000  000450e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027bd6  00000000  00000000  00046578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d31a  00000000  00000000  0006e14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fac41  00000000  00000000  0008b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f4c  00000000  00000000  001860ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0018dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080098fc 	.word	0x080098fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	080098fc 	.word	0x080098fc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	0000      	movs	r0, r0
	...

08000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>:

MovingAvgFilter CurrSensDriver::curr_A_filter(10);
MovingAvgFilter CurrSensDriver::curr_B_filter(10);
MovingAvgFilter CurrSensDriver::curr_C_filter(10);

double CurrSensDriver::counts_to_amps(uint32_t ADC_counts){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

	double sense_out = ( ADC_counts * MAX_ADC_READ_VOLTAGE/MAX_ADC_COUNTS);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fcbb 	bl	800049c <__aeabi_ui2d>
 8000b26:	a326      	add	r3, pc, #152	; (adr r3, 8000bc0 <_ZN14CurrSensDriver14counts_to_ampsEm+0xa8>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	f7ff fd30 	bl	8000590 <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4610      	mov	r0, r2
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <_ZN14CurrSensDriver14counts_to_ampsEm+0xa0>)
 8000b3e:	f7ff fe51 	bl	80007e4 <__aeabi_ddiv>
 8000b42:	4602      	mov	r2, r0
 8000b44:	460b      	mov	r3, r1
 8000b46:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double shifted_voltage = sense_out - AMPLIFIER_SHIFT;
 8000b4a:	a317      	add	r3, pc, #92	; (adr r3, 8000ba8 <_ZN14CurrSensDriver14counts_to_ampsEm+0x90>)
 8000b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000b54:	f7ff fb64 	bl	8000220 <__aeabi_dsub>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double scaled_voltage = shifted_voltage/AMPLIFIER_SCALE;
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_ZN14CurrSensDriver14counts_to_ampsEm+0xa4>)
 8000b66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b6a:	f7ff fe3b 	bl	80007e4 <__aeabi_ddiv>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double current = scaled_voltage/SHUNT_RESISTANCE;
 8000b76:	a30e      	add	r3, pc, #56	; (adr r3, 8000bb0 <_ZN14CurrSensDriver14counts_to_ampsEm+0x98>)
 8000b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b80:	f7ff fe30 	bl	80007e4 <__aeabi_ddiv>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return current;
 8000b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b90:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b94:	eeb0 0a47 	vmov.f32	s0, s14
 8000b98:	eef0 0a67 	vmov.f32	s1, s15
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	66666666 	.word	0x66666666
 8000bac:	3ffa6666 	.word	0x3ffa6666
 8000bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000bb4:	3f40624d 	.word	0x3f40624d
 8000bb8:	40b00000 	.word	0x40b00000
 8000bbc:	40340000 	.word	0x40340000
 8000bc0:	66666666 	.word	0x66666666
 8000bc4:	400a6666 	.word	0x400a6666

08000bc8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>:


void CurrSensDriver::get_current_Amp(PhaseCurrents& currents){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
//		HAL_ADC_Start_DMA(ADC_handle, CurrSensDriver::ADCValues, 3);
//		for (uint8_t j = 0;j<3; j++){
//			ADC_cummulative_val[j] += ADCValues[j]&0xFFFFFFFF;
//		}
//	}
	HAL_ADC_Start_DMA(ADC_handle, CurrSensDriver::ADCValues, 3);
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xbc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	492c      	ldr	r1, [pc, #176]	; (8000c88 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 f8fd 	bl	8003dd8 <HAL_ADC_Start_DMA>
	curr_A_filter.add_new_element(counts_to_amps(ADCValues[0]));
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff98 	bl	8000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8000be8:	eeb0 7a40 	vmov.f32	s14, s0
 8000bec:	eef0 7a60 	vmov.f32	s15, s1
 8000bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8000bf4:	eef0 0a67 	vmov.f32	s1, s15
 8000bf8:	4824      	ldr	r0, [pc, #144]	; (8000c8c <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc4>)
 8000bfa:	f000 fa06 	bl	800100a <_ZN15MovingAvgFilter15add_new_elementEd>
	curr_B_filter.add_new_element(counts_to_amps(ADCValues[1]));
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff88 	bl	8000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8000c08:	eeb0 7a40 	vmov.f32	s14, s0
 8000c0c:	eef0 7a60 	vmov.f32	s15, s1
 8000c10:	eeb0 0a47 	vmov.f32	s0, s14
 8000c14:	eef0 0a67 	vmov.f32	s1, s15
 8000c18:	481d      	ldr	r0, [pc, #116]	; (8000c90 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc8>)
 8000c1a:	f000 f9f6 	bl	800100a <_ZN15MovingAvgFilter15add_new_elementEd>
	curr_C_filter.add_new_element(counts_to_amps(ADCValues[2]));
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff78 	bl	8000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8000c28:	eeb0 7a40 	vmov.f32	s14, s0
 8000c2c:	eef0 7a60 	vmov.f32	s15, s1
 8000c30:	eeb0 0a47 	vmov.f32	s0, s14
 8000c34:	eef0 0a67 	vmov.f32	s1, s15
 8000c38:	4816      	ldr	r0, [pc, #88]	; (8000c94 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xcc>)
 8000c3a:	f000 f9e6 	bl	800100a <_ZN15MovingAvgFilter15add_new_elementEd>
	currents.iA = curr_A_filter.filtered_output();
 8000c3e:	4813      	ldr	r0, [pc, #76]	; (8000c8c <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc4>)
 8000c40:	f000 fa2b 	bl	800109a <_ZN15MovingAvgFilter15filtered_outputEv>
 8000c44:	eeb0 7a40 	vmov.f32	s14, s0
 8000c48:	eef0 7a60 	vmov.f32	s15, s1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	ed83 7b00 	vstr	d7, [r3]
	currents.iB = curr_B_filter.filtered_output();
 8000c52:	480f      	ldr	r0, [pc, #60]	; (8000c90 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc8>)
 8000c54:	f000 fa21 	bl	800109a <_ZN15MovingAvgFilter15filtered_outputEv>
 8000c58:	eeb0 7a40 	vmov.f32	s14, s0
 8000c5c:	eef0 7a60 	vmov.f32	s15, s1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	ed83 7b02 	vstr	d7, [r3, #8]
	currents.iC = curr_C_filter.filtered_output();
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xcc>)
 8000c68:	f000 fa17 	bl	800109a <_ZN15MovingAvgFilter15filtered_outputEv>
 8000c6c:	eeb0 7a40 	vmov.f32	s14, s0
 8000c70:	eef0 7a60 	vmov.f32	s15, s1
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	ed83 7b04 	vstr	d7, [r3, #16]

}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000007c 	.word	0x2000007c
 8000c88:	20000080 	.word	0x20000080
 8000c8c:	20000090 	.word	0x20000090
 8000c90:	200000a8 	.word	0x200000a8
 8000c94:	200000c0 	.word	0x200000c0

08000c98 <_ZN15MovingAvgFilterD1Ev>:
#define INC_FILTER_H_

#include<vector>
#include<cstdint>

class MovingAvgFilter{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f839 	bl	8000d1c <_ZNSt6vectorIdSaIdEED1Ev>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_Z41__static_initialization_and_destruction_0ii>:
	return 0;
}

bool CurrSensDriver::set_voltage_V(PhaseType phase, double voltage){
	return true;
}
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d110      	bne.n	8000ce6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10b      	bne.n	8000ce6 <_Z41__static_initialization_and_destruction_0ii+0x32>
MovingAvgFilter CurrSensDriver::curr_A_filter(10);
 8000cce:	210a      	movs	r1, #10
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000cd2:	f000 f96b 	bl	8000fac <_ZN15MovingAvgFilterC1Eh>
MovingAvgFilter CurrSensDriver::curr_B_filter(10);
 8000cd6:	210a      	movs	r1, #10
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000cda:	f000 f967 	bl	8000fac <_ZN15MovingAvgFilterC1Eh>
MovingAvgFilter CurrSensDriver::curr_C_filter(10);
 8000cde:	210a      	movs	r1, #10
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000ce2:	f000 f963 	bl	8000fac <_ZN15MovingAvgFilterC1Eh>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10d      	bne.n	8000d08 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d108      	bne.n	8000d08 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000cf8:	f7ff ffce 	bl	8000c98 <_ZN15MovingAvgFilterD1Ev>
MovingAvgFilter CurrSensDriver::curr_B_filter(10);
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000cfe:	f7ff ffcb 	bl	8000c98 <_ZN15MovingAvgFilterD1Ev>
MovingAvgFilter CurrSensDriver::curr_A_filter(10);
 8000d02:	4803      	ldr	r0, [pc, #12]	; (8000d10 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000d04:	f7ff ffc8 	bl	8000c98 <_ZN15MovingAvgFilterD1Ev>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000090 	.word	0x20000090
 8000d14:	200000a8 	.word	0x200000a8
 8000d18:	200000c0 	.word	0x200000c0

08000d1c <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681c      	ldr	r4, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f834 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8000d34:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000d36:	461a      	mov	r2, r3
 8000d38:	4629      	mov	r1, r5
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 f839 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f811 	bl	8000d6a <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bdb0      	pop	{r4, r5, r7, pc}

08000d52 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f837 	bl	8000dce <_ZNSaIdED1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8000d82:	461a      	mov	r2, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f82e 	bl	8000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ffe0 	bl	8000d52 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f000 f823 	bl	8000e0c <_ZSt8_DestroyIPdEvT_S1_>
    }
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_ZNSaIdED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f825 	bl	8000e26 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
	if (__p)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f81c 	bl	8000e3c <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_ZSt8_DestroyIPdEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f81e 	bl	8000e5a <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 f80f 	bl	8000e70 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4619      	mov	r1, r3
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f007 face 	bl	8008424 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_GLOBAL__sub_I__ZN14CurrSensDriver10ADC_handleE>:
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff0b 	bl	8000cb4 <_Z41__static_initialization_and_destruction_0ii>
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_GLOBAL__sub_D__ZN14CurrSensDriver10ADC_handleE>:
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ff03 	bl	8000cb4 <_Z41__static_initialization_and_destruction_0ii>
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
#include "hall_encoder.h"
#include "math_utils.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b092      	sub	sp, #72	; 0x48
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	// check if it gets here
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 8000eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe83 	bl	8000bc8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>

	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8000ec2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000ec6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8000eca:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8000ece:	eeb0 2a45 	vmov.f32	s4, s10
 8000ed2:	eef0 2a65 	vmov.f32	s5, s11
 8000ed6:	eeb0 1a46 	vmov.f32	s2, s12
 8000eda:	eef0 1a66 	vmov.f32	s3, s13
 8000ede:	eeb0 0a47 	vmov.f32	s0, s14
 8000ee2:	eef0 0a67 	vmov.f32	s1, s15
 8000ee6:	f001 ff8f 	bl	8002e08 <_Z9tf_clarkeddd>
 8000eea:	eeb0 6a40 	vmov.f32	s12, s0
 8000eee:	eef0 6a60 	vmov.f32	s13, s1
 8000ef2:	eeb0 7a41 	vmov.f32	s14, s2
 8000ef6:	eef0 7a61 	vmov.f32	s15, s3
 8000efa:	ed87 6b06 	vstr	d6, [r7, #24]
 8000efe:	ed87 7b08 	vstr	d7, [r7, #32]

	double theta_d =  HallEncoderDriver::get_thetad();
 8000f02:	f001 fb47 	bl	8002594 <_ZN17HallEncoderDriver10get_thetadEv>
 8000f06:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8000f0a:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f0e:	ed97 6b08 	vldr	d6, [r7, #32]
	auto [curr_d, curr_q] = tf_park(curr_alpha, curr_beta, theta_d);
 8000f12:	ed97 2b10 	vldr	d2, [r7, #64]	; 0x40
 8000f16:	eeb0 1a46 	vmov.f32	s2, s12
 8000f1a:	eef0 1a66 	vmov.f32	s3, s13
 8000f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f22:	eef0 0a67 	vmov.f32	s1, s15
 8000f26:	f001 ff02 	bl	8002d2e <_Z7tf_parkddd>
 8000f2a:	eeb0 6a40 	vmov.f32	s12, s0
 8000f2e:	eef0 6a60 	vmov.f32	s13, s1
 8000f32:	eeb0 7a41 	vmov.f32	s14, s2
 8000f36:	eef0 7a61 	vmov.f32	s15, s3
 8000f3a:	ed87 6b02 	vstr	d6, [r7, #8]
 8000f3e:	ed87 7b04 	vstr	d7, [r7, #16]



	return;
 8000f42:	bf00      	nop

}
 8000f44:	3748      	adds	r7, #72	; 0x48
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      _Vector_base() = default;
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f8a6 	bl	80010d4 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_ZNSt6vectorIdSaIdEEC1Ev>:
      vector() = default;
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ffeb 	bl	8000f78 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_ZN15MovingAvgFilterC1Eh>:
 *      Author: Sashreek
 */
#include "main.h"
#include "filter.h"

MovingAvgFilter::MovingAvgFilter(uint8_t filter_size):filter_size(filter_size){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	78fa      	ldrb	r2, [r7, #3]
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ffe5 	bl	8000f92 <_ZNSt6vectorIdSaIdEEC1Ev>
	cache.resize(filter_size, 0);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1d18      	adds	r0, r3, #4
 8000fcc:	78f9      	ldrb	r1, [r7, #3]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f000 f888 	bl	80010f4 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>
	cache.reserve(filter_size);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	78fa      	ldrb	r2, [r7, #3]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f8d3 	bl	8001198 <_ZNSt6vectorIdSaIdEE7reserveEj>
	sum = 0;
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_ZN15MovingAvgFilter15add_new_elementEd>:


void MovingAvgFilter::add_new_element(double item){
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b089      	sub	sp, #36	; 0x24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	ed87 0b00 	vstr	d0, [r7]
	double removed = cache.back();
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3304      	adds	r3, #4
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f93c 	bl	8001298 <_ZNSt6vectorIdSaIdEE4backEv>
 8001020:	4603      	mov	r3, r0
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	e9c7 2306 	strd	r2, r3, [r7, #24]
	cache.pop_back();
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	3304      	adds	r3, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f94d 	bl	80012ce <_ZNSt6vectorIdSaIdEE8pop_backEv>
	sum -= removed;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800103a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800103e:	f7ff f8ef 	bl	8000220 <__aeabi_dsub>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	68f9      	ldr	r1, [r7, #12]
 8001048:	e9c1 2304 	strd	r2, r3, [r1, #16]
	sum += item;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001056:	f7ff f8e5 	bl	8000224 <__adddf3>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	68f9      	ldr	r1, [r7, #12]
 8001060:	e9c1 2304 	strd	r2, r3, [r1, #16]
	cache.insert(cache.begin(), item);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	1d1c      	adds	r4, r3, #4
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3304      	adds	r3, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f943 	bl	80012f8 <_ZNSt6vectorIdSaIdEE5beginEv>
 8001072:	4603      	mov	r3, r0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	f107 0214 	add.w	r2, r7, #20
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f949 	bl	8001318 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1IPdEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8001086:	463b      	mov	r3, r7
 8001088:	461a      	mov	r2, r3
 800108a:	6939      	ldr	r1, [r7, #16]
 800108c:	4620      	mov	r0, r4
 800108e:	f000 f954 	bl	800133a <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_>
}
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd90      	pop	{r4, r7, pc}

0800109a <_ZN15MovingAvgFilter15filtered_outputEv>:


double MovingAvgFilter::filtered_output(){
 800109a:	b5b0      	push	{r4, r5, r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	return sum/filter_size;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa05 	bl	80004bc <__aeabi_i2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fb93 	bl	80007e4 <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80010c6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ca:	eef0 0a67 	vmov.f32	s1, s15
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}

080010d4 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f9ce 	bl	800147e <_ZNSaIdEC1Ev>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f9d6 	bl	8001496 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_ZNSt6vectorIdSaIdEE6resizeEjRKd>:
       *  %vector's current size the %vector is truncated, otherwise
       *  the %vector is extended and new elements are populated with
       *  given data.
       */
      void
      resize(size_type __new_size, const value_type& __x)
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
      {
	if (__new_size > size())
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 f9dc 	bl	80014be <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001106:	4602      	mov	r2, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4293      	cmp	r3, r2
 800110c:	bf8c      	ite	hi
 800110e:	2301      	movhi	r3, #1
 8001110:	2300      	movls	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00f      	beq.n	8001138 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x44>
	  _M_fill_insert(end(), __new_size - size(), __x);
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 fb21 	bl	8001760 <_ZNSt6vectorIdSaIdEE3endEv>
 800111e:	4604      	mov	r4, r0
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 f9cc 	bl	80014be <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001126:	4602      	mov	r2, r0
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	1a9a      	subs	r2, r3, r2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4621      	mov	r1, r4
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f000 f9d5 	bl	80014e0 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 8001136:	e014      	b.n	8001162 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x6e>
	else if (__new_size < size())
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 f9c0 	bl	80014be <_ZNKSt6vectorIdSaIdEE4sizeEv>
 800113e:	4602      	mov	r2, r0
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4293      	cmp	r3, r2
 8001144:	bf34      	ite	cc
 8001146:	2301      	movcc	r3, #1
 8001148:	2300      	movcs	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x6e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	4619      	mov	r1, r3
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 fb10 	bl	8001782 <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd>
      }
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}

0800116a <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>:
      _S_use_relocate()
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f805 	bl	8001180 <_ZNSt6vectorIdSaIdEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8001176:	4603      	mov	r3, r0
      }
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZNSt6vectorIdSaIdEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001188:	2301      	movs	r3, #1
      }
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <_ZNSt6vectorIdSaIdEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fb0e 	bl	80017c4 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	4293      	cmp	r3, r2
 80011ae:	bf8c      	ite	hi
 80011b0:	2301      	movhi	r3, #1
 80011b2:	2300      	movls	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <_ZNSt6vectorIdSaIdEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 80011ba:	4836      	ldr	r0, [pc, #216]	; (8001294 <_ZNSt6vectorIdSaIdEE7reserveEj+0xfc>)
 80011bc:	f007 f94b 	bl	8008456 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fb10 	bl	80017e6 <_ZNKSt6vectorIdSaIdEE8capacityEv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	bf8c      	ite	hi
 80011ce:	2301      	movhi	r3, #1
 80011d0:	2300      	movls	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d059      	beq.n	800128c <_ZNSt6vectorIdSaIdEE7reserveEj+0xf4>
	{
	  const size_type __old_size = size();
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f970 	bl	80014be <_ZNKSt6vectorIdSaIdEE4sizeEv>
 80011de:	60b8      	str	r0, [r7, #8]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80011e0:	f7ff ffc3 	bl	800116a <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <_ZNSt6vectorIdSaIdEE7reserveEj+0x7c>
	    {
	      __tmp = this->_M_allocate(__n);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fb09 	bl	8001806 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 80011f4:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681c      	ldr	r4, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fdcb 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001206:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4629      	mov	r1, r5
 800120c:	4620      	mov	r0, r4
 800120e:	f000 fb0e 	bl	800182e <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>
 8001212:	e01f      	b.n	8001254 <_ZNSt6vectorIdSaIdEE7reserveEj+0xbc>
	    }
	  else
#endif
	    {
	      __tmp = _M_allocate_and_copy(__n,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fb1c 	bl	8001856 <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 800121e:	4604      	mov	r4, r0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fb16 	bl	8001856 <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 800122a:	4603      	mov	r3, r0
 800122c:	4622      	mov	r2, r4
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fb1f 	bl	8001874 <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyISt13move_iteratorIPdEEES4_jT_S6_>
 8001236:	60f8      	str	r0, [r7, #12]
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681c      	ldr	r4, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fdaa 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001248:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800124a:	461a      	mov	r2, r3
 800124c:	4629      	mov	r1, r5
 800124e:	4620      	mov	r0, r4
 8001250:	f7ff fdaf 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	10db      	asrs	r3, r3, #3
	  _M_deallocate(this->_M_impl._M_start,
 8001266:	461a      	mov	r2, r3
 8001268:	f7ff fdbd 	bl	8000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
	  this->_M_impl._M_start = __tmp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	441a      	add	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	441a      	add	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	609a      	str	r2, [r3, #8]
	}
    }
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bdb0      	pop	{r4, r5, r7, pc}
 8001294:	08009918 	.word	0x08009918

08001298 <_ZNSt6vectorIdSaIdEE4backEv>:
      /**
       *  Returns a read/write reference to the data at the last
       *  element of the %vector.
       */
      reference
      back() _GLIBCXX_NOEXCEPT
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *(end() - 1);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fa5d 	bl	8001760 <_ZNSt6vectorIdSaIdEE3endEv>
 80012a6:	4603      	mov	r3, r0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2101      	movs	r1, #1
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fafb 	bl	80018ac <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEmiEi>
 80012b6:	4603      	mov	r3, r0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fb0d 	bl	80018de <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>
 80012c4:	4603      	mov	r3, r0
      }
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_ZNSt6vectorIdSaIdEE8pop_backEv>:
       *  Note that no data is returned, and if the last element's
       *  data is needed, it should be retrieved before pop_back() is
       *  called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f1a3 0208 	sub.w	r2, r3, #8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4610      	mov	r0, r2
 80012ec:	f000 fb03 	bl	80018f6 <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
      }
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_ZNSt6vectorIdSaIdEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fb01 	bl	8001910 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1IPdEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f000 fb04 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001328:	4603      	mov	r3, r0
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 800133a:	b580      	push	{r7, lr}
 800133c:	b092      	sub	sp, #72	; 0x48
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
    insert(const_iterator __position, const value_type& __x)
#else
    insert(iterator __position, const value_type& __x)
#endif
    {
      const size_type __n = __position - begin();
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff ffd6 	bl	80012f8 <_ZNSt6vectorIdSaIdEE5beginEv>
 800134c:	4603      	mov	r3, r0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
 8001350:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f000 faf3 	bl	8001946 <_ZN9__gnu_cxxmiIPKdPdSt6vectorIdSaIdEEEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8001360:	4603      	mov	r3, r0
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	429a      	cmp	r2, r3
 800136e:	d054      	beq.n	800141a <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0xe0>
	if (__position == end())
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 f9f5 	bl	8001760 <_ZNSt6vectorIdSaIdEE3endEv>
 8001376:	4603      	mov	r3, r0
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
 800137a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f000 faf3 	bl	8001970 <_ZN9__gnu_cxxeqIPKdPdSt6vectorIdSaIdEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00d      	beq.n	80013ac <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0x72>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4619      	mov	r1, r3
 800139a:	f000 fb01 	bl	80019a0 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f103 0208 	add.w	r2, r3, #8
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	e055      	b.n	8001458 <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0x11e>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  {
#if __cplusplus >= 201103L
	    const auto __pos = begin() + (__position - cbegin());
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f7ff ffa3 	bl	80012f8 <_ZNSt6vectorIdSaIdEE5beginEv>
 80013b2:	4603      	mov	r3, r0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 fb05 	bl	80019c6 <_ZNKSt6vectorIdSaIdEE6cbeginEv>
 80013bc:	4603      	mov	r3, r0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
 80013c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fb0b 	bl	80019e6 <_ZN9__gnu_cxxmiIPKdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fb19 	bl	8001a10 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>
 80013de:	4603      	mov	r3, r0
 80013e0:	623b      	str	r3, [r7, #32]
	    // __x could be an existing element of this vector, so make a
	    // copy of it before _M_insert_aux moves elements around.
	    _Temporary_value __x_copy(this, __x);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68f9      	ldr	r1, [r7, #12]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fb28 	bl	8001a40 <_ZNSt6vectorIdSaIdEE16_Temporary_valueC1IJRKdEEEPS1_DpOT_>
	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fb55 	bl	8001aa4 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_valEv>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fb5d 	bl	8001abc <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	6a39      	ldr	r1, [r7, #32]
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 fb62 	bl	8001ad2 <_ZNSt6vectorIdSaIdEE13_M_insert_auxIdEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEOT_>
#else
	    _M_insert_aux(__position, __x);
#endif
	  }
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fb32 	bl	8001a7c <_ZNSt6vectorIdSaIdEE16_Temporary_valueD1Ev>
 8001418:	e01e      	b.n	8001458 <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0x11e>
      else
#if __cplusplus >= 201103L
	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f7ff ff6c 	bl	80012f8 <_ZNSt6vectorIdSaIdEE5beginEv>
 8001420:	4603      	mov	r3, r0
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 face 	bl	80019c6 <_ZNKSt6vectorIdSaIdEE6cbeginEv>
 800142a:	4603      	mov	r3, r0
 800142c:	63bb      	str	r3, [r7, #56]	; 0x38
 800142e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fad4 	bl	80019e6 <_ZN9__gnu_cxxmiIPKdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800143e:	4602      	mov	r2, r0
 8001440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fae2 	bl	8001a10 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>
 800144c:	4603      	mov	r3, r0
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4619      	mov	r1, r3
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 fb7c 	bl	8001b50 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>
#else
	_M_realloc_insert(__position, __x);
#endif

      return iterator(this->_M_impl._M_start + __n);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	643b      	str	r3, [r7, #64]	; 0x40
 8001464:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001468:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fa4e 	bl	8001910 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8001474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8001476:	4618      	mov	r0, r3
 8001478:	3748      	adds	r7, #72	; 0x48
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fc1e 	bl	8001cc8 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
	{ }
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_ZNKSt6vectorIdSaIdEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	10db      	asrs	r3, r3, #3
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd>:
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b093      	sub	sp, #76	; 0x4c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 812e 	beq.w	8001752 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x272>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	10db      	asrs	r3, r3, #3
	  if (size_type(this->_M_impl._M_end_of_storage
 8001502:	461a      	mov	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4293      	cmp	r3, r2
 8001508:	f200 80a3 	bhi.w	8001652 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x172>
	    {
#if __cplusplus < 201103L
	      value_type __x_copy = __x;
#else
	      _Temporary_value __tmp(this, __x);
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fa93 	bl	8001a40 <_ZNSt6vectorIdSaIdEE16_Temporary_valueC1IJRKdEEEPS1_DpOT_>
	      value_type& __x_copy = __tmp._M_val();
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fac0 	bl	8001aa4 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_valEv>
 8001524:	6378      	str	r0, [r7, #52]	; 0x34
#endif
	      const size_type __elems_after = end() - __position;
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 f91a 	bl	8001760 <_ZNSt6vectorIdSaIdEE3endEv>
 800152c:	4603      	mov	r3, r0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
 8001530:	f107 0208 	add.w	r2, r7, #8
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fbcf 	bl	8001cde <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8001540:	4603      	mov	r3, r0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
	      pointer __old_finish(this->_M_impl._M_finish);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__elems_after > __n)
 800154a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d941      	bls.n	80015d6 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0xf6>
		{
		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	425b      	negs	r3, r3
 800155c:	18d4      	adds	r4, r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	685d      	ldr	r5, [r3, #4]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	685e      	ldr	r6, [r3, #4]
					      this->_M_impl._M_finish,
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fc17 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800156e:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8001570:	4632      	mov	r2, r6
 8001572:	4629      	mov	r1, r5
 8001574:	4620      	mov	r0, r4
 8001576:	f000 fbc7 	bl	8001d08 <_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __n;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	441a      	add	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f9cf 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001592:	4603      	mov	r3, r0
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	425b      	negs	r3, r3
 800159c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800159e:	4413      	add	r3, r2
 80015a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a2:	4619      	mov	r1, r3
 80015a4:	f000 fbc9 	bl	8001d3a <_ZSt13move_backwardIPdS0_ET0_T_S2_S1_>
					  __old_finish - __n, __old_finish);
		  std::fill(__position.base(), __position.base() + __n,
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f9bf 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	681c      	ldr	r4, [r3, #0]
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f9b8 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015cc:	4619      	mov	r1, r3
 80015ce:	4620      	mov	r0, r4
 80015d0:	f000 fbcb 	bl	8001d6a <_ZSt4fillIPddEvT_S1_RKT0_>
 80015d4:	e037      	b.n	8001646 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x166>
		}
	      else
		{
		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		  this->_M_impl._M_finish =
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	685c      	ldr	r4, [r3, #4]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015de:	1ad5      	subs	r5, r2, r3
						  __n - __elems_after,
						  __x_copy,
						  _M_get_Tp_allocator());
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fbda 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80015e8:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 80015ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ec:	4629      	mov	r1, r5
 80015ee:	4620      	mov	r0, r4
 80015f0:	f000 fbca 	bl	8001d88 <_ZSt24__uninitialized_fill_n_aIPdjddET_S1_T0_RKT1_RSaIT2_E>
 80015f4:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f996 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001604:	4603      	mov	r3, r0
 8001606:	681c      	ldr	r4, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685d      	ldr	r5, [r3, #4]
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fbc4 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001614:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 8001616:	462a      	mov	r2, r5
 8001618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800161a:	4620      	mov	r0, r4
 800161c:	f000 fb74 	bl	8001d08 <_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	441a      	add	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);
		  std::fill(__position.base(), __old_finish, __x_copy);
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f97c 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001638:	4603      	mov	r3, r0
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800163e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fb92 	bl	8001d6a <_ZSt4fillIPddEvT_S1_RKT0_>
		}
	    }
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fa16 	bl	8001a7c <_ZNSt6vectorIdSaIdEE16_Temporary_valueD1Ev>
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8001650:	e07f      	b.n	8001752 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x272>
		_M_check_len(__n, "vector::_M_fill_insert");
 8001652:	4a42      	ldr	r2, [pc, #264]	; (800175c <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x27c>)
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 fba7 	bl	8001daa <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>
 800165c:	6478      	str	r0, [r7, #68]	; 0x44
	      const size_type __elems_before = __position - begin();
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff fe4a 	bl	80012f8 <_ZNSt6vectorIdSaIdEE5beginEv>
 8001664:	4603      	mov	r3, r0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
 8001668:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fb33 	bl	8001cde <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8001678:	4603      	mov	r3, r0
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
	      pointer __new_start(this->_M_allocate(__len));
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f8c0 	bl	8001806 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8001686:	63f8      	str	r0, [r7, #60]	; 0x3c
	      pointer __new_finish(__new_start);
 8001688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 800168c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001692:	18d4      	adds	r4, r2, r3
						_M_get_Tp_allocator());
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb80 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800169c:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4620      	mov	r0, r4
 80016a4:	f000 fb70 	bl	8001d88 <_ZSt24__uninitialized_fill_n_aIPdjddET_S1_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 80016a8:	2300      	movs	r3, #0
 80016aa:	63bb      	str	r3, [r7, #56]	; 0x38
		    (this->_M_impl._M_start, __position.base(),
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681c      	ldr	r4, [r3, #0]
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f93b 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fb6b 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80016c6:	4603      	mov	r3, r0
		    (this->_M_impl._M_start, __position.base(),
 80016c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016ca:	4629      	mov	r1, r5
 80016cc:	4620      	mov	r0, r4
 80016ce:	f000 fbb3 	bl	8001e38 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 80016d2:	63b8      	str	r0, [r7, #56]	; 0x38
		  __new_finish += __n;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016da:	4413      	add	r3, r2
 80016dc:	63bb      	str	r3, [r7, #56]	; 0x38
		    (__position.base(), this->_M_impl._M_finish,
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f924 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80016e8:	4603      	mov	r3, r0
 80016ea:	681c      	ldr	r4, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fb52 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80016f8:	4603      	mov	r3, r0
		    (__position.base(), this->_M_impl._M_finish,
 80016fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016fc:	4629      	mov	r1, r5
 80016fe:	4620      	mov	r0, r4
 8001700:	f000 fb9a 	bl	8001e38 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8001704:	63b8      	str	r0, [r7, #56]	; 0x38
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681c      	ldr	r4, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fb43 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001716:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001718:	461a      	mov	r2, r3
 800171a:	4629      	mov	r1, r5
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fb48 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	10db      	asrs	r3, r3, #3
	      _M_deallocate(this->_M_impl._M_start,
 8001734:	461a      	mov	r2, r3
 8001736:	f7ff fb56 	bl	8000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
	      this->_M_impl._M_start = __new_start;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800173e:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001744:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800174c:	441a      	add	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	609a      	str	r2, [r3, #8]
    }
 8001752:	bf00      	nop
 8001754:	374c      	adds	r7, #76	; 0x4c
 8001756:	46bd      	mov	sp, r7
 8001758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175a:	bf00      	nop
 800175c:	08009928 	.word	0x08009928

08001760 <_ZNSt6vectorIdSaIdEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	1d1a      	adds	r2, r3, #4
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f8cc 	bl	8001910 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001782:	b590      	push	{r4, r7, lr}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	10db      	asrs	r3, r3, #3
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00e      	beq.n	80017bc <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff faf9 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80017aa:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80017ac:	461a      	mov	r2, r3
 80017ae:	4621      	mov	r1, r4
 80017b0:	6838      	ldr	r0, [r7, #0]
 80017b2:	f7ff fafe 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}

080017c4 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fb65 	bl	8001e9e <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fb47 	bl	8001e6a <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 80017dc:	4603      	mov	r3, r0
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_ZNKSt6vectorIdSaIdEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	10db      	asrs	r3, r3, #3
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fb4a 	bl	8001eb4 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8001820:	4603      	mov	r3, r0
 8001822:	e000      	b.n	8001826 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8001824:	2300      	movs	r3, #0
      }
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800182e:	b590      	push	{r4, r7, lr}
 8001830:	b087      	sub	sp, #28
 8001832:	af02      	add	r7, sp, #8
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800183c:	f88d 4000 	strb.w	r4, [sp]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 fb43 	bl	8001ed2 <_ZNSt6vectorIdSaIdEE14_S_do_relocateEPdS2_S2_RS0_St17integral_constantIbLb1EE>
 800184c:	4603      	mov	r3, r0
      }
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}

08001856 <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fb46 	bl	8001ef6 <_ZNSt13move_iteratorIPdEC1ES0_>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyISt13move_iteratorIPdEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ffbd 	bl	8001806 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 800188c:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fa83 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001896:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fb3c 	bl	8001f1a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
	      return __result;
 80018a2:	697b      	ldr	r3, [r7, #20]
	}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	425b      	negs	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	f107 020c 	add.w	r2, r7, #12
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f81e 	bl	8001910 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8001900:	6839      	ldr	r1, [r7, #0]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fb1a 	bl	8001f3c <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>
	}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_ZN9__gnu_cxxmiIPKdPdSt6vectorIdSaIdEEEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8001946:	b590      	push	{r4, r7, lr}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fafe 	bl	8001f52 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8001956:	4603      	mov	r3, r0
 8001958:	681c      	ldr	r4, [r3, #0]
 800195a:	6838      	ldr	r0, [r7, #0]
 800195c:	f7ff ffe8 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001960:	4603      	mov	r3, r0
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	1ae3      	subs	r3, r4, r3
 8001966:	10db      	asrs	r3, r3, #3
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bd90      	pop	{r4, r7, pc}

08001970 <_ZN9__gnu_cxxeqIPKdPdSt6vectorIdSaIdEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fae9 	bl	8001f52 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8001980:	4603      	mov	r3, r0
 8001982:	681c      	ldr	r4, [r3, #0]
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f7ff ffd3 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 800198a:	4603      	mov	r3, r0
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	429c      	cmp	r4, r3
 8001990:	bf0c      	ite	eq
 8001992:	2301      	moveq	r3, #1
 8001994:	2300      	movne	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}

080019a0 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fadb 	bl	8001f68 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 fae0 	bl	8001f7e <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJRKdEEEvPT_DpOT0_>
	}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_ZNKSt6vectorIdSaIdEE6cbeginEv>:
      cbegin() const noexcept
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fae9 	bl	8001fae <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1ERKS2_>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <_ZN9__gnu_cxxmiIPKdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80019e6:	b590      	push	{r4, r7, lr}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 faae 	bl	8001f52 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 80019f6:	4603      	mov	r3, r0
 80019f8:	681c      	ldr	r4, [r3, #0]
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f000 faa9 	bl	8001f52 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8001a00:	4603      	mov	r3, r0
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	1ae3      	subs	r3, r4, r3
 8001a06:	10db      	asrs	r3, r3, #3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}

08001a10 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	f107 020c 	add.w	r2, r7, #12
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff6d 	bl	8001910 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZNSt6vectorIdSaIdEE16_Temporary_valueC1IJRKdEEEPS1_DpOT_>:
	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	601a      	str	r2, [r3, #0]
	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461d      	mov	r5, r3
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fab8 	bl	8001fce <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fa81 	bl	8001f68 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	f7ff ff97 	bl	80019a0 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
	  }
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}

08001a7c <_ZNSt6vectorIdSaIdEE16_Temporary_valueD1Ev>:
	~_Temporary_value()
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461c      	mov	r4, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fa9f 	bl	8001fce <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff ff2e 	bl	80018f6 <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}

08001aa4 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_valEv>:
	_M_val() { return *_M_ptr(); }
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fa8e 	bl	8001fce <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_ZNSt6vectorIdSaIdEE13_M_insert_auxIdEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEOT_>:
      vector<_Tp, _Alloc>::
 8001ad2:	b5b0      	push	{r4, r5, r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001ade:	68fc      	ldr	r4, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685d      	ldr	r5, [r3, #4]
			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	3b08      	subs	r3, #8
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ffe6 	bl	8001abc <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 8001af0:	4603      	mov	r3, r0
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001af2:	461a      	mov	r2, r3
 8001af4:	4629      	mov	r1, r5
 8001af6:	4620      	mov	r0, r4
 8001af8:	f000 fa75 	bl	8001fe6 <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>
      ++this->_M_impl._M_finish;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f103 0208 	add.w	r2, r3, #8
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
      _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff0f 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001b12:	4603      	mov	r3, r0
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f1a3 0110 	sub.w	r1, r3, #16
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	3b08      	subs	r3, #8
 8001b24:	461a      	mov	r2, r3
 8001b26:	f000 f908 	bl	8001d3a <_ZSt13move_backwardIPdS0_ET0_T_S2_S1_>
      *__position = std::forward<_Arg>(__arg);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fa6e 	bl	800200c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8001b30:	4604      	mov	r4, r0
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fed1 	bl	80018de <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>
 8001b3c:	4601      	mov	r1, r0
 8001b3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001b42:	e9c1 2300 	strd	r2, r3, [r1]
    }
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b50 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001b5c:	4a59      	ldr	r2, [pc, #356]	; (8001cc4 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x174>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f922 	bl	8001daa <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>
 8001b66:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f7ff fbbf 	bl	80012f8 <_ZNSt6vectorIdSaIdEE5beginEv>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	f107 0214 	add.w	r2, r7, #20
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f8a8 	bl	8001cde <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fe35 	bl	8001806 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8001b9c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8001ba2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	18d5      	adds	r5, r2, r3
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f9db 	bl	8001f68 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7ff fef1 	bl	80019a0 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001bc2:	f7ff fad2 	bl	800116a <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d027      	beq.n	8001c1c <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fead 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f8dd 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001be2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4621      	mov	r1, r4
 8001be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bea:	f7ff fe20 	bl	800182e <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>
 8001bee:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fe98 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001c00:	4603      	mov	r3, r0
 8001c02:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f8c8 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001c0c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c10:	6a39      	ldr	r1, [r7, #32]
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff fe0b 	bl	800182e <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>
 8001c18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c1a:	e026      	b.n	8001c6a <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fe85 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001c26:	4603      	mov	r3, r0
 8001c28:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f8b5 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001c32:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4621      	mov	r1, r4
 8001c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c3a:	f000 f8fd 	bl	8001e38 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8001c3e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	3308      	adds	r3, #8
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fe70 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001c50:	4603      	mov	r3, r0
 8001c52:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f8a0 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001c5c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c60:	6a39      	ldr	r1, [r7, #32]
 8001c62:	4620      	mov	r0, r4
 8001c64:	f000 f8e8 	bl	8001e38 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8001c68:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001c6a:	f7ff fa7e 	bl	800116a <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f88d 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	6a39      	ldr	r1, [r7, #32]
 8001c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c8a:	f7ff f892 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8001c8e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9e:	f7ff f8a2 	bl	8000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      this->_M_impl._M_start = __new_start;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cac:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	441a      	add	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	609a      	str	r2, [r3, #8]
    }
 8001cba:	bf00      	nop
 8001cbc:	3730      	adds	r7, #48	; 0x30
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08009940 	.word	0x08009940

08001cc8 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001cde:	b590      	push	{r4, r7, lr}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fe21 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	681c      	ldr	r4, [r3, #0]
 8001cf2:	6838      	ldr	r0, [r7, #0]
 8001cf4:	f7ff fe1c 	bl	8001930 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	1ae3      	subs	r3, r4, r3
 8001cfe:	10db      	asrs	r3, r3, #3
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}

08001d08 <_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f983 	bl	8002022 <_ZSt18make_move_iteratorIPdESt13move_iteratorIT_ES2_>
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	68b8      	ldr	r0, [r7, #8]
 8001d20:	f000 f97f 	bl	8002022 <_ZSt18make_move_iteratorIPdESt13move_iteratorIT_ES2_>
 8001d24:	4601      	mov	r1, r0
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f000 f8f5 	bl	8001f1a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
 8001d30:	4603      	mov	r3, r0
					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
					 __result, __alloc);
    }
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}

08001d3a <_ZSt13move_backwardIPdS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001d3a:	b590      	push	{r4, r7, lr}
 8001d3c:	b085      	sub	sp, #20
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f980 	bl	800204c <_ZSt12__miter_baseIPdET_S1_>
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	68b8      	ldr	r0, [r7, #8]
 8001d50:	f000 f97c 	bl	800204c <_ZSt12__miter_baseIPdET_S1_>
 8001d54:	4603      	mov	r3, r0
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f000 f981 	bl	8002062 <_ZSt22__copy_move_backward_aILb1EPdS0_ET1_T0_S2_S1_>
 8001d60:	4603      	mov	r3, r0
    }
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}

08001d6a <_ZSt4fillIPddEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __last, __value);
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f994 	bl	80020a8 <_ZSt8__fill_aIPddEvT_S1_RKT0_>
    }
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZSt24__uninitialized_fill_n_aIPdjddET_S1_T0_RKT1_RSaIT2_E>:
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f993 	bl	80020c6 <_ZSt20uninitialized_fill_nIPdjdET_S1_T0_RKT1_>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8001daa:	b590      	push	{r4, r7, lr}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7ff fd04 	bl	80017c4 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7ff fb7d 	bl	80014be <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	1ae2      	subs	r2, r4, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	bf34      	ite	cc
 8001dce:	2301      	movcc	r3, #1
 8001dd0:	2300      	movcs	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f006 fb3c 	bl	8008456 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff fb6d 	bl	80014be <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001de4:	4604      	mov	r4, r0
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f7ff fb69 	bl	80014be <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	f107 0208 	add.w	r2, r7, #8
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f975 	bl	80020ea <_ZSt3maxIjERKT_S2_S2_>
 8001e00:	4603      	mov	r3, r0
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4423      	add	r3, r4
 8001e06:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff fb58 	bl	80014be <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d306      	bcc.n	8001e24 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x7a>
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff fcd4 	bl	80017c4 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d904      	bls.n	8001e2e <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x84>
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fccd 	bl	80017c4 <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	e000      	b.n	8001e30 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x86>
 8001e2e:	697b      	ldr	r3, [r7, #20]
      }
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}

08001e38 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff fd05 	bl	8001856 <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	68b8      	ldr	r0, [r7, #8]
 8001e50:	f7ff fd01 	bl	8001856 <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 8001e54:	4601      	mov	r1, r0
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f000 f85d 	bl	8001f1a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
 8001e60:	4603      	mov	r3, r0
    }
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd90      	pop	{r4, r7, pc}

08001e6a <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8001e72:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001e76:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f94a 	bl	8002112 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001e82:	f107 0208 	add.w	r2, r7, #8
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 f94c 	bl	800212a <_ZSt3minIjERKT_S2_S2_>
 8001e92:	4603      	mov	r3, r0
 8001e94:	681b      	ldr	r3, [r3, #0]
      }
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	6839      	ldr	r1, [r7, #0]
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f951 	bl	800216a <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_ZNSt6vectorIdSaIdEE14_S_do_relocateEPdS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f968 	bl	80021bc <_ZSt12__relocate_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8001eec:	4603      	mov	r3, r0
      }
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_ZNSt13move_iteratorIPdEC1ES0_>:
      move_iterator(iterator_type __i)
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8001f00:	463b      	mov	r3, r7
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f977 	bl	80021f6 <_ZSt4moveIRPdEONSt16remove_referenceIT_E4typeEOS3_>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f96d 	bl	800220c <_ZSt18uninitialized_copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJRKdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8001f7e:	b5b0      	push	{r4, r5, r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffec 	bl	8001f68 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8001f90:	4603      	mov	r3, r0
 8001f92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	2008      	movs	r0, #8
 8001f9c:	f7fe ffe0 	bl	8000f60 <_ZnwjPv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	e9c3 4500 	strd	r4, r5, [r3]
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bdb0      	pop	{r4, r5, r7, pc}

08001fae <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>:
	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3308      	adds	r3, #8
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f80a 	bl	800200c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f916 	bl	8002230 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>
	}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_ZSt18make_move_iteratorIPdESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f8e2 	bl	80021f6 <_ZSt4moveIRPdEONSt16remove_referenceIT_E4typeEOS3_>
 8002032:	4603      	mov	r3, r0
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f107 030c 	add.w	r3, r7, #12
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff5a 	bl	8001ef6 <_ZNSt13move_iteratorIPdEC1ES0_>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_ZSt12__miter_baseIPdET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_ZSt22__copy_move_backward_aILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8002062:	b5b0      	push	{r4, r5, r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f8f6 	bl	8002260 <_ZSt12__niter_baseIPdET_S1_>
 8002074:	4604      	mov	r4, r0
 8002076:	68b8      	ldr	r0, [r7, #8]
 8002078:	f000 f8f2 	bl	8002260 <_ZSt12__niter_baseIPdET_S1_>
 800207c:	4605      	mov	r5, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f8ed 	bl	8002260 <_ZSt12__niter_baseIPdET_S1_>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	4629      	mov	r1, r5
 800208c:	4620      	mov	r0, r4
 800208e:	f000 f8f2 	bl	8002276 <_ZSt23__copy_move_backward_a1ILb1EPdS0_ET1_T0_S2_S1_>
 8002092:	4602      	mov	r2, r0
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f8fc 	bl	8002296 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 800209e:	4603      	mov	r3, r0
    }
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bdb0      	pop	{r4, r5, r7, pc}

080020a8 <_ZSt8__fill_aIPddEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f8f8 	bl	80022ae <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_ZSt20uninitialized_fill_nIPdjdET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
      constexpr bool __can_fill
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f906 	bl	80022ec <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPdjdEET_S3_T0_RKT1_>
 80020e0:	4603      	mov	r3, r0
    }
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d201      	bcs.n	8002104 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	e000      	b.n	8002106 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002104:	687b      	ldr	r3, [r7, #4]
    }
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8f6 	bl	800230c <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8002120:	4603      	mov	r3, r0
      }
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d201      	bcs.n	8002144 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	e000      	b.n	8002146 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002144:	687b      	ldr	r3, [r7, #4]
    }
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800215a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff ffeb 	bl	8002152 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 800217c:	4602      	mov	r2, r0
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4293      	cmp	r3, r2
 8002182:	bf8c      	ite	hi
 8002184:	2301      	movhi	r3, #1
 8002186:	2300      	movls	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800219e:	d301      	bcc.n	80021a4 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80021a0:	f006 f956 	bl	8008450 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80021a4:	f006 f951 	bl	800844a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f006 f93b 	bl	8008428 <_Znwj>
 80021b2:	4603      	mov	r3, r0
      }
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_ZSt12__relocate_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f848 	bl	8002260 <_ZSt12__niter_baseIPdET_S1_>
 80021d0:	4604      	mov	r4, r0
 80021d2:	68b8      	ldr	r0, [r7, #8]
 80021d4:	f000 f844 	bl	8002260 <_ZSt12__niter_baseIPdET_S1_>
 80021d8:	4605      	mov	r5, r0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f840 	bl	8002260 <_ZSt12__niter_baseIPdET_S1_>
 80021e0:	4602      	mov	r2, r0
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	4629      	mov	r1, r5
 80021e6:	4620      	mov	r0, r4
 80021e8:	f000 f89c 	bl	8002324 <_ZSt14__relocate_a_1IddENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80021ec:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bdb0      	pop	{r4, r5, r7, pc}

080021f6 <_ZSt4moveIRPdEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_ZSt18uninitialized_copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002218:	2301      	movs	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f89d 	bl	8002360 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPdES3_EET0_T_S6_S5_>
 8002226:	4603      	mov	r3, r0
    }
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fee5 	bl	800200c <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8002242:	4603      	mov	r3, r0
 8002244:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4619      	mov	r1, r3
 800224c:	2008      	movs	r0, #8
 800224e:	f7fe fe87 	bl	8000f60 <_ZnwjPv>
 8002252:	4603      	mov	r3, r0
 8002254:	e9c3 4500 	strd	r4, r5, [r3]
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bdb0      	pop	{r4, r5, r7, pc}

08002260 <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <_ZSt23__copy_move_backward_a1ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f87a 	bl	8002380 <_ZSt23__copy_move_backward_a2ILb1EPdS0_ET1_T0_S2_S1_>
 800228c:	4603      	mov	r3, r0
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
    { return __res; }
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 80022ae:	b480      	push	{r7}
 80022b0:	b087      	sub	sp, #28
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (; __first != __last; ++__first)
 80022c4:	e007      	b.n	80022d6 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022cc:	e9c1 2300 	strd	r2, r3, [r1]
      for (; __first != __last; ++__first)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3308      	adds	r3, #8
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d1f3      	bne.n	80022c6 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x18>
    }
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPdjdEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f84f 	bl	80023a0 <_ZSt6fill_nIPdjdET_S1_T0_RKT1_>
 8002302:	4603      	mov	r3, r0
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff1c 	bl	8002152 <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 800231a:	4603      	mov	r3, r0
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZSt14__relocate_a_1IddENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	10db      	asrs	r3, r3, #3
 800233a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	dd06      	ble.n	8002350 <_ZSt14__relocate_a_1IddENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	461a      	mov	r2, r3
 8002348:	68f9      	ldr	r1, [r7, #12]
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f007 f9e8 	bl	8009720 <memmove>
      return __result + __count;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
    }
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPdES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f830 	bl	80023d6 <_ZSt4copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>
 8002376:	4603      	mov	r3, r0
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_ZSt23__copy_move_backward_a2ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f838 	bl	8002406 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_>
 8002396:	4603      	mov	r3, r0
    }
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_ZSt6fill_nIPdjdET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80023ac:	68fc      	ldr	r4, [r7, #12]
 80023ae:	68b8      	ldr	r0, [r7, #8]
 80023b0:	f7fe fdcb 	bl	8000f4a <_ZSt17__size_to_integerj>
 80023b4:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f845 	bl	800244a <_ZSt19__iterator_categoryIPdENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80023c0:	4633      	mov	r3, r6
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4629      	mov	r1, r5
 80023c6:	4620      	mov	r0, r4
 80023c8:	f000 f84a 	bl	8002460 <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag>
 80023cc:	4603      	mov	r3, r0
    }
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023d6 <_ZSt4copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80023d6:	b590      	push	{r4, r7, lr}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f859 	bl	800249a <_ZSt12__miter_baseIPdEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80023e8:	4604      	mov	r4, r0
 80023ea:	68b8      	ldr	r0, [r7, #8]
 80023ec:	f000 f855 	bl	800249a <_ZSt12__miter_baseIPdEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80023f0:	4603      	mov	r3, r0
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4619      	mov	r1, r3
 80023f6:	4620      	mov	r0, r4
 80023f8:	f000 f860 	bl	80024bc <_ZSt13__copy_move_aILb1EPdS0_ET1_T0_S2_S1_>
 80023fc:	4603      	mov	r3, r0
    }
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}

08002406 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	10db      	asrs	r3, r3, #3
 800241a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	425b      	negs	r3, r3
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	18d0      	adds	r0, r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	461a      	mov	r2, r3
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	f007 f974 	bl	8009720 <memmove>
	  return __result - _Num;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	425b      	negs	r3, r3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
	}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_ZSt19__iterator_categoryIPdENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002452:	bf00      	nop
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	e00c      	b.n	8002492 <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4619      	mov	r1, r3
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff fe0f 	bl	80020a8 <_ZSt8__fill_aIPddEvT_S1_RKT0_>
      return __first + __n;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4413      	add	r3, r2
    }
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <_ZSt12__miter_baseIPdEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f82c 	bl	8002502 <_ZNKSt13move_iteratorIPdE4baseEv>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fdcd 	bl	800204c <_ZSt12__miter_baseIPdET_S1_>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZSt13__copy_move_aILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80024bc:	b5b0      	push	{r4, r5, r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff fec9 	bl	8002260 <_ZSt12__niter_baseIPdET_S1_>
 80024ce:	4604      	mov	r4, r0
 80024d0:	68b8      	ldr	r0, [r7, #8]
 80024d2:	f7ff fec5 	bl	8002260 <_ZSt12__niter_baseIPdET_S1_>
 80024d6:	4605      	mov	r5, r0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fec0 	bl	8002260 <_ZSt12__niter_baseIPdET_S1_>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4629      	mov	r1, r5
 80024e6:	4620      	mov	r0, r4
 80024e8:	f000 f817 	bl	800251a <_ZSt14__copy_move_a1ILb1EPdS0_ET1_T0_S2_S1_>
 80024ec:	4602      	mov	r2, r0
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fecf 	bl	8002296 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 80024f8:	4603      	mov	r3, r0
    }
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bdb0      	pop	{r4, r5, r7, pc}

08002502 <_ZNKSt13move_iteratorIPdE4baseEv>:
      base() const
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_ZSt14__copy_move_a1ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f805 	bl	800253a <_ZSt14__copy_move_a2ILb1EPdS0_ET1_T0_S2_S1_>
 8002530:	4603      	mov	r3, r0
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_ZSt14__copy_move_a2ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f805 	bl	800255a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8002550:	4603      	mov	r3, r0
    }
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	10db      	asrs	r3, r3, #3
 800256e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	461a      	mov	r2, r3
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f007 f8ce 	bl	8009720 <memmove>
	  return __result + _Num;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
	}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZN17HallEncoderDriver10get_thetadEv>:
 */
#include "hall_encoder.h"



double HallEncoderDriver::get_thetad(){
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
	return 0;
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80025a4:	eeb0 0a47 	vmov.f32	s0, s14
 80025a8:	eef0 0a67 	vmov.f32	s1, s15
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TIM2->CCR1 = 17895697;
 80025b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <main+0x40>)
 80025be:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c0:	f000 ff6d 	bl	800349e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c4:	f000 f818 	bl	80025f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c8:	f000 fb0a 	bl	8002be0 <MX_GPIO_Init>
  MX_DMA_Init();
 80025cc:	f000 fade 	bl	8002b8c <MX_DMA_Init>
  MX_FDCAN1_Init();
 80025d0:	f000 f95c 	bl	800288c <MX_FDCAN1_Init>
  MX_ADC1_Init();
 80025d4:	f000 f85c 	bl	8002690 <MX_ADC1_Init>
  MX_SPI3_Init();
 80025d8:	f000 f99e 	bl	8002918 <MX_SPI3_Init>
  MX_TIM3_Init();
 80025dc:	f000 fa4e 	bl	8002a7c <MX_TIM3_Init>
  MX_ADC2_Init();
 80025e0:	f000 f8ee 	bl	80027c0 <MX_ADC2_Init>
  MX_TIM2_Init();
 80025e4:	f000 f9d6 	bl	8002994 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // write voltage for 2 secs

  setup();
 80025e8:	f000 fb6e 	bl	8002cc8 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80025ec:	f000 fb90 	bl	8002d10 <loop>
 80025f0:	e7fc      	b.n	80025ec <main+0x38>
 80025f2:	bf00      	nop
 80025f4:	01111111 	.word	0x01111111

080025f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b094      	sub	sp, #80	; 0x50
 80025fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025fe:	f107 0318 	add.w	r3, r7, #24
 8002602:	2238      	movs	r2, #56	; 0x38
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f007 f8a4 	bl	8009754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	60da      	str	r2, [r3, #12]
 8002618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800261a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800261e:	f003 fb01 	bl	8005c24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002622:	2302      	movs	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800262c:	2340      	movs	r3, #64	; 0x40
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002630:	2302      	movs	r3, #2
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002634:	2302      	movs	r3, #2
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002638:	2301      	movs	r3, #1
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800263c:	2308      	movs	r3, #8
 800263e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002640:	2302      	movs	r3, #2
 8002642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002644:	2302      	movs	r3, #2
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002648:	2302      	movs	r3, #2
 800264a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264c:	f107 0318 	add.w	r3, r7, #24
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fb9b 	bl	8005d8c <HAL_RCC_OscConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800265c:	f000 fb2e 	bl	8002cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002660:	230f      	movs	r3, #15
 8002662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002664:	2303      	movs	r3, #3
 8002666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	2102      	movs	r1, #2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fe9f 	bl	80063bc <HAL_RCC_ClockConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002684:	f000 fb1a 	bl	8002cbc <Error_Handler>
  }
}
 8002688:	bf00      	nop
 800268a:	3750      	adds	r7, #80	; 0x50
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	; 0x30
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2220      	movs	r2, #32
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f007 f853 	bl	8009754 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80026ae:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026be:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026c4:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80026ca:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026d8:	2208      	movs	r2, #8
 80026da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026dc:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026de:	2200      	movs	r2, #0
 80026e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026e2:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80026e8:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026ea:	2203      	movs	r2, #3
 80026ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026fc:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <MX_ADC1_Init+0x120>)
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002702:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <MX_ADC1_Init+0x120>)
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <MX_ADC1_Init+0x120>)
 800270c:	2200      	movs	r2, #0
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <MX_ADC1_Init+0x120>)
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002718:	4825      	ldr	r0, [pc, #148]	; (80027b0 <MX_ADC1_Init+0x120>)
 800271a:	f001 f99b 	bl	8003a54 <HAL_ADC_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002724:	f000 faca 	bl	8002cbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800272c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	481f      	ldr	r0, [pc, #124]	; (80027b0 <MX_ADC1_Init+0x120>)
 8002734:	f002 fa8c 	bl	8004c50 <HAL_ADCEx_MultiModeConfigChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800273e:	f000 fabd 	bl	8002cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002742:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <MX_ADC1_Init+0x124>)
 8002744:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002746:	2306      	movs	r3, #6
 8002748:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800274a:	2306      	movs	r3, #6
 800274c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800274e:	237f      	movs	r3, #127	; 0x7f
 8002750:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002752:	2304      	movs	r3, #4
 8002754:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4814      	ldr	r0, [pc, #80]	; (80027b0 <MX_ADC1_Init+0x120>)
 8002760:	f001 fc2c 	bl	8003fbc <HAL_ADC_ConfigChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800276a:	f000 faa7 	bl	8002cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <MX_ADC1_Init+0x128>)
 8002770:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002772:	230c      	movs	r3, #12
 8002774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4619      	mov	r1, r3
 800277a:	480d      	ldr	r0, [pc, #52]	; (80027b0 <MX_ADC1_Init+0x120>)
 800277c:	f001 fc1e 	bl	8003fbc <HAL_ADC_ConfigChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002786:	f000 fa99 	bl	8002cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <MX_ADC1_Init+0x12c>)
 800278c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800278e:	2312      	movs	r3, #18
 8002790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4806      	ldr	r0, [pc, #24]	; (80027b0 <MX_ADC1_Init+0x120>)
 8002798:	f001 fc10 	bl	8003fbc <HAL_ADC_ConfigChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80027a2:	f000 fa8b 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	3730      	adds	r7, #48	; 0x30
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200000d8 	.word	0x200000d8
 80027b4:	19200040 	.word	0x19200040
 80027b8:	1d500080 	.word	0x1d500080
 80027bc:	21800100 	.word	0x21800100

080027c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027c6:	463b      	mov	r3, r7
 80027c8:	2220      	movs	r2, #32
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 ffc1 	bl	8009754 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80027d2:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <MX_ADC2_Init+0xc0>)
 80027d4:	4a2b      	ldr	r2, [pc, #172]	; (8002884 <MX_ADC2_Init+0xc4>)
 80027d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <MX_ADC2_Init+0xc0>)
 80027da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <MX_ADC2_Init+0xc0>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027e6:	4b26      	ldr	r3, [pc, #152]	; (8002880 <MX_ADC2_Init+0xc0>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <MX_ADC2_Init+0xc0>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027f2:	4b23      	ldr	r3, [pc, #140]	; (8002880 <MX_ADC2_Init+0xc0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027f8:	4b21      	ldr	r3, [pc, #132]	; (8002880 <MX_ADC2_Init+0xc0>)
 80027fa:	2204      	movs	r2, #4
 80027fc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <MX_ADC2_Init+0xc0>)
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002804:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <MX_ADC2_Init+0xc0>)
 8002806:	2200      	movs	r2, #0
 8002808:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <MX_ADC2_Init+0xc0>)
 800280c:	2201      	movs	r2, #1
 800280e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <MX_ADC2_Init+0xc0>)
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <MX_ADC2_Init+0xc0>)
 800281a:	2200      	movs	r2, #0
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800281e:	4b18      	ldr	r3, [pc, #96]	; (8002880 <MX_ADC2_Init+0xc0>)
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <MX_ADC2_Init+0xc0>)
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <MX_ADC2_Init+0xc0>)
 800282e:	2200      	movs	r2, #0
 8002830:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <MX_ADC2_Init+0xc0>)
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800283a:	4811      	ldr	r0, [pc, #68]	; (8002880 <MX_ADC2_Init+0xc0>)
 800283c:	f001 f90a 	bl	8003a54 <HAL_ADC_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002846:	f000 fa39 	bl	8002cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <MX_ADC2_Init+0xc8>)
 800284c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800284e:	2306      	movs	r3, #6
 8002850:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002856:	237f      	movs	r3, #127	; 0x7f
 8002858:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800285a:	2304      	movs	r3, #4
 800285c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002862:	463b      	mov	r3, r7
 8002864:	4619      	mov	r1, r3
 8002866:	4806      	ldr	r0, [pc, #24]	; (8002880 <MX_ADC2_Init+0xc0>)
 8002868:	f001 fba8 	bl	8003fbc <HAL_ADC_ConfigChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002872:	f000 fa23 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002876:	bf00      	nop
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000144 	.word	0x20000144
 8002884:	50000100 	.word	0x50000100
 8002888:	2e300800 	.word	0x2e300800

0800288c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002890:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <MX_FDCAN1_Init+0x84>)
 8002892:	4a20      	ldr	r2, [pc, #128]	; (8002914 <MX_FDCAN1_Init+0x88>)
 8002894:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <MX_FDCAN1_Init+0x84>)
 8002898:	2200      	movs	r2, #0
 800289a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <MX_FDCAN1_Init+0x84>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028bc:	2210      	movs	r2, #16
 80028be:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028c8:	2202      	movs	r2, #2
 80028ca:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028ce:	2202      	movs	r2, #2
 80028d0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028da:	2201      	movs	r2, #1
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <MX_FDCAN1_Init+0x84>)
 80028fe:	f002 fe31 	bl	8005564 <HAL_FDCAN_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002908:	f000 f9d8 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000210 	.word	0x20000210
 8002914:	40006400 	.word	0x40006400

08002918 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <MX_SPI3_Init+0x74>)
 800291e:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <MX_SPI3_Init+0x78>)
 8002920:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <MX_SPI3_Init+0x74>)
 8002924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002928:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <MX_SPI3_Init+0x74>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <MX_SPI3_Init+0x74>)
 8002932:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002936:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <MX_SPI3_Init+0x74>)
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <MX_SPI3_Init+0x74>)
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_SPI3_Init+0x74>)
 8002946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <MX_SPI3_Init+0x74>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_SPI3_Init+0x74>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <MX_SPI3_Init+0x74>)
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MX_SPI3_Init+0x74>)
 8002960:	2200      	movs	r2, #0
 8002962:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <MX_SPI3_Init+0x74>)
 8002966:	2207      	movs	r2, #7
 8002968:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <MX_SPI3_Init+0x74>)
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <MX_SPI3_Init+0x74>)
 8002972:	2208      	movs	r2, #8
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_SPI3_Init+0x74>)
 8002978:	f004 f952 	bl	8006c20 <HAL_SPI_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002982:	f000 f99b 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000274 	.word	0x20000274
 8002990:	40003c00 	.word	0x40003c00

08002994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	; 0x38
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b4:	463b      	mov	r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]
 80029c2:	615a      	str	r2, [r3, #20]
 80029c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029c6:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <MX_TIM2_Init+0xe0>)
 80029c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <MX_TIM2_Init+0xe0>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <MX_TIM2_Init+0xe0>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7.1582788E7;
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <MX_TIM2_Init+0xe0>)
 80029dc:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <MX_TIM2_Init+0xe4>)
 80029de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <MX_TIM2_Init+0xe0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <MX_TIM2_Init+0xe0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029ec:	4821      	ldr	r0, [pc, #132]	; (8002a74 <MX_TIM2_Init+0xe0>)
 80029ee:	f004 f9c2 	bl	8006d76 <HAL_TIM_Base_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80029f8:	f000 f960 	bl	8002cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a06:	4619      	mov	r1, r3
 8002a08:	481a      	ldr	r0, [pc, #104]	; (8002a74 <MX_TIM2_Init+0xe0>)
 8002a0a:	f004 fd63 	bl	80074d4 <HAL_TIM_ConfigClockSource>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a14:	f000 f952 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002a18:	4816      	ldr	r0, [pc, #88]	; (8002a74 <MX_TIM2_Init+0xe0>)
 8002a1a:	f004 fa03 	bl	8006e24 <HAL_TIM_OC_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a24:	f000 f94a 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4619      	mov	r1, r3
 8002a36:	480f      	ldr	r0, [pc, #60]	; (8002a74 <MX_TIM2_Init+0xe0>)
 8002a38:	f005 fc18 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a42:	f000 f93b 	bl	8002cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a46:	2300      	movs	r3, #0
 8002a48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a56:	463b      	mov	r3, r7
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_TIM2_Init+0xe0>)
 8002a5e:	f004 fc23 	bl	80072a8 <HAL_TIM_OC_ConfigChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002a68:	f000 f928 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a6c:	bf00      	nop
 8002a6e:	3738      	adds	r7, #56	; 0x38
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	200002d8 	.word	0x200002d8
 8002a78:	04444444 	.word	0x04444444

08002a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a82:	f107 0320 	add.w	r3, r7, #32
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aa8:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002aaa:	4a37      	ldr	r2, [pc, #220]	; (8002b88 <MX_TIM3_Init+0x10c>)
 8002aac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002aae:	4b35      	ldr	r3, [pc, #212]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002aba:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ace:	482d      	ldr	r0, [pc, #180]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002ad0:	f004 f951 	bl	8006d76 <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002ada:	f000 f8ef 	bl	8002cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ae4:	f107 0320 	add.w	r3, r7, #32
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4826      	ldr	r0, [pc, #152]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002aec:	f004 fcf2 	bl	80074d4 <HAL_TIM_ConfigClockSource>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002af6:	f000 f8e1 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002afa:	4822      	ldr	r0, [pc, #136]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002afc:	f004 f9f3 	bl	8006ee6 <HAL_TIM_IC_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002b06:	f000 f8d9 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	481a      	ldr	r0, [pc, #104]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002b1a:	f005 fba7 	bl	800826c <HAL_TIMEx_MasterConfigSynchronization>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8002b24:	f000 f8ca 	bl	8002cbc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4811      	ldr	r0, [pc, #68]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002b40:	f004 fc2c 	bl	800739c <HAL_TIM_IC_ConfigChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002b4a:	f000 f8b7 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2204      	movs	r2, #4
 8002b52:	4619      	mov	r1, r3
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002b56:	f004 fc21 	bl	800739c <HAL_TIM_IC_ConfigChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8002b60:	f000 f8ac 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	2208      	movs	r2, #8
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4806      	ldr	r0, [pc, #24]	; (8002b84 <MX_TIM3_Init+0x108>)
 8002b6c:	f004 fc16 	bl	800739c <HAL_TIM_IC_ConfigChannel>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8002b76:	f000 f8a1 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	3730      	adds	r7, #48	; 0x30
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000324 	.word	0x20000324
 8002b88:	40000400 	.word	0x40000400

08002b8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <MX_DMA_Init+0x50>)
 8002b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <MX_DMA_Init+0x50>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6493      	str	r3, [r2, #72]	; 0x48
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <MX_DMA_Init+0x50>)
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002baa:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <MX_DMA_Init+0x50>)
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <MX_DMA_Init+0x50>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6493      	str	r3, [r2, #72]	; 0x48
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <MX_DMA_Init+0x50>)
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	200b      	movs	r0, #11
 8002bc8:	f002 fa25 	bl	8005016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bcc:	200b      	movs	r0, #11
 8002bce:	f002 fa3c 	bl	800504a <HAL_NVIC_EnableIRQ>

}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000

08002be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	60da      	str	r2, [r3, #12]
 8002bf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	4a2e      	ldr	r2, [pc, #184]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c02:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0e:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	4a28      	ldr	r2, [pc, #160]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c1a:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <MX_GPIO_Init+0xd4>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 8002c56:	2200      	movs	r2, #0
 8002c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c60:	f002 ffc8 	bl	8005bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2147      	movs	r1, #71	; 0x47
 8002c68:	4813      	ldr	r0, [pc, #76]	; (8002cb8 <MX_GPIO_Init+0xd8>)
 8002c6a:	f002 ffc3 	bl	8005bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 8002c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c74:	2301      	movs	r3, #1
 8002c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8a:	f002 fe31 	bl	80058f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_OUTPUT_Pin H2_OUTPUT_Pin H3_OUTPUT_Pin PD6 */
  GPIO_InitStruct.Pin = H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6;
 8002c8e:	2347      	movs	r3, #71	; 0x47
 8002c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c9e:	f107 0314 	add.w	r3, r7, #20
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <MX_GPIO_Init+0xd8>)
 8002ca6:	f002 fe23 	bl	80058f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002caa:	bf00      	nop
 8002cac:	3728      	adds	r7, #40	; 0x28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	48000c00 	.word	0x48000c00

08002cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc0:	b672      	cpsid	i
}
 8002cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <Error_Handler+0x8>
	...

08002cc8 <setup>:
#include "stm32g4xx_hal.h"

extern ADC_HandleTypeDef hadc1;
uint64_t ADC_count = 0;

void setup() {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0

	CurrSensDriver::ADC_handle = &hadc1;
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <setup+0x3c>)
 8002cce:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <setup+0x40>)
 8002cd0:	601a      	str	r2, [r3, #0]
	HAL_ADCEx_Calibration_Start(CurrSensDriver::ADC_handle, ADC_SINGLE_ENDED);
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <setup+0x3c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	217f      	movs	r1, #127	; 0x7f
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 ff57 	bl	8004b8c <HAL_ADCEx_Calibration_Start>

	// Enable the gate driver
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2140      	movs	r1, #64	; 0x40
 8002ce2:	480a      	ldr	r0, [pc, #40]	; (8002d0c <setup+0x44>)
 8002ce4:	f002 ff86 	bl	8005bf4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002ce8:	200a      	movs	r0, #10
 8002cea:	f000 fc49 	bl	8003580 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8002cee:	2201      	movs	r2, #1
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4806      	ldr	r0, [pc, #24]	; (8002d0c <setup+0x44>)
 8002cf4:	f002 ff7e 	bl	8005bf4 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8002cf8:	200a      	movs	r0, #10
 8002cfa:	f000 fc41 	bl	8003580 <HAL_Delay>

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000007c 	.word	0x2000007c
 8002d08:	200000d8 	.word	0x200000d8
 8002d0c:	48000c00 	.word	0x48000c00

08002d10 <loop>:

void loop() {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0

//	HAL_ADC_Start_IT(CurrSensDriver::ADC_handle);
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 8002d16:	463b      	mov	r3, r7
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd ff55 	bl	8000bc8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>
	HAL_Delay(1000);
 8002d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d22:	f000 fc2d 	bl	8003580 <HAL_Delay>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_Z7tf_parkddd>:
 *      Author: Sashreek and Jonah
 */
#include "math_utils.h"
#include <cmath>

ParkOut tf_park (double ialpha, double ibeta, double theta_d){
 8002d2e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d32:	b092      	sub	sp, #72	; 0x48
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	ed87 0b08 	vstr	d0, [r7, #32]
 8002d3a:	ed87 1b06 	vstr	d1, [r7, #24]
 8002d3e:	ed87 2b04 	vstr	d2, [r7, #16]
	ParkOut output;
	output.id = ialpha * cos(theta_d) + ibeta * sin(theta_d);
 8002d42:	ed97 0b04 	vldr	d0, [r7, #16]
 8002d46:	f005 fb93 	bl	8008470 <cos>
 8002d4a:	ec51 0b10 	vmov	r0, r1, d0
 8002d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d52:	f7fd fc1d 	bl	8000590 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4690      	mov	r8, r2
 8002d5c:	4699      	mov	r9, r3
 8002d5e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002d62:	f005 fbd9 	bl	8008518 <sin>
 8002d66:	ec51 0b10 	vmov	r0, r1, d0
 8002d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6e:	f7fd fc0f 	bl	8000590 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4640      	mov	r0, r8
 8002d78:	4649      	mov	r1, r9
 8002d7a:	f7fd fa53 	bl	8000224 <__adddf3>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.iq = -ialpha * sin(theta_d) + ibeta * cos(theta_d);
 8002d86:	6a3c      	ldr	r4, [r7, #32]
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002d8e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002d92:	f005 fbc1 	bl	8008518 <sin>
 8002d96:	ec53 2b10 	vmov	r2, r3, d0
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	f7fd fbf7 	bl	8000590 <__aeabi_dmul>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4614      	mov	r4, r2
 8002da8:	461d      	mov	r5, r3
 8002daa:	ed97 0b04 	vldr	d0, [r7, #16]
 8002dae:	f005 fb5f 	bl	8008470 <cos>
 8002db2:	ec51 0b10 	vmov	r0, r1, d0
 8002db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dba:	f7fd fbe9 	bl	8000590 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fa2d 	bl	8000224 <__adddf3>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 8002dd2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002de0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002de4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002de8:	ec41 0b16 	vmov	d6, r0, r1
 8002dec:	ec43 2b17 	vmov	d7, r2, r3

}
 8002df0:	eeb0 0a46 	vmov.f32	s0, s12
 8002df4:	eef0 0a66 	vmov.f32	s1, s13
 8002df8:	eeb0 1a47 	vmov.f32	s2, s14
 8002dfc:	eef0 1a67 	vmov.f32	s3, s15
 8002e00:	3748      	adds	r7, #72	; 0x48
 8002e02:	46bd      	mov	sp, r7
 8002e04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002e08 <_Z9tf_clarkeddd>:
	output.vbeta = vd * sin(theta_d) + vq * cos(theta_d);
	return output;
}

//Clarke transform
ClarkeOut tf_clarke (double ia, double ib, double ic){
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b092      	sub	sp, #72	; 0x48
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	ed87 0b08 	vstr	d0, [r7, #32]
 8002e12:	ed87 1b06 	vstr	d1, [r7, #24]
 8002e16:	ed87 2b04 	vstr	d2, [r7, #16]
	ClarkeOut output;
	output.ialpha = (3.0/2.0) * ia;
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <_Z9tf_clarkeddd+0xa0>)
 8002e20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e24:	f7fd fbb4 	bl	8000590 <__aeabi_dmul>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.ibeta = (sqrt(3)/2) * ib - (sqrt(3)/2) * ic;
 8002e30:	a31b      	add	r3, pc, #108	; (adr r3, 8002ea0 <_Z9tf_clarkeddd+0x98>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e3a:	f7fd fba9 	bl	8000590 <__aeabi_dmul>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4614      	mov	r4, r2
 8002e44:	461d      	mov	r5, r3
 8002e46:	a316      	add	r3, pc, #88	; (adr r3, 8002ea0 <_Z9tf_clarkeddd+0x98>)
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e50:	f7fd fb9e 	bl	8000590 <__aeabi_dmul>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4620      	mov	r0, r4
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	f7fd f9e0 	bl	8000220 <__aeabi_dsub>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 8002e68:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e7e:	ec41 0b16 	vmov	d6, r0, r1
 8002e82:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e86:	eeb0 0a46 	vmov.f32	s0, s12
 8002e8a:	eef0 0a66 	vmov.f32	s1, s13
 8002e8e:	eeb0 1a47 	vmov.f32	s2, s14
 8002e92:	eef0 1a67 	vmov.f32	s3, s15
 8002e96:	3748      	adds	r7, #72	; 0x48
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9c:	f3af 8000 	nop.w
 8002ea0:	e8584caa 	.word	0xe8584caa
 8002ea4:	3febb67a 	.word	0x3febb67a
 8002ea8:	3ff80000 	.word	0x3ff80000

08002eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_MspInit+0x44>)
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <HAL_MspInit+0x44>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ee2:	f002 ff43 	bl	8005d6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0a2      	sub	sp, #136	; 0x88
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f0c:	f107 0320 	add.w	r3, r7, #32
 8002f10:	2254      	movs	r2, #84	; 0x54
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f006 fc1d 	bl	8009754 <memset>
  if(hadc->Instance==ADC1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f22:	f040 8083 	bne.w	800302c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002f2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f30:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f32:	f107 0320 	add.w	r3, r7, #32
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fc24 	bl	8006784 <HAL_RCCEx_PeriphCLKConfig>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002f42:	f7ff febb 	bl	8002cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f46:	4b69      	ldr	r3, [pc, #420]	; (80030ec <HAL_ADC_MspInit+0x1f8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	4a67      	ldr	r2, [pc, #412]	; (80030ec <HAL_ADC_MspInit+0x1f8>)
 8002f4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f50:	4b66      	ldr	r3, [pc, #408]	; (80030ec <HAL_ADC_MspInit+0x1f8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10b      	bne.n	8002f70 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f58:	4b65      	ldr	r3, [pc, #404]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	4a64      	ldr	r2, [pc, #400]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8002f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f64:	4b62      	ldr	r3, [pc, #392]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f70:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	4a5e      	ldr	r2, [pc, #376]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f7c:	4b5c      	ldr	r3, [pc, #368]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8002f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f94:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8002f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4850      	ldr	r0, [pc, #320]	; (80030f4 <HAL_ADC_MspInit+0x200>)
 8002fb4:	f002 fc9c 	bl	80058f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fb8:	230c      	movs	r3, #12
 8002fba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fce:	f002 fc8f 	bl	80058f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002fd2:	4b49      	ldr	r3, [pc, #292]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8002fd4:	4a49      	ldr	r2, [pc, #292]	; (80030fc <HAL_ADC_MspInit+0x208>)
 8002fd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002fd8:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8002fda:	2205      	movs	r2, #5
 8002fdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fde:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe4:	4b44      	ldr	r3, [pc, #272]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fea:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ff0:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8002ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8002ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ffe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003000:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003006:	4b3c      	ldr	r3, [pc, #240]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8003008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800300c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800300e:	483a      	ldr	r0, [pc, #232]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8003010:	f002 f836 	bl	8005080 <HAL_DMA_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 800301a:	f7ff fe4f 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
 8003024:	4a34      	ldr	r2, [pc, #208]	; (80030f8 <HAL_ADC_MspInit+0x204>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800302a:	e05a      	b.n	80030e2 <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a33      	ldr	r2, [pc, #204]	; (8003100 <HAL_ADC_MspInit+0x20c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d155      	bne.n	80030e2 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800303c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003040:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003042:	f107 0320 	add.w	r3, r7, #32
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fb9c 	bl	8006784 <HAL_RCCEx_PeriphCLKConfig>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_ADC_MspInit+0x162>
      Error_Handler();
 8003052:	f7ff fe33 	bl	8002cbc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003056:	4b25      	ldr	r3, [pc, #148]	; (80030ec <HAL_ADC_MspInit+0x1f8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a23      	ldr	r2, [pc, #140]	; (80030ec <HAL_ADC_MspInit+0x1f8>)
 800305e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <HAL_ADC_MspInit+0x1f8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10b      	bne.n	8003080 <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003068:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 800306a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306c:	4a20      	ldr	r2, [pc, #128]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 800306e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8003076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8003082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003084:	4a1a      	ldr	r2, [pc, #104]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 800309a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_ADC_MspInit+0x1fc>)
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030b0:	2303      	movs	r3, #3
 80030b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030b4:	2303      	movs	r3, #3
 80030b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030c0:	4619      	mov	r1, r3
 80030c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c6:	f002 fc13 	bl	80058f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_TEMP_Pin;
 80030ca:	2320      	movs	r3, #32
 80030cc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ce:	2303      	movs	r3, #3
 80030d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(MOTOR_TEMP_GPIO_Port, &GPIO_InitStruct);
 80030d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030da:	4619      	mov	r1, r3
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <HAL_ADC_MspInit+0x200>)
 80030de:	f002 fc07 	bl	80058f0 <HAL_GPIO_Init>
}
 80030e2:	bf00      	nop
 80030e4:	3788      	adds	r7, #136	; 0x88
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000370 	.word	0x20000370
 80030f0:	40021000 	.word	0x40021000
 80030f4:	48000800 	.word	0x48000800
 80030f8:	200001b0 	.word	0x200001b0
 80030fc:	40020008 	.word	0x40020008
 8003100:	50000100 	.word	0x50000100

08003104 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b09e      	sub	sp, #120	; 0x78
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800311c:	f107 0310 	add.w	r3, r7, #16
 8003120:	2254      	movs	r2, #84	; 0x54
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f006 fb15 	bl	8009754 <memset>
  if(hfdcan->Instance==FDCAN1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a20      	ldr	r2, [pc, #128]	; (80031b0 <HAL_FDCAN_MspInit+0xac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d139      	bne.n	80031a8 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003138:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800313a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003140:	f107 0310 	add.w	r3, r7, #16
 8003144:	4618      	mov	r0, r3
 8003146:	f003 fb1d 	bl	8006784 <HAL_RCCEx_PeriphCLKConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003150:	f7ff fdb4 	bl	8002cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_FDCAN_MspInit+0xb0>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	4a16      	ldr	r2, [pc, #88]	; (80031b4 <HAL_FDCAN_MspInit+0xb0>)
 800315a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800315e:	6593      	str	r3, [r2, #88]	; 0x58
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_FDCAN_MspInit+0xb0>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_FDCAN_MspInit+0xb0>)
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <HAL_FDCAN_MspInit+0xb0>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_FDCAN_MspInit+0xb0>)
 800317a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003184:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003188:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003196:	2309      	movs	r3, #9
 8003198:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800319e:	4619      	mov	r1, r3
 80031a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a4:	f002 fba4 	bl	80058f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80031a8:	bf00      	nop
 80031aa:	3778      	adds	r7, #120	; 0x78
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40006400 	.word	0x40006400
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_SPI_MspInit+0x7c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d128      	bne.n	800322c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_SPI_MspInit+0x80>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	4a16      	ldr	r2, [pc, #88]	; (8003238 <HAL_SPI_MspInit+0x80>)
 80031e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e4:	6593      	str	r3, [r2, #88]	; 0x58
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <HAL_SPI_MspInit+0x80>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_SPI_MspInit+0x80>)
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_SPI_MspInit+0x80>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_SPI_MspInit+0x80>)
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800320a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800320e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003218:	2300      	movs	r3, #0
 800321a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800321c:	2306      	movs	r3, #6
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	4619      	mov	r1, r3
 8003226:	4805      	ldr	r0, [pc, #20]	; (800323c <HAL_SPI_MspInit+0x84>)
 8003228:	f002 fb62 	bl	80058f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800322c:	bf00      	nop
 800322e:	3728      	adds	r7, #40	; 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40003c00 	.word	0x40003c00
 8003238:	40021000 	.word	0x40021000
 800323c:	48000800 	.word	0x48000800

08003240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003260:	d114      	bne.n	800328c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6593      	str	r3, [r2, #88]	; 0x58
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	2100      	movs	r1, #0
 800327e:	201c      	movs	r0, #28
 8003280:	f001 fec9 	bl	8005016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003284:	201c      	movs	r0, #28
 8003286:	f001 fee0 	bl	800504a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800328a:	e02d      	b.n	80032e8 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_TIM_Base_MspInit+0xb4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d128      	bne.n	80032e8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_TIM_Base_MspInit+0xb0>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <HAL_TIM_Base_MspInit+0xb0>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	6593      	str	r3, [r2, #88]	; 0x58
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <HAL_TIM_Base_MspInit+0xb0>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_TIM_Base_MspInit+0xb0>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <HAL_TIM_Base_MspInit+0xb0>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_TIM_Base_MspInit+0xb0>)
 80032bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL1_INPUT_Pin|HALL_2_INPUT_Pin|HALL_3_INPUT_Pin;
 80032c6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80032ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	2300      	movs	r3, #0
 80032d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032d8:	2302      	movs	r3, #2
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4619      	mov	r1, r3
 80032e2:	4805      	ldr	r0, [pc, #20]	; (80032f8 <HAL_TIM_Base_MspInit+0xb8>)
 80032e4:	f002 fb04 	bl	80058f0 <HAL_GPIO_Init>
}
 80032e8:	bf00      	nop
 80032ea:	3728      	adds	r7, #40	; 0x28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40000400 	.word	0x40000400
 80032f8:	48000800 	.word	0x48000800

080032fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003300:	e7fe      	b.n	8003300 <NMI_Handler+0x4>

08003302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003306:	e7fe      	b.n	8003306 <HardFault_Handler+0x4>

08003308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800330c:	e7fe      	b.n	800330c <MemManage_Handler+0x4>

0800330e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003312:	e7fe      	b.n	8003312 <BusFault_Handler+0x4>

08003314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003318:	e7fe      	b.n	8003318 <UsageFault_Handler+0x4>

0800331a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800331a:	b480      	push	{r7}
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003348:	f000 f8fc 	bl	8003544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}

08003350 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <DMA1_Channel1_IRQHandler+0x10>)
 8003356:	f001 ffb6 	bl	80052c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200001b0 	.word	0x200001b0

08003364 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <TIM2_IRQHandler+0x10>)
 800336a:	f003 fe1d 	bl	8006fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200002d8 	.word	0x200002d8

08003378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return 1;
 800337c:	2301      	movs	r3, #1
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_kill>:

int _kill(int pid, int sig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003392:	f006 fa3b 	bl	800980c <__errno>
 8003396:	4603      	mov	r3, r0
 8003398:	2216      	movs	r2, #22
 800339a:	601a      	str	r2, [r3, #0]
  return -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_exit>:

void _exit (int status)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ffe7 	bl	8003388 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ba:	e7fe      	b.n	80033ba <_exit+0x12>

080033bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <_sbrk+0x5c>)
 80033c6:	4b15      	ldr	r3, [pc, #84]	; (800341c <_sbrk+0x60>)
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <_sbrk+0x64>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <_sbrk+0x64>)
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <_sbrk+0x68>)
 80033dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <_sbrk+0x64>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d207      	bcs.n	80033fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033ec:	f006 fa0e 	bl	800980c <__errno>
 80033f0:	4603      	mov	r3, r0
 80033f2:	220c      	movs	r2, #12
 80033f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	e009      	b.n	8003410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <_sbrk+0x64>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <_sbrk+0x64>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	4a05      	ldr	r2, [pc, #20]	; (8003420 <_sbrk+0x64>)
 800340c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20020000 	.word	0x20020000
 800341c:	00000400 	.word	0x00000400
 8003420:	20000374 	.word	0x20000374
 8003424:	200004c8 	.word	0x200004c8

08003428 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <SystemInit+0x20>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	4a05      	ldr	r2, [pc, #20]	; (8003448 <SystemInit+0x20>)
 8003434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800344c:	480d      	ldr	r0, [pc, #52]	; (8003484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800344e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003450:	480d      	ldr	r0, [pc, #52]	; (8003488 <LoopForever+0x6>)
  ldr r1, =_edata
 8003452:	490e      	ldr	r1, [pc, #56]	; (800348c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003454:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <LoopForever+0xe>)
  movs r3, #0
 8003456:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003458:	e002      	b.n	8003460 <LoopCopyDataInit>

0800345a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800345a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800345c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800345e:	3304      	adds	r3, #4

08003460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003464:	d3f9      	bcc.n	800345a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003466:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003468:	4c0b      	ldr	r4, [pc, #44]	; (8003498 <LoopForever+0x16>)
  movs r3, #0
 800346a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800346c:	e001      	b.n	8003472 <LoopFillZerobss>

0800346e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800346e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003470:	3204      	adds	r2, #4

08003472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003474:	d3fb      	bcc.n	800346e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003476:	f7ff ffd7 	bl	8003428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800347a:	f006 f9cd 	bl	8009818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800347e:	f7ff f899 	bl	80025b4 <main>

08003482 <LoopForever>:

LoopForever:
    b LoopForever
 8003482:	e7fe      	b.n	8003482 <LoopForever>
  ldr   r0, =_estack
 8003484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800348c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003490:	08009b58 	.word	0x08009b58
  ldr r2, =_sbss
 8003494:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003498:	200004c8 	.word	0x200004c8

0800349c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800349c:	e7fe      	b.n	800349c <ADC1_2_IRQHandler>

0800349e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a8:	2003      	movs	r0, #3
 80034aa:	f001 fda9 	bl	8005000 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ae:	200f      	movs	r0, #15
 80034b0:	f000 f80e 	bl	80034d0 <HAL_InitTick>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	71fb      	strb	r3, [r7, #7]
 80034be:	e001      	b.n	80034c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034c0:	f7ff fcf4 	bl	8002eac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034c4:	79fb      	ldrb	r3, [r7, #7]

}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_InitTick+0x68>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d022      	beq.n	800352a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034e4:	4b15      	ldr	r3, [pc, #84]	; (800353c <HAL_InitTick+0x6c>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <HAL_InitTick+0x68>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 fdb4 	bl	8005066 <HAL_SYSTICK_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10f      	bne.n	8003524 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b0f      	cmp	r3, #15
 8003508:	d809      	bhi.n	800351e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800350a:	2200      	movs	r2, #0
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	f04f 30ff 	mov.w	r0, #4294967295
 8003512:	f001 fd80 	bl	8005016 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_InitTick+0x70>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	e007      	b.n	800352e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
 8003522:	e004      	b.n	800352e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	e001      	b.n	800352e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800352e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000008 	.word	0x20000008
 800353c:	20000000 	.word	0x20000000
 8003540:	20000004 	.word	0x20000004

08003544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_IncTick+0x1c>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_IncTick+0x20>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4413      	add	r3, r2
 8003552:	4a03      	ldr	r2, [pc, #12]	; (8003560 <HAL_IncTick+0x1c>)
 8003554:	6013      	str	r3, [r2, #0]
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20000378 	.word	0x20000378
 8003564:	20000008 	.word	0x20000008

08003568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return uwTick;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_GetTick+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000378 	.word	0x20000378

08003580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003588:	f7ff ffee 	bl	8003568 <HAL_GetTick>
 800358c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d004      	beq.n	80035a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_Delay+0x40>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035a4:	bf00      	nop
 80035a6:	f7ff ffdf 	bl	8003568 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d8f7      	bhi.n	80035a6 <HAL_Delay+0x26>
  {
  }
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000008 	.word	0x20000008

080035c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	609a      	str	r2, [r3, #8]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	461a      	mov	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <LL_ADC_SetOffset+0x44>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	4313      	orrs	r3, r2
 800365c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	03fff000 	.word	0x03fff000

08003674 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3360      	adds	r3, #96	; 0x60
 8003682:	461a      	mov	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3360      	adds	r3, #96	; 0x60
 80036b0:	461a      	mov	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b087      	sub	sp, #28
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3360      	adds	r3, #96	; 0x60
 80036e6:	461a      	mov	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003700:	bf00      	nop
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3360      	adds	r3, #96	; 0x60
 800371c:	461a      	mov	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	431a      	orrs	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	615a      	str	r2, [r3, #20]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3330      	adds	r3, #48	; 0x30
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	4413      	add	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	211f      	movs	r1, #31
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	401a      	ands	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	f003 011f 	and.w	r1, r3, #31
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	431a      	orrs	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b087      	sub	sp, #28
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3314      	adds	r3, #20
 80037f6:	461a      	mov	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	0e5b      	lsrs	r3, r3, #25
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	4413      	add	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	0d1b      	lsrs	r3, r3, #20
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2107      	movs	r1, #7
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	401a      	ands	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0d1b      	lsrs	r3, r3, #20
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	431a      	orrs	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0f      	ldr	r2, [pc, #60]	; (8003888 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d10a      	bne.n	8003866 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385c:	431a      	orrs	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003864:	e00a      	b.n	800387c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003872:	43db      	mvns	r3, r3
 8003874:	401a      	ands	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	407f0000 	.word	0x407f0000

0800388c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 031f 	and.w	r3, r3, #31
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80038b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6093      	str	r3, [r2, #8]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e0:	d101      	bne.n	80038e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003908:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003930:	d101      	bne.n	8003936 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800397c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003980:	f043 0202 	orr.w	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <LL_ADC_IsEnabled+0x18>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <LL_ADC_IsEnabled+0x1a>
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d101      	bne.n	80039d2 <LL_ADC_IsDisableOngoing+0x18>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <LL_ADC_IsDisableOngoing+0x1a>
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039f4:	f043 0204 	orr.w	r2, r3, #4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d101      	bne.n	8003a20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d101      	bne.n	8003a46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e1af      	b.n	8003dce <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fa39 	bl	8002ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff19 	bl	80038cc <LL_ADC_IsDeepPowerDownEnabled>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff feff 	bl	80038a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ff34 	bl	800391c <LL_ADC_IsInternalRegulatorEnabled>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d115      	bne.n	8003ae6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff18 	bl	80038f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ac4:	4b9f      	ldr	r3, [pc, #636]	; (8003d44 <HAL_ADC_Init+0x2f0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	4a9f      	ldr	r2, [pc, #636]	; (8003d48 <HAL_ADC_Init+0x2f4>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ad8:	e002      	b.n	8003ae0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f9      	bne.n	8003ada <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff16 	bl	800391c <LL_ADC_IsInternalRegulatorEnabled>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10d      	bne.n	8003b12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	f043 0210 	orr.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff ff76 	bl	8003a08 <LL_ADC_REG_IsConversionOngoing>
 8003b1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 8148 	bne.w	8003dbc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 8144 	bne.w	8003dbc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b3c:	f043 0202 	orr.w	r2, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff23 	bl	8003994 <LL_ADC_IsEnabled>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d141      	bne.n	8003bd8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b5c:	d004      	beq.n	8003b68 <HAL_ADC_Init+0x114>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7a      	ldr	r2, [pc, #488]	; (8003d4c <HAL_ADC_Init+0x2f8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d10f      	bne.n	8003b88 <HAL_ADC_Init+0x134>
 8003b68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b6c:	f7ff ff12 	bl	8003994 <LL_ADC_IsEnabled>
 8003b70:	4604      	mov	r4, r0
 8003b72:	4876      	ldr	r0, [pc, #472]	; (8003d4c <HAL_ADC_Init+0x2f8>)
 8003b74:	f7ff ff0e 	bl	8003994 <LL_ADC_IsEnabled>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4323      	orrs	r3, r4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e012      	b.n	8003bae <HAL_ADC_Init+0x15a>
 8003b88:	4871      	ldr	r0, [pc, #452]	; (8003d50 <HAL_ADC_Init+0x2fc>)
 8003b8a:	f7ff ff03 	bl	8003994 <LL_ADC_IsEnabled>
 8003b8e:	4604      	mov	r4, r0
 8003b90:	4870      	ldr	r0, [pc, #448]	; (8003d54 <HAL_ADC_Init+0x300>)
 8003b92:	f7ff feff 	bl	8003994 <LL_ADC_IsEnabled>
 8003b96:	4603      	mov	r3, r0
 8003b98:	431c      	orrs	r4, r3
 8003b9a:	486f      	ldr	r0, [pc, #444]	; (8003d58 <HAL_ADC_Init+0x304>)
 8003b9c:	f7ff fefa 	bl	8003994 <LL_ADC_IsEnabled>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4323      	orrs	r3, r4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d012      	beq.n	8003bd8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bba:	d004      	beq.n	8003bc6 <HAL_ADC_Init+0x172>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a62      	ldr	r2, [pc, #392]	; (8003d4c <HAL_ADC_Init+0x2f8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_Init+0x176>
 8003bc6:	4a65      	ldr	r2, [pc, #404]	; (8003d5c <HAL_ADC_Init+0x308>)
 8003bc8:	e000      	b.n	8003bcc <HAL_ADC_Init+0x178>
 8003bca:	4a65      	ldr	r2, [pc, #404]	; (8003d60 <HAL_ADC_Init+0x30c>)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f7ff fcf6 	bl	80035c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7f5b      	ldrb	r3, [r3, #29]
 8003bdc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003be2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003be8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003bee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d106      	bne.n	8003c14 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	045b      	lsls	r3, r3, #17
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d009      	beq.n	8003c30 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	4b4b      	ldr	r3, [pc, #300]	; (8003d64 <HAL_ADC_Init+0x310>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	69b9      	ldr	r1, [r7, #24]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fed2 	bl	8003a08 <LL_ADC_REG_IsConversionOngoing>
 8003c64:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fedf 	bl	8003a2e <LL_ADC_INJ_IsConversionOngoing>
 8003c70:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d17f      	bne.n	8003d78 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d17c      	bne.n	8003d78 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c82:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c8a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c9a:	f023 0302 	bic.w	r3, r3, #2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	69b9      	ldr	r1, [r7, #24]
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d017      	beq.n	8003ce0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003cbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cc8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ccc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6911      	ldr	r1, [r2, #16]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003cde:	e013      	b.n	8003d08 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d12a      	bne.n	8003d68 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d28:	4311      	orrs	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d34:	430a      	orrs	r2, r1
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	e019      	b.n	8003d78 <HAL_ADC_Init+0x324>
 8003d44:	20000000 	.word	0x20000000
 8003d48:	053e2d63 	.word	0x053e2d63
 8003d4c:	50000100 	.word	0x50000100
 8003d50:	50000400 	.word	0x50000400
 8003d54:	50000500 	.word	0x50000500
 8003d58:	50000600 	.word	0x50000600
 8003d5c:	50000300 	.word	0x50000300
 8003d60:	50000700 	.word	0x50000700
 8003d64:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d10c      	bne.n	8003d9a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f023 010f 	bic.w	r1, r3, #15
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	1e5a      	subs	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
 8003d98:	e007      	b.n	8003daa <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 020f 	bic.w	r2, r2, #15
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	f043 0201 	orr.w	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dba:	e007      	b.n	8003dcc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	f043 0210 	orr.w	r2, r3, #16
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3724      	adds	r7, #36	; 0x24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd90      	pop	{r4, r7, pc}
 8003dd6:	bf00      	nop

08003dd8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dec:	d004      	beq.n	8003df8 <HAL_ADC_Start_DMA+0x20>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5a      	ldr	r2, [pc, #360]	; (8003f5c <HAL_ADC_Start_DMA+0x184>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_Start_DMA+0x24>
 8003df8:	4b59      	ldr	r3, [pc, #356]	; (8003f60 <HAL_ADC_Start_DMA+0x188>)
 8003dfa:	e000      	b.n	8003dfe <HAL_ADC_Start_DMA+0x26>
 8003dfc:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_ADC_Start_DMA+0x18c>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fd44 	bl	800388c <LL_ADC_GetMultimode>
 8003e04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fdfc 	bl	8003a08 <LL_ADC_REG_IsConversionOngoing>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 809b 	bne.w	8003f4e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_Start_DMA+0x4e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e096      	b.n	8003f54 <HAL_ADC_Start_DMA+0x17c>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a4d      	ldr	r2, [pc, #308]	; (8003f68 <HAL_ADC_Start_DMA+0x190>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d008      	beq.n	8003e4a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d002      	beq.n	8003e4a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b09      	cmp	r3, #9
 8003e48:	d17a      	bne.n	8003f40 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fcf6 	bl	800483c <ADC_Enable>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d16d      	bne.n	8003f36 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a3a      	ldr	r2, [pc, #232]	; (8003f5c <HAL_ADC_Start_DMA+0x184>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <HAL_ADC_Start_DMA+0xb4>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a3b      	ldr	r2, [pc, #236]	; (8003f6c <HAL_ADC_Start_DMA+0x194>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d002      	beq.n	8003e88 <HAL_ADC_Start_DMA+0xb0>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	e003      	b.n	8003e90 <HAL_ADC_Start_DMA+0xb8>
 8003e88:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <HAL_ADC_Start_DMA+0x198>)
 8003e8a:	e001      	b.n	8003e90 <HAL_ADC_Start_DMA+0xb8>
 8003e8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d002      	beq.n	8003e9e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eba:	f023 0206 	bic.w	r2, r3, #6
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60
 8003ec2:	e002      	b.n	8003eca <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_ADC_Start_DMA+0x19c>)
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <HAL_ADC_Start_DMA+0x1a0>)
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	4a27      	ldr	r2, [pc, #156]	; (8003f7c <HAL_ADC_Start_DMA+0x1a4>)
 8003ee0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	221c      	movs	r2, #28
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0210 	orr.w	r2, r2, #16
 8003f00:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3340      	adds	r3, #64	; 0x40
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f001 f955 	bl	80051d0 <HAL_DMA_Start_IT>
 8003f26:	4603      	mov	r3, r0
 8003f28:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fd56 	bl	80039e0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003f34:	e00d      	b.n	8003f52 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003f3e:	e008      	b.n	8003f52 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003f4c:	e001      	b.n	8003f52 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	50000100 	.word	0x50000100
 8003f60:	50000300 	.word	0x50000300
 8003f64:	50000700 	.word	0x50000700
 8003f68:	50000600 	.word	0x50000600
 8003f6c:	50000500 	.word	0x50000500
 8003f70:	50000400 	.word	0x50000400
 8003f74:	080049bf 	.word	0x080049bf
 8003f78:	08004a97 	.word	0x08004a97
 8003f7c:	08004ab3 	.word	0x08004ab3

08003f80 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0b6      	sub	sp, #216	; 0xd8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x24>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	f000 bc13 	b.w	8004806 <HAL_ADC_ConfigChannel+0x84a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fd0b 	bl	8003a08 <LL_ADC_REG_IsConversionOngoing>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 83f3 	bne.w	80047e0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f7ff fbc1 	bl	800378e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fcf9 	bl	8003a08 <LL_ADC_REG_IsConversionOngoing>
 8004016:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fd05 	bl	8003a2e <LL_ADC_INJ_IsConversionOngoing>
 8004024:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004028:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 81d9 	bne.w	80043e4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 81d4 	bne.w	80043e4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004044:	d10f      	bne.n	8004066 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2200      	movs	r2, #0
 8004050:	4619      	mov	r1, r3
 8004052:	f7ff fbc8 	bl	80037e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fb6f 	bl	8003742 <LL_ADC_SetSamplingTimeCommonConfig>
 8004064:	e00e      	b.n	8004084 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	461a      	mov	r2, r3
 8004074:	f7ff fbb7 	bl	80037e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fb5f 	bl	8003742 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	08db      	lsrs	r3, r3, #3
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d022      	beq.n	80040ec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040b6:	f7ff fab9 	bl	800362c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6919      	ldr	r1, [r3, #16]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f7ff fb05 	bl	80036d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6919      	ldr	r1, [r3, #16]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	7f1b      	ldrb	r3, [r3, #28]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d102      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x126>
 80040dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e0:	e000      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x128>
 80040e2:	2300      	movs	r3, #0
 80040e4:	461a      	mov	r2, r3
 80040e6:	f7ff fb11 	bl	800370c <LL_ADC_SetOffsetSaturation>
 80040ea:	e17b      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fabe 	bl	8003674 <LL_ADC_GetOffsetChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x15c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fab3 	bl	8003674 <LL_ADC_GetOffsetChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	f003 021f 	and.w	r2, r3, #31
 8004116:	e01e      	b.n	8004156 <HAL_ADC_ConfigChannel+0x19a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff faa8 	bl	8003674 <LL_ADC_GetOffsetChannel>
 8004124:	4603      	mov	r3, r0
 8004126:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800413a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800413e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004146:	2320      	movs	r3, #32
 8004148:	e004      	b.n	8004154 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800414a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <HAL_ADC_ConfigChannel+0x1b2>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	e018      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x1e4>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800418a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004192:	2320      	movs	r3, #32
 8004194:	e004      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d106      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	2100      	movs	r1, #0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fa77 	bl	80036a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fa5b 	bl	8003674 <LL_ADC_GetOffsetChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_ADC_ConfigChannel+0x222>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fa50 	bl	8003674 <LL_ADC_GetOffsetChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	0e9b      	lsrs	r3, r3, #26
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	e01e      	b.n	800421c <HAL_ADC_ConfigChannel+0x260>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fa45 	bl	8003674 <LL_ADC_GetOffsetChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80041fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800420c:	2320      	movs	r3, #32
 800420e:	e004      	b.n	800421a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x278>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	e018      	b.n	8004266 <HAL_ADC_ConfigChannel+0x2aa>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004248:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800424c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004258:	2320      	movs	r3, #32
 800425a:	e004      	b.n	8004266 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800425c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004260:	fab3 f383 	clz	r3, r3
 8004264:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004266:	429a      	cmp	r2, r3
 8004268:	d106      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fa14 	bl	80036a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff f9f8 	bl	8003674 <LL_ADC_GetOffsetChannel>
 8004284:	4603      	mov	r3, r0
 8004286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x2e8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff f9ed 	bl	8003674 <LL_ADC_GetOffsetChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	f003 021f 	and.w	r2, r3, #31
 80042a2:	e01e      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x326>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f9e2 	bl	8003674 <LL_ADC_GetOffsetChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80042c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80042ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80042d2:	2320      	movs	r3, #32
 80042d4:	e004      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80042d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d105      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x33e>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	0e9b      	lsrs	r3, r3, #26
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	e016      	b.n	8004328 <HAL_ADC_ConfigChannel+0x36c>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004302:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800430c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800430e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004312:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800431a:	2320      	movs	r3, #32
 800431c:	e004      	b.n	8004328 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800431e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004328:	429a      	cmp	r2, r3
 800432a:	d106      	bne.n	800433a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	2102      	movs	r1, #2
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff f9b3 	bl	80036a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2103      	movs	r1, #3
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff f997 	bl	8003674 <LL_ADC_GetOffsetChannel>
 8004346:	4603      	mov	r3, r0
 8004348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x3aa>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2103      	movs	r1, #3
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff f98c 	bl	8003674 <LL_ADC_GetOffsetChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	0e9b      	lsrs	r3, r3, #26
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	e017      	b.n	8004396 <HAL_ADC_ConfigChannel+0x3da>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2103      	movs	r1, #3
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff f981 	bl	8003674 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800437e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004380:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004388:	2320      	movs	r3, #32
 800438a:	e003      	b.n	8004394 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800438c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x3f2>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0e9b      	lsrs	r3, r3, #26
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	e011      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x416>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80043bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80043c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80043c6:	2320      	movs	r3, #32
 80043c8:	e003      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d106      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	2103      	movs	r1, #3
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff f95e 	bl	80036a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fad3 	bl	8003994 <LL_ADC_IsEnabled>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 813d 	bne.w	8004670 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	f7ff fa1a 	bl	800383c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4aa2      	ldr	r2, [pc, #648]	; (8004698 <HAL_ADC_ConfigChannel+0x6dc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f040 812e 	bne.w	8004670 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <HAL_ADC_ConfigChannel+0x480>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0e9b      	lsrs	r3, r3, #26
 800442a:	3301      	adds	r3, #1
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2b09      	cmp	r3, #9
 8004432:	bf94      	ite	ls
 8004434:	2301      	movls	r3, #1
 8004436:	2300      	movhi	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e019      	b.n	8004470 <HAL_ADC_ConfigChannel+0x4b4>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800444a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800444c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800444e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e003      	b.n	8004460 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2b09      	cmp	r3, #9
 8004468:	bf94      	ite	ls
 800446a:	2301      	movls	r3, #1
 800446c:	2300      	movhi	r3, #0
 800446e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004470:	2b00      	cmp	r3, #0
 8004472:	d079      	beq.n	8004568 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x4d4>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0e9b      	lsrs	r3, r3, #26
 8004486:	3301      	adds	r3, #1
 8004488:	069b      	lsls	r3, r3, #26
 800448a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800448e:	e015      	b.n	80044bc <HAL_ADC_ConfigChannel+0x500>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004498:	fa93 f3a3 	rbit	r3, r3
 800449c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800449e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80044a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80044a8:	2320      	movs	r3, #32
 80044aa:	e003      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80044ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	069b      	lsls	r3, r3, #26
 80044b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x520>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0e9b      	lsrs	r3, r3, #26
 80044ce:	3301      	adds	r3, #1
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	e017      	b.n	800450c <HAL_ADC_ConfigChannel+0x550>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80044ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80044ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80044f4:	2320      	movs	r3, #32
 80044f6:	e003      	b.n	8004500 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80044f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	ea42 0103 	orr.w	r1, r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x576>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	0e9b      	lsrs	r3, r3, #26
 8004522:	3301      	adds	r3, #1
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	4613      	mov	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	4413      	add	r3, r2
 800452e:	051b      	lsls	r3, r3, #20
 8004530:	e018      	b.n	8004564 <HAL_ADC_ConfigChannel+0x5a8>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800454a:	2320      	movs	r3, #32
 800454c:	e003      	b.n	8004556 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800454e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3301      	adds	r3, #1
 8004558:	f003 021f 	and.w	r2, r3, #31
 800455c:	4613      	mov	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4413      	add	r3, r2
 8004562:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004564:	430b      	orrs	r3, r1
 8004566:	e07e      	b.n	8004666 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004570:	2b00      	cmp	r3, #0
 8004572:	d107      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x5c8>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0e9b      	lsrs	r3, r3, #26
 800457a:	3301      	adds	r3, #1
 800457c:	069b      	lsls	r3, r3, #26
 800457e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004582:	e015      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x5f4>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800459c:	2320      	movs	r3, #32
 800459e:	e003      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	069b      	lsls	r3, r3, #26
 80045ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x614>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	3301      	adds	r3, #1
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2101      	movs	r1, #1
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	e017      	b.n	8004600 <HAL_ADC_ConfigChannel+0x644>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	61fb      	str	r3, [r7, #28]
  return result;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80045e8:	2320      	movs	r3, #32
 80045ea:	e003      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3301      	adds	r3, #1
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2101      	movs	r1, #1
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	ea42 0103 	orr.w	r1, r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10d      	bne.n	800462c <HAL_ADC_ConfigChannel+0x670>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0e9b      	lsrs	r3, r3, #26
 8004616:	3301      	adds	r3, #1
 8004618:	f003 021f 	and.w	r2, r3, #31
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	3b1e      	subs	r3, #30
 8004624:	051b      	lsls	r3, r3, #20
 8004626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800462a:	e01b      	b.n	8004664 <HAL_ADC_ConfigChannel+0x6a8>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	613b      	str	r3, [r7, #16]
  return result;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004644:	2320      	movs	r3, #32
 8004646:	e003      	b.n	8004650 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	3301      	adds	r3, #1
 8004652:	f003 021f 	and.w	r2, r3, #31
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	3b1e      	subs	r3, #30
 800465e:	051b      	lsls	r3, r3, #20
 8004660:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004664:	430b      	orrs	r3, r1
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	6892      	ldr	r2, [r2, #8]
 800466a:	4619      	mov	r1, r3
 800466c:	f7ff f8bb 	bl	80037e6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_ADC_ConfigChannel+0x6e0>)
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80be 	beq.w	80047fa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004686:	d004      	beq.n	8004692 <HAL_ADC_ConfigChannel+0x6d6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <HAL_ADC_ConfigChannel+0x6e4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d10a      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x6ec>
 8004692:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <HAL_ADC_ConfigChannel+0x6e8>)
 8004694:	e009      	b.n	80046aa <HAL_ADC_ConfigChannel+0x6ee>
 8004696:	bf00      	nop
 8004698:	407f0000 	.word	0x407f0000
 800469c:	80080000 	.word	0x80080000
 80046a0:	50000100 	.word	0x50000100
 80046a4:	50000300 	.word	0x50000300
 80046a8:	4b59      	ldr	r3, [pc, #356]	; (8004810 <HAL_ADC_ConfigChannel+0x854>)
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe ffb0 	bl	8003610 <LL_ADC_GetCommonPathInternalCh>
 80046b0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a56      	ldr	r2, [pc, #344]	; (8004814 <HAL_ADC_ConfigChannel+0x858>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_ADC_ConfigChannel+0x70c>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a55      	ldr	r2, [pc, #340]	; (8004818 <HAL_ADC_ConfigChannel+0x85c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d13a      	bne.n	800473e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d134      	bne.n	800473e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046dc:	d005      	beq.n	80046ea <HAL_ADC_ConfigChannel+0x72e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a4e      	ldr	r2, [pc, #312]	; (800481c <HAL_ADC_ConfigChannel+0x860>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	f040 8085 	bne.w	80047f4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f2:	d004      	beq.n	80046fe <HAL_ADC_ConfigChannel+0x742>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a49      	ldr	r2, [pc, #292]	; (8004820 <HAL_ADC_ConfigChannel+0x864>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x746>
 80046fe:	4a49      	ldr	r2, [pc, #292]	; (8004824 <HAL_ADC_ConfigChannel+0x868>)
 8004700:	e000      	b.n	8004704 <HAL_ADC_ConfigChannel+0x748>
 8004702:	4a43      	ldr	r2, [pc, #268]	; (8004810 <HAL_ADC_ConfigChannel+0x854>)
 8004704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004708:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f7fe ff6b 	bl	80035ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004714:	4b44      	ldr	r3, [pc, #272]	; (8004828 <HAL_ADC_ConfigChannel+0x86c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	099b      	lsrs	r3, r3, #6
 800471a:	4a44      	ldr	r2, [pc, #272]	; (800482c <HAL_ADC_ConfigChannel+0x870>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	099b      	lsrs	r3, r3, #6
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	4613      	mov	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800472e:	e002      	b.n	8004736 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3b01      	subs	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f9      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800473c:	e05a      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3b      	ldr	r2, [pc, #236]	; (8004830 <HAL_ADC_ConfigChannel+0x874>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d125      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x7d8>
 8004748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800474c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11f      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a31      	ldr	r2, [pc, #196]	; (8004820 <HAL_ADC_ConfigChannel+0x864>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d104      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x7ac>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a34      	ldr	r2, [pc, #208]	; (8004834 <HAL_ADC_ConfigChannel+0x878>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d047      	beq.n	80047f8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004770:	d004      	beq.n	800477c <HAL_ADC_ConfigChannel+0x7c0>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2a      	ldr	r2, [pc, #168]	; (8004820 <HAL_ADC_ConfigChannel+0x864>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x7c4>
 800477c:	4a29      	ldr	r2, [pc, #164]	; (8004824 <HAL_ADC_ConfigChannel+0x868>)
 800477e:	e000      	b.n	8004782 <HAL_ADC_ConfigChannel+0x7c6>
 8004780:	4a23      	ldr	r2, [pc, #140]	; (8004810 <HAL_ADC_ConfigChannel+0x854>)
 8004782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f7fe ff2c 	bl	80035ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004792:	e031      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a27      	ldr	r2, [pc, #156]	; (8004838 <HAL_ADC_ConfigChannel+0x87c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d12d      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800479e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d127      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <HAL_ADC_ConfigChannel+0x864>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d022      	beq.n	80047fa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047bc:	d004      	beq.n	80047c8 <HAL_ADC_ConfigChannel+0x80c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <HAL_ADC_ConfigChannel+0x864>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d101      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x810>
 80047c8:	4a16      	ldr	r2, [pc, #88]	; (8004824 <HAL_ADC_ConfigChannel+0x868>)
 80047ca:	e000      	b.n	80047ce <HAL_ADC_ConfigChannel+0x812>
 80047cc:	4a10      	ldr	r2, [pc, #64]	; (8004810 <HAL_ADC_ConfigChannel+0x854>)
 80047ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7fe ff06 	bl	80035ea <LL_ADC_SetCommonPathInternalCh>
 80047de:	e00c      	b.n	80047fa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80047f2:	e002      	b.n	80047fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004802:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004806:	4618      	mov	r0, r3
 8004808:	37d8      	adds	r7, #216	; 0xd8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	50000700 	.word	0x50000700
 8004814:	c3210000 	.word	0xc3210000
 8004818:	90c00010 	.word	0x90c00010
 800481c:	50000600 	.word	0x50000600
 8004820:	50000100 	.word	0x50000100
 8004824:	50000300 	.word	0x50000300
 8004828:	20000000 	.word	0x20000000
 800482c:	053e2d63 	.word	0x053e2d63
 8004830:	c7520000 	.word	0xc7520000
 8004834:	50000500 	.word	0x50000500
 8004838:	cb840000 	.word	0xcb840000

0800483c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff f8a3 	bl	8003994 <LL_ADC_IsEnabled>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d14d      	bne.n	80048f0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	4b28      	ldr	r3, [pc, #160]	; (80048fc <ADC_Enable+0xc0>)
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00d      	beq.n	800487e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	f043 0210 	orr.w	r2, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004872:	f043 0201 	orr.w	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e039      	b.n	80048f2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff f85e 	bl	8003944 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004888:	f7fe fe6e 	bl	8003568 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800488e:	e028      	b.n	80048e2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff f87d 	bl	8003994 <LL_ADC_IsEnabled>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff f84d 	bl	8003944 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048aa:	f7fe fe5d 	bl	8003568 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d914      	bls.n	80048e2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d00d      	beq.n	80048e2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	f043 0210 	orr.w	r2, r3, #16
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d6:	f043 0201 	orr.w	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e007      	b.n	80048f2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d1cf      	bne.n	8004890 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	8000003f 	.word	0x8000003f

08004900 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff f854 	bl	80039ba <LL_ADC_IsDisableOngoing>
 8004912:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff f83b 	bl	8003994 <LL_ADC_IsEnabled>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d047      	beq.n	80049b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d144      	bne.n	80049b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 030d 	and.w	r3, r3, #13
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10c      	bne.n	8004952 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff f815 	bl	800396c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2203      	movs	r2, #3
 8004948:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800494a:	f7fe fe0d 	bl	8003568 <HAL_GetTick>
 800494e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004950:	e029      	b.n	80049a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e023      	b.n	80049b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800496e:	f7fe fdfb 	bl	8003568 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d914      	bls.n	80049a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	f043 0210 	orr.w	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	f043 0201 	orr.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e007      	b.n	80049b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1dc      	bne.n	800496e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d14b      	bne.n	8004a70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d021      	beq.n	8004a36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe feb6 	bl	8003768 <LL_ADC_REG_IsTriggerSourceSWStart>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d032      	beq.n	8004a68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d12b      	bne.n	8004a68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11f      	bne.n	8004a68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a34:	e018      	b.n	8004a68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d111      	bne.n	8004a68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff fa89 	bl	8003f80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a6e:	e00e      	b.n	8004a8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff fa93 	bl	8003fa8 <HAL_ADC_ErrorCallback>
}
 8004a82:	e004      	b.n	8004a8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fa75 	bl	8003f94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad0:	f043 0204 	orr.w	r2, r3, #4
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff fa65 	bl	8003fa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <LL_ADC_IsEnabled>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <LL_ADC_IsEnabled+0x18>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <LL_ADC_IsEnabled+0x1a>
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_ADC_StartCalibration>:
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004b1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	609a      	str	r2, [r3, #8]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <LL_ADC_IsCalibrationOnGoing>:
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b52:	d101      	bne.n	8004b58 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_ADC_REG_IsConversionOngoing>:
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d101      	bne.n	8004b7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_ADCEx_Calibration_Start+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e04d      	b.n	8004c44 <HAL_ADCEx_Calibration_Start+0xb8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fea5 	bl	8004900 <ADC_Disable>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d136      	bne.n	8004c2e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004bc8:	f023 0302 	bic.w	r3, r3, #2
 8004bcc:	f043 0202 	orr.w	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff ff96 	bl	8004b0c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004be0:	e014      	b.n	8004c0c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	3301      	adds	r3, #1
 8004be6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d90d      	bls.n	8004c0c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	f023 0312 	bic.w	r3, r3, #18
 8004bf8:	f043 0210 	orr.w	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e01b      	b.n	8004c44 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff ff94 	bl	8004b3e <LL_ADC_IsCalibrationOnGoing>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e2      	bne.n	8004be2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	f023 0303 	bic.w	r3, r3, #3
 8004c24:	f043 0201 	orr.w	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c2c:	e005      	b.n	8004c3a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	f043 0210 	orr.w	r2, r3, #16
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	0004de01 	.word	0x0004de01

08004c50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b0a1      	sub	sp, #132	; 0x84
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e0e7      	b.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004c76:	2300      	movs	r3, #0
 8004c78:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c86:	d102      	bne.n	8004c8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c88:	4b6f      	ldr	r3, [pc, #444]	; (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	e009      	b.n	8004ca2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6e      	ldr	r2, [pc, #440]	; (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d102      	bne.n	8004c9e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004c98:	4b6d      	ldr	r3, [pc, #436]	; (8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	e001      	b.n	8004ca2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0be      	b.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff ff4f 	bl	8004b66 <LL_ADC_REG_IsConversionOngoing>
 8004cc8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff ff49 	bl	8004b66 <LL_ADC_REG_IsConversionOngoing>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f040 80a0 	bne.w	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 809c 	bne.w	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cec:	d004      	beq.n	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a55      	ldr	r2, [pc, #340]	; (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004cf8:	4b56      	ldr	r3, [pc, #344]	; (8004e54 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004cfa:	e000      	b.n	8004cfe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004cfc:	4b56      	ldr	r3, [pc, #344]	; (8004e58 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004cfe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d04b      	beq.n	8004da0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d1a:	035b      	lsls	r3, r3, #13
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d2c:	d004      	beq.n	8004d38 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a45      	ldr	r2, [pc, #276]	; (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10f      	bne.n	8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d3c:	f7ff fed3 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004d40:	4604      	mov	r4, r0
 8004d42:	4841      	ldr	r0, [pc, #260]	; (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d44:	f7ff fecf 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4323      	orrs	r3, r4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e012      	b.n	8004d7e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004d58:	483c      	ldr	r0, [pc, #240]	; (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d5a:	f7ff fec4 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004d5e:	4604      	mov	r4, r0
 8004d60:	483b      	ldr	r0, [pc, #236]	; (8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d62:	f7ff fec0 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004d66:	4603      	mov	r3, r0
 8004d68:	431c      	orrs	r4, r3
 8004d6a:	483c      	ldr	r0, [pc, #240]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d6c:	f7ff febb 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4323      	orrs	r3, r4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d056      	beq.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004d8a:	f023 030f 	bic.w	r3, r3, #15
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	6811      	ldr	r1, [r2, #0]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	6892      	ldr	r2, [r2, #8]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d9c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d9e:	e047      	b.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004daa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004db4:	d004      	beq.n	8004dc0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10f      	bne.n	8004de0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004dc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004dc4:	f7ff fe8f 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004dc8:	4604      	mov	r4, r0
 8004dca:	481f      	ldr	r0, [pc, #124]	; (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004dcc:	f7ff fe8b 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4323      	orrs	r3, r4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e012      	b.n	8004e06 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004de0:	481a      	ldr	r0, [pc, #104]	; (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004de2:	f7ff fe80 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004de6:	4604      	mov	r4, r0
 8004de8:	4819      	ldr	r0, [pc, #100]	; (8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dea:	f7ff fe7c 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	431c      	orrs	r4, r3
 8004df2:	481a      	ldr	r0, [pc, #104]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004df4:	f7ff fe77 	bl	8004ae6 <LL_ADC_IsEnabled>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4323      	orrs	r3, r4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d012      	beq.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e12:	f023 030f 	bic.w	r3, r3, #15
 8004e16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e18:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e1a:	e009      	b.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004e2e:	e000      	b.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3784      	adds	r7, #132	; 0x84
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd90      	pop	{r4, r7, pc}
 8004e46:	bf00      	nop
 8004e48:	50000100 	.word	0x50000100
 8004e4c:	50000400 	.word	0x50000400
 8004e50:	50000500 	.word	0x50000500
 8004e54:	50000300 	.word	0x50000300
 8004e58:	50000700 	.word	0x50000700
 8004e5c:	50000600 	.word	0x50000600

08004e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e92:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	60d3      	str	r3, [r2, #12]
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eac:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	0a1b      	lsrs	r3, r3, #8
 8004eb2:	f003 0307 	and.w	r3, r3, #7
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	e000ed00 	.word	0xe000ed00

08004ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	db0b      	blt.n	8004eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	f003 021f 	and.w	r2, r3, #31
 8004edc:	4907      	ldr	r1, [pc, #28]	; (8004efc <__NVIC_EnableIRQ+0x38>)
 8004ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	e000e100 	.word	0xe000e100

08004f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	6039      	str	r1, [r7, #0]
 8004f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db0a      	blt.n	8004f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	490c      	ldr	r1, [pc, #48]	; (8004f4c <__NVIC_SetPriority+0x4c>)
 8004f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1e:	0112      	lsls	r2, r2, #4
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	440b      	add	r3, r1
 8004f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f28:	e00a      	b.n	8004f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4908      	ldr	r1, [pc, #32]	; (8004f50 <__NVIC_SetPriority+0x50>)
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	3b04      	subs	r3, #4
 8004f38:	0112      	lsls	r2, r2, #4
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	761a      	strb	r2, [r3, #24]
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	e000e100 	.word	0xe000e100
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b089      	sub	sp, #36	; 0x24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f1c3 0307 	rsb	r3, r3, #7
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	bf28      	it	cs
 8004f72:	2304      	movcs	r3, #4
 8004f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	2b06      	cmp	r3, #6
 8004f7c:	d902      	bls.n	8004f84 <NVIC_EncodePriority+0x30>
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3b03      	subs	r3, #3
 8004f82:	e000      	b.n	8004f86 <NVIC_EncodePriority+0x32>
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f88:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43da      	mvns	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	401a      	ands	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	43d9      	mvns	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fac:	4313      	orrs	r3, r2
         );
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3724      	adds	r7, #36	; 0x24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fcc:	d301      	bcc.n	8004fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e00f      	b.n	8004ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fd2:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <SysTick_Config+0x40>)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fda:	210f      	movs	r1, #15
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	f7ff ff8e 	bl	8004f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <SysTick_Config+0x40>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fea:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <SysTick_Config+0x40>)
 8004fec:	2207      	movs	r2, #7
 8004fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	e000e010 	.word	0xe000e010

08005000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff ff29 	bl	8004e60 <__NVIC_SetPriorityGrouping>
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	4603      	mov	r3, r0
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005024:	f7ff ff40 	bl	8004ea8 <__NVIC_GetPriorityGrouping>
 8005028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	6978      	ldr	r0, [r7, #20]
 8005030:	f7ff ff90 	bl	8004f54 <NVIC_EncodePriority>
 8005034:	4602      	mov	r2, r0
 8005036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff ff5f 	bl	8004f00 <__NVIC_SetPriority>
}
 8005042:	bf00      	nop
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	4603      	mov	r3, r0
 8005052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff ff33 	bl	8004ec4 <__NVIC_EnableIRQ>
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff ffa4 	bl	8004fbc <SysTick_Config>
 8005074:	4603      	mov	r3, r0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e08d      	b.n	80051ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <HAL_DMA_Init+0x138>)
 800509a:	429a      	cmp	r2, r3
 800509c:	d80f      	bhi.n	80050be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b45      	ldr	r3, [pc, #276]	; (80051bc <HAL_DMA_Init+0x13c>)
 80050a6:	4413      	add	r3, r2
 80050a8:	4a45      	ldr	r2, [pc, #276]	; (80051c0 <HAL_DMA_Init+0x140>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	009a      	lsls	r2, r3, #2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a42      	ldr	r2, [pc, #264]	; (80051c4 <HAL_DMA_Init+0x144>)
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
 80050bc:	e00e      	b.n	80050dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	4b40      	ldr	r3, [pc, #256]	; (80051c8 <HAL_DMA_Init+0x148>)
 80050c6:	4413      	add	r3, r2
 80050c8:	4a3d      	ldr	r2, [pc, #244]	; (80051c0 <HAL_DMA_Init+0x140>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	009a      	lsls	r2, r3, #2
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a3c      	ldr	r2, [pc, #240]	; (80051cc <HAL_DMA_Init+0x14c>)
 80050da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800510c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9b6 	bl	80054a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800513c:	d102      	bne.n	8005144 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005158:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d010      	beq.n	8005184 <HAL_DMA_Init+0x104>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d80c      	bhi.n	8005184 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f9d6 	bl	800551c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	e008      	b.n	8005196 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40020407 	.word	0x40020407
 80051bc:	bffdfff8 	.word	0xbffdfff8
 80051c0:	cccccccd 	.word	0xcccccccd
 80051c4:	40020000 	.word	0x40020000
 80051c8:	bffdfbf8 	.word	0xbffdfbf8
 80051cc:	40020400 	.word	0x40020400

080051d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_DMA_Start_IT+0x20>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e066      	b.n	80052be <HAL_DMA_Start_IT+0xee>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d155      	bne.n	80052b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f8fb 	bl	8005424 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	2b00      	cmp	r3, #0
 8005234:	d008      	beq.n	8005248 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 020e 	orr.w	r2, r2, #14
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e00f      	b.n	8005268 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0204 	bic.w	r2, r2, #4
 8005256:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 020a 	orr.w	r2, r2, #10
 8005266:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005284:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e005      	b.n	80052bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
 80052ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	2204      	movs	r2, #4
 80052e8:	409a      	lsls	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d026      	beq.n	8005340 <HAL_DMA_IRQHandler+0x7a>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d021      	beq.n	8005340 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d107      	bne.n	800531a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0204 	bic.w	r2, r2, #4
 8005318:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	f003 021f 	and.w	r2, r3, #31
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2104      	movs	r1, #4
 8005328:	fa01 f202 	lsl.w	r2, r1, r2
 800532c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	2b00      	cmp	r3, #0
 8005334:	d071      	beq.n	800541a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800533e:	e06c      	b.n	800541a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2202      	movs	r2, #2
 800534a:	409a      	lsls	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d02e      	beq.n	80053b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d029      	beq.n	80053b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 020a 	bic.w	r2, r2, #10
 800537a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	f003 021f 	and.w	r2, r3, #31
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	2102      	movs	r1, #2
 8005392:	fa01 f202 	lsl.w	r2, r1, r2
 8005396:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d038      	beq.n	800541a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80053b0:	e033      	b.n	800541a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2208      	movs	r2, #8
 80053bc:	409a      	lsls	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d02a      	beq.n	800541c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d025      	beq.n	800541c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 020e 	bic.w	r2, r2, #14
 80053de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	f003 021f 	and.w	r2, r3, #31
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f202 	lsl.w	r2, r1, r2
 80053f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800541a:	bf00      	nop
 800541c:	bf00      	nop
}
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800543a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005440:	2b00      	cmp	r3, #0
 8005442:	d004      	beq.n	800544e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800544c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005452:	f003 021f 	and.w	r2, r3, #31
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2101      	movs	r1, #1
 800545c:	fa01 f202 	lsl.w	r2, r1, r2
 8005460:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b10      	cmp	r3, #16
 8005470:	d108      	bne.n	8005484 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005482:	e007      	b.n	8005494 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	60da      	str	r2, [r3, #12]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d802      	bhi.n	80054ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80054b4:	4b15      	ldr	r3, [pc, #84]	; (800550c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	e001      	b.n	80054be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80054bc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	3b08      	subs	r3, #8
 80054ca:	4a12      	ldr	r2, [pc, #72]	; (8005514 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	009a      	lsls	r2, r3, #2
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4413      	add	r3, r2
 80054e0:	461a      	mov	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a0b      	ldr	r2, [pc, #44]	; (8005518 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80054ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2201      	movs	r2, #1
 80054f4:	409a      	lsls	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40020407 	.word	0x40020407
 800550c:	40020800 	.word	0x40020800
 8005510:	40020820 	.word	0x40020820
 8005514:	cccccccd 	.word	0xcccccccd
 8005518:	40020880 	.word	0x40020880

0800551c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4b0b      	ldr	r3, [pc, #44]	; (800555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	461a      	mov	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a08      	ldr	r2, [pc, #32]	; (8005560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800553e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3b01      	subs	r3, #1
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	2201      	movs	r2, #1
 800554a:	409a      	lsls	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	1000823f 	.word	0x1000823f
 8005560:	40020940 	.word	0x40020940

08005564 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e147      	b.n	8005806 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fd fdba 	bl	8003104 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0210 	bic.w	r2, r2, #16
 800559e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055a0:	f7fd ffe2 	bl	8003568 <HAL_GetTick>
 80055a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055a6:	e012      	b.n	80055ce <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80055a8:	f7fd ffde 	bl	8003568 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b0a      	cmp	r3, #10
 80055b4:	d90b      	bls.n	80055ce <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ba:	f043 0201 	orr.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2203      	movs	r2, #3
 80055c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e11b      	b.n	8005806 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d0e5      	beq.n	80055a8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055ec:	f7fd ffbc 	bl	8003568 <HAL_GetTick>
 80055f0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80055f2:	e012      	b.n	800561a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80055f4:	f7fd ffb8 	bl	8003568 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b0a      	cmp	r3, #10
 8005600:	d90b      	bls.n	800561a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2203      	movs	r2, #3
 8005612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e0f5      	b.n	8005806 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0e5      	beq.n	80055f4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0202 	orr.w	r2, r2, #2
 8005636:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a74      	ldr	r2, [pc, #464]	; (8005810 <HAL_FDCAN_Init+0x2ac>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d103      	bne.n	800564a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005642:	4a74      	ldr	r2, [pc, #464]	; (8005814 <HAL_FDCAN_Init+0x2b0>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	7c1b      	ldrb	r3, [r3, #16]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d108      	bne.n	8005664 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005660:	619a      	str	r2, [r3, #24]
 8005662:	e007      	b.n	8005674 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005672:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	7c5b      	ldrb	r3, [r3, #17]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d108      	bne.n	800568e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568a:	619a      	str	r2, [r3, #24]
 800568c:	e007      	b.n	800569e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699a      	ldr	r2, [r3, #24]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800569c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	7c9b      	ldrb	r3, [r3, #18]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d108      	bne.n	80056b8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056b4:	619a      	str	r2, [r3, #24]
 80056b6:	e007      	b.n	80056c8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056c6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80056ec:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0210 	bic.w	r2, r2, #16
 80056fc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d108      	bne.n	8005718 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0204 	orr.w	r2, r2, #4
 8005714:	619a      	str	r2, [r3, #24]
 8005716:	e02c      	b.n	8005772 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d028      	beq.n	8005772 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d01c      	beq.n	8005762 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005736:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0210 	orr.w	r2, r2, #16
 8005746:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d110      	bne.n	8005772 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0220 	orr.w	r2, r2, #32
 800575e:	619a      	str	r2, [r3, #24]
 8005760:	e007      	b.n	8005772 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0220 	orr.w	r2, r2, #32
 8005770:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	3b01      	subs	r3, #1
 8005778:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	3b01      	subs	r3, #1
 8005780:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005782:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800578a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	3b01      	subs	r3, #1
 8005794:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800579a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800579c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a6:	d115      	bne.n	80057d4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	3b01      	subs	r3, #1
 80057b4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057b6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	3b01      	subs	r3, #1
 80057be:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80057c0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	3b01      	subs	r3, #1
 80057ca:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80057d0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80057d2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f814 	bl	8005818 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40006400 	.word	0x40006400
 8005814:	40006500 	.word	0x40006500

08005818 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005820:	4b30      	ldr	r3, [pc, #192]	; (80058e4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005822:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d103      	bne.n	8005836 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005834:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2c      	ldr	r2, [pc, #176]	; (80058ec <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d103      	bne.n	8005848 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005846:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005856:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585e:	041a      	lsls	r2, r3, #16
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	061a      	lsls	r2, r3, #24
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e005      	b.n	80058ca <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3304      	adds	r3, #4
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3f3      	bcc.n	80058be <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	4000a400 	.word	0x4000a400
 80058e8:	40006800 	.word	0x40006800
 80058ec:	40006c00 	.word	0x40006c00

080058f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058fe:	e15a      	b.n	8005bb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	2101      	movs	r1, #1
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	4013      	ands	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 814c 	beq.w	8005bb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d005      	beq.n	8005930 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800592c:	2b02      	cmp	r3, #2
 800592e:	d130      	bne.n	8005992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	2203      	movs	r2, #3
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005966:	2201      	movs	r2, #1
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4013      	ands	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	091b      	lsrs	r3, r3, #4
 800597c:	f003 0201 	and.w	r2, r3, #1
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b03      	cmp	r3, #3
 800599c:	d017      	beq.n	80059ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	2203      	movs	r2, #3
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43db      	mvns	r3, r3
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4013      	ands	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d123      	bne.n	8005a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	08da      	lsrs	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3208      	adds	r2, #8
 80059e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	220f      	movs	r2, #15
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4013      	ands	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	08da      	lsrs	r2, r3, #3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3208      	adds	r2, #8
 8005a1c:	6939      	ldr	r1, [r7, #16]
 8005a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4013      	ands	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0203 	and.w	r2, r3, #3
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80a6 	beq.w	8005bb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a64:	4b5b      	ldr	r3, [pc, #364]	; (8005bd4 <HAL_GPIO_Init+0x2e4>)
 8005a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a68:	4a5a      	ldr	r2, [pc, #360]	; (8005bd4 <HAL_GPIO_Init+0x2e4>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8005a70:	4b58      	ldr	r3, [pc, #352]	; (8005bd4 <HAL_GPIO_Init+0x2e4>)
 8005a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a7c:	4a56      	ldr	r2, [pc, #344]	; (8005bd8 <HAL_GPIO_Init+0x2e8>)
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	089b      	lsrs	r3, r3, #2
 8005a82:	3302      	adds	r3, #2
 8005a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	220f      	movs	r2, #15
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005aa6:	d01f      	beq.n	8005ae8 <HAL_GPIO_Init+0x1f8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a4c      	ldr	r2, [pc, #304]	; (8005bdc <HAL_GPIO_Init+0x2ec>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d019      	beq.n	8005ae4 <HAL_GPIO_Init+0x1f4>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a4b      	ldr	r2, [pc, #300]	; (8005be0 <HAL_GPIO_Init+0x2f0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_GPIO_Init+0x1f0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a4a      	ldr	r2, [pc, #296]	; (8005be4 <HAL_GPIO_Init+0x2f4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00d      	beq.n	8005adc <HAL_GPIO_Init+0x1ec>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a49      	ldr	r2, [pc, #292]	; (8005be8 <HAL_GPIO_Init+0x2f8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d007      	beq.n	8005ad8 <HAL_GPIO_Init+0x1e8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a48      	ldr	r2, [pc, #288]	; (8005bec <HAL_GPIO_Init+0x2fc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d101      	bne.n	8005ad4 <HAL_GPIO_Init+0x1e4>
 8005ad0:	2305      	movs	r3, #5
 8005ad2:	e00a      	b.n	8005aea <HAL_GPIO_Init+0x1fa>
 8005ad4:	2306      	movs	r3, #6
 8005ad6:	e008      	b.n	8005aea <HAL_GPIO_Init+0x1fa>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	e006      	b.n	8005aea <HAL_GPIO_Init+0x1fa>
 8005adc:	2303      	movs	r3, #3
 8005ade:	e004      	b.n	8005aea <HAL_GPIO_Init+0x1fa>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e002      	b.n	8005aea <HAL_GPIO_Init+0x1fa>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_GPIO_Init+0x1fa>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	f002 0203 	and.w	r2, r2, #3
 8005af0:	0092      	lsls	r2, r2, #2
 8005af2:	4093      	lsls	r3, r2
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005afa:	4937      	ldr	r1, [pc, #220]	; (8005bd8 <HAL_GPIO_Init+0x2e8>)
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	089b      	lsrs	r3, r3, #2
 8005b00:	3302      	adds	r3, #2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b08:	4b39      	ldr	r3, [pc, #228]	; (8005bf0 <HAL_GPIO_Init+0x300>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	43db      	mvns	r3, r3
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4013      	ands	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b2c:	4a30      	ldr	r2, [pc, #192]	; (8005bf0 <HAL_GPIO_Init+0x300>)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b32:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <HAL_GPIO_Init+0x300>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b56:	4a26      	ldr	r2, [pc, #152]	; (8005bf0 <HAL_GPIO_Init+0x300>)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b5c:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <HAL_GPIO_Init+0x300>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	43db      	mvns	r3, r3
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <HAL_GPIO_Init+0x300>)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b86:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <HAL_GPIO_Init+0x300>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4013      	ands	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005baa:	4a11      	ldr	r2, [pc, #68]	; (8005bf0 <HAL_GPIO_Init+0x300>)
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f47f ae9d 	bne.w	8005900 <HAL_GPIO_Init+0x10>
  }
}
 8005bc6:	bf00      	nop
 8005bc8:	bf00      	nop
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	48000400 	.word	0x48000400
 8005be0:	48000800 	.word	0x48000800
 8005be4:	48000c00 	.word	0x48000c00
 8005be8:	48001000 	.word	0x48001000
 8005bec:	48001400 	.word	0x48001400
 8005bf0:	40010400 	.word	0x40010400

08005bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	807b      	strh	r3, [r7, #2]
 8005c00:	4613      	mov	r3, r2
 8005c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c04:	787b      	ldrb	r3, [r7, #1]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c0a:	887a      	ldrh	r2, [r7, #2]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c10:	e002      	b.n	8005c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c12:	887a      	ldrh	r2, [r7, #2]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d141      	bne.n	8005cb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c32:	4b4b      	ldr	r3, [pc, #300]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3e:	d131      	bne.n	8005ca4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c40:	4b47      	ldr	r3, [pc, #284]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c46:	4a46      	ldr	r2, [pc, #280]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c50:	4b43      	ldr	r3, [pc, #268]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c58:	4a41      	ldr	r2, [pc, #260]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c60:	4b40      	ldr	r3, [pc, #256]	; (8005d64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2232      	movs	r2, #50	; 0x32
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	0c9b      	lsrs	r3, r3, #18
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c76:	e002      	b.n	8005c7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c7e:	4b38      	ldr	r3, [pc, #224]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8a:	d102      	bne.n	8005c92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f2      	bne.n	8005c78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c92:	4b33      	ldr	r3, [pc, #204]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9e:	d158      	bne.n	8005d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e057      	b.n	8005d54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ca4:	4b2e      	ldr	r3, [pc, #184]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005caa:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005cb4:	e04d      	b.n	8005d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbc:	d141      	bne.n	8005d42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cbe:	4b28      	ldr	r3, [pc, #160]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cca:	d131      	bne.n	8005d30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ccc:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd2:	4a23      	ldr	r2, [pc, #140]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cdc:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ce4:	4a1e      	ldr	r2, [pc, #120]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cec:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2232      	movs	r2, #50	; 0x32
 8005cf2:	fb02 f303 	mul.w	r3, r2, r3
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	0c9b      	lsrs	r3, r3, #18
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d02:	e002      	b.n	8005d0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d16:	d102      	bne.n	8005d1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f2      	bne.n	8005d04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d1e:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2a:	d112      	bne.n	8005d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e011      	b.n	8005d54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d36:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d40:	e007      	b.n	8005d52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d42:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d4a:	4a05      	ldr	r2, [pc, #20]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40007000 	.word	0x40007000
 8005d64:	20000000 	.word	0x20000000
 8005d68:	431bde83 	.word	0x431bde83

08005d6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d70:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4a04      	ldr	r2, [pc, #16]	; (8005d88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d7a:	6093      	str	r3, [r2, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40007000 	.word	0x40007000

08005d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e306      	b.n	80063ac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d075      	beq.n	8005e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005daa:	4b97      	ldr	r3, [pc, #604]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005db4:	4b94      	ldr	r3, [pc, #592]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2b0c      	cmp	r3, #12
 8005dc2:	d102      	bne.n	8005dca <HAL_RCC_OscConfig+0x3e>
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d002      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x44>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d10b      	bne.n	8005de8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd0:	4b8d      	ldr	r3, [pc, #564]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d05b      	beq.n	8005e94 <HAL_RCC_OscConfig+0x108>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d157      	bne.n	8005e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e2e1      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df0:	d106      	bne.n	8005e00 <HAL_RCC_OscConfig+0x74>
 8005df2:	4b85      	ldr	r3, [pc, #532]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a84      	ldr	r2, [pc, #528]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e01d      	b.n	8005e3c <HAL_RCC_OscConfig+0xb0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e08:	d10c      	bne.n	8005e24 <HAL_RCC_OscConfig+0x98>
 8005e0a:	4b7f      	ldr	r3, [pc, #508]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a7e      	ldr	r2, [pc, #504]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	4b7c      	ldr	r3, [pc, #496]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a7b      	ldr	r2, [pc, #492]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e00b      	b.n	8005e3c <HAL_RCC_OscConfig+0xb0>
 8005e24:	4b78      	ldr	r3, [pc, #480]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a77      	ldr	r2, [pc, #476]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4b75      	ldr	r3, [pc, #468]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a74      	ldr	r2, [pc, #464]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d013      	beq.n	8005e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fd fb90 	bl	8003568 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e4c:	f7fd fb8c 	bl	8003568 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b64      	cmp	r3, #100	; 0x64
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e2a6      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e5e:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f0      	beq.n	8005e4c <HAL_RCC_OscConfig+0xc0>
 8005e6a:	e014      	b.n	8005e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6c:	f7fd fb7c 	bl	8003568 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e74:	f7fd fb78 	bl	8003568 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	; 0x64
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e292      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e86:	4b60      	ldr	r3, [pc, #384]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f0      	bne.n	8005e74 <HAL_RCC_OscConfig+0xe8>
 8005e92:	e000      	b.n	8005e96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d075      	beq.n	8005f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ea2:	4b59      	ldr	r3, [pc, #356]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
 8005eaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005eac:	4b56      	ldr	r3, [pc, #344]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b0c      	cmp	r3, #12
 8005eba:	d102      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x136>
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d002      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x13c>
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d11f      	bne.n	8005f08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ec8:	4b4f      	ldr	r3, [pc, #316]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x154>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e265      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee0:	4b49      	ldr	r3, [pc, #292]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	061b      	lsls	r3, r3, #24
 8005eee:	4946      	ldr	r1, [pc, #280]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ef4:	4b45      	ldr	r3, [pc, #276]	; (800600c <HAL_RCC_OscConfig+0x280>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fd fae9 	bl	80034d0 <HAL_InitTick>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d043      	beq.n	8005f8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e251      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d023      	beq.n	8005f58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f10:	4b3d      	ldr	r3, [pc, #244]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a3c      	ldr	r2, [pc, #240]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1c:	f7fd fb24 	bl	8003568 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f24:	f7fd fb20 	bl	8003568 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e23a      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f36:	4b34      	ldr	r3, [pc, #208]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f0      	beq.n	8005f24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f42:	4b31      	ldr	r3, [pc, #196]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	061b      	lsls	r3, r3, #24
 8005f50:	492d      	ldr	r1, [pc, #180]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	604b      	str	r3, [r1, #4]
 8005f56:	e01a      	b.n	8005f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f58:	4b2b      	ldr	r3, [pc, #172]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2a      	ldr	r2, [pc, #168]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f64:	f7fd fb00 	bl	8003568 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f6c:	f7fd fafc 	bl	8003568 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e216      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f0      	bne.n	8005f6c <HAL_RCC_OscConfig+0x1e0>
 8005f8a:	e000      	b.n	8005f8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d041      	beq.n	800601e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01c      	beq.n	8005fdc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fa2:	4b19      	ldr	r3, [pc, #100]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa8:	4a17      	ldr	r2, [pc, #92]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb2:	f7fd fad9 	bl	8003568 <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fba:	f7fd fad5 	bl	8003568 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e1ef      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fcc:	4b0e      	ldr	r3, [pc, #56]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0ef      	beq.n	8005fba <HAL_RCC_OscConfig+0x22e>
 8005fda:	e020      	b.n	800601e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fe2:	4a09      	ldr	r2, [pc, #36]	; (8006008 <HAL_RCC_OscConfig+0x27c>)
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fd fabc 	bl	8003568 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ff2:	e00d      	b.n	8006010 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ff4:	f7fd fab8 	bl	8003568 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d906      	bls.n	8006010 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e1d2      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
 8006006:	bf00      	nop
 8006008:	40021000 	.word	0x40021000
 800600c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006010:	4b8c      	ldr	r3, [pc, #560]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 8006012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1ea      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80a6 	beq.w	8006178 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800602c:	2300      	movs	r3, #0
 800602e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006030:	4b84      	ldr	r3, [pc, #528]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_RCC_OscConfig+0x2b4>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <HAL_RCC_OscConfig+0x2b6>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00d      	beq.n	8006062 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006046:	4b7f      	ldr	r3, [pc, #508]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	4a7e      	ldr	r2, [pc, #504]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 800604c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	; 0x58
 8006052:	4b7c      	ldr	r3, [pc, #496]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800605e:	2301      	movs	r3, #1
 8006060:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006062:	4b79      	ldr	r3, [pc, #484]	; (8006248 <HAL_RCC_OscConfig+0x4bc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d118      	bne.n	80060a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800606e:	4b76      	ldr	r3, [pc, #472]	; (8006248 <HAL_RCC_OscConfig+0x4bc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a75      	ldr	r2, [pc, #468]	; (8006248 <HAL_RCC_OscConfig+0x4bc>)
 8006074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800607a:	f7fd fa75 	bl	8003568 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006082:	f7fd fa71 	bl	8003568 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e18b      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006094:	4b6c      	ldr	r3, [pc, #432]	; (8006248 <HAL_RCC_OscConfig+0x4bc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d108      	bne.n	80060ba <HAL_RCC_OscConfig+0x32e>
 80060a8:	4b66      	ldr	r3, [pc, #408]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ae:	4a65      	ldr	r2, [pc, #404]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060b8:	e024      	b.n	8006104 <HAL_RCC_OscConfig+0x378>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d110      	bne.n	80060e4 <HAL_RCC_OscConfig+0x358>
 80060c2:	4b60      	ldr	r3, [pc, #384]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c8:	4a5e      	ldr	r2, [pc, #376]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060ca:	f043 0304 	orr.w	r3, r3, #4
 80060ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060d2:	4b5c      	ldr	r3, [pc, #368]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d8:	4a5a      	ldr	r2, [pc, #360]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060e2:	e00f      	b.n	8006104 <HAL_RCC_OscConfig+0x378>
 80060e4:	4b57      	ldr	r3, [pc, #348]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ea:	4a56      	ldr	r2, [pc, #344]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060f4:	4b53      	ldr	r3, [pc, #332]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fa:	4a52      	ldr	r2, [pc, #328]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80060fc:	f023 0304 	bic.w	r3, r3, #4
 8006100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d016      	beq.n	800613a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610c:	f7fd fa2c 	bl	8003568 <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006112:	e00a      	b.n	800612a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006114:	f7fd fa28 	bl	8003568 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006122:	4293      	cmp	r3, r2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e140      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800612a:	4b46      	ldr	r3, [pc, #280]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0ed      	beq.n	8006114 <HAL_RCC_OscConfig+0x388>
 8006138:	e015      	b.n	8006166 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613a:	f7fd fa15 	bl	8003568 <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006140:	e00a      	b.n	8006158 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006142:	f7fd fa11 	bl	8003568 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006150:	4293      	cmp	r3, r2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e129      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006158:	4b3a      	ldr	r3, [pc, #232]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1ed      	bne.n	8006142 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006166:	7ffb      	ldrb	r3, [r7, #31]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d105      	bne.n	8006178 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800616c:	4b35      	ldr	r3, [pc, #212]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	4a34      	ldr	r2, [pc, #208]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 8006172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006176:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b00      	cmp	r3, #0
 8006182:	d03c      	beq.n	80061fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01c      	beq.n	80061c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800618c:	4b2d      	ldr	r3, [pc, #180]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 800618e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006192:	4a2c      	ldr	r2, [pc, #176]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619c:	f7fd f9e4 	bl	8003568 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061a4:	f7fd f9e0 	bl	8003568 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e0fa      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061b6:	4b23      	ldr	r3, [pc, #140]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80061b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0ef      	beq.n	80061a4 <HAL_RCC_OscConfig+0x418>
 80061c4:	e01b      	b.n	80061fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061c6:	4b1f      	ldr	r3, [pc, #124]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80061c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061cc:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80061ce:	f023 0301 	bic.w	r3, r3, #1
 80061d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d6:	f7fd f9c7 	bl	8003568 <HAL_GetTick>
 80061da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061de:	f7fd f9c3 	bl	8003568 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0dd      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061f0:	4b14      	ldr	r3, [pc, #80]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 80061f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1ef      	bne.n	80061de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80d1 	beq.w	80063aa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006208:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 030c 	and.w	r3, r3, #12
 8006210:	2b0c      	cmp	r3, #12
 8006212:	f000 808b 	beq.w	800632c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d15e      	bne.n	80062dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a08      	ldr	r2, [pc, #32]	; (8006244 <HAL_RCC_OscConfig+0x4b8>)
 8006224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622a:	f7fd f99d 	bl	8003568 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006230:	e00c      	b.n	800624c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006232:	f7fd f999 	bl	8003568 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d905      	bls.n	800624c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e0b3      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
 8006244:	40021000 	.word	0x40021000
 8006248:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800624c:	4b59      	ldr	r3, [pc, #356]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1ec      	bne.n	8006232 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006258:	4b56      	ldr	r3, [pc, #344]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	4b56      	ldr	r3, [pc, #344]	; (80063b8 <HAL_RCC_OscConfig+0x62c>)
 800625e:	4013      	ands	r3, r2
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6a11      	ldr	r1, [r2, #32]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006268:	3a01      	subs	r2, #1
 800626a:	0112      	lsls	r2, r2, #4
 800626c:	4311      	orrs	r1, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006272:	0212      	lsls	r2, r2, #8
 8006274:	4311      	orrs	r1, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800627a:	0852      	lsrs	r2, r2, #1
 800627c:	3a01      	subs	r2, #1
 800627e:	0552      	lsls	r2, r2, #21
 8006280:	4311      	orrs	r1, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006286:	0852      	lsrs	r2, r2, #1
 8006288:	3a01      	subs	r2, #1
 800628a:	0652      	lsls	r2, r2, #25
 800628c:	4311      	orrs	r1, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006292:	06d2      	lsls	r2, r2, #27
 8006294:	430a      	orrs	r2, r1
 8006296:	4947      	ldr	r1, [pc, #284]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 8006298:	4313      	orrs	r3, r2
 800629a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800629c:	4b45      	ldr	r3, [pc, #276]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a44      	ldr	r2, [pc, #272]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062a8:	4b42      	ldr	r3, [pc, #264]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4a41      	ldr	r2, [pc, #260]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b4:	f7fd f958 	bl	8003568 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fd f954 	bl	8003568 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e06e      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ce:	4b39      	ldr	r3, [pc, #228]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCC_OscConfig+0x530>
 80062da:	e066      	b.n	80063aa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062dc:	4b35      	ldr	r3, [pc, #212]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a34      	ldr	r2, [pc, #208]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80062e8:	4b32      	ldr	r3, [pc, #200]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4a31      	ldr	r2, [pc, #196]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80062f4:	4b2f      	ldr	r3, [pc, #188]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4a2e      	ldr	r2, [pc, #184]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 80062fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80062fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006302:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006304:	f7fd f930 	bl	8003568 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800630c:	f7fd f92c 	bl	8003568 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e046      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800631e:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <HAL_RCC_OscConfig+0x580>
 800632a:	e03e      	b.n	80063aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e039      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006338:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <HAL_RCC_OscConfig+0x628>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f003 0203 	and.w	r2, r3, #3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	429a      	cmp	r2, r3
 800634a:	d12c      	bne.n	80063a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	3b01      	subs	r3, #1
 8006358:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800635a:	429a      	cmp	r2, r3
 800635c:	d123      	bne.n	80063a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800636a:	429a      	cmp	r2, r3
 800636c:	d11b      	bne.n	80063a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800637a:	429a      	cmp	r2, r3
 800637c:	d113      	bne.n	80063a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	3b01      	subs	r3, #1
 800638c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800638e:	429a      	cmp	r2, r3
 8006390:	d109      	bne.n	80063a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	3b01      	subs	r3, #1
 80063a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d001      	beq.n	80063aa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40021000 	.word	0x40021000
 80063b8:	019f800c 	.word	0x019f800c

080063bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e11e      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063d4:	4b91      	ldr	r3, [pc, #580]	; (800661c <HAL_RCC_ClockConfig+0x260>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d910      	bls.n	8006404 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e2:	4b8e      	ldr	r3, [pc, #568]	; (800661c <HAL_RCC_ClockConfig+0x260>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 020f 	bic.w	r2, r3, #15
 80063ea:	498c      	ldr	r1, [pc, #560]	; (800661c <HAL_RCC_ClockConfig+0x260>)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f2:	4b8a      	ldr	r3, [pc, #552]	; (800661c <HAL_RCC_ClockConfig+0x260>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d001      	beq.n	8006404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e106      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d073      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d129      	bne.n	800646c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006418:	4b81      	ldr	r3, [pc, #516]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0f4      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006428:	f000 f966 	bl	80066f8 <RCC_GetSysClockFreqFromPLLSource>
 800642c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4a7c      	ldr	r2, [pc, #496]	; (8006624 <HAL_RCC_ClockConfig+0x268>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d93f      	bls.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006436:	4b7a      	ldr	r3, [pc, #488]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800644a:	2b00      	cmp	r3, #0
 800644c:	d033      	beq.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006452:	2b00      	cmp	r3, #0
 8006454:	d12f      	bne.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006456:	4b72      	ldr	r3, [pc, #456]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800645e:	4a70      	ldr	r2, [pc, #448]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006464:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e024      	b.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d107      	bne.n	8006484 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006474:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e0c6      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006484:	4b66      	ldr	r3, [pc, #408]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0be      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006494:	f000 f8ce 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 8006498:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4a61      	ldr	r2, [pc, #388]	; (8006624 <HAL_RCC_ClockConfig+0x268>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d909      	bls.n	80064b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064a2:	4b5f      	ldr	r3, [pc, #380]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064aa:	4a5d      	ldr	r2, [pc, #372]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064b2:	2380      	movs	r3, #128	; 0x80
 80064b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064b6:	4b5a      	ldr	r3, [pc, #360]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 0203 	bic.w	r2, r3, #3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4957      	ldr	r1, [pc, #348]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c8:	f7fd f84e 	bl	8003568 <HAL_GetTick>
 80064cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ce:	e00a      	b.n	80064e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d0:	f7fd f84a 	bl	8003568 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	f241 3288 	movw	r2, #5000	; 0x1388
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e095      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e6:	4b4e      	ldr	r3, [pc, #312]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 020c 	and.w	r2, r3, #12
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d1eb      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d023      	beq.n	800654c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006510:	4b43      	ldr	r3, [pc, #268]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4a42      	ldr	r2, [pc, #264]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800651a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006528:	4b3d      	ldr	r3, [pc, #244]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006530:	4a3b      	ldr	r2, [pc, #236]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006536:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006538:	4b39      	ldr	r3, [pc, #228]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4936      	ldr	r1, [pc, #216]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006546:	4313      	orrs	r3, r2
 8006548:	608b      	str	r3, [r1, #8]
 800654a:	e008      	b.n	800655e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b80      	cmp	r3, #128	; 0x80
 8006550:	d105      	bne.n	800655e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006552:	4b33      	ldr	r3, [pc, #204]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	4a32      	ldr	r2, [pc, #200]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 8006558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800655c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800655e:	4b2f      	ldr	r3, [pc, #188]	; (800661c <HAL_RCC_ClockConfig+0x260>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d21d      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656c:	4b2b      	ldr	r3, [pc, #172]	; (800661c <HAL_RCC_ClockConfig+0x260>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f023 020f 	bic.w	r2, r3, #15
 8006574:	4929      	ldr	r1, [pc, #164]	; (800661c <HAL_RCC_ClockConfig+0x260>)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800657c:	f7fc fff4 	bl	8003568 <HAL_GetTick>
 8006580:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006582:	e00a      	b.n	800659a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006584:	f7fc fff0 	bl	8003568 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e03b      	b.n	8006612 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800659a:	4b20      	ldr	r3, [pc, #128]	; (800661c <HAL_RCC_ClockConfig+0x260>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d1ed      	bne.n	8006584 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b4:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4917      	ldr	r1, [pc, #92]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d2:	4b13      	ldr	r3, [pc, #76]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	490f      	ldr	r1, [pc, #60]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065e6:	f000 f825 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <HAL_RCC_ClockConfig+0x264>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	490c      	ldr	r1, [pc, #48]	; (8006628 <HAL_RCC_ClockConfig+0x26c>)
 80065f8:	5ccb      	ldrb	r3, [r1, r3]
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006602:	4a0a      	ldr	r2, [pc, #40]	; (800662c <HAL_RCC_ClockConfig+0x270>)
 8006604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <HAL_RCC_ClockConfig+0x274>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f7fc ff60 	bl	80034d0 <HAL_InitTick>
 8006610:	4603      	mov	r3, r0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40022000 	.word	0x40022000
 8006620:	40021000 	.word	0x40021000
 8006624:	04c4b400 	.word	0x04c4b400
 8006628:	0800995c 	.word	0x0800995c
 800662c:	20000000 	.word	0x20000000
 8006630:	20000004 	.word	0x20000004

08006634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800663a:	4b2c      	ldr	r3, [pc, #176]	; (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 030c 	and.w	r3, r3, #12
 8006642:	2b04      	cmp	r3, #4
 8006644:	d102      	bne.n	800664c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006646:	4b2a      	ldr	r3, [pc, #168]	; (80066f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	e047      	b.n	80066dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800664c:	4b27      	ldr	r3, [pc, #156]	; (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 030c 	and.w	r3, r3, #12
 8006654:	2b08      	cmp	r3, #8
 8006656:	d102      	bne.n	800665e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006658:	4b26      	ldr	r3, [pc, #152]	; (80066f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	e03e      	b.n	80066dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800665e:	4b23      	ldr	r3, [pc, #140]	; (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	2b0c      	cmp	r3, #12
 8006668:	d136      	bne.n	80066d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800666a:	4b20      	ldr	r3, [pc, #128]	; (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006674:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	3301      	adds	r3, #1
 8006680:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b03      	cmp	r3, #3
 8006686:	d10c      	bne.n	80066a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006688:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	4a16      	ldr	r2, [pc, #88]	; (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006692:	68d2      	ldr	r2, [r2, #12]
 8006694:	0a12      	lsrs	r2, r2, #8
 8006696:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	617b      	str	r3, [r7, #20]
      break;
 80066a0:	e00c      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066a2:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066aa:	4a10      	ldr	r2, [pc, #64]	; (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ac:	68d2      	ldr	r2, [r2, #12]
 80066ae:	0a12      	lsrs	r2, r2, #8
 80066b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066b4:	fb02 f303 	mul.w	r3, r2, r3
 80066b8:	617b      	str	r3, [r7, #20]
      break;
 80066ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	0e5b      	lsrs	r3, r3, #25
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	3301      	adds	r3, #1
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	e001      	b.n	80066dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80066dc:	693b      	ldr	r3, [r7, #16]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40021000 	.word	0x40021000
 80066f0:	00f42400 	.word	0x00f42400
 80066f4:	007a1200 	.word	0x007a1200

080066f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066fe:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b03      	cmp	r3, #3
 800671a:	d10c      	bne.n	8006736 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800671c:	4a17      	ldr	r2, [pc, #92]	; (800677c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	4a14      	ldr	r2, [pc, #80]	; (8006778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006726:	68d2      	ldr	r2, [r2, #12]
 8006728:	0a12      	lsrs	r2, r2, #8
 800672a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	617b      	str	r3, [r7, #20]
    break;
 8006734:	e00c      	b.n	8006750 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006736:	4a12      	ldr	r2, [pc, #72]	; (8006780 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	4a0e      	ldr	r2, [pc, #56]	; (8006778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006740:	68d2      	ldr	r2, [r2, #12]
 8006742:	0a12      	lsrs	r2, r2, #8
 8006744:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]
    break;
 800674e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006750:	4b09      	ldr	r3, [pc, #36]	; (8006778 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	0e5b      	lsrs	r3, r3, #25
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	3301      	adds	r3, #1
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800676a:	687b      	ldr	r3, [r7, #4]
}
 800676c:	4618      	mov	r0, r3
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40021000 	.word	0x40021000
 800677c:	007a1200 	.word	0x007a1200
 8006780:	00f42400 	.word	0x00f42400

08006784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800678c:	2300      	movs	r3, #0
 800678e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006790:	2300      	movs	r3, #0
 8006792:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8098 	beq.w	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067a2:	2300      	movs	r3, #0
 80067a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067a6:	4b43      	ldr	r3, [pc, #268]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10d      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b2:	4b40      	ldr	r3, [pc, #256]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b6:	4a3f      	ldr	r2, [pc, #252]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067bc:	6593      	str	r3, [r2, #88]	; 0x58
 80067be:	4b3d      	ldr	r3, [pc, #244]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067ca:	2301      	movs	r3, #1
 80067cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ce:	4b3a      	ldr	r3, [pc, #232]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a39      	ldr	r2, [pc, #228]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067da:	f7fc fec5 	bl	8003568 <HAL_GetTick>
 80067de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067e0:	e009      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e2:	f7fc fec1 	bl	8003568 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d902      	bls.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	74fb      	strb	r3, [r7, #19]
        break;
 80067f4:	e005      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f6:	4b30      	ldr	r3, [pc, #192]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0ef      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006802:	7cfb      	ldrb	r3, [r7, #19]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d159      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006808:	4b2a      	ldr	r3, [pc, #168]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006812:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01e      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	429a      	cmp	r2, r3
 8006822:	d019      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006824:	4b23      	ldr	r3, [pc, #140]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006830:	4b20      	ldr	r3, [pc, #128]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006836:	4a1f      	ldr	r2, [pc, #124]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006840:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006846:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006850:	4a18      	ldr	r2, [pc, #96]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d016      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006862:	f7fc fe81 	bl	8003568 <HAL_GetTick>
 8006866:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006868:	e00b      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686a:	f7fc fe7d 	bl	8003568 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	f241 3288 	movw	r2, #5000	; 0x1388
 8006878:	4293      	cmp	r3, r2
 800687a:	d902      	bls.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	74fb      	strb	r3, [r7, #19]
            break;
 8006880:	e006      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006882:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0ec      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006890:	7cfb      	ldrb	r3, [r7, #19]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10b      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006896:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a4:	4903      	ldr	r1, [pc, #12]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80068ac:	e008      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ae:	7cfb      	ldrb	r3, [r7, #19]
 80068b0:	74bb      	strb	r3, [r7, #18]
 80068b2:	e005      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068b4:	40021000 	.word	0x40021000
 80068b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068bc:	7cfb      	ldrb	r3, [r7, #19]
 80068be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068c0:	7c7b      	ldrb	r3, [r7, #17]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d105      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068c6:	4ba7      	ldr	r3, [pc, #668]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ca:	4aa6      	ldr	r2, [pc, #664]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068de:	4ba1      	ldr	r3, [pc, #644]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f023 0203 	bic.w	r2, r3, #3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	499d      	ldr	r1, [pc, #628]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006900:	4b98      	ldr	r3, [pc, #608]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006906:	f023 020c 	bic.w	r2, r3, #12
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	4995      	ldr	r1, [pc, #596]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006922:	4b90      	ldr	r3, [pc, #576]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	498c      	ldr	r1, [pc, #560]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006944:	4b87      	ldr	r3, [pc, #540]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	4984      	ldr	r1, [pc, #528]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006966:	4b7f      	ldr	r3, [pc, #508]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	497b      	ldr	r1, [pc, #492]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006988:	4b76      	ldr	r3, [pc, #472]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800698a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	4973      	ldr	r1, [pc, #460]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069aa:	4b6e      	ldr	r3, [pc, #440]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	496a      	ldr	r1, [pc, #424]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069cc:	4b65      	ldr	r3, [pc, #404]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	4962      	ldr	r1, [pc, #392]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069ee:	4b5d      	ldr	r3, [pc, #372]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	4959      	ldr	r1, [pc, #356]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a10:	4b54      	ldr	r3, [pc, #336]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a16:	f023 0203 	bic.w	r2, r3, #3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	4951      	ldr	r1, [pc, #324]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a32:	4b4c      	ldr	r3, [pc, #304]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	4948      	ldr	r1, [pc, #288]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a54:	4b43      	ldr	r3, [pc, #268]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	4940      	ldr	r1, [pc, #256]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a72:	d105      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a74:	4b3b      	ldr	r3, [pc, #236]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4a3a      	ldr	r2, [pc, #232]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d015      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a8c:	4b35      	ldr	r3, [pc, #212]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9a:	4932      	ldr	r1, [pc, #200]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aaa:	d105      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aac:	4b2d      	ldr	r3, [pc, #180]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	4a2c      	ldr	r2, [pc, #176]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ab6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d015      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ac4:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	4924      	ldr	r1, [pc, #144]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ae2:	d105      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ae4:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a1e      	ldr	r2, [pc, #120]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d015      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006afc:	4b19      	ldr	r3, [pc, #100]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0a:	4916      	ldr	r1, [pc, #88]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b1a:	d105      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b1c:	4b11      	ldr	r3, [pc, #68]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d019      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	4908      	ldr	r1, [pc, #32]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b52:	d109      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b54:	4b03      	ldr	r3, [pc, #12]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	4a02      	ldr	r2, [pc, #8]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b5e:	60d3      	str	r3, [r2, #12]
 8006b60:	e002      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006b62:	bf00      	nop
 8006b64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b74:	4b29      	ldr	r3, [pc, #164]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	4926      	ldr	r1, [pc, #152]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b92:	d105      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b94:	4b21      	ldr	r3, [pc, #132]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d015      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006bac:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bba:	4918      	ldr	r1, [pc, #96]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bca:	d105      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bcc:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4a12      	ldr	r2, [pc, #72]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d015      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006be4:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf2:	490a      	ldr	r1, [pc, #40]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c02:	d105      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c04:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40021000 	.word	0x40021000

08006c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e09d      	b.n	8006d6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d108      	bne.n	8006c4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c42:	d009      	beq.n	8006c58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	61da      	str	r2, [r3, #28]
 8006c4a:	e005      	b.n	8006c58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fc faa0 	bl	80031b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c98:	d902      	bls.n	8006ca0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	e002      	b.n	8006ca6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ca4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006cae:	d007      	beq.n	8006cc0 <HAL_SPI_Init+0xa0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cb8:	d002      	beq.n	8006cc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	ea42 0103 	orr.w	r1, r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	f003 0204 	and.w	r2, r3, #4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d3c:	ea42 0103 	orr.w	r1, r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e049      	b.n	8006e1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d106      	bne.n	8006da2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fc fa4f 	bl	8003240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f000 fcc1 	bl	800773c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e049      	b.n	8006eca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f841 	bl	8006ed2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	4619      	mov	r1, r3
 8006e62:	4610      	mov	r0, r2
 8006e64:	f000 fc6a 	bl	800773c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e049      	b.n	8006f8c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d106      	bne.n	8006f12 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f841 	bl	8006f94 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3304      	adds	r3, #4
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f000 fc09 	bl	800773c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d122      	bne.n	8007004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d11b      	bne.n	8007004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0202 	mvn.w	r2, #2
 8006fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fb88 	bl	8007700 <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb7a 	bl	80076ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fb8b 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b04      	cmp	r3, #4
 8007010:	d122      	bne.n	8007058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b04      	cmp	r3, #4
 800701e:	d11b      	bne.n	8007058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0204 	mvn.w	r2, #4
 8007028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fb5e 	bl	8007700 <HAL_TIM_IC_CaptureCallback>
 8007044:	e005      	b.n	8007052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb50 	bl	80076ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fb61 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0308 	and.w	r3, r3, #8
 8007062:	2b08      	cmp	r3, #8
 8007064:	d122      	bne.n	80070ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b08      	cmp	r3, #8
 8007072:	d11b      	bne.n	80070ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0208 	mvn.w	r2, #8
 800707c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2204      	movs	r2, #4
 8007082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb34 	bl	8007700 <HAL_TIM_IC_CaptureCallback>
 8007098:	e005      	b.n	80070a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fb26 	bl	80076ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fb37 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d122      	bne.n	8007100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d11b      	bne.n	8007100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0210 	mvn.w	r2, #16
 80070d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2208      	movs	r2, #8
 80070d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fb0a 	bl	8007700 <HAL_TIM_IC_CaptureCallback>
 80070ec:	e005      	b.n	80070fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fafc 	bl	80076ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fb0d 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b01      	cmp	r3, #1
 800710c:	d10e      	bne.n	800712c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b01      	cmp	r3, #1
 800711a:	d107      	bne.n	800712c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0201 	mvn.w	r2, #1
 8007124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7f9 fec2 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007136:	2b80      	cmp	r3, #128	; 0x80
 8007138:	d10e      	bne.n	8007158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007144:	2b80      	cmp	r3, #128	; 0x80
 8007146:	d107      	bne.n	8007158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 f92a 	bl	80083ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007166:	d10e      	bne.n	8007186 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007172:	2b80      	cmp	r3, #128	; 0x80
 8007174:	d107      	bne.n	8007186 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800717e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 f91d 	bl	80083c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b40      	cmp	r3, #64	; 0x40
 8007192:	d10e      	bne.n	80071b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719e:	2b40      	cmp	r3, #64	; 0x40
 80071a0:	d107      	bne.n	80071b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fabb 	bl	8007728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 0320 	and.w	r3, r3, #32
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d10e      	bne.n	80071de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d107      	bne.n	80071de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f06f 0220 	mvn.w	r2, #32
 80071d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 f8dd 	bl	8008398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ec:	d10f      	bne.n	800720e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071fc:	d107      	bne.n	800720e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f8e3 	bl	80083d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800721c:	d10f      	bne.n	800723e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800722c:	d107      	bne.n	800723e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f8d5 	bl	80083e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800724c:	d10f      	bne.n	800726e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800725c:	d107      	bne.n	800726e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 f8c7 	bl	80083fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800727c:	d10f      	bne.n	800729e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007288:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800728c:	d107      	bne.n	800729e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f8b9 	bl	8008410 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e066      	b.n	8007394 <HAL_TIM_OC_ConfigChannel+0xec>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b14      	cmp	r3, #20
 80072d2:	d857      	bhi.n	8007384 <HAL_TIM_OC_ConfigChannel+0xdc>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <HAL_TIM_OC_ConfigChannel+0x34>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	08007331 	.word	0x08007331
 80072e0:	08007385 	.word	0x08007385
 80072e4:	08007385 	.word	0x08007385
 80072e8:	08007385 	.word	0x08007385
 80072ec:	0800733f 	.word	0x0800733f
 80072f0:	08007385 	.word	0x08007385
 80072f4:	08007385 	.word	0x08007385
 80072f8:	08007385 	.word	0x08007385
 80072fc:	0800734d 	.word	0x0800734d
 8007300:	08007385 	.word	0x08007385
 8007304:	08007385 	.word	0x08007385
 8007308:	08007385 	.word	0x08007385
 800730c:	0800735b 	.word	0x0800735b
 8007310:	08007385 	.word	0x08007385
 8007314:	08007385 	.word	0x08007385
 8007318:	08007385 	.word	0x08007385
 800731c:	08007369 	.word	0x08007369
 8007320:	08007385 	.word	0x08007385
 8007324:	08007385 	.word	0x08007385
 8007328:	08007385 	.word	0x08007385
 800732c:	08007377 	.word	0x08007377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f000 faa8 	bl	800788c <TIM_OC1_SetConfig>
      break;
 800733c:	e025      	b.n	800738a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fb3b 	bl	80079c0 <TIM_OC2_SetConfig>
      break;
 800734a:	e01e      	b.n	800738a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fbc8 	bl	8007ae8 <TIM_OC3_SetConfig>
      break;
 8007358:	e017      	b.n	800738a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fc53 	bl	8007c0c <TIM_OC4_SetConfig>
      break;
 8007366:	e010      	b.n	800738a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fce0 	bl	8007d34 <TIM_OC5_SetConfig>
      break;
 8007374:	e009      	b.n	800738a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fd43 	bl	8007e08 <TIM_OC6_SetConfig>
      break;
 8007382:	e002      	b.n	800738a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
      break;
 8007388:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007392:	7dfb      	ldrb	r3, [r7, #23]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d101      	bne.n	80073ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e088      	b.n	80074cc <HAL_TIM_IC_ConfigChannel+0x130>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d11b      	bne.n	8007400 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6818      	ldr	r0, [r3, #0]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	6819      	ldr	r1, [r3, #0]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f000 fd82 	bl	8007ee0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	699a      	ldr	r2, [r3, #24]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 020c 	bic.w	r2, r2, #12
 80073ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6999      	ldr	r1, [r3, #24]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	619a      	str	r2, [r3, #24]
 80073fe:	e060      	b.n	80074c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b04      	cmp	r3, #4
 8007404:	d11c      	bne.n	8007440 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6819      	ldr	r1, [r3, #0]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f000 fe06 	bl	8008026 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	699a      	ldr	r2, [r3, #24]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007428:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6999      	ldr	r1, [r3, #24]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	021a      	lsls	r2, r3, #8
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	619a      	str	r2, [r3, #24]
 800743e:	e040      	b.n	80074c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b08      	cmp	r3, #8
 8007444:	d11b      	bne.n	800747e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6819      	ldr	r1, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f000 fe53 	bl	8008100 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 020c 	bic.w	r2, r2, #12
 8007468:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	61da      	str	r2, [r3, #28]
 800747c:	e021      	b.n	80074c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b0c      	cmp	r3, #12
 8007482:	d11c      	bne.n	80074be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6819      	ldr	r1, [r3, #0]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f000 fe70 	bl	8008178 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69da      	ldr	r2, [r3, #28]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80074a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	69d9      	ldr	r1, [r3, #28]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	021a      	lsls	r2, r3, #8
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	61da      	str	r2, [r3, #28]
 80074bc:	e001      	b.n	80074c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_TIM_ConfigClockSource+0x1c>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e0ee      	b.n	80076ce <HAL_TIM_ConfigClockSource+0x1fa>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800750e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a6b      	ldr	r2, [pc, #428]	; (80076d8 <HAL_TIM_ConfigClockSource+0x204>)
 800752a:	4293      	cmp	r3, r2
 800752c:	f000 80b9 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007530:	4a69      	ldr	r2, [pc, #420]	; (80076d8 <HAL_TIM_ConfigClockSource+0x204>)
 8007532:	4293      	cmp	r3, r2
 8007534:	f200 80be 	bhi.w	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8007538:	4a68      	ldr	r2, [pc, #416]	; (80076dc <HAL_TIM_ConfigClockSource+0x208>)
 800753a:	4293      	cmp	r3, r2
 800753c:	f000 80b1 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007540:	4a66      	ldr	r2, [pc, #408]	; (80076dc <HAL_TIM_ConfigClockSource+0x208>)
 8007542:	4293      	cmp	r3, r2
 8007544:	f200 80b6 	bhi.w	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8007548:	4a65      	ldr	r2, [pc, #404]	; (80076e0 <HAL_TIM_ConfigClockSource+0x20c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	f000 80a9 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007550:	4a63      	ldr	r2, [pc, #396]	; (80076e0 <HAL_TIM_ConfigClockSource+0x20c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	f200 80ae 	bhi.w	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8007558:	4a62      	ldr	r2, [pc, #392]	; (80076e4 <HAL_TIM_ConfigClockSource+0x210>)
 800755a:	4293      	cmp	r3, r2
 800755c:	f000 80a1 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007560:	4a60      	ldr	r2, [pc, #384]	; (80076e4 <HAL_TIM_ConfigClockSource+0x210>)
 8007562:	4293      	cmp	r3, r2
 8007564:	f200 80a6 	bhi.w	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8007568:	4a5f      	ldr	r2, [pc, #380]	; (80076e8 <HAL_TIM_ConfigClockSource+0x214>)
 800756a:	4293      	cmp	r3, r2
 800756c:	f000 8099 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007570:	4a5d      	ldr	r2, [pc, #372]	; (80076e8 <HAL_TIM_ConfigClockSource+0x214>)
 8007572:	4293      	cmp	r3, r2
 8007574:	f200 809e 	bhi.w	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8007578:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800757c:	f000 8091 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007580:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007584:	f200 8096 	bhi.w	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8007588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800758c:	f000 8089 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007594:	f200 808e 	bhi.w	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8007598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800759c:	d03e      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x148>
 800759e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a2:	f200 8087 	bhi.w	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075aa:	f000 8086 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x1e6>
 80075ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b2:	d87f      	bhi.n	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80075b4:	2b70      	cmp	r3, #112	; 0x70
 80075b6:	d01a      	beq.n	80075ee <HAL_TIM_ConfigClockSource+0x11a>
 80075b8:	2b70      	cmp	r3, #112	; 0x70
 80075ba:	d87b      	bhi.n	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80075bc:	2b60      	cmp	r3, #96	; 0x60
 80075be:	d050      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x18e>
 80075c0:	2b60      	cmp	r3, #96	; 0x60
 80075c2:	d877      	bhi.n	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80075c4:	2b50      	cmp	r3, #80	; 0x50
 80075c6:	d03c      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x16e>
 80075c8:	2b50      	cmp	r3, #80	; 0x50
 80075ca:	d873      	bhi.n	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80075cc:	2b40      	cmp	r3, #64	; 0x40
 80075ce:	d058      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x1ae>
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d86f      	bhi.n	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80075d4:	2b30      	cmp	r3, #48	; 0x30
 80075d6:	d064      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 80075d8:	2b30      	cmp	r3, #48	; 0x30
 80075da:	d86b      	bhi.n	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d060      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d867      	bhi.n	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d05c      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 80075e8:	2b10      	cmp	r3, #16
 80075ea:	d05a      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x1ce>
 80075ec:	e062      	b.n	80076b4 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	6899      	ldr	r1, [r3, #8]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f000 fe15 	bl	800822c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	609a      	str	r2, [r3, #8]
      break;
 800761a:	e04f      	b.n	80076bc <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	6899      	ldr	r1, [r3, #8]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f000 fdfe 	bl	800822c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800763e:	609a      	str	r2, [r3, #8]
      break;
 8007640:	e03c      	b.n	80076bc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	461a      	mov	r2, r3
 8007650:	f000 fcba 	bl	8007fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2150      	movs	r1, #80	; 0x50
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fdc9 	bl	80081f2 <TIM_ITRx_SetConfig>
      break;
 8007660:	e02c      	b.n	80076bc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6859      	ldr	r1, [r3, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	461a      	mov	r2, r3
 8007670:	f000 fd16 	bl	80080a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2160      	movs	r1, #96	; 0x60
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fdb9 	bl	80081f2 <TIM_ITRx_SetConfig>
      break;
 8007680:	e01c      	b.n	80076bc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6859      	ldr	r1, [r3, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	461a      	mov	r2, r3
 8007690:	f000 fc9a 	bl	8007fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2140      	movs	r1, #64	; 0x40
 800769a:	4618      	mov	r0, r3
 800769c:	f000 fda9 	bl	80081f2 <TIM_ITRx_SetConfig>
      break;
 80076a0:	e00c      	b.n	80076bc <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f000 fda0 	bl	80081f2 <TIM_ITRx_SetConfig>
      break;
 80076b2:	e003      	b.n	80076bc <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
      break;
 80076b8:	e000      	b.n	80076bc <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80076ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	00100070 	.word	0x00100070
 80076dc:	00100050 	.word	0x00100050
 80076e0:	00100040 	.word	0x00100040
 80076e4:	00100030 	.word	0x00100030
 80076e8:	00100020 	.word	0x00100020

080076ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a46      	ldr	r2, [pc, #280]	; (8007868 <TIM_Base_SetConfig+0x12c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d017      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775a:	d013      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a43      	ldr	r2, [pc, #268]	; (800786c <TIM_Base_SetConfig+0x130>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00f      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a42      	ldr	r2, [pc, #264]	; (8007870 <TIM_Base_SetConfig+0x134>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00b      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a41      	ldr	r2, [pc, #260]	; (8007874 <TIM_Base_SetConfig+0x138>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d007      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a40      	ldr	r2, [pc, #256]	; (8007878 <TIM_Base_SetConfig+0x13c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d003      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a3f      	ldr	r2, [pc, #252]	; (800787c <TIM_Base_SetConfig+0x140>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d108      	bne.n	8007796 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a33      	ldr	r2, [pc, #204]	; (8007868 <TIM_Base_SetConfig+0x12c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d023      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a4:	d01f      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a30      	ldr	r2, [pc, #192]	; (800786c <TIM_Base_SetConfig+0x130>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d01b      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a2f      	ldr	r2, [pc, #188]	; (8007870 <TIM_Base_SetConfig+0x134>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d017      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a2e      	ldr	r2, [pc, #184]	; (8007874 <TIM_Base_SetConfig+0x138>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d013      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a2d      	ldr	r2, [pc, #180]	; (8007878 <TIM_Base_SetConfig+0x13c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00f      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a2d      	ldr	r2, [pc, #180]	; (8007880 <TIM_Base_SetConfig+0x144>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00b      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a2c      	ldr	r2, [pc, #176]	; (8007884 <TIM_Base_SetConfig+0x148>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d007      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a2b      	ldr	r2, [pc, #172]	; (8007888 <TIM_Base_SetConfig+0x14c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d003      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a26      	ldr	r2, [pc, #152]	; (800787c <TIM_Base_SetConfig+0x140>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d108      	bne.n	80077f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a12      	ldr	r2, [pc, #72]	; (8007868 <TIM_Base_SetConfig+0x12c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d013      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a14      	ldr	r2, [pc, #80]	; (8007878 <TIM_Base_SetConfig+0x13c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00f      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a14      	ldr	r2, [pc, #80]	; (8007880 <TIM_Base_SetConfig+0x144>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00b      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a13      	ldr	r2, [pc, #76]	; (8007884 <TIM_Base_SetConfig+0x148>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d007      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a12      	ldr	r2, [pc, #72]	; (8007888 <TIM_Base_SetConfig+0x14c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a0d      	ldr	r2, [pc, #52]	; (800787c <TIM_Base_SetConfig+0x140>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d103      	bne.n	8007854 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691a      	ldr	r2, [r3, #16]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	615a      	str	r2, [r3, #20]
}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40012c00 	.word	0x40012c00
 800786c:	40000400 	.word	0x40000400
 8007870:	40000800 	.word	0x40000800
 8007874:	40000c00 	.word	0x40000c00
 8007878:	40013400 	.word	0x40013400
 800787c:	40015000 	.word	0x40015000
 8007880:	40014000 	.word	0x40014000
 8007884:	40014400 	.word	0x40014400
 8007888:	40014800 	.word	0x40014800

0800788c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	f023 0201 	bic.w	r2, r3, #1
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0303 	bic.w	r3, r3, #3
 80078c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f023 0302 	bic.w	r3, r3, #2
 80078d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a30      	ldr	r2, [pc, #192]	; (80079a8 <TIM_OC1_SetConfig+0x11c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d013      	beq.n	8007914 <TIM_OC1_SetConfig+0x88>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a2f      	ldr	r2, [pc, #188]	; (80079ac <TIM_OC1_SetConfig+0x120>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00f      	beq.n	8007914 <TIM_OC1_SetConfig+0x88>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a2e      	ldr	r2, [pc, #184]	; (80079b0 <TIM_OC1_SetConfig+0x124>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00b      	beq.n	8007914 <TIM_OC1_SetConfig+0x88>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a2d      	ldr	r2, [pc, #180]	; (80079b4 <TIM_OC1_SetConfig+0x128>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d007      	beq.n	8007914 <TIM_OC1_SetConfig+0x88>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a2c      	ldr	r2, [pc, #176]	; (80079b8 <TIM_OC1_SetConfig+0x12c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d003      	beq.n	8007914 <TIM_OC1_SetConfig+0x88>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a2b      	ldr	r2, [pc, #172]	; (80079bc <TIM_OC1_SetConfig+0x130>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d10c      	bne.n	800792e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f023 0308 	bic.w	r3, r3, #8
 800791a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f023 0304 	bic.w	r3, r3, #4
 800792c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a1d      	ldr	r2, [pc, #116]	; (80079a8 <TIM_OC1_SetConfig+0x11c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d013      	beq.n	800795e <TIM_OC1_SetConfig+0xd2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a1c      	ldr	r2, [pc, #112]	; (80079ac <TIM_OC1_SetConfig+0x120>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00f      	beq.n	800795e <TIM_OC1_SetConfig+0xd2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a1b      	ldr	r2, [pc, #108]	; (80079b0 <TIM_OC1_SetConfig+0x124>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00b      	beq.n	800795e <TIM_OC1_SetConfig+0xd2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a1a      	ldr	r2, [pc, #104]	; (80079b4 <TIM_OC1_SetConfig+0x128>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d007      	beq.n	800795e <TIM_OC1_SetConfig+0xd2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a19      	ldr	r2, [pc, #100]	; (80079b8 <TIM_OC1_SetConfig+0x12c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d003      	beq.n	800795e <TIM_OC1_SetConfig+0xd2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a18      	ldr	r2, [pc, #96]	; (80079bc <TIM_OC1_SetConfig+0x130>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d111      	bne.n	8007982 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800796c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	621a      	str	r2, [r3, #32]
}
 800799c:	bf00      	nop
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40013400 	.word	0x40013400
 80079b0:	40014000 	.word	0x40014000
 80079b4:	40014400 	.word	0x40014400
 80079b8:	40014800 	.word	0x40014800
 80079bc:	40015000 	.word	0x40015000

080079c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f023 0210 	bic.w	r2, r3, #16
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f023 0320 	bic.w	r3, r3, #32
 8007a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	011b      	lsls	r3, r3, #4
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a2c      	ldr	r2, [pc, #176]	; (8007ad0 <TIM_OC2_SetConfig+0x110>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d007      	beq.n	8007a34 <TIM_OC2_SetConfig+0x74>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a2b      	ldr	r2, [pc, #172]	; (8007ad4 <TIM_OC2_SetConfig+0x114>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_OC2_SetConfig+0x74>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a2a      	ldr	r2, [pc, #168]	; (8007ad8 <TIM_OC2_SetConfig+0x118>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10d      	bne.n	8007a50 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <TIM_OC2_SetConfig+0x110>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d013      	beq.n	8007a80 <TIM_OC2_SetConfig+0xc0>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a1e      	ldr	r2, [pc, #120]	; (8007ad4 <TIM_OC2_SetConfig+0x114>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00f      	beq.n	8007a80 <TIM_OC2_SetConfig+0xc0>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a1e      	ldr	r2, [pc, #120]	; (8007adc <TIM_OC2_SetConfig+0x11c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00b      	beq.n	8007a80 <TIM_OC2_SetConfig+0xc0>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a1d      	ldr	r2, [pc, #116]	; (8007ae0 <TIM_OC2_SetConfig+0x120>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d007      	beq.n	8007a80 <TIM_OC2_SetConfig+0xc0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a1c      	ldr	r2, [pc, #112]	; (8007ae4 <TIM_OC2_SetConfig+0x124>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d003      	beq.n	8007a80 <TIM_OC2_SetConfig+0xc0>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a17      	ldr	r2, [pc, #92]	; (8007ad8 <TIM_OC2_SetConfig+0x118>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d113      	bne.n	8007aa8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	621a      	str	r2, [r3, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40012c00 	.word	0x40012c00
 8007ad4:	40013400 	.word	0x40013400
 8007ad8:	40015000 	.word	0x40015000
 8007adc:	40014000 	.word	0x40014000
 8007ae0:	40014400 	.word	0x40014400
 8007ae4:	40014800 	.word	0x40014800

08007ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0303 	bic.w	r3, r3, #3
 8007b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a2b      	ldr	r2, [pc, #172]	; (8007bf4 <TIM_OC3_SetConfig+0x10c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d007      	beq.n	8007b5a <TIM_OC3_SetConfig+0x72>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a2a      	ldr	r2, [pc, #168]	; (8007bf8 <TIM_OC3_SetConfig+0x110>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d003      	beq.n	8007b5a <TIM_OC3_SetConfig+0x72>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a29      	ldr	r2, [pc, #164]	; (8007bfc <TIM_OC3_SetConfig+0x114>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d10d      	bne.n	8007b76 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <TIM_OC3_SetConfig+0x10c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d013      	beq.n	8007ba6 <TIM_OC3_SetConfig+0xbe>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a1d      	ldr	r2, [pc, #116]	; (8007bf8 <TIM_OC3_SetConfig+0x110>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d00f      	beq.n	8007ba6 <TIM_OC3_SetConfig+0xbe>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a1d      	ldr	r2, [pc, #116]	; (8007c00 <TIM_OC3_SetConfig+0x118>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00b      	beq.n	8007ba6 <TIM_OC3_SetConfig+0xbe>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1c      	ldr	r2, [pc, #112]	; (8007c04 <TIM_OC3_SetConfig+0x11c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d007      	beq.n	8007ba6 <TIM_OC3_SetConfig+0xbe>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1b      	ldr	r2, [pc, #108]	; (8007c08 <TIM_OC3_SetConfig+0x120>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d003      	beq.n	8007ba6 <TIM_OC3_SetConfig+0xbe>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a16      	ldr	r2, [pc, #88]	; (8007bfc <TIM_OC3_SetConfig+0x114>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d113      	bne.n	8007bce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	621a      	str	r2, [r3, #32]
}
 8007be8:	bf00      	nop
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40015000 	.word	0x40015000
 8007c00:	40014000 	.word	0x40014000
 8007c04:	40014400 	.word	0x40014400
 8007c08:	40014800 	.word	0x40014800

08007c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	031b      	lsls	r3, r3, #12
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a2c      	ldr	r2, [pc, #176]	; (8007d1c <TIM_OC4_SetConfig+0x110>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d007      	beq.n	8007c80 <TIM_OC4_SetConfig+0x74>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a2b      	ldr	r2, [pc, #172]	; (8007d20 <TIM_OC4_SetConfig+0x114>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d003      	beq.n	8007c80 <TIM_OC4_SetConfig+0x74>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a2a      	ldr	r2, [pc, #168]	; (8007d24 <TIM_OC4_SetConfig+0x118>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d10d      	bne.n	8007c9c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	031b      	lsls	r3, r3, #12
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a1f      	ldr	r2, [pc, #124]	; (8007d1c <TIM_OC4_SetConfig+0x110>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d013      	beq.n	8007ccc <TIM_OC4_SetConfig+0xc0>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a1e      	ldr	r2, [pc, #120]	; (8007d20 <TIM_OC4_SetConfig+0x114>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00f      	beq.n	8007ccc <TIM_OC4_SetConfig+0xc0>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a1e      	ldr	r2, [pc, #120]	; (8007d28 <TIM_OC4_SetConfig+0x11c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d00b      	beq.n	8007ccc <TIM_OC4_SetConfig+0xc0>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a1d      	ldr	r2, [pc, #116]	; (8007d2c <TIM_OC4_SetConfig+0x120>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d007      	beq.n	8007ccc <TIM_OC4_SetConfig+0xc0>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a1c      	ldr	r2, [pc, #112]	; (8007d30 <TIM_OC4_SetConfig+0x124>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d003      	beq.n	8007ccc <TIM_OC4_SetConfig+0xc0>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a17      	ldr	r2, [pc, #92]	; (8007d24 <TIM_OC4_SetConfig+0x118>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d113      	bne.n	8007cf4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cd2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cda:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	019b      	lsls	r3, r3, #6
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	019b      	lsls	r3, r3, #6
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	621a      	str	r2, [r3, #32]
}
 8007d0e:	bf00      	nop
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	40012c00 	.word	0x40012c00
 8007d20:	40013400 	.word	0x40013400
 8007d24:	40015000 	.word	0x40015000
 8007d28:	40014000 	.word	0x40014000
 8007d2c:	40014400 	.word	0x40014400
 8007d30:	40014800 	.word	0x40014800

08007d34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a19      	ldr	r2, [pc, #100]	; (8007df0 <TIM_OC5_SetConfig+0xbc>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d013      	beq.n	8007db6 <TIM_OC5_SetConfig+0x82>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a18      	ldr	r2, [pc, #96]	; (8007df4 <TIM_OC5_SetConfig+0xc0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00f      	beq.n	8007db6 <TIM_OC5_SetConfig+0x82>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a17      	ldr	r2, [pc, #92]	; (8007df8 <TIM_OC5_SetConfig+0xc4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00b      	beq.n	8007db6 <TIM_OC5_SetConfig+0x82>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <TIM_OC5_SetConfig+0xc8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d007      	beq.n	8007db6 <TIM_OC5_SetConfig+0x82>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <TIM_OC5_SetConfig+0xcc>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d003      	beq.n	8007db6 <TIM_OC5_SetConfig+0x82>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a14      	ldr	r2, [pc, #80]	; (8007e04 <TIM_OC5_SetConfig+0xd0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d109      	bne.n	8007dca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	021b      	lsls	r3, r3, #8
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	621a      	str	r2, [r3, #32]
}
 8007de4:	bf00      	nop
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	40012c00 	.word	0x40012c00
 8007df4:	40013400 	.word	0x40013400
 8007df8:	40014000 	.word	0x40014000
 8007dfc:	40014400 	.word	0x40014400
 8007e00:	40014800 	.word	0x40014800
 8007e04:	40015000 	.word	0x40015000

08007e08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	051b      	lsls	r3, r3, #20
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a1a      	ldr	r2, [pc, #104]	; (8007ec8 <TIM_OC6_SetConfig+0xc0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d013      	beq.n	8007e8c <TIM_OC6_SetConfig+0x84>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a19      	ldr	r2, [pc, #100]	; (8007ecc <TIM_OC6_SetConfig+0xc4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d00f      	beq.n	8007e8c <TIM_OC6_SetConfig+0x84>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a18      	ldr	r2, [pc, #96]	; (8007ed0 <TIM_OC6_SetConfig+0xc8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00b      	beq.n	8007e8c <TIM_OC6_SetConfig+0x84>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a17      	ldr	r2, [pc, #92]	; (8007ed4 <TIM_OC6_SetConfig+0xcc>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d007      	beq.n	8007e8c <TIM_OC6_SetConfig+0x84>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <TIM_OC6_SetConfig+0xd0>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d003      	beq.n	8007e8c <TIM_OC6_SetConfig+0x84>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a15      	ldr	r2, [pc, #84]	; (8007edc <TIM_OC6_SetConfig+0xd4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d109      	bne.n	8007ea0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	029b      	lsls	r3, r3, #10
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40013400 	.word	0x40013400
 8007ed0:	40014000 	.word	0x40014000
 8007ed4:	40014400 	.word	0x40014400
 8007ed8:	40014800 	.word	0x40014800
 8007edc:	40015000 	.word	0x40015000

08007ee0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	f023 0201 	bic.w	r2, r3, #1
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4a28      	ldr	r2, [pc, #160]	; (8007fac <TIM_TI1_SetConfig+0xcc>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d01b      	beq.n	8007f46 <TIM_TI1_SetConfig+0x66>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f14:	d017      	beq.n	8007f46 <TIM_TI1_SetConfig+0x66>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a25      	ldr	r2, [pc, #148]	; (8007fb0 <TIM_TI1_SetConfig+0xd0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d013      	beq.n	8007f46 <TIM_TI1_SetConfig+0x66>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4a24      	ldr	r2, [pc, #144]	; (8007fb4 <TIM_TI1_SetConfig+0xd4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00f      	beq.n	8007f46 <TIM_TI1_SetConfig+0x66>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4a23      	ldr	r2, [pc, #140]	; (8007fb8 <TIM_TI1_SetConfig+0xd8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00b      	beq.n	8007f46 <TIM_TI1_SetConfig+0x66>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4a22      	ldr	r2, [pc, #136]	; (8007fbc <TIM_TI1_SetConfig+0xdc>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d007      	beq.n	8007f46 <TIM_TI1_SetConfig+0x66>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <TIM_TI1_SetConfig+0xe0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d003      	beq.n	8007f46 <TIM_TI1_SetConfig+0x66>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4a20      	ldr	r2, [pc, #128]	; (8007fc4 <TIM_TI1_SetConfig+0xe4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d101      	bne.n	8007f4a <TIM_TI1_SetConfig+0x6a>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <TIM_TI1_SetConfig+0x6c>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d008      	beq.n	8007f62 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e003      	b.n	8007f6a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f043 0301 	orr.w	r3, r3, #1
 8007f68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f023 030a 	bic.w	r3, r3, #10
 8007f84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f003 030a 	and.w	r3, r3, #10
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	621a      	str	r2, [r3, #32]
}
 8007f9e:	bf00      	nop
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40012c00 	.word	0x40012c00
 8007fb0:	40000400 	.word	0x40000400
 8007fb4:	40000800 	.word	0x40000800
 8007fb8:	40000c00 	.word	0x40000c00
 8007fbc:	40013400 	.word	0x40013400
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40015000 	.word	0x40015000

08007fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f023 0201 	bic.w	r2, r3, #1
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f023 030a 	bic.w	r3, r3, #10
 8008004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	621a      	str	r2, [r3, #32]
}
 800801a:	bf00      	nop
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008026:	b480      	push	{r7}
 8008028:	b087      	sub	sp, #28
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	f023 0210 	bic.w	r2, r3, #16
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008052:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	4313      	orrs	r3, r2
 800805c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	031b      	lsls	r3, r3, #12
 800806a:	b29b      	uxth	r3, r3
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	4313      	orrs	r3, r2
 8008070:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008078:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	011b      	lsls	r3, r3, #4
 800807e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	621a      	str	r2, [r3, #32]
}
 8008094:	bf00      	nop
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	f023 0210 	bic.w	r2, r3, #16
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	031b      	lsls	r3, r3, #12
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	011b      	lsls	r3, r3, #4
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	621a      	str	r2, [r3, #32]
}
 80080f4:	bf00      	nop
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f023 0303 	bic.w	r3, r3, #3
 800812c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800813c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	b2db      	uxtb	r3, r3
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008150:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	621a      	str	r2, [r3, #32]
}
 800816c:	bf00      	nop
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	031b      	lsls	r3, r3, #12
 80081bc:	b29b      	uxth	r3, r3
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80081ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	031b      	lsls	r3, r3, #12
 80081d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	621a      	str	r2, [r3, #32]
}
 80081e6:	bf00      	nop
 80081e8:	371c      	adds	r7, #28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4313      	orrs	r3, r2
 8008214:	f043 0307 	orr.w	r3, r3, #7
 8008218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	609a      	str	r2, [r3, #8]
}
 8008220:	bf00      	nop
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	021a      	lsls	r2, r3, #8
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	431a      	orrs	r2, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	4313      	orrs	r3, r2
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	609a      	str	r2, [r3, #8]
}
 8008260:	bf00      	nop
 8008262:	371c      	adds	r7, #28
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008280:	2302      	movs	r3, #2
 8008282:	e074      	b.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a34      	ldr	r2, [pc, #208]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d009      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a33      	ldr	r2, [pc, #204]	; (8008380 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d004      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a31      	ldr	r2, [pc, #196]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d108      	bne.n	80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80082da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a21      	ldr	r2, [pc, #132]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d022      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008304:	d01d      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a1f      	ldr	r2, [pc, #124]	; (8008388 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d018      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a1d      	ldr	r2, [pc, #116]	; (800838c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d013      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d00e      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a15      	ldr	r2, [pc, #84]	; (8008380 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d009      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a18      	ldr	r2, [pc, #96]	; (8008394 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d004      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a11      	ldr	r2, [pc, #68]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d10c      	bne.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4313      	orrs	r3, r2
 8008352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	40012c00 	.word	0x40012c00
 8008380:	40013400 	.word	0x40013400
 8008384:	40015000 	.word	0x40015000
 8008388:	40000400 	.word	0x40000400
 800838c:	40000800 	.word	0x40000800
 8008390:	40000c00 	.word	0x40000c00
 8008394:	40014000 	.word	0x40014000

08008398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <_ZdlPvj>:
 8008424:	f000 b81a 	b.w	800845c <_ZdlPv>

08008428 <_Znwj>:
 8008428:	2801      	cmp	r0, #1
 800842a:	bf38      	it	cc
 800842c:	2001      	movcc	r0, #1
 800842e:	b510      	push	{r4, lr}
 8008430:	4604      	mov	r4, r0
 8008432:	4620      	mov	r0, r4
 8008434:	f001 f8b8 	bl	80095a8 <malloc>
 8008438:	b100      	cbz	r0, 800843c <_Znwj+0x14>
 800843a:	bd10      	pop	{r4, pc}
 800843c:	f000 f810 	bl	8008460 <_ZSt15get_new_handlerv>
 8008440:	b908      	cbnz	r0, 8008446 <_Znwj+0x1e>
 8008442:	f001 f8a9 	bl	8009598 <abort>
 8008446:	4780      	blx	r0
 8008448:	e7f3      	b.n	8008432 <_Znwj+0xa>

0800844a <_ZSt17__throw_bad_allocv>:
 800844a:	b508      	push	{r3, lr}
 800844c:	f001 f8a4 	bl	8009598 <abort>

08008450 <_ZSt28__throw_bad_array_new_lengthv>:
 8008450:	b508      	push	{r3, lr}
 8008452:	f001 f8a1 	bl	8009598 <abort>

08008456 <_ZSt20__throw_length_errorPKc>:
 8008456:	b508      	push	{r3, lr}
 8008458:	f001 f89e 	bl	8009598 <abort>

0800845c <_ZdlPv>:
 800845c:	f001 b8ac 	b.w	80095b8 <free>

08008460 <_ZSt15get_new_handlerv>:
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <_ZSt15get_new_handlerv+0xc>)
 8008462:	6818      	ldr	r0, [r3, #0]
 8008464:	f3bf 8f5b 	dmb	ish
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	2000037c 	.word	0x2000037c

08008470 <cos>:
 8008470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008472:	ec53 2b10 	vmov	r2, r3, d0
 8008476:	4826      	ldr	r0, [pc, #152]	; (8008510 <cos+0xa0>)
 8008478:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800847c:	4281      	cmp	r1, r0
 800847e:	dc06      	bgt.n	800848e <cos+0x1e>
 8008480:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008508 <cos+0x98>
 8008484:	b005      	add	sp, #20
 8008486:	f85d eb04 	ldr.w	lr, [sp], #4
 800848a:	f000 b89d 	b.w	80085c8 <__kernel_cos>
 800848e:	4821      	ldr	r0, [pc, #132]	; (8008514 <cos+0xa4>)
 8008490:	4281      	cmp	r1, r0
 8008492:	dd09      	ble.n	80084a8 <cos+0x38>
 8008494:	ee10 0a10 	vmov	r0, s0
 8008498:	4619      	mov	r1, r3
 800849a:	f7f7 fec1 	bl	8000220 <__aeabi_dsub>
 800849e:	ec41 0b10 	vmov	d0, r0, r1
 80084a2:	b005      	add	sp, #20
 80084a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80084a8:	4668      	mov	r0, sp
 80084aa:	f000 fa15 	bl	80088d8 <__ieee754_rem_pio2>
 80084ae:	f000 0003 	and.w	r0, r0, #3
 80084b2:	2801      	cmp	r0, #1
 80084b4:	d00b      	beq.n	80084ce <cos+0x5e>
 80084b6:	2802      	cmp	r0, #2
 80084b8:	d016      	beq.n	80084e8 <cos+0x78>
 80084ba:	b9e0      	cbnz	r0, 80084f6 <cos+0x86>
 80084bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084c0:	ed9d 0b00 	vldr	d0, [sp]
 80084c4:	f000 f880 	bl	80085c8 <__kernel_cos>
 80084c8:	ec51 0b10 	vmov	r0, r1, d0
 80084cc:	e7e7      	b.n	800849e <cos+0x2e>
 80084ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084d2:	ed9d 0b00 	vldr	d0, [sp]
 80084d6:	f000 f93f 	bl	8008758 <__kernel_sin>
 80084da:	ec53 2b10 	vmov	r2, r3, d0
 80084de:	ee10 0a10 	vmov	r0, s0
 80084e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80084e6:	e7da      	b.n	800849e <cos+0x2e>
 80084e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084ec:	ed9d 0b00 	vldr	d0, [sp]
 80084f0:	f000 f86a 	bl	80085c8 <__kernel_cos>
 80084f4:	e7f1      	b.n	80084da <cos+0x6a>
 80084f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084fa:	ed9d 0b00 	vldr	d0, [sp]
 80084fe:	2001      	movs	r0, #1
 8008500:	f000 f92a 	bl	8008758 <__kernel_sin>
 8008504:	e7e0      	b.n	80084c8 <cos+0x58>
 8008506:	bf00      	nop
	...
 8008510:	3fe921fb 	.word	0x3fe921fb
 8008514:	7fefffff 	.word	0x7fefffff

08008518 <sin>:
 8008518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800851a:	ec53 2b10 	vmov	r2, r3, d0
 800851e:	4828      	ldr	r0, [pc, #160]	; (80085c0 <sin+0xa8>)
 8008520:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008524:	4281      	cmp	r1, r0
 8008526:	dc07      	bgt.n	8008538 <sin+0x20>
 8008528:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80085b8 <sin+0xa0>
 800852c:	2000      	movs	r0, #0
 800852e:	b005      	add	sp, #20
 8008530:	f85d eb04 	ldr.w	lr, [sp], #4
 8008534:	f000 b910 	b.w	8008758 <__kernel_sin>
 8008538:	4822      	ldr	r0, [pc, #136]	; (80085c4 <sin+0xac>)
 800853a:	4281      	cmp	r1, r0
 800853c:	dd09      	ble.n	8008552 <sin+0x3a>
 800853e:	ee10 0a10 	vmov	r0, s0
 8008542:	4619      	mov	r1, r3
 8008544:	f7f7 fe6c 	bl	8000220 <__aeabi_dsub>
 8008548:	ec41 0b10 	vmov	d0, r0, r1
 800854c:	b005      	add	sp, #20
 800854e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008552:	4668      	mov	r0, sp
 8008554:	f000 f9c0 	bl	80088d8 <__ieee754_rem_pio2>
 8008558:	f000 0003 	and.w	r0, r0, #3
 800855c:	2801      	cmp	r0, #1
 800855e:	d00c      	beq.n	800857a <sin+0x62>
 8008560:	2802      	cmp	r0, #2
 8008562:	d011      	beq.n	8008588 <sin+0x70>
 8008564:	b9f0      	cbnz	r0, 80085a4 <sin+0x8c>
 8008566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800856a:	ed9d 0b00 	vldr	d0, [sp]
 800856e:	2001      	movs	r0, #1
 8008570:	f000 f8f2 	bl	8008758 <__kernel_sin>
 8008574:	ec51 0b10 	vmov	r0, r1, d0
 8008578:	e7e6      	b.n	8008548 <sin+0x30>
 800857a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800857e:	ed9d 0b00 	vldr	d0, [sp]
 8008582:	f000 f821 	bl	80085c8 <__kernel_cos>
 8008586:	e7f5      	b.n	8008574 <sin+0x5c>
 8008588:	ed9d 1b02 	vldr	d1, [sp, #8]
 800858c:	ed9d 0b00 	vldr	d0, [sp]
 8008590:	2001      	movs	r0, #1
 8008592:	f000 f8e1 	bl	8008758 <__kernel_sin>
 8008596:	ec53 2b10 	vmov	r2, r3, d0
 800859a:	ee10 0a10 	vmov	r0, s0
 800859e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80085a2:	e7d1      	b.n	8008548 <sin+0x30>
 80085a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085a8:	ed9d 0b00 	vldr	d0, [sp]
 80085ac:	f000 f80c 	bl	80085c8 <__kernel_cos>
 80085b0:	e7f1      	b.n	8008596 <sin+0x7e>
 80085b2:	bf00      	nop
 80085b4:	f3af 8000 	nop.w
	...
 80085c0:	3fe921fb 	.word	0x3fe921fb
 80085c4:	7fefffff 	.word	0x7fefffff

080085c8 <__kernel_cos>:
 80085c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	ec57 6b10 	vmov	r6, r7, d0
 80085d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80085d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80085d8:	ed8d 1b00 	vstr	d1, [sp]
 80085dc:	da07      	bge.n	80085ee <__kernel_cos+0x26>
 80085de:	ee10 0a10 	vmov	r0, s0
 80085e2:	4639      	mov	r1, r7
 80085e4:	f7f8 fa6e 	bl	8000ac4 <__aeabi_d2iz>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f000 8088 	beq.w	80086fe <__kernel_cos+0x136>
 80085ee:	4632      	mov	r2, r6
 80085f0:	463b      	mov	r3, r7
 80085f2:	4630      	mov	r0, r6
 80085f4:	4639      	mov	r1, r7
 80085f6:	f7f7 ffcb 	bl	8000590 <__aeabi_dmul>
 80085fa:	4b51      	ldr	r3, [pc, #324]	; (8008740 <__kernel_cos+0x178>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	4604      	mov	r4, r0
 8008600:	460d      	mov	r5, r1
 8008602:	f7f7 ffc5 	bl	8000590 <__aeabi_dmul>
 8008606:	a340      	add	r3, pc, #256	; (adr r3, 8008708 <__kernel_cos+0x140>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	4682      	mov	sl, r0
 800860e:	468b      	mov	fp, r1
 8008610:	4620      	mov	r0, r4
 8008612:	4629      	mov	r1, r5
 8008614:	f7f7 ffbc 	bl	8000590 <__aeabi_dmul>
 8008618:	a33d      	add	r3, pc, #244	; (adr r3, 8008710 <__kernel_cos+0x148>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f7 fe01 	bl	8000224 <__adddf3>
 8008622:	4622      	mov	r2, r4
 8008624:	462b      	mov	r3, r5
 8008626:	f7f7 ffb3 	bl	8000590 <__aeabi_dmul>
 800862a:	a33b      	add	r3, pc, #236	; (adr r3, 8008718 <__kernel_cos+0x150>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 fdf6 	bl	8000220 <__aeabi_dsub>
 8008634:	4622      	mov	r2, r4
 8008636:	462b      	mov	r3, r5
 8008638:	f7f7 ffaa 	bl	8000590 <__aeabi_dmul>
 800863c:	a338      	add	r3, pc, #224	; (adr r3, 8008720 <__kernel_cos+0x158>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f7f7 fdef 	bl	8000224 <__adddf3>
 8008646:	4622      	mov	r2, r4
 8008648:	462b      	mov	r3, r5
 800864a:	f7f7 ffa1 	bl	8000590 <__aeabi_dmul>
 800864e:	a336      	add	r3, pc, #216	; (adr r3, 8008728 <__kernel_cos+0x160>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f7f7 fde4 	bl	8000220 <__aeabi_dsub>
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	f7f7 ff98 	bl	8000590 <__aeabi_dmul>
 8008660:	a333      	add	r3, pc, #204	; (adr r3, 8008730 <__kernel_cos+0x168>)
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f7f7 fddd 	bl	8000224 <__adddf3>
 800866a:	4622      	mov	r2, r4
 800866c:	462b      	mov	r3, r5
 800866e:	f7f7 ff8f 	bl	8000590 <__aeabi_dmul>
 8008672:	4622      	mov	r2, r4
 8008674:	462b      	mov	r3, r5
 8008676:	f7f7 ff8b 	bl	8000590 <__aeabi_dmul>
 800867a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800867e:	4604      	mov	r4, r0
 8008680:	460d      	mov	r5, r1
 8008682:	4630      	mov	r0, r6
 8008684:	4639      	mov	r1, r7
 8008686:	f7f7 ff83 	bl	8000590 <__aeabi_dmul>
 800868a:	460b      	mov	r3, r1
 800868c:	4602      	mov	r2, r0
 800868e:	4629      	mov	r1, r5
 8008690:	4620      	mov	r0, r4
 8008692:	f7f7 fdc5 	bl	8000220 <__aeabi_dsub>
 8008696:	4b2b      	ldr	r3, [pc, #172]	; (8008744 <__kernel_cos+0x17c>)
 8008698:	4598      	cmp	r8, r3
 800869a:	4606      	mov	r6, r0
 800869c:	460f      	mov	r7, r1
 800869e:	dc10      	bgt.n	80086c2 <__kernel_cos+0xfa>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4650      	mov	r0, sl
 80086a6:	4659      	mov	r1, fp
 80086a8:	f7f7 fdba 	bl	8000220 <__aeabi_dsub>
 80086ac:	460b      	mov	r3, r1
 80086ae:	4926      	ldr	r1, [pc, #152]	; (8008748 <__kernel_cos+0x180>)
 80086b0:	4602      	mov	r2, r0
 80086b2:	2000      	movs	r0, #0
 80086b4:	f7f7 fdb4 	bl	8000220 <__aeabi_dsub>
 80086b8:	ec41 0b10 	vmov	d0, r0, r1
 80086bc:	b003      	add	sp, #12
 80086be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c2:	4b22      	ldr	r3, [pc, #136]	; (800874c <__kernel_cos+0x184>)
 80086c4:	4920      	ldr	r1, [pc, #128]	; (8008748 <__kernel_cos+0x180>)
 80086c6:	4598      	cmp	r8, r3
 80086c8:	bfcc      	ite	gt
 80086ca:	4d21      	ldrgt	r5, [pc, #132]	; (8008750 <__kernel_cos+0x188>)
 80086cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80086d0:	2400      	movs	r4, #0
 80086d2:	4622      	mov	r2, r4
 80086d4:	462b      	mov	r3, r5
 80086d6:	2000      	movs	r0, #0
 80086d8:	f7f7 fda2 	bl	8000220 <__aeabi_dsub>
 80086dc:	4622      	mov	r2, r4
 80086de:	4680      	mov	r8, r0
 80086e0:	4689      	mov	r9, r1
 80086e2:	462b      	mov	r3, r5
 80086e4:	4650      	mov	r0, sl
 80086e6:	4659      	mov	r1, fp
 80086e8:	f7f7 fd9a 	bl	8000220 <__aeabi_dsub>
 80086ec:	4632      	mov	r2, r6
 80086ee:	463b      	mov	r3, r7
 80086f0:	f7f7 fd96 	bl	8000220 <__aeabi_dsub>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4640      	mov	r0, r8
 80086fa:	4649      	mov	r1, r9
 80086fc:	e7da      	b.n	80086b4 <__kernel_cos+0xec>
 80086fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008738 <__kernel_cos+0x170>
 8008702:	e7db      	b.n	80086bc <__kernel_cos+0xf4>
 8008704:	f3af 8000 	nop.w
 8008708:	be8838d4 	.word	0xbe8838d4
 800870c:	bda8fae9 	.word	0xbda8fae9
 8008710:	bdb4b1c4 	.word	0xbdb4b1c4
 8008714:	3e21ee9e 	.word	0x3e21ee9e
 8008718:	809c52ad 	.word	0x809c52ad
 800871c:	3e927e4f 	.word	0x3e927e4f
 8008720:	19cb1590 	.word	0x19cb1590
 8008724:	3efa01a0 	.word	0x3efa01a0
 8008728:	16c15177 	.word	0x16c15177
 800872c:	3f56c16c 	.word	0x3f56c16c
 8008730:	5555554c 	.word	0x5555554c
 8008734:	3fa55555 	.word	0x3fa55555
 8008738:	00000000 	.word	0x00000000
 800873c:	3ff00000 	.word	0x3ff00000
 8008740:	3fe00000 	.word	0x3fe00000
 8008744:	3fd33332 	.word	0x3fd33332
 8008748:	3ff00000 	.word	0x3ff00000
 800874c:	3fe90000 	.word	0x3fe90000
 8008750:	3fd20000 	.word	0x3fd20000
 8008754:	00000000 	.word	0x00000000

08008758 <__kernel_sin>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	ed2d 8b04 	vpush	{d8-d9}
 8008760:	eeb0 8a41 	vmov.f32	s16, s2
 8008764:	eef0 8a61 	vmov.f32	s17, s3
 8008768:	ec55 4b10 	vmov	r4, r5, d0
 800876c:	b083      	sub	sp, #12
 800876e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008772:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008776:	9001      	str	r0, [sp, #4]
 8008778:	da06      	bge.n	8008788 <__kernel_sin+0x30>
 800877a:	ee10 0a10 	vmov	r0, s0
 800877e:	4629      	mov	r1, r5
 8008780:	f7f8 f9a0 	bl	8000ac4 <__aeabi_d2iz>
 8008784:	2800      	cmp	r0, #0
 8008786:	d051      	beq.n	800882c <__kernel_sin+0xd4>
 8008788:	4622      	mov	r2, r4
 800878a:	462b      	mov	r3, r5
 800878c:	4620      	mov	r0, r4
 800878e:	4629      	mov	r1, r5
 8008790:	f7f7 fefe 	bl	8000590 <__aeabi_dmul>
 8008794:	4682      	mov	sl, r0
 8008796:	468b      	mov	fp, r1
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4620      	mov	r0, r4
 800879e:	4629      	mov	r1, r5
 80087a0:	f7f7 fef6 	bl	8000590 <__aeabi_dmul>
 80087a4:	a341      	add	r3, pc, #260	; (adr r3, 80088ac <__kernel_sin+0x154>)
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	4680      	mov	r8, r0
 80087ac:	4689      	mov	r9, r1
 80087ae:	4650      	mov	r0, sl
 80087b0:	4659      	mov	r1, fp
 80087b2:	f7f7 feed 	bl	8000590 <__aeabi_dmul>
 80087b6:	a33f      	add	r3, pc, #252	; (adr r3, 80088b4 <__kernel_sin+0x15c>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	f7f7 fd30 	bl	8000220 <__aeabi_dsub>
 80087c0:	4652      	mov	r2, sl
 80087c2:	465b      	mov	r3, fp
 80087c4:	f7f7 fee4 	bl	8000590 <__aeabi_dmul>
 80087c8:	a33c      	add	r3, pc, #240	; (adr r3, 80088bc <__kernel_sin+0x164>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 fd29 	bl	8000224 <__adddf3>
 80087d2:	4652      	mov	r2, sl
 80087d4:	465b      	mov	r3, fp
 80087d6:	f7f7 fedb 	bl	8000590 <__aeabi_dmul>
 80087da:	a33a      	add	r3, pc, #232	; (adr r3, 80088c4 <__kernel_sin+0x16c>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	f7f7 fd1e 	bl	8000220 <__aeabi_dsub>
 80087e4:	4652      	mov	r2, sl
 80087e6:	465b      	mov	r3, fp
 80087e8:	f7f7 fed2 	bl	8000590 <__aeabi_dmul>
 80087ec:	a337      	add	r3, pc, #220	; (adr r3, 80088cc <__kernel_sin+0x174>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	f7f7 fd17 	bl	8000224 <__adddf3>
 80087f6:	9b01      	ldr	r3, [sp, #4]
 80087f8:	4606      	mov	r6, r0
 80087fa:	460f      	mov	r7, r1
 80087fc:	b9eb      	cbnz	r3, 800883a <__kernel_sin+0xe2>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4650      	mov	r0, sl
 8008804:	4659      	mov	r1, fp
 8008806:	f7f7 fec3 	bl	8000590 <__aeabi_dmul>
 800880a:	a325      	add	r3, pc, #148	; (adr r3, 80088a0 <__kernel_sin+0x148>)
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	f7f7 fd06 	bl	8000220 <__aeabi_dsub>
 8008814:	4642      	mov	r2, r8
 8008816:	464b      	mov	r3, r9
 8008818:	f7f7 feba 	bl	8000590 <__aeabi_dmul>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4620      	mov	r0, r4
 8008822:	4629      	mov	r1, r5
 8008824:	f7f7 fcfe 	bl	8000224 <__adddf3>
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	ec45 4b10 	vmov	d0, r4, r5
 8008830:	b003      	add	sp, #12
 8008832:	ecbd 8b04 	vpop	{d8-d9}
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	4b1b      	ldr	r3, [pc, #108]	; (80088a8 <__kernel_sin+0x150>)
 800883c:	ec51 0b18 	vmov	r0, r1, d8
 8008840:	2200      	movs	r2, #0
 8008842:	f7f7 fea5 	bl	8000590 <__aeabi_dmul>
 8008846:	4632      	mov	r2, r6
 8008848:	ec41 0b19 	vmov	d9, r0, r1
 800884c:	463b      	mov	r3, r7
 800884e:	4640      	mov	r0, r8
 8008850:	4649      	mov	r1, r9
 8008852:	f7f7 fe9d 	bl	8000590 <__aeabi_dmul>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	ec51 0b19 	vmov	r0, r1, d9
 800885e:	f7f7 fcdf 	bl	8000220 <__aeabi_dsub>
 8008862:	4652      	mov	r2, sl
 8008864:	465b      	mov	r3, fp
 8008866:	f7f7 fe93 	bl	8000590 <__aeabi_dmul>
 800886a:	ec53 2b18 	vmov	r2, r3, d8
 800886e:	f7f7 fcd7 	bl	8000220 <__aeabi_dsub>
 8008872:	a30b      	add	r3, pc, #44	; (adr r3, 80088a0 <__kernel_sin+0x148>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	4606      	mov	r6, r0
 800887a:	460f      	mov	r7, r1
 800887c:	4640      	mov	r0, r8
 800887e:	4649      	mov	r1, r9
 8008880:	f7f7 fe86 	bl	8000590 <__aeabi_dmul>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	f7f7 fcca 	bl	8000224 <__adddf3>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4620      	mov	r0, r4
 8008896:	4629      	mov	r1, r5
 8008898:	f7f7 fcc2 	bl	8000220 <__aeabi_dsub>
 800889c:	e7c4      	b.n	8008828 <__kernel_sin+0xd0>
 800889e:	bf00      	nop
 80088a0:	55555549 	.word	0x55555549
 80088a4:	3fc55555 	.word	0x3fc55555
 80088a8:	3fe00000 	.word	0x3fe00000
 80088ac:	5acfd57c 	.word	0x5acfd57c
 80088b0:	3de5d93a 	.word	0x3de5d93a
 80088b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80088b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80088bc:	57b1fe7d 	.word	0x57b1fe7d
 80088c0:	3ec71de3 	.word	0x3ec71de3
 80088c4:	19c161d5 	.word	0x19c161d5
 80088c8:	3f2a01a0 	.word	0x3f2a01a0
 80088cc:	1110f8a6 	.word	0x1110f8a6
 80088d0:	3f811111 	.word	0x3f811111
 80088d4:	00000000 	.word	0x00000000

080088d8 <__ieee754_rem_pio2>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	ed2d 8b02 	vpush	{d8}
 80088e0:	ec55 4b10 	vmov	r4, r5, d0
 80088e4:	4bca      	ldr	r3, [pc, #808]	; (8008c10 <__ieee754_rem_pio2+0x338>)
 80088e6:	b08b      	sub	sp, #44	; 0x2c
 80088e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80088ec:	4598      	cmp	r8, r3
 80088ee:	4682      	mov	sl, r0
 80088f0:	9502      	str	r5, [sp, #8]
 80088f2:	dc08      	bgt.n	8008906 <__ieee754_rem_pio2+0x2e>
 80088f4:	2200      	movs	r2, #0
 80088f6:	2300      	movs	r3, #0
 80088f8:	ed80 0b00 	vstr	d0, [r0]
 80088fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008900:	f04f 0b00 	mov.w	fp, #0
 8008904:	e028      	b.n	8008958 <__ieee754_rem_pio2+0x80>
 8008906:	4bc3      	ldr	r3, [pc, #780]	; (8008c14 <__ieee754_rem_pio2+0x33c>)
 8008908:	4598      	cmp	r8, r3
 800890a:	dc78      	bgt.n	80089fe <__ieee754_rem_pio2+0x126>
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	4ec2      	ldr	r6, [pc, #776]	; (8008c18 <__ieee754_rem_pio2+0x340>)
 8008910:	2b00      	cmp	r3, #0
 8008912:	ee10 0a10 	vmov	r0, s0
 8008916:	a3b0      	add	r3, pc, #704	; (adr r3, 8008bd8 <__ieee754_rem_pio2+0x300>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	4629      	mov	r1, r5
 800891e:	dd39      	ble.n	8008994 <__ieee754_rem_pio2+0xbc>
 8008920:	f7f7 fc7e 	bl	8000220 <__aeabi_dsub>
 8008924:	45b0      	cmp	r8, r6
 8008926:	4604      	mov	r4, r0
 8008928:	460d      	mov	r5, r1
 800892a:	d01b      	beq.n	8008964 <__ieee754_rem_pio2+0x8c>
 800892c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008be0 <__ieee754_rem_pio2+0x308>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f7 fc75 	bl	8000220 <__aeabi_dsub>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	e9ca 2300 	strd	r2, r3, [sl]
 800893e:	4620      	mov	r0, r4
 8008940:	4629      	mov	r1, r5
 8008942:	f7f7 fc6d 	bl	8000220 <__aeabi_dsub>
 8008946:	a3a6      	add	r3, pc, #664	; (adr r3, 8008be0 <__ieee754_rem_pio2+0x308>)
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f7f7 fc68 	bl	8000220 <__aeabi_dsub>
 8008950:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008954:	f04f 0b01 	mov.w	fp, #1
 8008958:	4658      	mov	r0, fp
 800895a:	b00b      	add	sp, #44	; 0x2c
 800895c:	ecbd 8b02 	vpop	{d8}
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	a3a0      	add	r3, pc, #640	; (adr r3, 8008be8 <__ieee754_rem_pio2+0x310>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	f7f7 fc59 	bl	8000220 <__aeabi_dsub>
 800896e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008bf0 <__ieee754_rem_pio2+0x318>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	4604      	mov	r4, r0
 8008976:	460d      	mov	r5, r1
 8008978:	f7f7 fc52 	bl	8000220 <__aeabi_dsub>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	e9ca 2300 	strd	r2, r3, [sl]
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f7 fc4a 	bl	8000220 <__aeabi_dsub>
 800898c:	a398      	add	r3, pc, #608	; (adr r3, 8008bf0 <__ieee754_rem_pio2+0x318>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	e7db      	b.n	800894c <__ieee754_rem_pio2+0x74>
 8008994:	f7f7 fc46 	bl	8000224 <__adddf3>
 8008998:	45b0      	cmp	r8, r6
 800899a:	4604      	mov	r4, r0
 800899c:	460d      	mov	r5, r1
 800899e:	d016      	beq.n	80089ce <__ieee754_rem_pio2+0xf6>
 80089a0:	a38f      	add	r3, pc, #572	; (adr r3, 8008be0 <__ieee754_rem_pio2+0x308>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 fc3d 	bl	8000224 <__adddf3>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	e9ca 2300 	strd	r2, r3, [sl]
 80089b2:	4620      	mov	r0, r4
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7f7 fc33 	bl	8000220 <__aeabi_dsub>
 80089ba:	a389      	add	r3, pc, #548	; (adr r3, 8008be0 <__ieee754_rem_pio2+0x308>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fc30 	bl	8000224 <__adddf3>
 80089c4:	f04f 3bff 	mov.w	fp, #4294967295
 80089c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80089cc:	e7c4      	b.n	8008958 <__ieee754_rem_pio2+0x80>
 80089ce:	a386      	add	r3, pc, #536	; (adr r3, 8008be8 <__ieee754_rem_pio2+0x310>)
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	f7f7 fc26 	bl	8000224 <__adddf3>
 80089d8:	a385      	add	r3, pc, #532	; (adr r3, 8008bf0 <__ieee754_rem_pio2+0x318>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	4604      	mov	r4, r0
 80089e0:	460d      	mov	r5, r1
 80089e2:	f7f7 fc1f 	bl	8000224 <__adddf3>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	e9ca 2300 	strd	r2, r3, [sl]
 80089ee:	4620      	mov	r0, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7f7 fc15 	bl	8000220 <__aeabi_dsub>
 80089f6:	a37e      	add	r3, pc, #504	; (adr r3, 8008bf0 <__ieee754_rem_pio2+0x318>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	e7e0      	b.n	80089c0 <__ieee754_rem_pio2+0xe8>
 80089fe:	4b87      	ldr	r3, [pc, #540]	; (8008c1c <__ieee754_rem_pio2+0x344>)
 8008a00:	4598      	cmp	r8, r3
 8008a02:	f300 80d8 	bgt.w	8008bb6 <__ieee754_rem_pio2+0x2de>
 8008a06:	f000 f96d 	bl	8008ce4 <fabs>
 8008a0a:	ec55 4b10 	vmov	r4, r5, d0
 8008a0e:	ee10 0a10 	vmov	r0, s0
 8008a12:	a379      	add	r3, pc, #484	; (adr r3, 8008bf8 <__ieee754_rem_pio2+0x320>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7f7 fdb9 	bl	8000590 <__aeabi_dmul>
 8008a1e:	4b80      	ldr	r3, [pc, #512]	; (8008c20 <__ieee754_rem_pio2+0x348>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	f7f7 fbff 	bl	8000224 <__adddf3>
 8008a26:	f7f8 f84d 	bl	8000ac4 <__aeabi_d2iz>
 8008a2a:	4683      	mov	fp, r0
 8008a2c:	f7f7 fd46 	bl	80004bc <__aeabi_i2d>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	ec43 2b18 	vmov	d8, r2, r3
 8008a38:	a367      	add	r3, pc, #412	; (adr r3, 8008bd8 <__ieee754_rem_pio2+0x300>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fda7 	bl	8000590 <__aeabi_dmul>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4620      	mov	r0, r4
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7f7 fbe9 	bl	8000220 <__aeabi_dsub>
 8008a4e:	a364      	add	r3, pc, #400	; (adr r3, 8008be0 <__ieee754_rem_pio2+0x308>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	ec51 0b18 	vmov	r0, r1, d8
 8008a5c:	f7f7 fd98 	bl	8000590 <__aeabi_dmul>
 8008a60:	f1bb 0f1f 	cmp.w	fp, #31
 8008a64:	4604      	mov	r4, r0
 8008a66:	460d      	mov	r5, r1
 8008a68:	dc0d      	bgt.n	8008a86 <__ieee754_rem_pio2+0x1ae>
 8008a6a:	4b6e      	ldr	r3, [pc, #440]	; (8008c24 <__ieee754_rem_pio2+0x34c>)
 8008a6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a74:	4543      	cmp	r3, r8
 8008a76:	d006      	beq.n	8008a86 <__ieee754_rem_pio2+0x1ae>
 8008a78:	4622      	mov	r2, r4
 8008a7a:	462b      	mov	r3, r5
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	4639      	mov	r1, r7
 8008a80:	f7f7 fbce 	bl	8000220 <__aeabi_dsub>
 8008a84:	e00e      	b.n	8008aa4 <__ieee754_rem_pio2+0x1cc>
 8008a86:	462b      	mov	r3, r5
 8008a88:	4622      	mov	r2, r4
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	f7f7 fbc7 	bl	8000220 <__aeabi_dsub>
 8008a92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008a96:	9303      	str	r3, [sp, #12]
 8008a98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a9c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008aa0:	2b10      	cmp	r3, #16
 8008aa2:	dc02      	bgt.n	8008aaa <__ieee754_rem_pio2+0x1d2>
 8008aa4:	e9ca 0100 	strd	r0, r1, [sl]
 8008aa8:	e039      	b.n	8008b1e <__ieee754_rem_pio2+0x246>
 8008aaa:	a34f      	add	r3, pc, #316	; (adr r3, 8008be8 <__ieee754_rem_pio2+0x310>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	ec51 0b18 	vmov	r0, r1, d8
 8008ab4:	f7f7 fd6c 	bl	8000590 <__aeabi_dmul>
 8008ab8:	4604      	mov	r4, r0
 8008aba:	460d      	mov	r5, r1
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f7 fbac 	bl	8000220 <__aeabi_dsub>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4680      	mov	r8, r0
 8008ace:	4689      	mov	r9, r1
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	f7f7 fba4 	bl	8000220 <__aeabi_dsub>
 8008ad8:	4622      	mov	r2, r4
 8008ada:	462b      	mov	r3, r5
 8008adc:	f7f7 fba0 	bl	8000220 <__aeabi_dsub>
 8008ae0:	a343      	add	r3, pc, #268	; (adr r3, 8008bf0 <__ieee754_rem_pio2+0x318>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	460d      	mov	r5, r1
 8008aea:	ec51 0b18 	vmov	r0, r1, d8
 8008aee:	f7f7 fd4f 	bl	8000590 <__aeabi_dmul>
 8008af2:	4622      	mov	r2, r4
 8008af4:	462b      	mov	r3, r5
 8008af6:	f7f7 fb93 	bl	8000220 <__aeabi_dsub>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4604      	mov	r4, r0
 8008b00:	460d      	mov	r5, r1
 8008b02:	4640      	mov	r0, r8
 8008b04:	4649      	mov	r1, r9
 8008b06:	f7f7 fb8b 	bl	8000220 <__aeabi_dsub>
 8008b0a:	9a03      	ldr	r2, [sp, #12]
 8008b0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b31      	cmp	r3, #49	; 0x31
 8008b14:	dc24      	bgt.n	8008b60 <__ieee754_rem_pio2+0x288>
 8008b16:	e9ca 0100 	strd	r0, r1, [sl]
 8008b1a:	4646      	mov	r6, r8
 8008b1c:	464f      	mov	r7, r9
 8008b1e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b22:	4630      	mov	r0, r6
 8008b24:	4642      	mov	r2, r8
 8008b26:	464b      	mov	r3, r9
 8008b28:	4639      	mov	r1, r7
 8008b2a:	f7f7 fb79 	bl	8000220 <__aeabi_dsub>
 8008b2e:	462b      	mov	r3, r5
 8008b30:	4622      	mov	r2, r4
 8008b32:	f7f7 fb75 	bl	8000220 <__aeabi_dsub>
 8008b36:	9b02      	ldr	r3, [sp, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b3e:	f6bf af0b 	bge.w	8008958 <__ieee754_rem_pio2+0x80>
 8008b42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b46:	f8ca 3004 	str.w	r3, [sl, #4]
 8008b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b4e:	f8ca 8000 	str.w	r8, [sl]
 8008b52:	f8ca 0008 	str.w	r0, [sl, #8]
 8008b56:	f8ca 300c 	str.w	r3, [sl, #12]
 8008b5a:	f1cb 0b00 	rsb	fp, fp, #0
 8008b5e:	e6fb      	b.n	8008958 <__ieee754_rem_pio2+0x80>
 8008b60:	a327      	add	r3, pc, #156	; (adr r3, 8008c00 <__ieee754_rem_pio2+0x328>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	ec51 0b18 	vmov	r0, r1, d8
 8008b6a:	f7f7 fd11 	bl	8000590 <__aeabi_dmul>
 8008b6e:	4604      	mov	r4, r0
 8008b70:	460d      	mov	r5, r1
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	4640      	mov	r0, r8
 8008b78:	4649      	mov	r1, r9
 8008b7a:	f7f7 fb51 	bl	8000220 <__aeabi_dsub>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4606      	mov	r6, r0
 8008b84:	460f      	mov	r7, r1
 8008b86:	4640      	mov	r0, r8
 8008b88:	4649      	mov	r1, r9
 8008b8a:	f7f7 fb49 	bl	8000220 <__aeabi_dsub>
 8008b8e:	4622      	mov	r2, r4
 8008b90:	462b      	mov	r3, r5
 8008b92:	f7f7 fb45 	bl	8000220 <__aeabi_dsub>
 8008b96:	a31c      	add	r3, pc, #112	; (adr r3, 8008c08 <__ieee754_rem_pio2+0x330>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	460d      	mov	r5, r1
 8008ba0:	ec51 0b18 	vmov	r0, r1, d8
 8008ba4:	f7f7 fcf4 	bl	8000590 <__aeabi_dmul>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	462b      	mov	r3, r5
 8008bac:	f7f7 fb38 	bl	8000220 <__aeabi_dsub>
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	e760      	b.n	8008a78 <__ieee754_rem_pio2+0x1a0>
 8008bb6:	4b1c      	ldr	r3, [pc, #112]	; (8008c28 <__ieee754_rem_pio2+0x350>)
 8008bb8:	4598      	cmp	r8, r3
 8008bba:	dd37      	ble.n	8008c2c <__ieee754_rem_pio2+0x354>
 8008bbc:	ee10 2a10 	vmov	r2, s0
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f7f7 fb2b 	bl	8000220 <__aeabi_dsub>
 8008bca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008bce:	e9ca 0100 	strd	r0, r1, [sl]
 8008bd2:	e695      	b.n	8008900 <__ieee754_rem_pio2+0x28>
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	54400000 	.word	0x54400000
 8008bdc:	3ff921fb 	.word	0x3ff921fb
 8008be0:	1a626331 	.word	0x1a626331
 8008be4:	3dd0b461 	.word	0x3dd0b461
 8008be8:	1a600000 	.word	0x1a600000
 8008bec:	3dd0b461 	.word	0x3dd0b461
 8008bf0:	2e037073 	.word	0x2e037073
 8008bf4:	3ba3198a 	.word	0x3ba3198a
 8008bf8:	6dc9c883 	.word	0x6dc9c883
 8008bfc:	3fe45f30 	.word	0x3fe45f30
 8008c00:	2e000000 	.word	0x2e000000
 8008c04:	3ba3198a 	.word	0x3ba3198a
 8008c08:	252049c1 	.word	0x252049c1
 8008c0c:	397b839a 	.word	0x397b839a
 8008c10:	3fe921fb 	.word	0x3fe921fb
 8008c14:	4002d97b 	.word	0x4002d97b
 8008c18:	3ff921fb 	.word	0x3ff921fb
 8008c1c:	413921fb 	.word	0x413921fb
 8008c20:	3fe00000 	.word	0x3fe00000
 8008c24:	0800996c 	.word	0x0800996c
 8008c28:	7fefffff 	.word	0x7fefffff
 8008c2c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008c30:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008c34:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008c38:	4620      	mov	r0, r4
 8008c3a:	460d      	mov	r5, r1
 8008c3c:	f7f7 ff42 	bl	8000ac4 <__aeabi_d2iz>
 8008c40:	f7f7 fc3c 	bl	80004bc <__aeabi_i2d>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c50:	f7f7 fae6 	bl	8000220 <__aeabi_dsub>
 8008c54:	4b21      	ldr	r3, [pc, #132]	; (8008cdc <__ieee754_rem_pio2+0x404>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	f7f7 fc9a 	bl	8000590 <__aeabi_dmul>
 8008c5c:	460d      	mov	r5, r1
 8008c5e:	4604      	mov	r4, r0
 8008c60:	f7f7 ff30 	bl	8000ac4 <__aeabi_d2iz>
 8008c64:	f7f7 fc2a 	bl	80004bc <__aeabi_i2d>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4629      	mov	r1, r5
 8008c70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c74:	f7f7 fad4 	bl	8000220 <__aeabi_dsub>
 8008c78:	4b18      	ldr	r3, [pc, #96]	; (8008cdc <__ieee754_rem_pio2+0x404>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f7f7 fc88 	bl	8000590 <__aeabi_dmul>
 8008c80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c84:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008c88:	2703      	movs	r7, #3
 8008c8a:	2400      	movs	r4, #0
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008c92:	4622      	mov	r2, r4
 8008c94:	462b      	mov	r3, r5
 8008c96:	46b9      	mov	r9, r7
 8008c98:	3f01      	subs	r7, #1
 8008c9a:	f7f7 fee1 	bl	8000a60 <__aeabi_dcmpeq>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d1f5      	bne.n	8008c8e <__ieee754_rem_pio2+0x3b6>
 8008ca2:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <__ieee754_rem_pio2+0x408>)
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	4632      	mov	r2, r6
 8008cac:	464b      	mov	r3, r9
 8008cae:	4651      	mov	r1, sl
 8008cb0:	a804      	add	r0, sp, #16
 8008cb2:	f000 f821 	bl	8008cf8 <__kernel_rem_pio2>
 8008cb6:	9b02      	ldr	r3, [sp, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	4683      	mov	fp, r0
 8008cbc:	f6bf ae4c 	bge.w	8008958 <__ieee754_rem_pio2+0x80>
 8008cc0:	e9da 2100 	ldrd	r2, r1, [sl]
 8008cc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cc8:	e9ca 2300 	strd	r2, r3, [sl]
 8008ccc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cd4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008cd8:	e73f      	b.n	8008b5a <__ieee754_rem_pio2+0x282>
 8008cda:	bf00      	nop
 8008cdc:	41700000 	.word	0x41700000
 8008ce0:	080099ec 	.word	0x080099ec

08008ce4 <fabs>:
 8008ce4:	ec51 0b10 	vmov	r0, r1, d0
 8008ce8:	ee10 2a10 	vmov	r2, s0
 8008cec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008cf0:	ec43 2b10 	vmov	d0, r2, r3
 8008cf4:	4770      	bx	lr
	...

08008cf8 <__kernel_rem_pio2>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	ed2d 8b02 	vpush	{d8}
 8008d00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008d04:	f112 0f14 	cmn.w	r2, #20
 8008d08:	9306      	str	r3, [sp, #24]
 8008d0a:	9104      	str	r1, [sp, #16]
 8008d0c:	4bc2      	ldr	r3, [pc, #776]	; (8009018 <__kernel_rem_pio2+0x320>)
 8008d0e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008d10:	9009      	str	r0, [sp, #36]	; 0x24
 8008d12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	9b06      	ldr	r3, [sp, #24]
 8008d1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d1e:	bfa8      	it	ge
 8008d20:	1ed4      	subge	r4, r2, #3
 8008d22:	9305      	str	r3, [sp, #20]
 8008d24:	bfb2      	itee	lt
 8008d26:	2400      	movlt	r4, #0
 8008d28:	2318      	movge	r3, #24
 8008d2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008d2e:	f06f 0317 	mvn.w	r3, #23
 8008d32:	fb04 3303 	mla	r3, r4, r3, r3
 8008d36:	eb03 0a02 	add.w	sl, r3, r2
 8008d3a:	9b00      	ldr	r3, [sp, #0]
 8008d3c:	9a05      	ldr	r2, [sp, #20]
 8008d3e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8009008 <__kernel_rem_pio2+0x310>
 8008d42:	eb03 0802 	add.w	r8, r3, r2
 8008d46:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008d48:	1aa7      	subs	r7, r4, r2
 8008d4a:	ae20      	add	r6, sp, #128	; 0x80
 8008d4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008d50:	2500      	movs	r5, #0
 8008d52:	4545      	cmp	r5, r8
 8008d54:	dd13      	ble.n	8008d7e <__kernel_rem_pio2+0x86>
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	aa20      	add	r2, sp, #128	; 0x80
 8008d5a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008d5e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008d62:	f04f 0800 	mov.w	r8, #0
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	4598      	cmp	r8, r3
 8008d6a:	dc31      	bgt.n	8008dd0 <__kernel_rem_pio2+0xd8>
 8008d6c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8009008 <__kernel_rem_pio2+0x310>
 8008d70:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d78:	462f      	mov	r7, r5
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	e01b      	b.n	8008db6 <__kernel_rem_pio2+0xbe>
 8008d7e:	42ef      	cmn	r7, r5
 8008d80:	d407      	bmi.n	8008d92 <__kernel_rem_pio2+0x9a>
 8008d82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008d86:	f7f7 fb99 	bl	80004bc <__aeabi_i2d>
 8008d8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d8e:	3501      	adds	r5, #1
 8008d90:	e7df      	b.n	8008d52 <__kernel_rem_pio2+0x5a>
 8008d92:	ec51 0b18 	vmov	r0, r1, d8
 8008d96:	e7f8      	b.n	8008d8a <__kernel_rem_pio2+0x92>
 8008d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008da0:	f7f7 fbf6 	bl	8000590 <__aeabi_dmul>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dac:	f7f7 fa3a 	bl	8000224 <__adddf3>
 8008db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db4:	3601      	adds	r6, #1
 8008db6:	9b05      	ldr	r3, [sp, #20]
 8008db8:	429e      	cmp	r6, r3
 8008dba:	f1a7 0708 	sub.w	r7, r7, #8
 8008dbe:	ddeb      	ble.n	8008d98 <__kernel_rem_pio2+0xa0>
 8008dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dc4:	f108 0801 	add.w	r8, r8, #1
 8008dc8:	ecab 7b02 	vstmia	fp!, {d7}
 8008dcc:	3508      	adds	r5, #8
 8008dce:	e7ca      	b.n	8008d66 <__kernel_rem_pio2+0x6e>
 8008dd0:	9b00      	ldr	r3, [sp, #0]
 8008dd2:	aa0c      	add	r2, sp, #48	; 0x30
 8008dd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dda:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008ddc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008de0:	9c00      	ldr	r4, [sp, #0]
 8008de2:	930a      	str	r3, [sp, #40]	; 0x28
 8008de4:	00e3      	lsls	r3, r4, #3
 8008de6:	9308      	str	r3, [sp, #32]
 8008de8:	ab98      	add	r3, sp, #608	; 0x260
 8008dea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008df2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008df6:	ab70      	add	r3, sp, #448	; 0x1c0
 8008df8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008dfc:	46c3      	mov	fp, r8
 8008dfe:	46a1      	mov	r9, r4
 8008e00:	f1b9 0f00 	cmp.w	r9, #0
 8008e04:	f1a5 0508 	sub.w	r5, r5, #8
 8008e08:	dc77      	bgt.n	8008efa <__kernel_rem_pio2+0x202>
 8008e0a:	ec47 6b10 	vmov	d0, r6, r7
 8008e0e:	4650      	mov	r0, sl
 8008e10:	f000 fac2 	bl	8009398 <scalbn>
 8008e14:	ec57 6b10 	vmov	r6, r7, d0
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008e1e:	ee10 0a10 	vmov	r0, s0
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 fbb4 	bl	8000590 <__aeabi_dmul>
 8008e28:	ec41 0b10 	vmov	d0, r0, r1
 8008e2c:	f000 fb34 	bl	8009498 <floor>
 8008e30:	4b7a      	ldr	r3, [pc, #488]	; (800901c <__kernel_rem_pio2+0x324>)
 8008e32:	ec51 0b10 	vmov	r0, r1, d0
 8008e36:	2200      	movs	r2, #0
 8008e38:	f7f7 fbaa 	bl	8000590 <__aeabi_dmul>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4630      	mov	r0, r6
 8008e42:	4639      	mov	r1, r7
 8008e44:	f7f7 f9ec 	bl	8000220 <__aeabi_dsub>
 8008e48:	460f      	mov	r7, r1
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	f7f7 fe3a 	bl	8000ac4 <__aeabi_d2iz>
 8008e50:	9002      	str	r0, [sp, #8]
 8008e52:	f7f7 fb33 	bl	80004bc <__aeabi_i2d>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	f7f7 f9df 	bl	8000220 <__aeabi_dsub>
 8008e62:	f1ba 0f00 	cmp.w	sl, #0
 8008e66:	4606      	mov	r6, r0
 8008e68:	460f      	mov	r7, r1
 8008e6a:	dd6d      	ble.n	8008f48 <__kernel_rem_pio2+0x250>
 8008e6c:	1e61      	subs	r1, r4, #1
 8008e6e:	ab0c      	add	r3, sp, #48	; 0x30
 8008e70:	9d02      	ldr	r5, [sp, #8]
 8008e72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e76:	f1ca 0018 	rsb	r0, sl, #24
 8008e7a:	fa43 f200 	asr.w	r2, r3, r0
 8008e7e:	4415      	add	r5, r2
 8008e80:	4082      	lsls	r2, r0
 8008e82:	1a9b      	subs	r3, r3, r2
 8008e84:	aa0c      	add	r2, sp, #48	; 0x30
 8008e86:	9502      	str	r5, [sp, #8]
 8008e88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008e8c:	f1ca 0217 	rsb	r2, sl, #23
 8008e90:	fa43 fb02 	asr.w	fp, r3, r2
 8008e94:	f1bb 0f00 	cmp.w	fp, #0
 8008e98:	dd65      	ble.n	8008f66 <__kernel_rem_pio2+0x26e>
 8008e9a:	9b02      	ldr	r3, [sp, #8]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	9302      	str	r3, [sp, #8]
 8008ea2:	4615      	mov	r5, r2
 8008ea4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008ea8:	4294      	cmp	r4, r2
 8008eaa:	f300 809f 	bgt.w	8008fec <__kernel_rem_pio2+0x2f4>
 8008eae:	f1ba 0f00 	cmp.w	sl, #0
 8008eb2:	dd07      	ble.n	8008ec4 <__kernel_rem_pio2+0x1cc>
 8008eb4:	f1ba 0f01 	cmp.w	sl, #1
 8008eb8:	f000 80c1 	beq.w	800903e <__kernel_rem_pio2+0x346>
 8008ebc:	f1ba 0f02 	cmp.w	sl, #2
 8008ec0:	f000 80c7 	beq.w	8009052 <__kernel_rem_pio2+0x35a>
 8008ec4:	f1bb 0f02 	cmp.w	fp, #2
 8008ec8:	d14d      	bne.n	8008f66 <__kernel_rem_pio2+0x26e>
 8008eca:	4632      	mov	r2, r6
 8008ecc:	463b      	mov	r3, r7
 8008ece:	4954      	ldr	r1, [pc, #336]	; (8009020 <__kernel_rem_pio2+0x328>)
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	f7f7 f9a5 	bl	8000220 <__aeabi_dsub>
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	460f      	mov	r7, r1
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	d043      	beq.n	8008f66 <__kernel_rem_pio2+0x26e>
 8008ede:	4650      	mov	r0, sl
 8008ee0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8009010 <__kernel_rem_pio2+0x318>
 8008ee4:	f000 fa58 	bl	8009398 <scalbn>
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	ec53 2b10 	vmov	r2, r3, d0
 8008ef0:	f7f7 f996 	bl	8000220 <__aeabi_dsub>
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	460f      	mov	r7, r1
 8008ef8:	e035      	b.n	8008f66 <__kernel_rem_pio2+0x26e>
 8008efa:	4b4a      	ldr	r3, [pc, #296]	; (8009024 <__kernel_rem_pio2+0x32c>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 fb45 	bl	8000590 <__aeabi_dmul>
 8008f06:	f7f7 fddd 	bl	8000ac4 <__aeabi_d2iz>
 8008f0a:	f7f7 fad7 	bl	80004bc <__aeabi_i2d>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	ec43 2b18 	vmov	d8, r2, r3
 8008f16:	4b44      	ldr	r3, [pc, #272]	; (8009028 <__kernel_rem_pio2+0x330>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f7f7 fb39 	bl	8000590 <__aeabi_dmul>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4630      	mov	r0, r6
 8008f24:	4639      	mov	r1, r7
 8008f26:	f7f7 f97b 	bl	8000220 <__aeabi_dsub>
 8008f2a:	f7f7 fdcb 	bl	8000ac4 <__aeabi_d2iz>
 8008f2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f32:	f84b 0b04 	str.w	r0, [fp], #4
 8008f36:	ec51 0b18 	vmov	r0, r1, d8
 8008f3a:	f7f7 f973 	bl	8000224 <__adddf3>
 8008f3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f42:	4606      	mov	r6, r0
 8008f44:	460f      	mov	r7, r1
 8008f46:	e75b      	b.n	8008e00 <__kernel_rem_pio2+0x108>
 8008f48:	d106      	bne.n	8008f58 <__kernel_rem_pio2+0x260>
 8008f4a:	1e63      	subs	r3, r4, #1
 8008f4c:	aa0c      	add	r2, sp, #48	; 0x30
 8008f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f52:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008f56:	e79d      	b.n	8008e94 <__kernel_rem_pio2+0x19c>
 8008f58:	4b34      	ldr	r3, [pc, #208]	; (800902c <__kernel_rem_pio2+0x334>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f7f7 fd9e 	bl	8000a9c <__aeabi_dcmpge>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d140      	bne.n	8008fe6 <__kernel_rem_pio2+0x2ee>
 8008f64:	4683      	mov	fp, r0
 8008f66:	2200      	movs	r2, #0
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 fd77 	bl	8000a60 <__aeabi_dcmpeq>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f000 80c1 	beq.w	80090fa <__kernel_rem_pio2+0x402>
 8008f78:	1e65      	subs	r5, r4, #1
 8008f7a:	462b      	mov	r3, r5
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	9900      	ldr	r1, [sp, #0]
 8008f80:	428b      	cmp	r3, r1
 8008f82:	da6d      	bge.n	8009060 <__kernel_rem_pio2+0x368>
 8008f84:	2a00      	cmp	r2, #0
 8008f86:	f000 808a 	beq.w	800909e <__kernel_rem_pio2+0x3a6>
 8008f8a:	ab0c      	add	r3, sp, #48	; 0x30
 8008f8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008f90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 80ae 	beq.w	80090f6 <__kernel_rem_pio2+0x3fe>
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009010 <__kernel_rem_pio2+0x318>
 8008fa0:	f000 f9fa 	bl	8009398 <scalbn>
 8008fa4:	1c6b      	adds	r3, r5, #1
 8008fa6:	00da      	lsls	r2, r3, #3
 8008fa8:	9205      	str	r2, [sp, #20]
 8008faa:	ec57 6b10 	vmov	r6, r7, d0
 8008fae:	aa70      	add	r2, sp, #448	; 0x1c0
 8008fb0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8009024 <__kernel_rem_pio2+0x32c>
 8008fb4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008fb8:	462c      	mov	r4, r5
 8008fba:	f04f 0800 	mov.w	r8, #0
 8008fbe:	2c00      	cmp	r4, #0
 8008fc0:	f280 80d4 	bge.w	800916c <__kernel_rem_pio2+0x474>
 8008fc4:	462c      	mov	r4, r5
 8008fc6:	2c00      	cmp	r4, #0
 8008fc8:	f2c0 8102 	blt.w	80091d0 <__kernel_rem_pio2+0x4d8>
 8008fcc:	4b18      	ldr	r3, [pc, #96]	; (8009030 <__kernel_rem_pio2+0x338>)
 8008fce:	461e      	mov	r6, r3
 8008fd0:	ab70      	add	r3, sp, #448	; 0x1c0
 8008fd2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008fd6:	1b2b      	subs	r3, r5, r4
 8008fd8:	f04f 0900 	mov.w	r9, #0
 8008fdc:	f04f 0a00 	mov.w	sl, #0
 8008fe0:	2700      	movs	r7, #0
 8008fe2:	9306      	str	r3, [sp, #24]
 8008fe4:	e0e6      	b.n	80091b4 <__kernel_rem_pio2+0x4bc>
 8008fe6:	f04f 0b02 	mov.w	fp, #2
 8008fea:	e756      	b.n	8008e9a <__kernel_rem_pio2+0x1a2>
 8008fec:	f8d8 3000 	ldr.w	r3, [r8]
 8008ff0:	bb05      	cbnz	r5, 8009034 <__kernel_rem_pio2+0x33c>
 8008ff2:	b123      	cbz	r3, 8008ffe <__kernel_rem_pio2+0x306>
 8008ff4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008ff8:	f8c8 3000 	str.w	r3, [r8]
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	3201      	adds	r2, #1
 8009000:	f108 0804 	add.w	r8, r8, #4
 8009004:	461d      	mov	r5, r3
 8009006:	e74f      	b.n	8008ea8 <__kernel_rem_pio2+0x1b0>
	...
 8009014:	3ff00000 	.word	0x3ff00000
 8009018:	08009b38 	.word	0x08009b38
 800901c:	40200000 	.word	0x40200000
 8009020:	3ff00000 	.word	0x3ff00000
 8009024:	3e700000 	.word	0x3e700000
 8009028:	41700000 	.word	0x41700000
 800902c:	3fe00000 	.word	0x3fe00000
 8009030:	08009af8 	.word	0x08009af8
 8009034:	1acb      	subs	r3, r1, r3
 8009036:	f8c8 3000 	str.w	r3, [r8]
 800903a:	462b      	mov	r3, r5
 800903c:	e7df      	b.n	8008ffe <__kernel_rem_pio2+0x306>
 800903e:	1e62      	subs	r2, r4, #1
 8009040:	ab0c      	add	r3, sp, #48	; 0x30
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800904a:	a90c      	add	r1, sp, #48	; 0x30
 800904c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009050:	e738      	b.n	8008ec4 <__kernel_rem_pio2+0x1cc>
 8009052:	1e62      	subs	r2, r4, #1
 8009054:	ab0c      	add	r3, sp, #48	; 0x30
 8009056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800905e:	e7f4      	b.n	800904a <__kernel_rem_pio2+0x352>
 8009060:	a90c      	add	r1, sp, #48	; 0x30
 8009062:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009066:	3b01      	subs	r3, #1
 8009068:	430a      	orrs	r2, r1
 800906a:	e788      	b.n	8008f7e <__kernel_rem_pio2+0x286>
 800906c:	3301      	adds	r3, #1
 800906e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009072:	2900      	cmp	r1, #0
 8009074:	d0fa      	beq.n	800906c <__kernel_rem_pio2+0x374>
 8009076:	9a08      	ldr	r2, [sp, #32]
 8009078:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800907c:	446a      	add	r2, sp
 800907e:	3a98      	subs	r2, #152	; 0x98
 8009080:	9208      	str	r2, [sp, #32]
 8009082:	9a06      	ldr	r2, [sp, #24]
 8009084:	a920      	add	r1, sp, #128	; 0x80
 8009086:	18a2      	adds	r2, r4, r2
 8009088:	18e3      	adds	r3, r4, r3
 800908a:	f104 0801 	add.w	r8, r4, #1
 800908e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009092:	9302      	str	r3, [sp, #8]
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	4543      	cmp	r3, r8
 8009098:	da04      	bge.n	80090a4 <__kernel_rem_pio2+0x3ac>
 800909a:	461c      	mov	r4, r3
 800909c:	e6a2      	b.n	8008de4 <__kernel_rem_pio2+0xec>
 800909e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090a0:	2301      	movs	r3, #1
 80090a2:	e7e4      	b.n	800906e <__kernel_rem_pio2+0x376>
 80090a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80090aa:	f7f7 fa07 	bl	80004bc <__aeabi_i2d>
 80090ae:	e8e5 0102 	strd	r0, r1, [r5], #8
 80090b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b4:	46ab      	mov	fp, r5
 80090b6:	461c      	mov	r4, r3
 80090b8:	f04f 0900 	mov.w	r9, #0
 80090bc:	2600      	movs	r6, #0
 80090be:	2700      	movs	r7, #0
 80090c0:	9b05      	ldr	r3, [sp, #20]
 80090c2:	4599      	cmp	r9, r3
 80090c4:	dd06      	ble.n	80090d4 <__kernel_rem_pio2+0x3dc>
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80090cc:	f108 0801 	add.w	r8, r8, #1
 80090d0:	9308      	str	r3, [sp, #32]
 80090d2:	e7df      	b.n	8009094 <__kernel_rem_pio2+0x39c>
 80090d4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80090d8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80090dc:	f7f7 fa58 	bl	8000590 <__aeabi_dmul>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4630      	mov	r0, r6
 80090e6:	4639      	mov	r1, r7
 80090e8:	f7f7 f89c 	bl	8000224 <__adddf3>
 80090ec:	f109 0901 	add.w	r9, r9, #1
 80090f0:	4606      	mov	r6, r0
 80090f2:	460f      	mov	r7, r1
 80090f4:	e7e4      	b.n	80090c0 <__kernel_rem_pio2+0x3c8>
 80090f6:	3d01      	subs	r5, #1
 80090f8:	e747      	b.n	8008f8a <__kernel_rem_pio2+0x292>
 80090fa:	ec47 6b10 	vmov	d0, r6, r7
 80090fe:	f1ca 0000 	rsb	r0, sl, #0
 8009102:	f000 f949 	bl	8009398 <scalbn>
 8009106:	ec57 6b10 	vmov	r6, r7, d0
 800910a:	4ba0      	ldr	r3, [pc, #640]	; (800938c <__kernel_rem_pio2+0x694>)
 800910c:	ee10 0a10 	vmov	r0, s0
 8009110:	2200      	movs	r2, #0
 8009112:	4639      	mov	r1, r7
 8009114:	f7f7 fcc2 	bl	8000a9c <__aeabi_dcmpge>
 8009118:	b1f8      	cbz	r0, 800915a <__kernel_rem_pio2+0x462>
 800911a:	4b9d      	ldr	r3, [pc, #628]	; (8009390 <__kernel_rem_pio2+0x698>)
 800911c:	2200      	movs	r2, #0
 800911e:	4630      	mov	r0, r6
 8009120:	4639      	mov	r1, r7
 8009122:	f7f7 fa35 	bl	8000590 <__aeabi_dmul>
 8009126:	f7f7 fccd 	bl	8000ac4 <__aeabi_d2iz>
 800912a:	4680      	mov	r8, r0
 800912c:	f7f7 f9c6 	bl	80004bc <__aeabi_i2d>
 8009130:	4b96      	ldr	r3, [pc, #600]	; (800938c <__kernel_rem_pio2+0x694>)
 8009132:	2200      	movs	r2, #0
 8009134:	f7f7 fa2c 	bl	8000590 <__aeabi_dmul>
 8009138:	460b      	mov	r3, r1
 800913a:	4602      	mov	r2, r0
 800913c:	4639      	mov	r1, r7
 800913e:	4630      	mov	r0, r6
 8009140:	f7f7 f86e 	bl	8000220 <__aeabi_dsub>
 8009144:	f7f7 fcbe 	bl	8000ac4 <__aeabi_d2iz>
 8009148:	1c65      	adds	r5, r4, #1
 800914a:	ab0c      	add	r3, sp, #48	; 0x30
 800914c:	f10a 0a18 	add.w	sl, sl, #24
 8009150:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009154:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009158:	e71f      	b.n	8008f9a <__kernel_rem_pio2+0x2a2>
 800915a:	4630      	mov	r0, r6
 800915c:	4639      	mov	r1, r7
 800915e:	f7f7 fcb1 	bl	8000ac4 <__aeabi_d2iz>
 8009162:	ab0c      	add	r3, sp, #48	; 0x30
 8009164:	4625      	mov	r5, r4
 8009166:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800916a:	e716      	b.n	8008f9a <__kernel_rem_pio2+0x2a2>
 800916c:	ab0c      	add	r3, sp, #48	; 0x30
 800916e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009172:	f7f7 f9a3 	bl	80004bc <__aeabi_i2d>
 8009176:	4632      	mov	r2, r6
 8009178:	463b      	mov	r3, r7
 800917a:	f7f7 fa09 	bl	8000590 <__aeabi_dmul>
 800917e:	4642      	mov	r2, r8
 8009180:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009184:	464b      	mov	r3, r9
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 fa01 	bl	8000590 <__aeabi_dmul>
 800918e:	3c01      	subs	r4, #1
 8009190:	4606      	mov	r6, r0
 8009192:	460f      	mov	r7, r1
 8009194:	e713      	b.n	8008fbe <__kernel_rem_pio2+0x2c6>
 8009196:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800919a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800919e:	f7f7 f9f7 	bl	8000590 <__aeabi_dmul>
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4648      	mov	r0, r9
 80091a8:	4651      	mov	r1, sl
 80091aa:	f7f7 f83b 	bl	8000224 <__adddf3>
 80091ae:	3701      	adds	r7, #1
 80091b0:	4681      	mov	r9, r0
 80091b2:	468a      	mov	sl, r1
 80091b4:	9b00      	ldr	r3, [sp, #0]
 80091b6:	429f      	cmp	r7, r3
 80091b8:	dc02      	bgt.n	80091c0 <__kernel_rem_pio2+0x4c8>
 80091ba:	9b06      	ldr	r3, [sp, #24]
 80091bc:	429f      	cmp	r7, r3
 80091be:	ddea      	ble.n	8009196 <__kernel_rem_pio2+0x49e>
 80091c0:	9a06      	ldr	r2, [sp, #24]
 80091c2:	ab48      	add	r3, sp, #288	; 0x120
 80091c4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80091c8:	e9c6 9a00 	strd	r9, sl, [r6]
 80091cc:	3c01      	subs	r4, #1
 80091ce:	e6fa      	b.n	8008fc6 <__kernel_rem_pio2+0x2ce>
 80091d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	dc0b      	bgt.n	80091ee <__kernel_rem_pio2+0x4f6>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	dc39      	bgt.n	800924e <__kernel_rem_pio2+0x556>
 80091da:	d05d      	beq.n	8009298 <__kernel_rem_pio2+0x5a0>
 80091dc:	9b02      	ldr	r3, [sp, #8]
 80091de:	f003 0007 	and.w	r0, r3, #7
 80091e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80091e6:	ecbd 8b02 	vpop	{d8}
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d1f3      	bne.n	80091dc <__kernel_rem_pio2+0x4e4>
 80091f4:	9b05      	ldr	r3, [sp, #20]
 80091f6:	9500      	str	r5, [sp, #0]
 80091f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80091fc:	eb0d 0403 	add.w	r4, sp, r3
 8009200:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009204:	46a2      	mov	sl, r4
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f1aa 0a08 	sub.w	sl, sl, #8
 800920e:	dc69      	bgt.n	80092e4 <__kernel_rem_pio2+0x5ec>
 8009210:	46aa      	mov	sl, r5
 8009212:	f1ba 0f01 	cmp.w	sl, #1
 8009216:	f1a4 0408 	sub.w	r4, r4, #8
 800921a:	f300 8083 	bgt.w	8009324 <__kernel_rem_pio2+0x62c>
 800921e:	9c05      	ldr	r4, [sp, #20]
 8009220:	ab48      	add	r3, sp, #288	; 0x120
 8009222:	441c      	add	r4, r3
 8009224:	2000      	movs	r0, #0
 8009226:	2100      	movs	r1, #0
 8009228:	2d01      	cmp	r5, #1
 800922a:	f300 809a 	bgt.w	8009362 <__kernel_rem_pio2+0x66a>
 800922e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009232:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009236:	f1bb 0f00 	cmp.w	fp, #0
 800923a:	f040 8098 	bne.w	800936e <__kernel_rem_pio2+0x676>
 800923e:	9b04      	ldr	r3, [sp, #16]
 8009240:	e9c3 7800 	strd	r7, r8, [r3]
 8009244:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009248:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800924c:	e7c6      	b.n	80091dc <__kernel_rem_pio2+0x4e4>
 800924e:	9e05      	ldr	r6, [sp, #20]
 8009250:	ab48      	add	r3, sp, #288	; 0x120
 8009252:	441e      	add	r6, r3
 8009254:	462c      	mov	r4, r5
 8009256:	2000      	movs	r0, #0
 8009258:	2100      	movs	r1, #0
 800925a:	2c00      	cmp	r4, #0
 800925c:	da33      	bge.n	80092c6 <__kernel_rem_pio2+0x5ce>
 800925e:	f1bb 0f00 	cmp.w	fp, #0
 8009262:	d036      	beq.n	80092d2 <__kernel_rem_pio2+0x5da>
 8009264:	4602      	mov	r2, r0
 8009266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800926a:	9c04      	ldr	r4, [sp, #16]
 800926c:	e9c4 2300 	strd	r2, r3, [r4]
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009278:	f7f6 ffd2 	bl	8000220 <__aeabi_dsub>
 800927c:	ae4a      	add	r6, sp, #296	; 0x128
 800927e:	2401      	movs	r4, #1
 8009280:	42a5      	cmp	r5, r4
 8009282:	da29      	bge.n	80092d8 <__kernel_rem_pio2+0x5e0>
 8009284:	f1bb 0f00 	cmp.w	fp, #0
 8009288:	d002      	beq.n	8009290 <__kernel_rem_pio2+0x598>
 800928a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800928e:	4619      	mov	r1, r3
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009296:	e7a1      	b.n	80091dc <__kernel_rem_pio2+0x4e4>
 8009298:	9c05      	ldr	r4, [sp, #20]
 800929a:	ab48      	add	r3, sp, #288	; 0x120
 800929c:	441c      	add	r4, r3
 800929e:	2000      	movs	r0, #0
 80092a0:	2100      	movs	r1, #0
 80092a2:	2d00      	cmp	r5, #0
 80092a4:	da09      	bge.n	80092ba <__kernel_rem_pio2+0x5c2>
 80092a6:	f1bb 0f00 	cmp.w	fp, #0
 80092aa:	d002      	beq.n	80092b2 <__kernel_rem_pio2+0x5ba>
 80092ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092b0:	4619      	mov	r1, r3
 80092b2:	9b04      	ldr	r3, [sp, #16]
 80092b4:	e9c3 0100 	strd	r0, r1, [r3]
 80092b8:	e790      	b.n	80091dc <__kernel_rem_pio2+0x4e4>
 80092ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80092be:	f7f6 ffb1 	bl	8000224 <__adddf3>
 80092c2:	3d01      	subs	r5, #1
 80092c4:	e7ed      	b.n	80092a2 <__kernel_rem_pio2+0x5aa>
 80092c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80092ca:	f7f6 ffab 	bl	8000224 <__adddf3>
 80092ce:	3c01      	subs	r4, #1
 80092d0:	e7c3      	b.n	800925a <__kernel_rem_pio2+0x562>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	e7c8      	b.n	800926a <__kernel_rem_pio2+0x572>
 80092d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80092dc:	f7f6 ffa2 	bl	8000224 <__adddf3>
 80092e0:	3401      	adds	r4, #1
 80092e2:	e7cd      	b.n	8009280 <__kernel_rem_pio2+0x588>
 80092e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80092e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80092ec:	9b00      	ldr	r3, [sp, #0]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	4632      	mov	r2, r6
 80092f4:	463b      	mov	r3, r7
 80092f6:	4640      	mov	r0, r8
 80092f8:	4649      	mov	r1, r9
 80092fa:	f7f6 ff93 	bl	8000224 <__adddf3>
 80092fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4640      	mov	r0, r8
 8009308:	4649      	mov	r1, r9
 800930a:	f7f6 ff89 	bl	8000220 <__aeabi_dsub>
 800930e:	4632      	mov	r2, r6
 8009310:	463b      	mov	r3, r7
 8009312:	f7f6 ff87 	bl	8000224 <__adddf3>
 8009316:	ed9d 7b06 	vldr	d7, [sp, #24]
 800931a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800931e:	ed8a 7b00 	vstr	d7, [sl]
 8009322:	e770      	b.n	8009206 <__kernel_rem_pio2+0x50e>
 8009324:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009328:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800932c:	4640      	mov	r0, r8
 800932e:	4632      	mov	r2, r6
 8009330:	463b      	mov	r3, r7
 8009332:	4649      	mov	r1, r9
 8009334:	f7f6 ff76 	bl	8000224 <__adddf3>
 8009338:	e9cd 0100 	strd	r0, r1, [sp]
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4640      	mov	r0, r8
 8009342:	4649      	mov	r1, r9
 8009344:	f7f6 ff6c 	bl	8000220 <__aeabi_dsub>
 8009348:	4632      	mov	r2, r6
 800934a:	463b      	mov	r3, r7
 800934c:	f7f6 ff6a 	bl	8000224 <__adddf3>
 8009350:	ed9d 7b00 	vldr	d7, [sp]
 8009354:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009358:	ed84 7b00 	vstr	d7, [r4]
 800935c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009360:	e757      	b.n	8009212 <__kernel_rem_pio2+0x51a>
 8009362:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009366:	f7f6 ff5d 	bl	8000224 <__adddf3>
 800936a:	3d01      	subs	r5, #1
 800936c:	e75c      	b.n	8009228 <__kernel_rem_pio2+0x530>
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	9a04      	ldr	r2, [sp, #16]
 8009372:	601f      	str	r7, [r3, #0]
 8009374:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009378:	605c      	str	r4, [r3, #4]
 800937a:	609d      	str	r5, [r3, #8]
 800937c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009380:	60d3      	str	r3, [r2, #12]
 8009382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009386:	6110      	str	r0, [r2, #16]
 8009388:	6153      	str	r3, [r2, #20]
 800938a:	e727      	b.n	80091dc <__kernel_rem_pio2+0x4e4>
 800938c:	41700000 	.word	0x41700000
 8009390:	3e700000 	.word	0x3e700000
 8009394:	00000000 	.word	0x00000000

08009398 <scalbn>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	ec55 4b10 	vmov	r4, r5, d0
 800939e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80093a2:	4606      	mov	r6, r0
 80093a4:	462b      	mov	r3, r5
 80093a6:	b999      	cbnz	r1, 80093d0 <scalbn+0x38>
 80093a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80093ac:	4323      	orrs	r3, r4
 80093ae:	d03f      	beq.n	8009430 <scalbn+0x98>
 80093b0:	4b35      	ldr	r3, [pc, #212]	; (8009488 <scalbn+0xf0>)
 80093b2:	4629      	mov	r1, r5
 80093b4:	ee10 0a10 	vmov	r0, s0
 80093b8:	2200      	movs	r2, #0
 80093ba:	f7f7 f8e9 	bl	8000590 <__aeabi_dmul>
 80093be:	4b33      	ldr	r3, [pc, #204]	; (800948c <scalbn+0xf4>)
 80093c0:	429e      	cmp	r6, r3
 80093c2:	4604      	mov	r4, r0
 80093c4:	460d      	mov	r5, r1
 80093c6:	da10      	bge.n	80093ea <scalbn+0x52>
 80093c8:	a327      	add	r3, pc, #156	; (adr r3, 8009468 <scalbn+0xd0>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	e01f      	b.n	8009410 <scalbn+0x78>
 80093d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80093d4:	4291      	cmp	r1, r2
 80093d6:	d10c      	bne.n	80093f2 <scalbn+0x5a>
 80093d8:	ee10 2a10 	vmov	r2, s0
 80093dc:	4620      	mov	r0, r4
 80093de:	4629      	mov	r1, r5
 80093e0:	f7f6 ff20 	bl	8000224 <__adddf3>
 80093e4:	4604      	mov	r4, r0
 80093e6:	460d      	mov	r5, r1
 80093e8:	e022      	b.n	8009430 <scalbn+0x98>
 80093ea:	460b      	mov	r3, r1
 80093ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80093f0:	3936      	subs	r1, #54	; 0x36
 80093f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80093f6:	4296      	cmp	r6, r2
 80093f8:	dd0d      	ble.n	8009416 <scalbn+0x7e>
 80093fa:	2d00      	cmp	r5, #0
 80093fc:	a11c      	add	r1, pc, #112	; (adr r1, 8009470 <scalbn+0xd8>)
 80093fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009402:	da02      	bge.n	800940a <scalbn+0x72>
 8009404:	a11c      	add	r1, pc, #112	; (adr r1, 8009478 <scalbn+0xe0>)
 8009406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800940a:	a319      	add	r3, pc, #100	; (adr r3, 8009470 <scalbn+0xd8>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f7f7 f8be 	bl	8000590 <__aeabi_dmul>
 8009414:	e7e6      	b.n	80093e4 <scalbn+0x4c>
 8009416:	1872      	adds	r2, r6, r1
 8009418:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800941c:	428a      	cmp	r2, r1
 800941e:	dcec      	bgt.n	80093fa <scalbn+0x62>
 8009420:	2a00      	cmp	r2, #0
 8009422:	dd08      	ble.n	8009436 <scalbn+0x9e>
 8009424:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009428:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800942c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009430:	ec45 4b10 	vmov	d0, r4, r5
 8009434:	bd70      	pop	{r4, r5, r6, pc}
 8009436:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800943a:	da08      	bge.n	800944e <scalbn+0xb6>
 800943c:	2d00      	cmp	r5, #0
 800943e:	a10a      	add	r1, pc, #40	; (adr r1, 8009468 <scalbn+0xd0>)
 8009440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009444:	dac0      	bge.n	80093c8 <scalbn+0x30>
 8009446:	a10e      	add	r1, pc, #56	; (adr r1, 8009480 <scalbn+0xe8>)
 8009448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800944c:	e7bc      	b.n	80093c8 <scalbn+0x30>
 800944e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009452:	3236      	adds	r2, #54	; 0x36
 8009454:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009458:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800945c:	4620      	mov	r0, r4
 800945e:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <scalbn+0xf8>)
 8009460:	2200      	movs	r2, #0
 8009462:	e7d5      	b.n	8009410 <scalbn+0x78>
 8009464:	f3af 8000 	nop.w
 8009468:	c2f8f359 	.word	0xc2f8f359
 800946c:	01a56e1f 	.word	0x01a56e1f
 8009470:	8800759c 	.word	0x8800759c
 8009474:	7e37e43c 	.word	0x7e37e43c
 8009478:	8800759c 	.word	0x8800759c
 800947c:	fe37e43c 	.word	0xfe37e43c
 8009480:	c2f8f359 	.word	0xc2f8f359
 8009484:	81a56e1f 	.word	0x81a56e1f
 8009488:	43500000 	.word	0x43500000
 800948c:	ffff3cb0 	.word	0xffff3cb0
 8009490:	3c900000 	.word	0x3c900000
 8009494:	00000000 	.word	0x00000000

08009498 <floor>:
 8009498:	ec51 0b10 	vmov	r0, r1, d0
 800949c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80094a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80094a8:	2e13      	cmp	r6, #19
 80094aa:	ee10 5a10 	vmov	r5, s0
 80094ae:	ee10 8a10 	vmov	r8, s0
 80094b2:	460c      	mov	r4, r1
 80094b4:	dc31      	bgt.n	800951a <floor+0x82>
 80094b6:	2e00      	cmp	r6, #0
 80094b8:	da14      	bge.n	80094e4 <floor+0x4c>
 80094ba:	a333      	add	r3, pc, #204	; (adr r3, 8009588 <floor+0xf0>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f6 feb0 	bl	8000224 <__adddf3>
 80094c4:	2200      	movs	r2, #0
 80094c6:	2300      	movs	r3, #0
 80094c8:	f7f7 faf2 	bl	8000ab0 <__aeabi_dcmpgt>
 80094cc:	b138      	cbz	r0, 80094de <floor+0x46>
 80094ce:	2c00      	cmp	r4, #0
 80094d0:	da53      	bge.n	800957a <floor+0xe2>
 80094d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80094d6:	4325      	orrs	r5, r4
 80094d8:	d052      	beq.n	8009580 <floor+0xe8>
 80094da:	4c2d      	ldr	r4, [pc, #180]	; (8009590 <floor+0xf8>)
 80094dc:	2500      	movs	r5, #0
 80094de:	4621      	mov	r1, r4
 80094e0:	4628      	mov	r0, r5
 80094e2:	e024      	b.n	800952e <floor+0x96>
 80094e4:	4f2b      	ldr	r7, [pc, #172]	; (8009594 <floor+0xfc>)
 80094e6:	4137      	asrs	r7, r6
 80094e8:	ea01 0307 	and.w	r3, r1, r7
 80094ec:	4303      	orrs	r3, r0
 80094ee:	d01e      	beq.n	800952e <floor+0x96>
 80094f0:	a325      	add	r3, pc, #148	; (adr r3, 8009588 <floor+0xf0>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	f7f6 fe95 	bl	8000224 <__adddf3>
 80094fa:	2200      	movs	r2, #0
 80094fc:	2300      	movs	r3, #0
 80094fe:	f7f7 fad7 	bl	8000ab0 <__aeabi_dcmpgt>
 8009502:	2800      	cmp	r0, #0
 8009504:	d0eb      	beq.n	80094de <floor+0x46>
 8009506:	2c00      	cmp	r4, #0
 8009508:	bfbe      	ittt	lt
 800950a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800950e:	4133      	asrlt	r3, r6
 8009510:	18e4      	addlt	r4, r4, r3
 8009512:	ea24 0407 	bic.w	r4, r4, r7
 8009516:	2500      	movs	r5, #0
 8009518:	e7e1      	b.n	80094de <floor+0x46>
 800951a:	2e33      	cmp	r6, #51	; 0x33
 800951c:	dd0b      	ble.n	8009536 <floor+0x9e>
 800951e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009522:	d104      	bne.n	800952e <floor+0x96>
 8009524:	ee10 2a10 	vmov	r2, s0
 8009528:	460b      	mov	r3, r1
 800952a:	f7f6 fe7b 	bl	8000224 <__adddf3>
 800952e:	ec41 0b10 	vmov	d0, r0, r1
 8009532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009536:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800953a:	f04f 37ff 	mov.w	r7, #4294967295
 800953e:	40df      	lsrs	r7, r3
 8009540:	4238      	tst	r0, r7
 8009542:	d0f4      	beq.n	800952e <floor+0x96>
 8009544:	a310      	add	r3, pc, #64	; (adr r3, 8009588 <floor+0xf0>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	f7f6 fe6b 	bl	8000224 <__adddf3>
 800954e:	2200      	movs	r2, #0
 8009550:	2300      	movs	r3, #0
 8009552:	f7f7 faad 	bl	8000ab0 <__aeabi_dcmpgt>
 8009556:	2800      	cmp	r0, #0
 8009558:	d0c1      	beq.n	80094de <floor+0x46>
 800955a:	2c00      	cmp	r4, #0
 800955c:	da0a      	bge.n	8009574 <floor+0xdc>
 800955e:	2e14      	cmp	r6, #20
 8009560:	d101      	bne.n	8009566 <floor+0xce>
 8009562:	3401      	adds	r4, #1
 8009564:	e006      	b.n	8009574 <floor+0xdc>
 8009566:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800956a:	2301      	movs	r3, #1
 800956c:	40b3      	lsls	r3, r6
 800956e:	441d      	add	r5, r3
 8009570:	45a8      	cmp	r8, r5
 8009572:	d8f6      	bhi.n	8009562 <floor+0xca>
 8009574:	ea25 0507 	bic.w	r5, r5, r7
 8009578:	e7b1      	b.n	80094de <floor+0x46>
 800957a:	2500      	movs	r5, #0
 800957c:	462c      	mov	r4, r5
 800957e:	e7ae      	b.n	80094de <floor+0x46>
 8009580:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009584:	e7ab      	b.n	80094de <floor+0x46>
 8009586:	bf00      	nop
 8009588:	8800759c 	.word	0x8800759c
 800958c:	7e37e43c 	.word	0x7e37e43c
 8009590:	bff00000 	.word	0xbff00000
 8009594:	000fffff 	.word	0x000fffff

08009598 <abort>:
 8009598:	b508      	push	{r3, lr}
 800959a:	2006      	movs	r0, #6
 800959c:	f000 f90a 	bl	80097b4 <raise>
 80095a0:	2001      	movs	r0, #1
 80095a2:	f7f9 ff01 	bl	80033a8 <_exit>
	...

080095a8 <malloc>:
 80095a8:	4b02      	ldr	r3, [pc, #8]	; (80095b4 <malloc+0xc>)
 80095aa:	4601      	mov	r1, r0
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	f000 b82b 	b.w	8009608 <_malloc_r>
 80095b2:	bf00      	nop
 80095b4:	20000058 	.word	0x20000058

080095b8 <free>:
 80095b8:	4b02      	ldr	r3, [pc, #8]	; (80095c4 <free+0xc>)
 80095ba:	4601      	mov	r1, r0
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	f000 b951 	b.w	8009864 <_free_r>
 80095c2:	bf00      	nop
 80095c4:	20000058 	.word	0x20000058

080095c8 <sbrk_aligned>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	4e0e      	ldr	r6, [pc, #56]	; (8009604 <sbrk_aligned+0x3c>)
 80095cc:	460c      	mov	r4, r1
 80095ce:	6831      	ldr	r1, [r6, #0]
 80095d0:	4605      	mov	r5, r0
 80095d2:	b911      	cbnz	r1, 80095da <sbrk_aligned+0x12>
 80095d4:	f000 f90a 	bl	80097ec <_sbrk_r>
 80095d8:	6030      	str	r0, [r6, #0]
 80095da:	4621      	mov	r1, r4
 80095dc:	4628      	mov	r0, r5
 80095de:	f000 f905 	bl	80097ec <_sbrk_r>
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	d00a      	beq.n	80095fc <sbrk_aligned+0x34>
 80095e6:	1cc4      	adds	r4, r0, #3
 80095e8:	f024 0403 	bic.w	r4, r4, #3
 80095ec:	42a0      	cmp	r0, r4
 80095ee:	d007      	beq.n	8009600 <sbrk_aligned+0x38>
 80095f0:	1a21      	subs	r1, r4, r0
 80095f2:	4628      	mov	r0, r5
 80095f4:	f000 f8fa 	bl	80097ec <_sbrk_r>
 80095f8:	3001      	adds	r0, #1
 80095fa:	d101      	bne.n	8009600 <sbrk_aligned+0x38>
 80095fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009600:	4620      	mov	r0, r4
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	20000384 	.word	0x20000384

08009608 <_malloc_r>:
 8009608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800960c:	1ccd      	adds	r5, r1, #3
 800960e:	f025 0503 	bic.w	r5, r5, #3
 8009612:	3508      	adds	r5, #8
 8009614:	2d0c      	cmp	r5, #12
 8009616:	bf38      	it	cc
 8009618:	250c      	movcc	r5, #12
 800961a:	2d00      	cmp	r5, #0
 800961c:	4607      	mov	r7, r0
 800961e:	db01      	blt.n	8009624 <_malloc_r+0x1c>
 8009620:	42a9      	cmp	r1, r5
 8009622:	d905      	bls.n	8009630 <_malloc_r+0x28>
 8009624:	230c      	movs	r3, #12
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	2600      	movs	r6, #0
 800962a:	4630      	mov	r0, r6
 800962c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009630:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009704 <_malloc_r+0xfc>
 8009634:	f000 f868 	bl	8009708 <__malloc_lock>
 8009638:	f8d8 3000 	ldr.w	r3, [r8]
 800963c:	461c      	mov	r4, r3
 800963e:	bb5c      	cbnz	r4, 8009698 <_malloc_r+0x90>
 8009640:	4629      	mov	r1, r5
 8009642:	4638      	mov	r0, r7
 8009644:	f7ff ffc0 	bl	80095c8 <sbrk_aligned>
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	4604      	mov	r4, r0
 800964c:	d155      	bne.n	80096fa <_malloc_r+0xf2>
 800964e:	f8d8 4000 	ldr.w	r4, [r8]
 8009652:	4626      	mov	r6, r4
 8009654:	2e00      	cmp	r6, #0
 8009656:	d145      	bne.n	80096e4 <_malloc_r+0xdc>
 8009658:	2c00      	cmp	r4, #0
 800965a:	d048      	beq.n	80096ee <_malloc_r+0xe6>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	4631      	mov	r1, r6
 8009660:	4638      	mov	r0, r7
 8009662:	eb04 0903 	add.w	r9, r4, r3
 8009666:	f000 f8c1 	bl	80097ec <_sbrk_r>
 800966a:	4581      	cmp	r9, r0
 800966c:	d13f      	bne.n	80096ee <_malloc_r+0xe6>
 800966e:	6821      	ldr	r1, [r4, #0]
 8009670:	1a6d      	subs	r5, r5, r1
 8009672:	4629      	mov	r1, r5
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff ffa7 	bl	80095c8 <sbrk_aligned>
 800967a:	3001      	adds	r0, #1
 800967c:	d037      	beq.n	80096ee <_malloc_r+0xe6>
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	442b      	add	r3, r5
 8009682:	6023      	str	r3, [r4, #0]
 8009684:	f8d8 3000 	ldr.w	r3, [r8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d038      	beq.n	80096fe <_malloc_r+0xf6>
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	42a2      	cmp	r2, r4
 8009690:	d12b      	bne.n	80096ea <_malloc_r+0xe2>
 8009692:	2200      	movs	r2, #0
 8009694:	605a      	str	r2, [r3, #4]
 8009696:	e00f      	b.n	80096b8 <_malloc_r+0xb0>
 8009698:	6822      	ldr	r2, [r4, #0]
 800969a:	1b52      	subs	r2, r2, r5
 800969c:	d41f      	bmi.n	80096de <_malloc_r+0xd6>
 800969e:	2a0b      	cmp	r2, #11
 80096a0:	d917      	bls.n	80096d2 <_malloc_r+0xca>
 80096a2:	1961      	adds	r1, r4, r5
 80096a4:	42a3      	cmp	r3, r4
 80096a6:	6025      	str	r5, [r4, #0]
 80096a8:	bf18      	it	ne
 80096aa:	6059      	strne	r1, [r3, #4]
 80096ac:	6863      	ldr	r3, [r4, #4]
 80096ae:	bf08      	it	eq
 80096b0:	f8c8 1000 	streq.w	r1, [r8]
 80096b4:	5162      	str	r2, [r4, r5]
 80096b6:	604b      	str	r3, [r1, #4]
 80096b8:	4638      	mov	r0, r7
 80096ba:	f104 060b 	add.w	r6, r4, #11
 80096be:	f000 f829 	bl	8009714 <__malloc_unlock>
 80096c2:	f026 0607 	bic.w	r6, r6, #7
 80096c6:	1d23      	adds	r3, r4, #4
 80096c8:	1af2      	subs	r2, r6, r3
 80096ca:	d0ae      	beq.n	800962a <_malloc_r+0x22>
 80096cc:	1b9b      	subs	r3, r3, r6
 80096ce:	50a3      	str	r3, [r4, r2]
 80096d0:	e7ab      	b.n	800962a <_malloc_r+0x22>
 80096d2:	42a3      	cmp	r3, r4
 80096d4:	6862      	ldr	r2, [r4, #4]
 80096d6:	d1dd      	bne.n	8009694 <_malloc_r+0x8c>
 80096d8:	f8c8 2000 	str.w	r2, [r8]
 80096dc:	e7ec      	b.n	80096b8 <_malloc_r+0xb0>
 80096de:	4623      	mov	r3, r4
 80096e0:	6864      	ldr	r4, [r4, #4]
 80096e2:	e7ac      	b.n	800963e <_malloc_r+0x36>
 80096e4:	4634      	mov	r4, r6
 80096e6:	6876      	ldr	r6, [r6, #4]
 80096e8:	e7b4      	b.n	8009654 <_malloc_r+0x4c>
 80096ea:	4613      	mov	r3, r2
 80096ec:	e7cc      	b.n	8009688 <_malloc_r+0x80>
 80096ee:	230c      	movs	r3, #12
 80096f0:	603b      	str	r3, [r7, #0]
 80096f2:	4638      	mov	r0, r7
 80096f4:	f000 f80e 	bl	8009714 <__malloc_unlock>
 80096f8:	e797      	b.n	800962a <_malloc_r+0x22>
 80096fa:	6025      	str	r5, [r4, #0]
 80096fc:	e7dc      	b.n	80096b8 <_malloc_r+0xb0>
 80096fe:	605b      	str	r3, [r3, #4]
 8009700:	deff      	udf	#255	; 0xff
 8009702:	bf00      	nop
 8009704:	20000380 	.word	0x20000380

08009708 <__malloc_lock>:
 8009708:	4801      	ldr	r0, [pc, #4]	; (8009710 <__malloc_lock+0x8>)
 800970a:	f000 b8a9 	b.w	8009860 <__retarget_lock_acquire_recursive>
 800970e:	bf00      	nop
 8009710:	200004c4 	.word	0x200004c4

08009714 <__malloc_unlock>:
 8009714:	4801      	ldr	r0, [pc, #4]	; (800971c <__malloc_unlock+0x8>)
 8009716:	f000 b8a4 	b.w	8009862 <__retarget_lock_release_recursive>
 800971a:	bf00      	nop
 800971c:	200004c4 	.word	0x200004c4

08009720 <memmove>:
 8009720:	4288      	cmp	r0, r1
 8009722:	b510      	push	{r4, lr}
 8009724:	eb01 0402 	add.w	r4, r1, r2
 8009728:	d902      	bls.n	8009730 <memmove+0x10>
 800972a:	4284      	cmp	r4, r0
 800972c:	4623      	mov	r3, r4
 800972e:	d807      	bhi.n	8009740 <memmove+0x20>
 8009730:	1e43      	subs	r3, r0, #1
 8009732:	42a1      	cmp	r1, r4
 8009734:	d008      	beq.n	8009748 <memmove+0x28>
 8009736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800973a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800973e:	e7f8      	b.n	8009732 <memmove+0x12>
 8009740:	4402      	add	r2, r0
 8009742:	4601      	mov	r1, r0
 8009744:	428a      	cmp	r2, r1
 8009746:	d100      	bne.n	800974a <memmove+0x2a>
 8009748:	bd10      	pop	{r4, pc}
 800974a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800974e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009752:	e7f7      	b.n	8009744 <memmove+0x24>

08009754 <memset>:
 8009754:	4402      	add	r2, r0
 8009756:	4603      	mov	r3, r0
 8009758:	4293      	cmp	r3, r2
 800975a:	d100      	bne.n	800975e <memset+0xa>
 800975c:	4770      	bx	lr
 800975e:	f803 1b01 	strb.w	r1, [r3], #1
 8009762:	e7f9      	b.n	8009758 <memset+0x4>

08009764 <_raise_r>:
 8009764:	291f      	cmp	r1, #31
 8009766:	b538      	push	{r3, r4, r5, lr}
 8009768:	4604      	mov	r4, r0
 800976a:	460d      	mov	r5, r1
 800976c:	d904      	bls.n	8009778 <_raise_r+0x14>
 800976e:	2316      	movs	r3, #22
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	f04f 30ff 	mov.w	r0, #4294967295
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800977a:	b112      	cbz	r2, 8009782 <_raise_r+0x1e>
 800977c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009780:	b94b      	cbnz	r3, 8009796 <_raise_r+0x32>
 8009782:	4620      	mov	r0, r4
 8009784:	f000 f830 	bl	80097e8 <_getpid_r>
 8009788:	462a      	mov	r2, r5
 800978a:	4601      	mov	r1, r0
 800978c:	4620      	mov	r0, r4
 800978e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009792:	f000 b817 	b.w	80097c4 <_kill_r>
 8009796:	2b01      	cmp	r3, #1
 8009798:	d00a      	beq.n	80097b0 <_raise_r+0x4c>
 800979a:	1c59      	adds	r1, r3, #1
 800979c:	d103      	bne.n	80097a6 <_raise_r+0x42>
 800979e:	2316      	movs	r3, #22
 80097a0:	6003      	str	r3, [r0, #0]
 80097a2:	2001      	movs	r0, #1
 80097a4:	e7e7      	b.n	8009776 <_raise_r+0x12>
 80097a6:	2400      	movs	r4, #0
 80097a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097ac:	4628      	mov	r0, r5
 80097ae:	4798      	blx	r3
 80097b0:	2000      	movs	r0, #0
 80097b2:	e7e0      	b.n	8009776 <_raise_r+0x12>

080097b4 <raise>:
 80097b4:	4b02      	ldr	r3, [pc, #8]	; (80097c0 <raise+0xc>)
 80097b6:	4601      	mov	r1, r0
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	f7ff bfd3 	b.w	8009764 <_raise_r>
 80097be:	bf00      	nop
 80097c0:	20000058 	.word	0x20000058

080097c4 <_kill_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d07      	ldr	r5, [pc, #28]	; (80097e4 <_kill_r+0x20>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	4604      	mov	r4, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	602b      	str	r3, [r5, #0]
 80097d2:	f7f9 fdd9 	bl	8003388 <_kill>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	d102      	bne.n	80097e0 <_kill_r+0x1c>
 80097da:	682b      	ldr	r3, [r5, #0]
 80097dc:	b103      	cbz	r3, 80097e0 <_kill_r+0x1c>
 80097de:	6023      	str	r3, [r4, #0]
 80097e0:	bd38      	pop	{r3, r4, r5, pc}
 80097e2:	bf00      	nop
 80097e4:	200004c0 	.word	0x200004c0

080097e8 <_getpid_r>:
 80097e8:	f7f9 bdc6 	b.w	8003378 <_getpid>

080097ec <_sbrk_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4d06      	ldr	r5, [pc, #24]	; (8009808 <_sbrk_r+0x1c>)
 80097f0:	2300      	movs	r3, #0
 80097f2:	4604      	mov	r4, r0
 80097f4:	4608      	mov	r0, r1
 80097f6:	602b      	str	r3, [r5, #0]
 80097f8:	f7f9 fde0 	bl	80033bc <_sbrk>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_sbrk_r+0x1a>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_sbrk_r+0x1a>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	200004c0 	.word	0x200004c0

0800980c <__errno>:
 800980c:	4b01      	ldr	r3, [pc, #4]	; (8009814 <__errno+0x8>)
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	20000058 	.word	0x20000058

08009818 <__libc_init_array>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	4d0d      	ldr	r5, [pc, #52]	; (8009850 <__libc_init_array+0x38>)
 800981c:	4c0d      	ldr	r4, [pc, #52]	; (8009854 <__libc_init_array+0x3c>)
 800981e:	1b64      	subs	r4, r4, r5
 8009820:	10a4      	asrs	r4, r4, #2
 8009822:	2600      	movs	r6, #0
 8009824:	42a6      	cmp	r6, r4
 8009826:	d109      	bne.n	800983c <__libc_init_array+0x24>
 8009828:	4d0b      	ldr	r5, [pc, #44]	; (8009858 <__libc_init_array+0x40>)
 800982a:	4c0c      	ldr	r4, [pc, #48]	; (800985c <__libc_init_array+0x44>)
 800982c:	f000 f866 	bl	80098fc <_init>
 8009830:	1b64      	subs	r4, r4, r5
 8009832:	10a4      	asrs	r4, r4, #2
 8009834:	2600      	movs	r6, #0
 8009836:	42a6      	cmp	r6, r4
 8009838:	d105      	bne.n	8009846 <__libc_init_array+0x2e>
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009840:	4798      	blx	r3
 8009842:	3601      	adds	r6, #1
 8009844:	e7ee      	b.n	8009824 <__libc_init_array+0xc>
 8009846:	f855 3b04 	ldr.w	r3, [r5], #4
 800984a:	4798      	blx	r3
 800984c:	3601      	adds	r6, #1
 800984e:	e7f2      	b.n	8009836 <__libc_init_array+0x1e>
 8009850:	08009b48 	.word	0x08009b48
 8009854:	08009b48 	.word	0x08009b48
 8009858:	08009b48 	.word	0x08009b48
 800985c:	08009b50 	.word	0x08009b50

08009860 <__retarget_lock_acquire_recursive>:
 8009860:	4770      	bx	lr

08009862 <__retarget_lock_release_recursive>:
 8009862:	4770      	bx	lr

08009864 <_free_r>:
 8009864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009866:	2900      	cmp	r1, #0
 8009868:	d044      	beq.n	80098f4 <_free_r+0x90>
 800986a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986e:	9001      	str	r0, [sp, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	f1a1 0404 	sub.w	r4, r1, #4
 8009876:	bfb8      	it	lt
 8009878:	18e4      	addlt	r4, r4, r3
 800987a:	f7ff ff45 	bl	8009708 <__malloc_lock>
 800987e:	4a1e      	ldr	r2, [pc, #120]	; (80098f8 <_free_r+0x94>)
 8009880:	9801      	ldr	r0, [sp, #4]
 8009882:	6813      	ldr	r3, [r2, #0]
 8009884:	b933      	cbnz	r3, 8009894 <_free_r+0x30>
 8009886:	6063      	str	r3, [r4, #4]
 8009888:	6014      	str	r4, [r2, #0]
 800988a:	b003      	add	sp, #12
 800988c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009890:	f7ff bf40 	b.w	8009714 <__malloc_unlock>
 8009894:	42a3      	cmp	r3, r4
 8009896:	d908      	bls.n	80098aa <_free_r+0x46>
 8009898:	6825      	ldr	r5, [r4, #0]
 800989a:	1961      	adds	r1, r4, r5
 800989c:	428b      	cmp	r3, r1
 800989e:	bf01      	itttt	eq
 80098a0:	6819      	ldreq	r1, [r3, #0]
 80098a2:	685b      	ldreq	r3, [r3, #4]
 80098a4:	1949      	addeq	r1, r1, r5
 80098a6:	6021      	streq	r1, [r4, #0]
 80098a8:	e7ed      	b.n	8009886 <_free_r+0x22>
 80098aa:	461a      	mov	r2, r3
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	b10b      	cbz	r3, 80098b4 <_free_r+0x50>
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	d9fa      	bls.n	80098aa <_free_r+0x46>
 80098b4:	6811      	ldr	r1, [r2, #0]
 80098b6:	1855      	adds	r5, r2, r1
 80098b8:	42a5      	cmp	r5, r4
 80098ba:	d10b      	bne.n	80098d4 <_free_r+0x70>
 80098bc:	6824      	ldr	r4, [r4, #0]
 80098be:	4421      	add	r1, r4
 80098c0:	1854      	adds	r4, r2, r1
 80098c2:	42a3      	cmp	r3, r4
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	d1e0      	bne.n	800988a <_free_r+0x26>
 80098c8:	681c      	ldr	r4, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	6053      	str	r3, [r2, #4]
 80098ce:	440c      	add	r4, r1
 80098d0:	6014      	str	r4, [r2, #0]
 80098d2:	e7da      	b.n	800988a <_free_r+0x26>
 80098d4:	d902      	bls.n	80098dc <_free_r+0x78>
 80098d6:	230c      	movs	r3, #12
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	e7d6      	b.n	800988a <_free_r+0x26>
 80098dc:	6825      	ldr	r5, [r4, #0]
 80098de:	1961      	adds	r1, r4, r5
 80098e0:	428b      	cmp	r3, r1
 80098e2:	bf04      	itt	eq
 80098e4:	6819      	ldreq	r1, [r3, #0]
 80098e6:	685b      	ldreq	r3, [r3, #4]
 80098e8:	6063      	str	r3, [r4, #4]
 80098ea:	bf04      	itt	eq
 80098ec:	1949      	addeq	r1, r1, r5
 80098ee:	6021      	streq	r1, [r4, #0]
 80098f0:	6054      	str	r4, [r2, #4]
 80098f2:	e7ca      	b.n	800988a <_free_r+0x26>
 80098f4:	b003      	add	sp, #12
 80098f6:	bd30      	pop	{r4, r5, pc}
 80098f8:	20000380 	.word	0x20000380

080098fc <_init>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	bf00      	nop
 8009900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009902:	bc08      	pop	{r3}
 8009904:	469e      	mov	lr, r3
 8009906:	4770      	bx	lr

08009908 <_fini>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	bf00      	nop
 800990c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990e:	bc08      	pop	{r3}
 8009910:	469e      	mov	lr, r3
 8009912:	4770      	bx	lr

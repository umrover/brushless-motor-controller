
Brushless_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c8  080043c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080043c8  080043c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043c8  080043c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080043d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000000c  080043dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080043dc  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137ca  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024be  00000000  00000000  00033849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  00035d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff1  00000000  00000000  000371a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002219a  00000000  00000000  00038199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152d5  00000000  00000000  0005a333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec4fc  00000000  00000000  0006f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a24  00000000  00000000  0015bb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00161528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080043a0 	.word	0x080043a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080043a0 	.word	0x080043a0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fcd7 	bl	8000bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80d 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fa36 	bl	8000694 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000228:	f000 f928 	bl	800047c <MX_FDCAN1_Init>
  MX_ADC1_Init();
 800022c:	f000 f848 	bl	80002c0 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000230:	f000 f96a 	bl	8000508 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000234:	f000 f9a6 	bl	8000584 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000238:	f000 f8ba 	bl	80003b0 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x24>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	b094      	sub	sp, #80	; 0x50
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	f107 0318 	add.w	r3, r7, #24
 8000248:	2238      	movs	r2, #56	; 0x38
 800024a:	2100      	movs	r1, #0
 800024c:	4618      	mov	r0, r3
 800024e:	f004 f87b 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000260:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000264:	f002 fa72 	bl	800274c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000270:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	2340      	movs	r3, #64	; 0x40
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000276:	2300      	movs	r3, #0
 8000278:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fb08 	bl	8002894 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800028a:	f000 fa71 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000292:	2301      	movs	r3, #1
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fe0c 	bl	8002ec4 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002b2:	f000 fa5d 	bl	8000770 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3750      	adds	r7, #80	; 0x50
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2220      	movs	r2, #32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f004 f835 	bl	8004348 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002de:	4b32      	ldr	r3, [pc, #200]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80002ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f4:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80002fa:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000302:	2200      	movs	r2, #0
 8000304:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000306:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000308:	2204      	movs	r2, #4
 800030a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800030e:	2200      	movs	r2, #0
 8000310:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000312:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000314:	2200      	movs	r2, #0
 8000316:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800031a:	2201      	movs	r2, #1
 800031c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000320:	2200      	movs	r2, #0
 8000322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000326:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000328:	2200      	movs	r2, #0
 800032a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800032e:	2200      	movs	r2, #0
 8000330:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000332:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800033a:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800033c:	2200      	movs	r2, #0
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800034a:	f000 fe8b 	bl	8001064 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 fa0c 	bl	8000770 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000364:	f001 fca6 	bl	8001cb4 <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 f9ff 	bl	8000770 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_ADC1_Init+0xec>)
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2306      	movs	r3, #6
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	237f      	movs	r3, #127	; 0x7f
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2304      	movs	r3, #4
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000390:	f001 f82a 	bl	80013e8 <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800039a:	f000 f9e9 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	3730      	adds	r7, #48	; 0x30
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000028 	.word	0x20000028
 80003ac:	19200040 	.word	0x19200040

080003b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b6:	463b      	mov	r3, r7
 80003b8:	2220      	movs	r2, #32
 80003ba:	2100      	movs	r1, #0
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 ffc3 	bl	8004348 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003c2:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003c4:	4a2b      	ldr	r2, [pc, #172]	; (8000474 <MX_ADC2_Init+0xc4>)
 80003c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003c8:	4b29      	ldr	r3, [pc, #164]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80003ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003d0:	4b27      	ldr	r3, [pc, #156]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d6:	4b26      	ldr	r3, [pc, #152]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80003dc:	4b24      	ldr	r3, [pc, #144]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e2:	4b23      	ldr	r3, [pc, #140]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e8:	4b21      	ldr	r3, [pc, #132]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003ee:	4b20      	ldr	r3, [pc, #128]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80003fa:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <MX_ADC2_Init+0xc0>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_ADC2_Init+0xc0>)
 8000402:	2200      	movs	r2, #0
 8000404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <MX_ADC2_Init+0xc0>)
 800040a:	2200      	movs	r2, #0
 800040c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_ADC2_Init+0xc0>)
 8000410:	2200      	movs	r2, #0
 8000412:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <MX_ADC2_Init+0xc0>)
 8000416:	2200      	movs	r2, #0
 8000418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_ADC2_Init+0xc0>)
 800041e:	2200      	movs	r2, #0
 8000420:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <MX_ADC2_Init+0xc0>)
 8000424:	2200      	movs	r2, #0
 8000426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800042a:	4811      	ldr	r0, [pc, #68]	; (8000470 <MX_ADC2_Init+0xc0>)
 800042c:	f000 fe1a 	bl	8001064 <HAL_ADC_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000436:	f000 f99b 	bl	8000770 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_ADC2_Init+0xc8>)
 800043c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800043e:	2306      	movs	r3, #6
 8000440:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000446:	237f      	movs	r3, #127	; 0x7f
 8000448:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800044a:	2304      	movs	r3, #4
 800044c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000452:	463b      	mov	r3, r7
 8000454:	4619      	mov	r1, r3
 8000456:	4806      	ldr	r0, [pc, #24]	; (8000470 <MX_ADC2_Init+0xc0>)
 8000458:	f000 ffc6 	bl	80013e8 <HAL_ADC_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000462:	f000 f985 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000094 	.word	0x20000094
 8000474:	50000100 	.word	0x50000100
 8000478:	2e300800 	.word	0x2e300800

0800047c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000480:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <MX_FDCAN1_Init+0x84>)
 8000482:	4a20      	ldr	r2, [pc, #128]	; (8000504 <MX_FDCAN1_Init+0x88>)
 8000484:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000486:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <MX_FDCAN1_Init+0x84>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800048c:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <MX_FDCAN1_Init+0x84>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000492:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <MX_FDCAN1_Init+0x84>)
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <MX_FDCAN1_Init+0x84>)
 800049a:	2200      	movs	r2, #0
 800049c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80004a4:	4b16      	ldr	r3, [pc, #88]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004ac:	2210      	movs	r2, #16
 80004ae:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80004b0:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004b8:	2202      	movs	r2, #2
 80004ba:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004be:	2202      	movs	r2, #2
 80004c0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004dc:	2200      	movs	r2, #0
 80004de:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <MX_FDCAN1_Init+0x84>)
 80004ee:	f001 fdcd 	bl	800208c <HAL_FDCAN_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80004f8:	f000 f93a 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000100 	.word	0x20000100
 8000504:	40006400 	.word	0x40006400

08000508 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_SPI3_Init+0x74>)
 800050e:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <MX_SPI3_Init+0x78>)
 8000510:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <MX_SPI3_Init+0x74>)
 8000514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000518:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_SPI3_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_SPI3_Init+0x74>)
 8000522:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000526:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_SPI3_Init+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_SPI3_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_SPI3_Init+0x74>)
 8000536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800053a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_SPI3_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_SPI3_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_SPI3_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_SPI3_Init+0x74>)
 8000550:	2200      	movs	r2, #0
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_SPI3_Init+0x74>)
 8000556:	2207      	movs	r2, #7
 8000558:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_SPI3_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_SPI3_Init+0x74>)
 8000562:	2208      	movs	r2, #8
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_SPI3_Init+0x74>)
 8000568:	f003 f8de 	bl	8003728 <HAL_SPI_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000572:	f000 f8fd 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000164 	.word	0x20000164
 8000580:	40003c00 	.word	0x40003c00

08000584 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005b0:	4b36      	ldr	r3, [pc, #216]	; (800068c <MX_TIM3_Init+0x108>)
 80005b2:	4a37      	ldr	r2, [pc, #220]	; (8000690 <MX_TIM3_Init+0x10c>)
 80005b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <MX_TIM3_Init+0x108>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005bc:	4b33      	ldr	r3, [pc, #204]	; (800068c <MX_TIM3_Init+0x108>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <MX_TIM3_Init+0x108>)
 80005c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ca:	4b30      	ldr	r3, [pc, #192]	; (800068c <MX_TIM3_Init+0x108>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d0:	4b2e      	ldr	r3, [pc, #184]	; (800068c <MX_TIM3_Init+0x108>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005d6:	482d      	ldr	r0, [pc, #180]	; (800068c <MX_TIM3_Init+0x108>)
 80005d8:	f003 f951 	bl	800387e <HAL_TIM_Base_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80005e2:	f000 f8c5 	bl	8000770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4619      	mov	r1, r3
 80005f2:	4826      	ldr	r0, [pc, #152]	; (800068c <MX_TIM3_Init+0x108>)
 80005f4:	f003 fa98 	bl	8003b28 <HAL_TIM_ConfigClockSource>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80005fe:	f000 f8b7 	bl	8000770 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000602:	4822      	ldr	r0, [pc, #136]	; (800068c <MX_TIM3_Init+0x108>)
 8000604:	f003 f992 	bl	800392c <HAL_TIM_IC_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800060e:	f000 f8af 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <MX_TIM3_Init+0x108>)
 8000622:	f003 fdfb 	bl	800421c <HAL_TIMEx_MasterConfigSynchronization>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 800062c:	f000 f8a0 	bl	8000770 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000634:	2301      	movs	r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_TIM3_Init+0x108>)
 8000648:	f003 f9d1 	bl	80039ee <HAL_TIM_IC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000652:	f000 f88d 	bl	8000770 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2204      	movs	r2, #4
 800065a:	4619      	mov	r1, r3
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <MX_TIM3_Init+0x108>)
 800065e:	f003 f9c6 	bl	80039ee <HAL_TIM_IC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8000668:	f000 f882 	bl	8000770 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2208      	movs	r2, #8
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_TIM3_Init+0x108>)
 8000674:	f003 f9bb 	bl	80039ee <HAL_TIM_IC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 800067e:	f000 f877 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3730      	adds	r7, #48	; 0x30
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200001c8 	.word	0x200001c8
 8000690:	40000400 	.word	0x40000400

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a2e      	ldr	r2, [pc, #184]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b29      	ldr	r3, [pc, #164]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a28      	ldr	r2, [pc, #160]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a22      	ldr	r2, [pc, #136]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_GPIO_Init+0xd4>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_GPIO_Init+0xd4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f002 f802 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2107      	movs	r1, #7
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <MX_GPIO_Init+0xd8>)
 800071e:	f001 fffd 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 8000722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f001 fe6b 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_OUTPUT_Pin H2_OUTPUT_Pin H3_OUTPUT_Pin */
  GPIO_InitStruct.Pin = H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin;
 8000742:	2307      	movs	r3, #7
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0xd8>)
 800075a:	f001 fe5d 	bl	8002418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	; 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000
 800076c:	48000c00 	.word	0x48000c00

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6613      	str	r3, [r2, #96]	; 0x60
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6593      	str	r3, [r2, #88]	; 0x58
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b0a2      	sub	sp, #136	; 0x88
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	2254      	movs	r2, #84	; 0x54
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 fdaf 	bl	8004348 <memset>
  if(hadc->Instance==ADC1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007f2:	d156      	bne.n	80008a2 <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007fe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fd41 	bl	800328c <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000810:	f7ff ffae 	bl	8000770 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000814:	4b46      	ldr	r3, [pc, #280]	; (8000930 <HAL_ADC_MspInit+0x16c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	4a45      	ldr	r2, [pc, #276]	; (8000930 <HAL_ADC_MspInit+0x16c>)
 800081c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <HAL_ADC_MspInit+0x16c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d10b      	bne.n	800083e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <HAL_ADC_MspInit+0x170>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a42      	ldr	r2, [pc, #264]	; (8000934 <HAL_ADC_MspInit+0x170>)
 800082c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <HAL_ADC_MspInit+0x170>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800083a:	61fb      	str	r3, [r7, #28]
 800083c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b3d      	ldr	r3, [pc, #244]	; (8000934 <HAL_ADC_MspInit+0x170>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a3c      	ldr	r2, [pc, #240]	; (8000934 <HAL_ADC_MspInit+0x170>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <HAL_ADC_MspInit+0x170>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b37      	ldr	r3, [pc, #220]	; (8000934 <HAL_ADC_MspInit+0x170>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a36      	ldr	r2, [pc, #216]	; (8000934 <HAL_ADC_MspInit+0x170>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <HAL_ADC_MspInit+0x170>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURR_1_Pin|CURR_2_Pin|CURR_3_Pin|ADC_TEMP_Pin;
 800086e:	230f      	movs	r3, #15
 8000870:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000872:	2303      	movs	r3, #3
 8000874:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800087e:	4619      	mov	r1, r3
 8000880:	482d      	ldr	r0, [pc, #180]	; (8000938 <HAL_ADC_MspInit+0x174>)
 8000882:	f001 fdc9 	bl	8002418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_1_Pin|VOLTAGE_2_Pin|VOLTAGE_3_Pin|DRIVER_VOLTAGE_Pin;
 8000886:	230f      	movs	r3, #15
 8000888:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f001 fdbc 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80008a0:	e041      	b.n	8000926 <HAL_ADC_MspInit+0x162>
  else if(hadc->Instance==ADC2)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a25      	ldr	r2, [pc, #148]	; (800093c <HAL_ADC_MspInit+0x178>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d13c      	bne.n	8000926 <HAL_ADC_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008b6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fce5 	bl	800328c <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_ADC_MspInit+0x108>
      Error_Handler();
 80008c8:	f7ff ff52 	bl	8000770 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_ADC_MspInit+0x16c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_ADC_MspInit+0x16c>)
 80008d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_ADC_MspInit+0x16c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10b      	bne.n	80008f6 <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_ADC_MspInit+0x170>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <HAL_ADC_MspInit+0x170>)
 80008e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_ADC_MspInit+0x170>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_ADC_MspInit+0x170>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_ADC_MspInit+0x170>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_ADC_MspInit+0x170>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_TEMP_Pin;
 800090e:	2320      	movs	r3, #32
 8000910:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(MOTOR_TEMP_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_ADC_MspInit+0x174>)
 8000922:	f001 fd79 	bl	8002418 <HAL_GPIO_Init>
}
 8000926:	bf00      	nop
 8000928:	3788      	adds	r7, #136	; 0x88
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000214 	.word	0x20000214
 8000934:	40021000 	.word	0x40021000
 8000938:	48000800 	.word	0x48000800
 800093c:	50000100 	.word	0x50000100

08000940 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b09e      	sub	sp, #120	; 0x78
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2254      	movs	r2, #84	; 0x54
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f003 fcf1 	bl	8004348 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a20      	ldr	r2, [pc, #128]	; (80009ec <HAL_FDCAN_MspInit+0xac>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d139      	bne.n	80009e4 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800097a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fc83 	bl	800328c <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800098c:	f7ff fef0 	bl	8000770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_FDCAN_MspInit+0xb0>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000994:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <HAL_FDCAN_MspInit+0xb0>)
 8000996:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800099a:	6593      	str	r3, [r2, #88]	; 0x58
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_FDCAN_MspInit+0xb0>)
 800099e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_FDCAN_MspInit+0xb0>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_FDCAN_MspInit+0xb0>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_FDCAN_MspInit+0xb0>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009d2:	2309      	movs	r3, #9
 80009d4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f001 fd1a 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3778      	adds	r7, #120	; 0x78
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40006400 	.word	0x40006400
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_SPI_MspInit+0x7c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d128      	bne.n	8000a68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_SPI_MspInit+0x80>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_SPI_MspInit+0x80>)
 8000a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a20:	6593      	str	r3, [r2, #88]	; 0x58
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_SPI_MspInit+0x80>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_SPI_MspInit+0x80>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_SPI_MspInit+0x80>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_SPI_MspInit+0x80>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a46:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a58:	2306      	movs	r3, #6
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_SPI_MspInit+0x84>)
 8000a64:	f001 fcd8 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40003c00 	.word	0x40003c00
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000800 	.word	0x48000800

08000a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d128      	bne.n	8000af0 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_TIM_Base_MspInit+0x80>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <HAL_TIM_Base_MspInit+0x80>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_TIM_Base_MspInit+0x80>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_TIM_Base_MspInit+0x80>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_TIM_Base_MspInit+0x80>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_TIM_Base_MspInit+0x80>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = HALL1_INPUT_Pin|HALL_2_INPUT_Pin|HALL_3_INPUT_Pin;
 8000ace:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_TIM_Base_MspInit+0x84>)
 8000aec:	f001 fc94 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40000400 	.word	0x40000400
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000800 	.word	0x48000800

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f890 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff ffd7 	bl	8000b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f003 fbd5 	bl	8004358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fb33 	bl	8000218 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   r0, =_estack
 8000bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc0:	080043d0 	.word	0x080043d0
  ldr r2, =_sbss
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc8:	2000021c 	.word	0x2000021c

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>

08000bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f001 fa25 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f80e 	bl	8000c00 <HAL_InitTick>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	e001      	b.n	8000bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf0:	f7ff fdc4 	bl	800077c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]

}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_InitTick+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d022      	beq.n	8000c5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_InitTick+0x6c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fa22 	bl	8002072 <HAL_SYSTICK_Config>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10f      	bne.n	8000c54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	d809      	bhi.n	8000c4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c42:	f001 f9fc 	bl	800203e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_InitTick+0x70>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e007      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e004      	b.n	8000c5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e001      	b.n	8000c5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c84:	6013      	str	r3, [r2, #0]
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	20000218 	.word	0x20000218
 8000c94:	20000008 	.word	0x20000008

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000218 	.word	0x20000218

08000cb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	431a      	orrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	609a      	str	r2, [r3, #8]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3360      	adds	r3, #96	; 0x60
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <LL_ADC_SetOffset+0x44>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	4313      	orrs	r3, r2
 8000d48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d50:	bf00      	nop
 8000d52:	371c      	adds	r7, #28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	03fff000 	.word	0x03fff000

08000d60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3360      	adds	r3, #96	; 0x60
 8000d6e:	461a      	mov	r2, r3
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3360      	adds	r3, #96	; 0x60
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000db6:	bf00      	nop
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b087      	sub	sp, #28
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3360      	adds	r3, #96	; 0x60
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	431a      	orrs	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000dec:	bf00      	nop
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3360      	adds	r3, #96	; 0x60
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000e22:	bf00      	nop
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	615a      	str	r2, [r3, #20]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3330      	adds	r3, #48	; 0x30
 8000e64:	461a      	mov	r2, r3
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	211f      	movs	r1, #31
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	401a      	ands	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	0e9b      	lsrs	r3, r3, #26
 8000e8c:	f003 011f 	and.w	r1, r3, #31
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3314      	adds	r3, #20
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	0e5b      	lsrs	r3, r3, #25
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	4413      	add	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	0d1b      	lsrs	r3, r3, #20
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	2107      	movs	r1, #7
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	0d1b      	lsrs	r3, r3, #20
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d10a      	bne.n	8000f2e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f24:	431a      	orrs	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	407f0000 	.word	0x407f0000

08000f54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	6093      	str	r3, [r2, #8]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f8c:	d101      	bne.n	8000f92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fdc:	d101      	bne.n	8000fe2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <LL_ADC_IsEnabled+0x18>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <LL_ADC_IsEnabled+0x1a>
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	2b04      	cmp	r3, #4
 8001028:	d101      	bne.n	800102e <LL_ADC_REG_IsConversionOngoing+0x18>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	2b08      	cmp	r3, #8
 800104e:	d101      	bne.n	8001054 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e1af      	b.n	80013de <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	2b00      	cmp	r3, #0
 800108a:	d109      	bne.n	80010a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fb99 	bl	80007c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff67 	bl	8000f78 <LL_ADC_IsDeepPowerDownEnabled>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff4d 	bl	8000f54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff82 	bl	8000fc8 <LL_ADC_IsInternalRegulatorEnabled>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d115      	bne.n	80010f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff66 	bl	8000fa0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010d4:	4b9f      	ldr	r3, [pc, #636]	; (8001354 <HAL_ADC_Init+0x2f0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	099b      	lsrs	r3, r3, #6
 80010da:	4a9f      	ldr	r2, [pc, #636]	; (8001358 <HAL_ADC_Init+0x2f4>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	099b      	lsrs	r3, r3, #6
 80010e2:	3301      	adds	r3, #1
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010e8:	e002      	b.n	80010f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff64 	bl	8000fc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10d      	bne.n	8001122 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800110a:	f043 0210 	orr.w	r2, r3, #16
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff75 	bl	8001016 <LL_ADC_REG_IsConversionOngoing>
 800112c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 8148 	bne.w	80013cc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f040 8144 	bne.w	80013cc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001148:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800114c:	f043 0202 	orr.w	r2, r3, #2
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff49 	bl	8000ff0 <LL_ADC_IsEnabled>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d141      	bne.n	80011e8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800116c:	d004      	beq.n	8001178 <HAL_ADC_Init+0x114>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a7a      	ldr	r2, [pc, #488]	; (800135c <HAL_ADC_Init+0x2f8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d10f      	bne.n	8001198 <HAL_ADC_Init+0x134>
 8001178:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800117c:	f7ff ff38 	bl	8000ff0 <LL_ADC_IsEnabled>
 8001180:	4604      	mov	r4, r0
 8001182:	4876      	ldr	r0, [pc, #472]	; (800135c <HAL_ADC_Init+0x2f8>)
 8001184:	f7ff ff34 	bl	8000ff0 <LL_ADC_IsEnabled>
 8001188:	4603      	mov	r3, r0
 800118a:	4323      	orrs	r3, r4
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf0c      	ite	eq
 8001190:	2301      	moveq	r3, #1
 8001192:	2300      	movne	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	e012      	b.n	80011be <HAL_ADC_Init+0x15a>
 8001198:	4871      	ldr	r0, [pc, #452]	; (8001360 <HAL_ADC_Init+0x2fc>)
 800119a:	f7ff ff29 	bl	8000ff0 <LL_ADC_IsEnabled>
 800119e:	4604      	mov	r4, r0
 80011a0:	4870      	ldr	r0, [pc, #448]	; (8001364 <HAL_ADC_Init+0x300>)
 80011a2:	f7ff ff25 	bl	8000ff0 <LL_ADC_IsEnabled>
 80011a6:	4603      	mov	r3, r0
 80011a8:	431c      	orrs	r4, r3
 80011aa:	486f      	ldr	r0, [pc, #444]	; (8001368 <HAL_ADC_Init+0x304>)
 80011ac:	f7ff ff20 	bl	8000ff0 <LL_ADC_IsEnabled>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4323      	orrs	r3, r4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d012      	beq.n	80011e8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011ca:	d004      	beq.n	80011d6 <HAL_ADC_Init+0x172>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a62      	ldr	r2, [pc, #392]	; (800135c <HAL_ADC_Init+0x2f8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Init+0x176>
 80011d6:	4a65      	ldr	r2, [pc, #404]	; (800136c <HAL_ADC_Init+0x308>)
 80011d8:	e000      	b.n	80011dc <HAL_ADC_Init+0x178>
 80011da:	4a65      	ldr	r2, [pc, #404]	; (8001370 <HAL_ADC_Init+0x30c>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f7ff fd64 	bl	8000cb0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7f5b      	ldrb	r3, [r3, #29]
 80011ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80011f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001206:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001212:	2b01      	cmp	r3, #1
 8001214:	d106      	bne.n	8001224 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	3b01      	subs	r3, #1
 800121c:	045b      	lsls	r3, r3, #17
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d009      	beq.n	8001240 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	4b4b      	ldr	r3, [pc, #300]	; (8001374 <HAL_ADC_Init+0x310>)
 8001248:	4013      	ands	r3, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	430b      	orrs	r3, r1
 8001252:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fed1 	bl	8001016 <LL_ADC_REG_IsConversionOngoing>
 8001274:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fede 	bl	800103c <LL_ADC_INJ_IsConversionOngoing>
 8001280:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d17f      	bne.n	8001388 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d17c      	bne.n	8001388 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001292:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800129a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012aa:	f023 0302 	bic.w	r3, r3, #2
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	69b9      	ldr	r1, [r7, #24]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d017      	beq.n	80012f0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691a      	ldr	r2, [r3, #16]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6911      	ldr	r1, [r2, #16]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	430b      	orrs	r3, r1
 80012ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80012ee:	e013      	b.n	8001318 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001314:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800131e:	2b01      	cmp	r3, #1
 8001320:	d12a      	bne.n	8001378 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800132c:	f023 0304 	bic.w	r3, r3, #4
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800133e:	4311      	orrs	r1, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001344:	430a      	orrs	r2, r1
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0201 	orr.w	r2, r2, #1
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	e019      	b.n	8001388 <HAL_ADC_Init+0x324>
 8001354:	20000000 	.word	0x20000000
 8001358:	053e2d63 	.word	0x053e2d63
 800135c:	50000100 	.word	0x50000100
 8001360:	50000400 	.word	0x50000400
 8001364:	50000500 	.word	0x50000500
 8001368:	50000600 	.word	0x50000600
 800136c:	50000300 	.word	0x50000300
 8001370:	50000700 	.word	0x50000700
 8001374:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	691a      	ldr	r2, [r3, #16]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d10c      	bne.n	80013aa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f023 010f 	bic.w	r1, r3, #15
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
 80013a8:	e007      	b.n	80013ba <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 020f 	bic.w	r2, r2, #15
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80013ca:	e007      	b.n	80013dc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d0:	f043 0210 	orr.w	r2, r3, #16
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop

080013e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0b6      	sub	sp, #216	; 0xd8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001402:	2b01      	cmp	r3, #1
 8001404:	d102      	bne.n	800140c <HAL_ADC_ConfigChannel+0x24>
 8001406:	2302      	movs	r3, #2
 8001408:	f000 bc13 	b.w	8001c32 <HAL_ADC_ConfigChannel+0x84a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fdfc 	bl	8001016 <LL_ADC_REG_IsConversionOngoing>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	f040 83f3 	bne.w	8001c0c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	f7ff fd0e 	bl	8000e54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fdea 	bl	8001016 <LL_ADC_REG_IsConversionOngoing>
 8001442:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fdf6 	bl	800103c <LL_ADC_INJ_IsConversionOngoing>
 8001450:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001454:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001458:	2b00      	cmp	r3, #0
 800145a:	f040 81d9 	bne.w	8001810 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800145e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 81d4 	bne.w	8001810 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001470:	d10f      	bne.n	8001492 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fd15 	bl	8000eac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fccf 	bl	8000e2e <LL_ADC_SetSamplingTimeCommonConfig>
 8001490:	e00e      	b.n	80014b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6819      	ldr	r1, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	461a      	mov	r2, r3
 80014a0:	f7ff fd04 	bl	8000eac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fcbf 	bl	8000e2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d022      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6919      	ldr	r1, [r3, #16]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80014e2:	f7ff fc19 	bl	8000d18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	6919      	ldr	r1, [r3, #16]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	461a      	mov	r2, r3
 80014f4:	f7ff fc65 	bl	8000dc2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6919      	ldr	r1, [r3, #16]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	7f1b      	ldrb	r3, [r3, #28]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <HAL_ADC_ConfigChannel+0x126>
 8001508:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800150c:	e000      	b.n	8001510 <HAL_ADC_ConfigChannel+0x128>
 800150e:	2300      	movs	r3, #0
 8001510:	461a      	mov	r2, r3
 8001512:	f7ff fc71 	bl	8000df8 <LL_ADC_SetOffsetSaturation>
 8001516:	e17b      	b.n	8001810 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc1e 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10a      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x15c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fc13 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	0e9b      	lsrs	r3, r3, #26
 800153e:	f003 021f 	and.w	r2, r3, #31
 8001542:	e01e      	b.n	8001582 <HAL_ADC_ConfigChannel+0x19a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fc08 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800156a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001572:	2320      	movs	r3, #32
 8001574:	e004      	b.n	8001580 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001576:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800157a:	fab3 f383 	clz	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158a:	2b00      	cmp	r3, #0
 800158c:	d105      	bne.n	800159a <HAL_ADC_ConfigChannel+0x1b2>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	0e9b      	lsrs	r3, r3, #26
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	e018      	b.n	80015cc <HAL_ADC_ConfigChannel+0x1e4>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80015ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80015b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80015be:	2320      	movs	r3, #32
 80015c0:	e004      	b.n	80015cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80015c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d106      	bne.n	80015de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fbd7 	bl	8000d8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2101      	movs	r1, #1
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fbbb 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10a      	bne.n	800160a <HAL_ADC_ConfigChannel+0x222>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fbb0 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	e01e      	b.n	8001648 <HAL_ADC_ConfigChannel+0x260>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2101      	movs	r1, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fba5 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001628:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800162c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001638:	2320      	movs	r3, #32
 800163a:	e004      	b.n	8001646 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800163c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001640:	fab3 f383 	clz	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x278>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0e9b      	lsrs	r3, r3, #26
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	e018      	b.n	8001692 <HAL_ADC_ConfigChannel+0x2aa>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001674:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800167c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001684:	2320      	movs	r3, #32
 8001686:	e004      	b.n	8001692 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001692:	429a      	cmp	r2, r3
 8001694:	d106      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	2101      	movs	r1, #1
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb74 	bl	8000d8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2102      	movs	r1, #2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fb58 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10a      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x2e8>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2102      	movs	r1, #2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fb4d 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	0e9b      	lsrs	r3, r3, #26
 80016ca:	f003 021f 	and.w	r2, r3, #31
 80016ce:	e01e      	b.n	800170e <HAL_ADC_ConfigChannel+0x326>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2102      	movs	r1, #2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fb42 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80016ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80016f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80016fe:	2320      	movs	r3, #32
 8001700:	e004      	b.n	800170c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x33e>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0e9b      	lsrs	r3, r3, #26
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	e016      	b.n	8001754 <HAL_ADC_ConfigChannel+0x36c>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800173a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800173e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001746:	2320      	movs	r3, #32
 8001748:	e004      	b.n	8001754 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800174a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800174e:	fab3 f383 	clz	r3, r3
 8001752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001754:	429a      	cmp	r2, r3
 8001756:	d106      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2200      	movs	r2, #0
 800175e:	2102      	movs	r1, #2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fb13 	bl	8000d8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2103      	movs	r1, #3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff faf7 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10a      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x3aa>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2103      	movs	r1, #3
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff faec 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	0e9b      	lsrs	r3, r3, #26
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	e017      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x3da>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2103      	movs	r1, #3
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fae1 	bl	8000d60 <LL_ADC_GetOffsetChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80017ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80017b4:	2320      	movs	r3, #32
 80017b6:	e003      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80017b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d105      	bne.n	80017da <HAL_ADC_ConfigChannel+0x3f2>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0e9b      	lsrs	r3, r3, #26
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	e011      	b.n	80017fe <HAL_ADC_ConfigChannel+0x416>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80017e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80017ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80017f2:	2320      	movs	r3, #32
 80017f4:	e003      	b.n	80017fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80017f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017fe:	429a      	cmp	r2, r3
 8001800:	d106      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	2103      	movs	r1, #3
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fabe 	bl	8000d8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fbeb 	bl	8000ff0 <LL_ADC_IsEnabled>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 813d 	bne.w	8001a9c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	461a      	mov	r2, r3
 8001830:	f7ff fb68 	bl	8000f04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4aa2      	ldr	r2, [pc, #648]	; (8001ac4 <HAL_ADC_ConfigChannel+0x6dc>)
 800183a:	4293      	cmp	r3, r2
 800183c:	f040 812e 	bne.w	8001a9c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10b      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x480>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0e9b      	lsrs	r3, r3, #26
 8001856:	3301      	adds	r3, #1
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	2b09      	cmp	r3, #9
 800185e:	bf94      	ite	ls
 8001860:	2301      	movls	r3, #1
 8001862:	2300      	movhi	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	e019      	b.n	800189c <HAL_ADC_ConfigChannel+0x4b4>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001878:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800187a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001880:	2320      	movs	r3, #32
 8001882:	e003      	b.n	800188c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	2b09      	cmp	r3, #9
 8001894:	bf94      	ite	ls
 8001896:	2301      	movls	r3, #1
 8001898:	2300      	movhi	r3, #0
 800189a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800189c:	2b00      	cmp	r3, #0
 800189e:	d079      	beq.n	8001994 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d107      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x4d4>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0e9b      	lsrs	r3, r3, #26
 80018b2:	3301      	adds	r3, #1
 80018b4:	069b      	lsls	r3, r3, #26
 80018b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ba:	e015      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x500>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80018ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80018d4:	2320      	movs	r3, #32
 80018d6:	e003      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80018d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	069b      	lsls	r3, r3, #26
 80018e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x520>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0e9b      	lsrs	r3, r3, #26
 80018fa:	3301      	adds	r3, #1
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	e017      	b.n	8001938 <HAL_ADC_ConfigChannel+0x550>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800191a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001920:	2320      	movs	r3, #32
 8001922:	e003      	b.n	800192c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	3301      	adds	r3, #1
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	ea42 0103 	orr.w	r1, r2, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10a      	bne.n	800195e <HAL_ADC_ConfigChannel+0x576>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0e9b      	lsrs	r3, r3, #26
 800194e:	3301      	adds	r3, #1
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	051b      	lsls	r3, r3, #20
 800195c:	e018      	b.n	8001990 <HAL_ADC_ConfigChannel+0x5a8>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001976:	2320      	movs	r3, #32
 8001978:	e003      	b.n	8001982 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800197a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	3301      	adds	r3, #1
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001990:	430b      	orrs	r3, r1
 8001992:	e07e      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199c:	2b00      	cmp	r3, #0
 800199e:	d107      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x5c8>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0e9b      	lsrs	r3, r3, #26
 80019a6:	3301      	adds	r3, #1
 80019a8:	069b      	lsls	r3, r3, #26
 80019aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ae:	e015      	b.n	80019dc <HAL_ADC_ConfigChannel+0x5f4>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80019c8:	2320      	movs	r3, #32
 80019ca:	e003      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80019cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	069b      	lsls	r3, r3, #26
 80019d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x614>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	3301      	adds	r3, #1
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2101      	movs	r1, #1
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	e017      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x644>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	61fb      	str	r3, [r7, #28]
  return result;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001a14:	2320      	movs	r3, #32
 8001a16:	e003      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	ea42 0103 	orr.w	r1, r2, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10d      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x670>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0e9b      	lsrs	r3, r3, #26
 8001a42:	3301      	adds	r3, #1
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3b1e      	subs	r3, #30
 8001a50:	051b      	lsls	r3, r3, #20
 8001a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a56:	e01b      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x6a8>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	613b      	str	r3, [r7, #16]
  return result;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001a70:	2320      	movs	r3, #32
 8001a72:	e003      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	f003 021f 	and.w	r2, r3, #31
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	3b1e      	subs	r3, #30
 8001a8a:	051b      	lsls	r3, r3, #20
 8001a8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a90:	430b      	orrs	r3, r1
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	6892      	ldr	r2, [r2, #8]
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff fa08 	bl	8000eac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_ADC_ConfigChannel+0x6e0>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80be 	beq.w	8001c26 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab2:	d004      	beq.n	8001abe <HAL_ADC_ConfigChannel+0x6d6>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_ADC_ConfigChannel+0x6e4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10a      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x6ec>
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_ADC_ConfigChannel+0x6e8>)
 8001ac0:	e009      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x6ee>
 8001ac2:	bf00      	nop
 8001ac4:	407f0000 	.word	0x407f0000
 8001ac8:	80080000 	.word	0x80080000
 8001acc:	50000100 	.word	0x50000100
 8001ad0:	50000300 	.word	0x50000300
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_ADC_ConfigChannel+0x854>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f910 	bl	8000cfc <LL_ADC_GetCommonPathInternalCh>
 8001adc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a56      	ldr	r2, [pc, #344]	; (8001c40 <HAL_ADC_ConfigChannel+0x858>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0x70c>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a55      	ldr	r2, [pc, #340]	; (8001c44 <HAL_ADC_ConfigChannel+0x85c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d13a      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d134      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b08:	d005      	beq.n	8001b16 <HAL_ADC_ConfigChannel+0x72e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a4e      	ldr	r2, [pc, #312]	; (8001c48 <HAL_ADC_ConfigChannel+0x860>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	f040 8085 	bne.w	8001c20 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b1e:	d004      	beq.n	8001b2a <HAL_ADC_ConfigChannel+0x742>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a49      	ldr	r2, [pc, #292]	; (8001c4c <HAL_ADC_ConfigChannel+0x864>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x746>
 8001b2a:	4a49      	ldr	r2, [pc, #292]	; (8001c50 <HAL_ADC_ConfigChannel+0x868>)
 8001b2c:	e000      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x748>
 8001b2e:	4a43      	ldr	r2, [pc, #268]	; (8001c3c <HAL_ADC_ConfigChannel+0x854>)
 8001b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	f7ff f8cb 	bl	8000cd6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b40:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <HAL_ADC_ConfigChannel+0x86c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <HAL_ADC_ConfigChannel+0x870>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b5a:	e002      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f9      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b68:	e05a      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a3b      	ldr	r2, [pc, #236]	; (8001c5c <HAL_ADC_ConfigChannel+0x874>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d125      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x7d8>
 8001b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d11f      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a31      	ldr	r2, [pc, #196]	; (8001c4c <HAL_ADC_ConfigChannel+0x864>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d104      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x7ac>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a34      	ldr	r2, [pc, #208]	; (8001c60 <HAL_ADC_ConfigChannel+0x878>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d047      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9c:	d004      	beq.n	8001ba8 <HAL_ADC_ConfigChannel+0x7c0>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <HAL_ADC_ConfigChannel+0x864>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x7c4>
 8001ba8:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <HAL_ADC_ConfigChannel+0x868>)
 8001baa:	e000      	b.n	8001bae <HAL_ADC_ConfigChannel+0x7c6>
 8001bac:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <HAL_ADC_ConfigChannel+0x854>)
 8001bae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f7ff f88c 	bl	8000cd6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bbe:	e031      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <HAL_ADC_ConfigChannel+0x87c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12d      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d127      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_ADC_ConfigChannel+0x864>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d022      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be8:	d004      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0x80c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_ADC_ConfigChannel+0x864>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x810>
 8001bf4:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_ADC_ConfigChannel+0x868>)
 8001bf6:	e000      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x812>
 8001bf8:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <HAL_ADC_ConfigChannel+0x854>)
 8001bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f7ff f866 	bl	8000cd6 <LL_ADC_SetCommonPathInternalCh>
 8001c0a:	e00c      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c1e:	e002      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c20:	bf00      	nop
 8001c22:	e000      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001c2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	37d8      	adds	r7, #216	; 0xd8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	50000700 	.word	0x50000700
 8001c40:	c3210000 	.word	0xc3210000
 8001c44:	90c00010 	.word	0x90c00010
 8001c48:	50000600 	.word	0x50000600
 8001c4c:	50000100 	.word	0x50000100
 8001c50:	50000300 	.word	0x50000300
 8001c54:	20000000 	.word	0x20000000
 8001c58:	053e2d63 	.word	0x053e2d63
 8001c5c:	c7520000 	.word	0xc7520000
 8001c60:	50000500 	.word	0x50000500
 8001c64:	cb840000 	.word	0xcb840000

08001c68 <LL_ADC_IsEnabled>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_IsEnabled+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_IsEnabled+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_REG_IsConversionOngoing>:
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d101      	bne.n	8001ca6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b0a1      	sub	sp, #132	; 0x84
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e0e7      	b.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cea:	d102      	bne.n	8001cf2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001cec:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	e009      	b.n	8001d06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d102      	bne.n	8001d02 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8001cfc:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	e001      	b.n	8001d06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10b      	bne.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0be      	b.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ffb1 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 8001d2c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ffab 	bl	8001c8e <LL_ADC_REG_IsConversionOngoing>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 80a0 	bne.w	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 809c 	bne.w	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d50:	d004      	beq.n	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d5c:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001d5e:	e000      	b.n	8001d62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d60:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8001d62:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d04b      	beq.n	8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d7e:	035b      	lsls	r3, r3, #13
 8001d80:	430b      	orrs	r3, r1
 8001d82:	431a      	orrs	r2, r3
 8001d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d90:	d004      	beq.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a45      	ldr	r2, [pc, #276]	; (8001eac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10f      	bne.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8001d9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001da0:	f7ff ff62 	bl	8001c68 <LL_ADC_IsEnabled>
 8001da4:	4604      	mov	r4, r0
 8001da6:	4841      	ldr	r0, [pc, #260]	; (8001eac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001da8:	f7ff ff5e 	bl	8001c68 <LL_ADC_IsEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e012      	b.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001dbc:	483c      	ldr	r0, [pc, #240]	; (8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001dbe:	f7ff ff53 	bl	8001c68 <LL_ADC_IsEnabled>
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	483b      	ldr	r0, [pc, #236]	; (8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001dc6:	f7ff ff4f 	bl	8001c68 <LL_ADC_IsEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	431c      	orrs	r4, r3
 8001dce:	483c      	ldr	r0, [pc, #240]	; (8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001dd0:	f7ff ff4a 	bl	8001c68 <LL_ADC_IsEnabled>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d056      	beq.n	8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dee:	f023 030f 	bic.w	r3, r3, #15
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	6811      	ldr	r1, [r2, #0]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	6892      	ldr	r2, [r2, #8]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e00:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e02:	e047      	b.n	8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e18:	d004      	beq.n	8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d10f      	bne.n	8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8001e24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e28:	f7ff ff1e 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e2c:	4604      	mov	r4, r0
 8001e2e:	481f      	ldr	r0, [pc, #124]	; (8001eac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e30:	f7ff ff1a 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4323      	orrs	r3, r4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e012      	b.n	8001e6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8001e44:	481a      	ldr	r0, [pc, #104]	; (8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001e46:	f7ff ff0f 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001e4e:	f7ff ff0b 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e52:	4603      	mov	r3, r0
 8001e54:	431c      	orrs	r4, r3
 8001e56:	481a      	ldr	r0, [pc, #104]	; (8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001e58:	f7ff ff06 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4323      	orrs	r3, r4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d012      	beq.n	8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e76:	f023 030f 	bic.w	r3, r3, #15
 8001e7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e7c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e7e:	e009      	b.n	8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	f043 0220 	orr.w	r2, r3, #32
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e92:	e000      	b.n	8001e96 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3784      	adds	r7, #132	; 0x84
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	50000100 	.word	0x50000100
 8001eb0:	50000400 	.word	0x50000400
 8001eb4:	50000500 	.word	0x50000500
 8001eb8:	50000300 	.word	0x50000300
 8001ebc:	50000700 	.word	0x50000700
 8001ec0:	50000600 	.word	0x50000600

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	; (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
         );
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff8e 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff47 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff5e 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff90 	bl	8001f7c <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5f 	bl	8001f28 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffb2 	bl	8001fe4 <SysTick_Config>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e147      	b.n	800232e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fc44 	bl	8000940 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0210 	bic.w	r2, r2, #16
 80020c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c8:	f7fe fde6 	bl	8000c98 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80020ce:	e012      	b.n	80020f6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80020d0:	f7fe fde2 	bl	8000c98 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b0a      	cmp	r3, #10
 80020dc:	d90b      	bls.n	80020f6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	f043 0201 	orr.w	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2203      	movs	r2, #3
 80020ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e11b      	b.n	800232e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b08      	cmp	r3, #8
 8002102:	d0e5      	beq.n	80020d0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002114:	f7fe fdc0 	bl	8000c98 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800211a:	e012      	b.n	8002142 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800211c:	f7fe fdbc 	bl	8000c98 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b0a      	cmp	r3, #10
 8002128:	d90b      	bls.n	8002142 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2203      	movs	r2, #3
 800213a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0f5      	b.n	800232e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0e5      	beq.n	800211c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0202 	orr.w	r2, r2, #2
 800215e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a74      	ldr	r2, [pc, #464]	; (8002338 <HAL_FDCAN_Init+0x2ac>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d103      	bne.n	8002172 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800216a:	4a74      	ldr	r2, [pc, #464]	; (800233c <HAL_FDCAN_Init+0x2b0>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7c1b      	ldrb	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d108      	bne.n	800218c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002188:	619a      	str	r2, [r3, #24]
 800218a:	e007      	b.n	800219c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7c5b      	ldrb	r3, [r3, #17]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d108      	bne.n	80021b6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021b2:	619a      	str	r2, [r3, #24]
 80021b4:	e007      	b.n	80021c6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7c9b      	ldrb	r3, [r3, #18]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d108      	bne.n	80021e0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021dc:	619a      	str	r2, [r3, #24]
 80021de:	e007      	b.n	80021f0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021ee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002214:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0210 	bic.w	r2, r2, #16
 8002224:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d108      	bne.n	8002240 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0204 	orr.w	r2, r2, #4
 800223c:	619a      	str	r2, [r3, #24]
 800223e:	e02c      	b.n	800229a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d028      	beq.n	800229a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d01c      	beq.n	800228a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0210 	orr.w	r2, r2, #16
 800226e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d110      	bne.n	800229a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0220 	orr.w	r2, r2, #32
 8002286:	619a      	str	r2, [r3, #24]
 8002288:	e007      	b.n	800229a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0220 	orr.w	r2, r2, #32
 8002298:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	3b01      	subs	r3, #1
 80022a0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022aa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80022b2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80022c2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80022c4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ce:	d115      	bne.n	80022fc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	3b01      	subs	r3, #1
 80022dc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022de:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	3b01      	subs	r3, #1
 80022e6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80022e8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	3b01      	subs	r3, #1
 80022f2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80022f8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80022fa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f814 	bl	8002340 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40006400 	.word	0x40006400
 800233c:	40006500 	.word	0x40006500

08002340 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800234a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d103      	bne.n	800235e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800235c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2c      	ldr	r2, [pc, #176]	; (8002414 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800236e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800237e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	041a      	lsls	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023a4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	061a      	lsls	r2, r3, #24
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e005      	b.n	80023f2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3304      	adds	r3, #4
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d3f3      	bcc.n	80023e6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80023fe:	bf00      	nop
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	4000a400 	.word	0x4000a400
 8002410:	40006800 	.word	0x40006800
 8002414:	40006c00 	.word	0x40006c00

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002426:	e15a      	b.n	80026de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 814c 	beq.w	80026d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d005      	beq.n	8002458 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002454:	2b02      	cmp	r3, #2
 8002456:	d130      	bne.n	80024ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800248e:	2201      	movs	r2, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 0201 	and.w	r2, r3, #1
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d017      	beq.n	80024f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	2203      	movs	r2, #3
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d123      	bne.n	800254a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3208      	adds	r2, #8
 800250a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	220f      	movs	r2, #15
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	08da      	lsrs	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	6939      	ldr	r1, [r7, #16]
 8002546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0203 	and.w	r2, r3, #3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80a6 	beq.w	80026d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258c:	4b5b      	ldr	r3, [pc, #364]	; (80026fc <HAL_GPIO_Init+0x2e4>)
 800258e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002590:	4a5a      	ldr	r2, [pc, #360]	; (80026fc <HAL_GPIO_Init+0x2e4>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6613      	str	r3, [r2, #96]	; 0x60
 8002598:	4b58      	ldr	r3, [pc, #352]	; (80026fc <HAL_GPIO_Init+0x2e4>)
 800259a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a4:	4a56      	ldr	r2, [pc, #344]	; (8002700 <HAL_GPIO_Init+0x2e8>)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	220f      	movs	r2, #15
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ce:	d01f      	beq.n	8002610 <HAL_GPIO_Init+0x1f8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a4c      	ldr	r2, [pc, #304]	; (8002704 <HAL_GPIO_Init+0x2ec>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d019      	beq.n	800260c <HAL_GPIO_Init+0x1f4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a4b      	ldr	r2, [pc, #300]	; (8002708 <HAL_GPIO_Init+0x2f0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d013      	beq.n	8002608 <HAL_GPIO_Init+0x1f0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a4a      	ldr	r2, [pc, #296]	; (800270c <HAL_GPIO_Init+0x2f4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00d      	beq.n	8002604 <HAL_GPIO_Init+0x1ec>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a49      	ldr	r2, [pc, #292]	; (8002710 <HAL_GPIO_Init+0x2f8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d007      	beq.n	8002600 <HAL_GPIO_Init+0x1e8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a48      	ldr	r2, [pc, #288]	; (8002714 <HAL_GPIO_Init+0x2fc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_GPIO_Init+0x1e4>
 80025f8:	2305      	movs	r3, #5
 80025fa:	e00a      	b.n	8002612 <HAL_GPIO_Init+0x1fa>
 80025fc:	2306      	movs	r3, #6
 80025fe:	e008      	b.n	8002612 <HAL_GPIO_Init+0x1fa>
 8002600:	2304      	movs	r3, #4
 8002602:	e006      	b.n	8002612 <HAL_GPIO_Init+0x1fa>
 8002604:	2303      	movs	r3, #3
 8002606:	e004      	b.n	8002612 <HAL_GPIO_Init+0x1fa>
 8002608:	2302      	movs	r3, #2
 800260a:	e002      	b.n	8002612 <HAL_GPIO_Init+0x1fa>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <HAL_GPIO_Init+0x1fa>
 8002610:	2300      	movs	r3, #0
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	f002 0203 	and.w	r2, r2, #3
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	4093      	lsls	r3, r2
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002622:	4937      	ldr	r1, [pc, #220]	; (8002700 <HAL_GPIO_Init+0x2e8>)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002630:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_GPIO_Init+0x300>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002654:	4a30      	ldr	r2, [pc, #192]	; (8002718 <HAL_GPIO_Init+0x300>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800265a:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_GPIO_Init+0x300>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800267e:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_GPIO_Init+0x300>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_GPIO_Init+0x300>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	43db      	mvns	r3, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026a8:	4a1b      	ldr	r2, [pc, #108]	; (8002718 <HAL_GPIO_Init+0x300>)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <HAL_GPIO_Init+0x300>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026d2:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_GPIO_Init+0x300>)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3301      	adds	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f47f ae9d 	bne.w	8002428 <HAL_GPIO_Init+0x10>
  }
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40021000 	.word	0x40021000
 8002700:	40010000 	.word	0x40010000
 8002704:	48000400 	.word	0x48000400
 8002708:	48000800 	.word	0x48000800
 800270c:	48000c00 	.word	0x48000c00
 8002710:	48001000 	.word	0x48001000
 8002714:	48001400 	.word	0x48001400
 8002718:	40010400 	.word	0x40010400

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002738:	e002      	b.n	8002740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d141      	bne.n	80027de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800275a:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002766:	d131      	bne.n	80027cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002768:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800276e:	4a46      	ldr	r2, [pc, #280]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002774:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002778:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002780:	4a41      	ldr	r2, [pc, #260]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002788:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2232      	movs	r2, #50	; 0x32
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	4a3f      	ldr	r2, [pc, #252]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	0c9b      	lsrs	r3, r3, #18
 800279a:	3301      	adds	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800279e:	e002      	b.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b2:	d102      	bne.n	80027ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f2      	bne.n	80027a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ba:	4b33      	ldr	r3, [pc, #204]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c6:	d158      	bne.n	800287a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e057      	b.n	800287c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d2:	4a2d      	ldr	r2, [pc, #180]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027dc:	e04d      	b.n	800287a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e4:	d141      	bne.n	800286a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d131      	bne.n	8002858 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027f4:	4b24      	ldr	r3, [pc, #144]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fa:	4a23      	ldr	r2, [pc, #140]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002804:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800280c:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002812:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2232      	movs	r2, #50	; 0x32
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800282a:	e002      	b.n	8002832 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3b01      	subs	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283e:	d102      	bne.n	8002846 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f2      	bne.n	800282c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002852:	d112      	bne.n	800287a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e011      	b.n	800287c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002868:	e007      	b.n	800287a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002874:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002878:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40007000 	.word	0x40007000
 800288c:	20000000 	.word	0x20000000
 8002890:	431bde83 	.word	0x431bde83

08002894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e306      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d075      	beq.n	800299e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b2:	4b97      	ldr	r3, [pc, #604]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028bc:	4b94      	ldr	r3, [pc, #592]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d102      	bne.n	80028d2 <HAL_RCC_OscConfig+0x3e>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_OscConfig+0x44>
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	4b8d      	ldr	r3, [pc, #564]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05b      	beq.n	800299c <HAL_RCC_OscConfig+0x108>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d157      	bne.n	800299c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e2e1      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x74>
 80028fa:	4b85      	ldr	r3, [pc, #532]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a84      	ldr	r2, [pc, #528]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e01d      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b7f      	ldr	r3, [pc, #508]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7e      	ldr	r2, [pc, #504]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b7c      	ldr	r3, [pc, #496]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7b      	ldr	r2, [pc, #492]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 800292c:	4b78      	ldr	r3, [pc, #480]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a77      	ldr	r2, [pc, #476]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b75      	ldr	r3, [pc, #468]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a74      	ldr	r2, [pc, #464]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe f9a4 	bl	8000c98 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002954:	f7fe f9a0 	bl	8000c98 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e2a6      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002966:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0xc0>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe f990 	bl	8000c98 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe f98c 	bl	8000c98 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e292      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298e:	4b60      	ldr	r3, [pc, #384]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0xe8>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d075      	beq.n	8002a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029aa:	4b59      	ldr	r3, [pc, #356]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b4:	4b56      	ldr	r3, [pc, #344]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	d102      	bne.n	80029ca <HAL_RCC_OscConfig+0x136>
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_OscConfig+0x13c>
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d11f      	bne.n	8002a10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d0:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x154>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e265      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	4946      	ldr	r1, [pc, #280]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029fc:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <HAL_RCC_OscConfig+0x280>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe f8fd 	bl	8000c00 <HAL_InitTick>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d043      	beq.n	8002a94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e251      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d023      	beq.n	8002a60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a3c      	ldr	r2, [pc, #240]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe f938 	bl	8000c98 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe f934 	bl	8000c98 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e23a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3e:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	061b      	lsls	r3, r3, #24
 8002a58:	492d      	ldr	r1, [pc, #180]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
 8002a5e:	e01a      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a60:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2a      	ldr	r2, [pc, #168]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe f914 	bl	8000c98 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a74:	f7fe f910 	bl	8000c98 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e216      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x1e0>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d041      	beq.n	8002b26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01c      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab0:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aba:	f7fe f8ed 	bl	8000c98 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7fe f8e9 	bl	8000c98 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1ef      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ef      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x22e>
 8002ae2:	e020      	b.n	8002b26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <HAL_RCC_OscConfig+0x27c>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe f8d0 	bl	8000c98 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002afa:	e00d      	b.n	8002b18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afc:	f7fe f8cc 	bl	8000c98 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d906      	bls.n	8002b18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1d2      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b18:	4b8c      	ldr	r3, [pc, #560]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ea      	bne.n	8002afc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80a6 	beq.w	8002c80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b34:	2300      	movs	r3, #0
 8002b36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b38:	4b84      	ldr	r3, [pc, #528]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2b4>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x2b6>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	4a7e      	ldr	r2, [pc, #504]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6593      	str	r3, [r2, #88]	; 0x58
 8002b5a:	4b7c      	ldr	r3, [pc, #496]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6a:	4b79      	ldr	r3, [pc, #484]	; (8002d50 <HAL_RCC_OscConfig+0x4bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b76:	4b76      	ldr	r3, [pc, #472]	; (8002d50 <HAL_RCC_OscConfig+0x4bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a75      	ldr	r2, [pc, #468]	; (8002d50 <HAL_RCC_OscConfig+0x4bc>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7fe f889 	bl	8000c98 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe f885 	bl	8000c98 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e18b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9c:	4b6c      	ldr	r3, [pc, #432]	; (8002d50 <HAL_RCC_OscConfig+0x4bc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d108      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x32e>
 8002bb0:	4b66      	ldr	r3, [pc, #408]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	4a65      	ldr	r2, [pc, #404]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc0:	e024      	b.n	8002c0c <HAL_RCC_OscConfig+0x378>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d110      	bne.n	8002bec <HAL_RCC_OscConfig+0x358>
 8002bca:	4b60      	ldr	r3, [pc, #384]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	4a5e      	ldr	r2, [pc, #376]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bda:	4b5c      	ldr	r3, [pc, #368]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	4a5a      	ldr	r2, [pc, #360]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bea:	e00f      	b.n	8002c0c <HAL_RCC_OscConfig+0x378>
 8002bec:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	4a56      	ldr	r2, [pc, #344]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d016      	beq.n	8002c42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7fe f840 	bl	8000c98 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe f83c 	bl	8000c98 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e140      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c32:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ed      	beq.n	8002c1c <HAL_RCC_OscConfig+0x388>
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fe f829 	bl	8000c98 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fe f825 	bl	8000c98 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e129      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c60:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1ed      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c6e:	7ffb      	ldrb	r3, [r7, #31]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c74:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	4a34      	ldr	r2, [pc, #208]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d03c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01c      	beq.n	8002cce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c94:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c9a:	4a2c      	ldr	r2, [pc, #176]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fd fff8 	bl	8000c98 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cac:	f7fd fff4 	bl	8000c98 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0fa      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ef      	beq.n	8002cac <HAL_RCC_OscConfig+0x418>
 8002ccc:	e01b      	b.n	8002d06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cce:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fd ffdb 	bl	8000c98 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce6:	f7fd ffd7 	bl	8000c98 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0dd      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ef      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80d1 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b0c      	cmp	r3, #12
 8002d1a:	f000 808b 	beq.w	8002e34 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d15e      	bne.n	8002de4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <HAL_RCC_OscConfig+0x4b8>)
 8002d2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fd ffb1 	bl	8000c98 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d38:	e00c      	b.n	8002d54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fd ffad 	bl	8000c98 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d905      	bls.n	8002d54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0b3      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d54:	4b59      	ldr	r3, [pc, #356]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ec      	bne.n	8002d3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d60:	4b56      	ldr	r3, [pc, #344]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	4b56      	ldr	r3, [pc, #344]	; (8002ec0 <HAL_RCC_OscConfig+0x62c>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6a11      	ldr	r1, [r2, #32]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d70:	3a01      	subs	r2, #1
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	4311      	orrs	r1, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d7a:	0212      	lsls	r2, r2, #8
 8002d7c:	4311      	orrs	r1, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d82:	0852      	lsrs	r2, r2, #1
 8002d84:	3a01      	subs	r2, #1
 8002d86:	0552      	lsls	r2, r2, #21
 8002d88:	4311      	orrs	r1, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d8e:	0852      	lsrs	r2, r2, #1
 8002d90:	3a01      	subs	r2, #1
 8002d92:	0652      	lsls	r2, r2, #25
 8002d94:	4311      	orrs	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d9a:	06d2      	lsls	r2, r2, #27
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	4947      	ldr	r1, [pc, #284]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da4:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a44      	ldr	r2, [pc, #272]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db0:	4b42      	ldr	r3, [pc, #264]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a41      	ldr	r2, [pc, #260]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fd ff6c 	bl	8000c98 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fd ff68 	bl	8000c98 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e06e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x530>
 8002de2:	e066      	b.n	8002eb2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de4:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a34      	ldr	r2, [pc, #208]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002df0:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002dfc:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a2e      	ldr	r2, [pc, #184]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002e02:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fd ff44 	bl	8000c98 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fd ff40 	bl	8000c98 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e046      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x580>
 8002e32:	e03e      	b.n	8002eb2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e039      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e40:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_RCC_OscConfig+0x628>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d12c      	bne.n	8002eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d123      	bne.n	8002eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d11b      	bne.n	8002eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d113      	bne.n	8002eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	3b01      	subs	r3, #1
 8002e94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	019f800c 	.word	0x019f800c

08002ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e11e      	b.n	800311a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b91      	ldr	r3, [pc, #580]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b8e      	ldr	r3, [pc, #568]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 020f 	bic.w	r2, r3, #15
 8002ef2:	498c      	ldr	r1, [pc, #560]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b8a      	ldr	r3, [pc, #552]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e106      	b.n	800311a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d073      	beq.n	8003000 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d129      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f20:	4b81      	ldr	r3, [pc, #516]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0f4      	b.n	800311a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f30:	f000 f966 	bl	8003200 <RCC_GetSysClockFreqFromPLLSource>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4a7c      	ldr	r2, [pc, #496]	; (800312c <HAL_RCC_ClockConfig+0x268>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d93f      	bls.n	8002fbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f3e:	4b7a      	ldr	r3, [pc, #488]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d033      	beq.n	8002fbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d12f      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f5e:	4b72      	ldr	r3, [pc, #456]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f66:	4a70      	ldr	r2, [pc, #448]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e024      	b.n	8002fbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0c6      	b.n	800311a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0be      	b.n	800311a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f9c:	f000 f8ce 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4a61      	ldr	r2, [pc, #388]	; (800312c <HAL_RCC_ClockConfig+0x268>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d909      	bls.n	8002fbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb2:	4a5d      	ldr	r2, [pc, #372]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4957      	ldr	r1, [pc, #348]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd0:	f7fd fe62 	bl	8000c98 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fd fe5e 	bl	8000c98 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e095      	b.n	800311a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d023      	beq.n	8003054 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b43      	ldr	r3, [pc, #268]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a42      	ldr	r2, [pc, #264]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 800301e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003022:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003030:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003038:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 800303a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800303e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4936      	ldr	r1, [pc, #216]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
 8003052:	e008      	b.n	8003066 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d105      	bne.n	8003066 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800305a:	4b33      	ldr	r3, [pc, #204]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4a32      	ldr	r2, [pc, #200]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 8003060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003064:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003066:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d21d      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 020f 	bic.w	r2, r3, #15
 800307c:	4929      	ldr	r1, [pc, #164]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003084:	f7fd fe08 	bl	8000c98 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308c:	f7fd fe04 	bl	8000c98 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e03b      	b.n	800311a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1ed      	bne.n	800308c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4917      	ldr	r1, [pc, #92]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	490f      	ldr	r1, [pc, #60]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ee:	f000 f825 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030f2:	4602      	mov	r2, r0
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <HAL_RCC_ClockConfig+0x264>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	490c      	ldr	r1, [pc, #48]	; (8003130 <HAL_RCC_ClockConfig+0x26c>)
 8003100:	5ccb      	ldrb	r3, [r1, r3]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x270>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x274>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fd74 	bl	8000c00 <HAL_InitTick>
 8003118:	4603      	mov	r3, r0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
 800312c:	04c4b400 	.word	0x04c4b400
 8003130:	080043b8 	.word	0x080043b8
 8003134:	20000000 	.word	0x20000000
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003142:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b04      	cmp	r3, #4
 800314c:	d102      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800314e:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e047      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b08      	cmp	r3, #8
 800315e:	d102      	bne.n	8003166 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003160:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e03e      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003166:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d136      	bne.n	80031e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	3301      	adds	r3, #1
 8003188:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d10c      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003190:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800319a:	68d2      	ldr	r2, [r2, #12]
 800319c:	0a12      	lsrs	r2, r2, #8
 800319e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	617b      	str	r3, [r7, #20]
      break;
 80031a8:	e00c      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031b4:	68d2      	ldr	r2, [r2, #12]
 80031b6:	0a12      	lsrs	r2, r2, #8
 80031b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
      break;
 80031c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0e5b      	lsrs	r3, r3, #25
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	e001      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031e4:	693b      	ldr	r3, [r7, #16]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	007a1200 	.word	0x007a1200

08003200 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3301      	adds	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d10c      	bne.n	800323e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003224:	4a17      	ldr	r2, [pc, #92]	; (8003284 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800322e:	68d2      	ldr	r2, [r2, #12]
 8003230:	0a12      	lsrs	r2, r2, #8
 8003232:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	617b      	str	r3, [r7, #20]
    break;
 800323c:	e00c      	b.n	8003258 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003248:	68d2      	ldr	r2, [r2, #12]
 800324a:	0a12      	lsrs	r2, r2, #8
 800324c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003250:	fb02 f303 	mul.w	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]
    break;
 8003256:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0e5b      	lsrs	r3, r3, #25
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003272:	687b      	ldr	r3, [r7, #4]
}
 8003274:	4618      	mov	r0, r3
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40021000 	.word	0x40021000
 8003284:	007a1200 	.word	0x007a1200
 8003288:	00f42400 	.word	0x00f42400

0800328c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003294:	2300      	movs	r3, #0
 8003296:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003298:	2300      	movs	r3, #0
 800329a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8098 	beq.w	80033da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ae:	4b43      	ldr	r3, [pc, #268]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10d      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	4b40      	ldr	r3, [pc, #256]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	4a3f      	ldr	r2, [pc, #252]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6593      	str	r3, [r2, #88]	; 0x58
 80032c6:	4b3d      	ldr	r3, [pc, #244]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a39      	ldr	r2, [pc, #228]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032e2:	f7fd fcd9 	bl	8000c98 <HAL_GetTick>
 80032e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e8:	e009      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fd fcd5 	bl	8000c98 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d902      	bls.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	74fb      	strb	r3, [r7, #19]
        break;
 80032fc:	e005      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ef      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d159      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003310:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01e      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	429a      	cmp	r2, r3
 800332a:	d019      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800332c:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003336:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	4a1f      	ldr	r2, [pc, #124]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003348:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fd fc95 	bl	8000c98 <HAL_GetTick>
 800336e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003370:	e00b      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd fc91 	bl	8000c98 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d902      	bls.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	74fb      	strb	r3, [r7, #19]
            break;
 8003388:	e006      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ec      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ac:	4903      	ldr	r1, [pc, #12]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033b4:	e008      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	74bb      	strb	r3, [r7, #18]
 80033ba:	e005      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c8:	7c7b      	ldrb	r3, [r7, #17]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4ba7      	ldr	r3, [pc, #668]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	4aa6      	ldr	r2, [pc, #664]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033e6:	4ba1      	ldr	r3, [pc, #644]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f023 0203 	bic.w	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	499d      	ldr	r1, [pc, #628]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003408:	4b98      	ldr	r3, [pc, #608]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f023 020c 	bic.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4995      	ldr	r1, [pc, #596]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800342a:	4b90      	ldr	r3, [pc, #576]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	498c      	ldr	r1, [pc, #560]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800344c:	4b87      	ldr	r3, [pc, #540]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	4984      	ldr	r1, [pc, #528]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800346e:	4b7f      	ldr	r3, [pc, #508]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	497b      	ldr	r1, [pc, #492]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003490:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	4973      	ldr	r1, [pc, #460]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034b2:	4b6e      	ldr	r3, [pc, #440]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	496a      	ldr	r1, [pc, #424]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034d4:	4b65      	ldr	r3, [pc, #404]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4962      	ldr	r1, [pc, #392]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034f6:	4b5d      	ldr	r3, [pc, #372]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	4959      	ldr	r1, [pc, #356]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003518:	4b54      	ldr	r3, [pc, #336]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351e:	f023 0203 	bic.w	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	4951      	ldr	r1, [pc, #324]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800353a:	4b4c      	ldr	r3, [pc, #304]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	4948      	ldr	r1, [pc, #288]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d015      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800355c:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4940      	ldr	r1, [pc, #256]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357a:	d105      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357c:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a3a      	ldr	r2, [pc, #232]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003586:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003590:	2b00      	cmp	r3, #0
 8003592:	d015      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a2:	4932      	ldr	r1, [pc, #200]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b2:	d105      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b4:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d015      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035cc:	4b27      	ldr	r3, [pc, #156]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	4924      	ldr	r1, [pc, #144]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035ea:	d105      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ec:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a1e      	ldr	r2, [pc, #120]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	4916      	ldr	r1, [pc, #88]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003622:	d105      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a10      	ldr	r2, [pc, #64]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800362e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d019      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4908      	ldr	r1, [pc, #32]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800365a:	d109      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a02      	ldr	r2, [pc, #8]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003666:	60d3      	str	r3, [r2, #12]
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800367c:	4b29      	ldr	r3, [pc, #164]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4926      	ldr	r1, [pc, #152]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800369a:	d105      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800369c:	4b21      	ldr	r3, [pc, #132]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4a20      	ldr	r2, [pc, #128]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d015      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c2:	4918      	ldr	r1, [pc, #96]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d105      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a12      	ldr	r2, [pc, #72]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d015      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036ec:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fa:	490a      	ldr	r1, [pc, #40]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800370a:	d105      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003716:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003718:	7cbb      	ldrb	r3, [r7, #18]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e09d      	b.n	8003876 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800374a:	d009      	beq.n	8003760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	61da      	str	r2, [r3, #28]
 8003752:	e005      	b.n	8003760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd f93a 	bl	80009f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037a0:	d902      	bls.n	80037a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e002      	b.n	80037ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037b6:	d007      	beq.n	80037c8 <HAL_SPI_Init+0xa0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	ea42 0103 	orr.w	r1, r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	f003 0204 	and.w	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003844:	ea42 0103 	orr.w	r1, r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e049      	b.n	8003924 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fd f8e9 	bl	8000a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f000 fa3f 	bl	8003d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e049      	b.n	80039d2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f841 	bl	80039da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f000 f9e8 	bl	8003d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e088      	b.n	8003b1e <HAL_TIM_IC_ConfigChannel+0x130>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11b      	bne.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f000 fa31 	bl	8003e90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 020c 	bic.w	r2, r2, #12
 8003a3c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6999      	ldr	r1, [r3, #24]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	619a      	str	r2, [r3, #24]
 8003a50:	e060      	b.n	8003b14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d11c      	bne.n	8003a92 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f000 fab5 	bl	8003fd6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a7a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6999      	ldr	r1, [r3, #24]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	021a      	lsls	r2, r3, #8
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	619a      	str	r2, [r3, #24]
 8003a90:	e040      	b.n	8003b14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d11b      	bne.n	8003ad0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f000 fb02 	bl	80040b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 020c 	bic.w	r2, r2, #12
 8003aba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69d9      	ldr	r1, [r3, #28]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	61da      	str	r2, [r3, #28]
 8003ace:	e021      	b.n	8003b14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d11c      	bne.n	8003b10 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f000 fb1f 	bl	8004128 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003af8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69d9      	ldr	r1, [r3, #28]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	021a      	lsls	r2, r3, #8
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	61da      	str	r2, [r3, #28]
 8003b0e:	e001      	b.n	8003b14 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_ConfigClockSource+0x1c>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e0ee      	b.n	8003d22 <HAL_TIM_ConfigClockSource+0x1fa>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003b62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6b      	ldr	r2, [pc, #428]	; (8003d2c <HAL_TIM_ConfigClockSource+0x204>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f000 80b9 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003b84:	4a69      	ldr	r2, [pc, #420]	; (8003d2c <HAL_TIM_ConfigClockSource+0x204>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	f200 80be 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003b8c:	4a68      	ldr	r2, [pc, #416]	; (8003d30 <HAL_TIM_ConfigClockSource+0x208>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	f000 80b1 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003b94:	4a66      	ldr	r2, [pc, #408]	; (8003d30 <HAL_TIM_ConfigClockSource+0x208>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f200 80b6 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003b9c:	4a65      	ldr	r2, [pc, #404]	; (8003d34 <HAL_TIM_ConfigClockSource+0x20c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f000 80a9 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003ba4:	4a63      	ldr	r2, [pc, #396]	; (8003d34 <HAL_TIM_ConfigClockSource+0x20c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	f200 80ae 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003bac:	4a62      	ldr	r2, [pc, #392]	; (8003d38 <HAL_TIM_ConfigClockSource+0x210>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	f000 80a1 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003bb4:	4a60      	ldr	r2, [pc, #384]	; (8003d38 <HAL_TIM_ConfigClockSource+0x210>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	f200 80a6 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003bbc:	4a5f      	ldr	r2, [pc, #380]	; (8003d3c <HAL_TIM_ConfigClockSource+0x214>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	f000 8099 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003bc4:	4a5d      	ldr	r2, [pc, #372]	; (8003d3c <HAL_TIM_ConfigClockSource+0x214>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	f200 809e 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003bcc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003bd0:	f000 8091 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003bd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003bd8:	f200 8096 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be0:	f000 8089 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be8:	f200 808e 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf0:	d03e      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0x148>
 8003bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf6:	f200 8087 	bhi.w	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	f000 8086 	beq.w	8003d0e <HAL_TIM_ConfigClockSource+0x1e6>
 8003c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c06:	d87f      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003c08:	2b70      	cmp	r3, #112	; 0x70
 8003c0a:	d01a      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x11a>
 8003c0c:	2b70      	cmp	r3, #112	; 0x70
 8003c0e:	d87b      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003c10:	2b60      	cmp	r3, #96	; 0x60
 8003c12:	d050      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0x18e>
 8003c14:	2b60      	cmp	r3, #96	; 0x60
 8003c16:	d877      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003c18:	2b50      	cmp	r3, #80	; 0x50
 8003c1a:	d03c      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x16e>
 8003c1c:	2b50      	cmp	r3, #80	; 0x50
 8003c1e:	d873      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d058      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d86f      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003c28:	2b30      	cmp	r3, #48	; 0x30
 8003c2a:	d064      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003c2c:	2b30      	cmp	r3, #48	; 0x30
 8003c2e:	d86b      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d060      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d867      	bhi.n	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d05c      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d05a      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x1ce>
 8003c40:	e062      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6899      	ldr	r1, [r3, #8]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f000 fac3 	bl	80041dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	609a      	str	r2, [r3, #8]
      break;
 8003c6e:	e04f      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f000 faac 	bl	80041dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c92:	609a      	str	r2, [r3, #8]
      break;
 8003c94:	e03c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f000 f968 	bl	8003f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2150      	movs	r1, #80	; 0x50
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fa77 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003cb4:	e02c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6859      	ldr	r1, [r3, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f000 f9c4 	bl	8004050 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2160      	movs	r1, #96	; 0x60
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fa67 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003cd4:	e01c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 f948 	bl	8003f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2140      	movs	r1, #64	; 0x40
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fa57 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e00c      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f000 fa4e 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003d06:	e003      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d0c:	e000      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8003d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	00100070 	.word	0x00100070
 8003d30:	00100050 	.word	0x00100050
 8003d34:	00100040 	.word	0x00100040
 8003d38:	00100030 	.word	0x00100030
 8003d3c:	00100020 	.word	0x00100020

08003d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a46      	ldr	r2, [pc, #280]	; (8003e6c <TIM_Base_SetConfig+0x12c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d017      	beq.n	8003d88 <TIM_Base_SetConfig+0x48>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d013      	beq.n	8003d88 <TIM_Base_SetConfig+0x48>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a43      	ldr	r2, [pc, #268]	; (8003e70 <TIM_Base_SetConfig+0x130>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00f      	beq.n	8003d88 <TIM_Base_SetConfig+0x48>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a42      	ldr	r2, [pc, #264]	; (8003e74 <TIM_Base_SetConfig+0x134>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_Base_SetConfig+0x48>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a41      	ldr	r2, [pc, #260]	; (8003e78 <TIM_Base_SetConfig+0x138>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <TIM_Base_SetConfig+0x48>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a40      	ldr	r2, [pc, #256]	; (8003e7c <TIM_Base_SetConfig+0x13c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x48>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3f      	ldr	r2, [pc, #252]	; (8003e80 <TIM_Base_SetConfig+0x140>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d108      	bne.n	8003d9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a33      	ldr	r2, [pc, #204]	; (8003e6c <TIM_Base_SetConfig+0x12c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d023      	beq.n	8003dea <TIM_Base_SetConfig+0xaa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d01f      	beq.n	8003dea <TIM_Base_SetConfig+0xaa>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <TIM_Base_SetConfig+0x130>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01b      	beq.n	8003dea <TIM_Base_SetConfig+0xaa>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2f      	ldr	r2, [pc, #188]	; (8003e74 <TIM_Base_SetConfig+0x134>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d017      	beq.n	8003dea <TIM_Base_SetConfig+0xaa>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2e      	ldr	r2, [pc, #184]	; (8003e78 <TIM_Base_SetConfig+0x138>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <TIM_Base_SetConfig+0xaa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2d      	ldr	r2, [pc, #180]	; (8003e7c <TIM_Base_SetConfig+0x13c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00f      	beq.n	8003dea <TIM_Base_SetConfig+0xaa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <TIM_Base_SetConfig+0x144>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00b      	beq.n	8003dea <TIM_Base_SetConfig+0xaa>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <TIM_Base_SetConfig+0x148>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <TIM_Base_SetConfig+0xaa>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <TIM_Base_SetConfig+0x14c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d003      	beq.n	8003dea <TIM_Base_SetConfig+0xaa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <TIM_Base_SetConfig+0x140>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <TIM_Base_SetConfig+0x12c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <TIM_Base_SetConfig+0x110>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <TIM_Base_SetConfig+0x13c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00f      	beq.n	8003e50 <TIM_Base_SetConfig+0x110>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <TIM_Base_SetConfig+0x144>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_Base_SetConfig+0x110>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <TIM_Base_SetConfig+0x148>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_Base_SetConfig+0x110>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <TIM_Base_SetConfig+0x14c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0x110>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <TIM_Base_SetConfig+0x140>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d103      	bne.n	8003e58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40013400 	.word	0x40013400
 8003e80:	40015000 	.word	0x40015000
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800

08003e90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f023 0201 	bic.w	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <TIM_TI1_SetConfig+0xcc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01b      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d017      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <TIM_TI1_SetConfig+0xd0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a24      	ldr	r2, [pc, #144]	; (8003f64 <TIM_TI1_SetConfig+0xd4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00f      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <TIM_TI1_SetConfig+0xd8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a22      	ldr	r2, [pc, #136]	; (8003f6c <TIM_TI1_SetConfig+0xdc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <TIM_TI1_SetConfig+0xe0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_TI1_SetConfig+0x66>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <TIM_TI1_SetConfig+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <TIM_TI1_SetConfig+0x6a>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <TIM_TI1_SetConfig+0x6c>
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0303 	bic.w	r3, r3, #3
 8003f06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e003      	b.n	8003f1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f023 030a 	bic.w	r3, r3, #10
 8003f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f003 030a 	and.w	r3, r3, #10
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40000c00 	.word	0x40000c00
 8003f6c:	40013400 	.word	0x40013400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40015000 	.word	0x40015000

08003f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 030a 	bic.w	r3, r3, #10
 8003fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b087      	sub	sp, #28
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f023 0210 	bic.w	r2, r3, #16
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	031b      	lsls	r3, r3, #12
 800401a:	b29b      	uxth	r3, r3
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004028:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	bf00      	nop
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f023 0210 	bic.w	r2, r3, #16
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800407a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	031b      	lsls	r3, r3, #12
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800408c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f023 0303 	bic.w	r3, r3, #3
 80040dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004100:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004166:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	031b      	lsls	r3, r3, #12
 800416c:	b29b      	uxth	r3, r3
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800417a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	031b      	lsls	r3, r3, #12
 8004180:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f043 0307 	orr.w	r3, r3, #7
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	021a      	lsls	r2, r3, #8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	431a      	orrs	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004230:	2302      	movs	r3, #2
 8004232:	e074      	b.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a34      	ldr	r2, [pc, #208]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a33      	ldr	r2, [pc, #204]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d004      	beq.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a31      	ldr	r2, [pc, #196]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d108      	bne.n	8004284 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004278:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a21      	ldr	r2, [pc, #132]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d022      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b4:	d01d      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a15      	ldr	r2, [pc, #84]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a18      	ldr	r2, [pc, #96]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a11      	ldr	r2, [pc, #68]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10c      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	4313      	orrs	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40013400 	.word	0x40013400
 8004334:	40015000 	.word	0x40015000
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40014000 	.word	0x40014000

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <__libc_init_array>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4d0d      	ldr	r5, [pc, #52]	; (8004390 <__libc_init_array+0x38>)
 800435c:	4c0d      	ldr	r4, [pc, #52]	; (8004394 <__libc_init_array+0x3c>)
 800435e:	1b64      	subs	r4, r4, r5
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	2600      	movs	r6, #0
 8004364:	42a6      	cmp	r6, r4
 8004366:	d109      	bne.n	800437c <__libc_init_array+0x24>
 8004368:	4d0b      	ldr	r5, [pc, #44]	; (8004398 <__libc_init_array+0x40>)
 800436a:	4c0c      	ldr	r4, [pc, #48]	; (800439c <__libc_init_array+0x44>)
 800436c:	f000 f818 	bl	80043a0 <_init>
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	2600      	movs	r6, #0
 8004376:	42a6      	cmp	r6, r4
 8004378:	d105      	bne.n	8004386 <__libc_init_array+0x2e>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004380:	4798      	blx	r3
 8004382:	3601      	adds	r6, #1
 8004384:	e7ee      	b.n	8004364 <__libc_init_array+0xc>
 8004386:	f855 3b04 	ldr.w	r3, [r5], #4
 800438a:	4798      	blx	r3
 800438c:	3601      	adds	r6, #1
 800438e:	e7f2      	b.n	8004376 <__libc_init_array+0x1e>
 8004390:	080043c8 	.word	0x080043c8
 8004394:	080043c8 	.word	0x080043c8
 8004398:	080043c8 	.word	0x080043c8
 800439c:	080043cc 	.word	0x080043cc

080043a0 <_init>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr

080043ac <_fini>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	bf00      	nop
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr


Brushless_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007810  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080079e8  080079e8  000179e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd0  08007bd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007bd0  08007bd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bd0  08007bd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000010  08007be4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08007be4  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172a1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e58  00000000  00000000  00037320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0003a178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001093  00000000  00000000  0003b708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b61  00000000  00000000  0003c79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d35  00000000  00000000  000622fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f27a5  00000000  00000000  0007a031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006098  00000000  00000000  0016c7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00172870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080079d0 	.word	0x080079d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080079d0 	.word	0x080079d0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <HAL_ADC_ConvCpltCallback>:

ADC_HandleTypeDef* CurrSensDriver::ADC_handle = nullptr;
uint32_t CurrSensDriver::ADCValues[3];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
	if(hadc == CurrSensDriver::ADC_handle){
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d105      	bne.n	8000b32 <HAL_ADC_ConvCpltCallback+0x1e>
		CurrSensDriver::ADCValues[0] = HAL_ADC_GetValue(hadc);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f001 fc55 	bl	80023d6 <HAL_ADC_GetValue>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <HAL_ADC_ConvCpltCallback+0x30>)
 8000b30:	6013      	str	r3, [r2, #0]
	}
	HAL_ADC_Stop_IT(hadc);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f001 fc14 	bl	8002360 <HAL_ADC_Stop_IT>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000002c 	.word	0x2000002c
 8000b44:	20000030 	.word	0x20000030

08000b48 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE>:

double CurrSensDriver::get_current_Amp(PhaseType phase){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

	uint32_t ADC_counts = CurrSensDriver::ADCValues[0];
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE+0xa8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	double sense_out = ( ADC_counts * MAX_ADC_READ_VOLTAGE/MAX_ADC_COUNTS);
 8000b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b58:	f7ff fca0 	bl	800049c <__aeabi_ui2d>
 8000b5c:	a31e      	add	r3, pc, #120	; (adr r3, 8000bd8 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE+0x90>)
 8000b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b62:	f7ff fd15 	bl	8000590 <__aeabi_dmul>
 8000b66:	4602      	mov	r2, r0
 8000b68:	460b      	mov	r3, r1
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 0200 	mov.w	r2, #0
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE+0xac>)
 8000b74:	f7ff fe36 	bl	80007e4 <__aeabi_ddiv>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double shifted_voltage = sense_out - AMPLIFIER_SHIFT;
 8000b80:	a317      	add	r3, pc, #92	; (adr r3, 8000be0 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE+0x98>)
 8000b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000b8a:	f7ff fb49 	bl	8000220 <__aeabi_dsub>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	460b      	mov	r3, r1
 8000b92:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double scaled_voltage = shifted_voltage/AMPLIFIER_SCALE;
 8000b96:	f04f 0200 	mov.w	r2, #0
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE+0xb0>)
 8000b9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ba0:	f7ff fe20 	bl	80007e4 <__aeabi_ddiv>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double current = scaled_voltage/SHUNT_RESISTANCE;
 8000bac:	a30e      	add	r3, pc, #56	; (adr r3, 8000be8 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE+0xa0>)
 8000bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000bb6:	f7ff fe15 	bl	80007e4 <__aeabi_ddiv>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return current;
 8000bc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bc6:	ec43 2b17 	vmov	d7, r2, r3
}
 8000bca:	eeb0 0a47 	vmov.f32	s0, s14
 8000bce:	eef0 0a67 	vmov.f32	s1, s15
 8000bd2:	3730      	adds	r7, #48	; 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	66666666 	.word	0x66666666
 8000bdc:	400a6666 	.word	0x400a6666
 8000be0:	66666666 	.word	0x66666666
 8000be4:	3ffa6666 	.word	0x3ffa6666
 8000be8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000bec:	3f40624d 	.word	0x3f40624d
 8000bf0:	20000030 	.word	0x20000030
 8000bf4:	40b00000 	.word	0x40b00000
 8000bf8:	40340000 	.word	0x40340000

08000bfc <HAL_TIM_PeriodElapsedCallback>:
#include "hall_encoder.h"
#include "math_utils.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b092      	sub	sp, #72	; 0x48
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	// check if it gets here
	double curr_A = CurrSensDriver::get_current_Amp(CurrSensDriver::PhaseType::A);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff ff9f 	bl	8000b48 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE>
 8000c0a:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	double curr_B = CurrSensDriver::get_current_Amp(CurrSensDriver::PhaseType::B);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff ff9a 	bl	8000b48 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE>
 8000c14:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	double curr_C = CurrSensDriver::get_current_Amp(CurrSensDriver::PhaseType::C);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff ff95 	bl	8000b48 <_ZN14CurrSensDriver15get_current_AmpENS_9PhaseTypeE>
 8000c1e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

	auto [curr_alpha, curr_beta] = tf_clarke(curr_A, curr_B, curr_C);
 8000c22:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 8000c26:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8000c2a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8000c2e:	f000 fc0f 	bl	8001450 <_Z9tf_clarkeddd>
 8000c32:	eeb0 6a40 	vmov.f32	s12, s0
 8000c36:	eef0 6a60 	vmov.f32	s13, s1
 8000c3a:	eeb0 7a41 	vmov.f32	s14, s2
 8000c3e:	eef0 7a61 	vmov.f32	s15, s3
 8000c42:	ed87 6b06 	vstr	d6, [r7, #24]
 8000c46:	ed87 7b08 	vstr	d7, [r7, #32]

	double theta_d =  HallEncoderDriver::get_thetad();
 8000c4a:	f000 f822 	bl	8000c92 <_ZN17HallEncoderDriver10get_thetadEv>
 8000c4e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	auto [curr_alpha, curr_beta] = tf_clarke(curr_A, curr_B, curr_C);
 8000c52:	ed97 7b06 	vldr	d7, [r7, #24]
 8000c56:	ed97 6b08 	vldr	d6, [r7, #32]
	auto [curr_d, curr_q] = tf_park(curr_alpha, curr_beta, theta_d);
 8000c5a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8000c5e:	eeb0 1a46 	vmov.f32	s2, s12
 8000c62:	eef0 1a66 	vmov.f32	s3, s13
 8000c66:	eeb0 0a47 	vmov.f32	s0, s14
 8000c6a:	eef0 0a67 	vmov.f32	s1, s15
 8000c6e:	f000 fb82 	bl	8001376 <_Z7tf_parkddd>
 8000c72:	eeb0 6a40 	vmov.f32	s12, s0
 8000c76:	eef0 6a60 	vmov.f32	s13, s1
 8000c7a:	eeb0 7a41 	vmov.f32	s14, s2
 8000c7e:	eef0 7a61 	vmov.f32	s15, s3
 8000c82:	ed87 6b02 	vstr	d6, [r7, #8]
 8000c86:	ed87 7b04 	vstr	d7, [r7, #16]



	return;
 8000c8a:	bf00      	nop

}
 8000c8c:	3748      	adds	r7, #72	; 0x48
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_ZN17HallEncoderDriver10get_thetadEv>:
 */
#include "hall_encoder.h"



double HallEncoderDriver::get_thetad(){
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
	return 0;
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ca6:	eef0 0a67 	vmov.f32	s1, s15
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TIM2->CCR1 = 17895697;
 8000cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <main+0x3c>)
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc0:	f000 fe8f 	bl	80019e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc4:	f000 f816 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc8:	f000 fabe 	bl	8001248 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000ccc:	f000 f93c 	bl	8000f48 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 8000cd0:	f000 f85c 	bl	8000d8c <MX_ADC1_Init>
  MX_SPI3_Init();
 8000cd4:	f000 f97e 	bl	8000fd4 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000cd8:	f000 fa2e 	bl	8001138 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000cdc:	f000 f8ce 	bl	8000e7c <MX_ADC2_Init>
  MX_TIM2_Init();
 8000ce0:	f000 f9b6 	bl	8001050 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // write voltage for 2 secs

  setup();
 8000ce4:	f000 fb24 	bl	8001330 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000ce8:	f000 fb3e 	bl	8001368 <loop>
 8000cec:	e7fc      	b.n	8000ce8 <main+0x34>
 8000cee:	bf00      	nop
 8000cf0:	01111111 	.word	0x01111111

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b094      	sub	sp, #80	; 0x50
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	2238      	movs	r2, #56	; 0x38
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 fe38 	bl	8007978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d1a:	f003 f997 	bl	800404c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d28:	2340      	movs	r3, #64	; 0x40
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 fa31 	bl	80041b4 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d58:	f000 fae4 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2303      	movs	r3, #3
 8000d62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2102      	movs	r1, #2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fd35 	bl	80047e4 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d80:	f000 fad0 	bl	8001324 <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3750      	adds	r7, #80	; 0x50
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2220      	movs	r2, #32
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f006 fde7 	bl	8007978 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000dac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000db0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000db4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000db8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dba:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dcc:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e14:	4817      	ldr	r0, [pc, #92]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000e16:	f001 f8e1 	bl	8001fdc <HAL_ADC_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e20:	f000 fa80 	bl	8001324 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4811      	ldr	r0, [pc, #68]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000e30:	f002 fb94 	bl	800355c <HAL_ADCEx_MultiModeConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e3a:	f000 fa73 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_ADC1_Init+0xec>)
 8000e40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e42:	2306      	movs	r3, #6
 8000e44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e4a:	237f      	movs	r3, #127	; 0x7f
 8000e4c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000e5c:	f001 fd3c 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e66:	f000 fa5d 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3730      	adds	r7, #48	; 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000003c 	.word	0x2000003c
 8000e78:	19200040 	.word	0x19200040

08000e7c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2220      	movs	r2, #32
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 fd75 	bl	8007978 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000e90:	4a2b      	ldr	r2, [pc, #172]	; (8000f40 <MX_ADC2_Init+0xc4>)
 8000e92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e94:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e9a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ef6:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000ef8:	f001 f870 	bl	8001fdc <HAL_ADC_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f02:	f000 fa0f 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_ADC2_Init+0xc8>)
 8000f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f12:	237f      	movs	r3, #127	; 0x7f
 8000f14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f16:	2304      	movs	r3, #4
 8000f18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <MX_ADC2_Init+0xc0>)
 8000f24:	f001 fcd8 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f2e:	f000 f9f9 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000a8 	.word	0x200000a8
 8000f40:	50000100 	.word	0x50000100
 8000f44:	2e300800 	.word	0x2e300800

08000f48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f4e:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <MX_FDCAN1_Init+0x88>)
 8000f50:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f78:	2210      	movs	r2, #16
 8000f7a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_FDCAN1_Init+0x84>)
 8000fba:	f002 fce7 	bl	800398c <HAL_FDCAN_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000fc4:	f000 f9ae 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000114 	.word	0x20000114
 8000fd0:	40006400 	.word	0x40006400

08000fd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <MX_SPI3_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_SPI3_Init+0x74>)
 8000fee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ff2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_SPI3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_SPI3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_SPI3_Init+0x74>)
 8001002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001006:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_SPI3_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_SPI3_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_SPI3_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_SPI3_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_SPI3_Init+0x74>)
 8001022:	2207      	movs	r2, #7
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_SPI3_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_SPI3_Init+0x74>)
 800102e:	2208      	movs	r2, #8
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_SPI3_Init+0x74>)
 8001034:	f004 f808 	bl	8005048 <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 f971 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000178 	.word	0x20000178
 800104c:	40003c00 	.word	0x40003c00

08001050 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_TIM2_Init+0xe0>)
 8001084:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001088:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_TIM2_Init+0xe0>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <MX_TIM2_Init+0xe0>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7.1582788E7;
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_TIM2_Init+0xe0>)
 8001098:	4a26      	ldr	r2, [pc, #152]	; (8001134 <MX_TIM2_Init+0xe4>)
 800109a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <MX_TIM2_Init+0xe0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <MX_TIM2_Init+0xe0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a8:	4821      	ldr	r0, [pc, #132]	; (8001130 <MX_TIM2_Init+0xe0>)
 80010aa:	f004 f878 	bl	800519e <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010b4:	f000 f936 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c2:	4619      	mov	r1, r3
 80010c4:	481a      	ldr	r0, [pc, #104]	; (8001130 <MX_TIM2_Init+0xe0>)
 80010c6:	f004 fc19 	bl	80058fc <HAL_TIM_ConfigClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010d0:	f000 f928 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80010d4:	4816      	ldr	r0, [pc, #88]	; (8001130 <MX_TIM2_Init+0xe0>)
 80010d6:	f004 f8b9 	bl	800524c <HAL_TIM_OC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010e0:	f000 f920 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <MX_TIM2_Init+0xe0>)
 80010f4:	f005 face 	bl	8006694 <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010fe:	f000 f911 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_TIM2_Init+0xe0>)
 800111a:	f004 fad9 	bl	80056d0 <HAL_TIM_OC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001124:	f000 f8fe 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001dc 	.word	0x200001dc
 8001134:	04444444 	.word	0x04444444

08001138 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001164:	4b36      	ldr	r3, [pc, #216]	; (8001240 <MX_TIM3_Init+0x108>)
 8001166:	4a37      	ldr	r2, [pc, #220]	; (8001244 <MX_TIM3_Init+0x10c>)
 8001168:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <MX_TIM3_Init+0x108>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <MX_TIM3_Init+0x108>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <MX_TIM3_Init+0x108>)
 8001178:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <MX_TIM3_Init+0x108>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <MX_TIM3_Init+0x108>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800118a:	482d      	ldr	r0, [pc, #180]	; (8001240 <MX_TIM3_Init+0x108>)
 800118c:	f004 f807 	bl	800519e <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001196:	f000 f8c5 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4619      	mov	r1, r3
 80011a6:	4826      	ldr	r0, [pc, #152]	; (8001240 <MX_TIM3_Init+0x108>)
 80011a8:	f004 fba8 	bl	80058fc <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80011b2:	f000 f8b7 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011b6:	4822      	ldr	r0, [pc, #136]	; (8001240 <MX_TIM3_Init+0x108>)
 80011b8:	f004 f8a9 	bl	800530e <HAL_TIM_IC_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80011c2:	f000 f8af 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	481a      	ldr	r0, [pc, #104]	; (8001240 <MX_TIM3_Init+0x108>)
 80011d6:	f005 fa5d 	bl	8006694 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80011e0:	f000 f8a0 	bl	8001324 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4811      	ldr	r0, [pc, #68]	; (8001240 <MX_TIM3_Init+0x108>)
 80011fc:	f004 fae2 	bl	80057c4 <HAL_TIM_IC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001206:	f000 f88d 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2204      	movs	r2, #4
 800120e:	4619      	mov	r1, r3
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <MX_TIM3_Init+0x108>)
 8001212:	f004 fad7 	bl	80057c4 <HAL_TIM_IC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 800121c:	f000 f882 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2208      	movs	r2, #8
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_TIM3_Init+0x108>)
 8001228:	f004 facc 	bl	80057c4 <HAL_TIM_IC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001232:	f000 f877 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	3730      	adds	r7, #48	; 0x30
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000228 	.word	0x20000228
 8001244:	40000400 	.word	0x40000400

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <MX_GPIO_Init+0xd4>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a2e      	ldr	r2, [pc, #184]	; (800131c <MX_GPIO_Init+0xd4>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <MX_GPIO_Init+0xd4>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b29      	ldr	r3, [pc, #164]	; (800131c <MX_GPIO_Init+0xd4>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a28      	ldr	r2, [pc, #160]	; (800131c <MX_GPIO_Init+0xd4>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <MX_GPIO_Init+0xd4>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <MX_GPIO_Init+0xd4>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a22      	ldr	r2, [pc, #136]	; (800131c <MX_GPIO_Init+0xd4>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <MX_GPIO_Init+0xd4>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_GPIO_Init+0xd4>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_GPIO_Init+0xd4>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_GPIO_Init+0xd4>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f002 fea8 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2147      	movs	r1, #71	; 0x47
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <MX_GPIO_Init+0xd8>)
 80012d2:	f002 fea3 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 80012d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f002 fd11 	bl	8003d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_OUTPUT_Pin H2_OUTPUT_Pin H3_OUTPUT_Pin PD6 */
  GPIO_InitStruct.Pin = H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6;
 80012f6:	2347      	movs	r3, #71	; 0x47
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_GPIO_Init+0xd8>)
 800130e:	f002 fd03 	bl	8003d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	; 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	48000c00 	.word	0x48000c00

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <setup>:
#include "stm32g4xx_hal.h"

extern ADC_HandleTypeDef hadc1;
uint64_t ADC_count = 0;

void setup() {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

	CurrSensDriver::ADC_handle = &hadc1;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <setup+0x2c>)
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <setup+0x30>)
 8001338:	601a      	str	r2, [r3, #0]
	HAL_ADCEx_Calibration_Start(CurrSensDriver::ADC_handle, ADC_SINGLE_ENDED);
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <setup+0x2c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	217f      	movs	r1, #127	; 0x7f
 8001340:	4618      	mov	r0, r3
 8001342:	f002 f877 	bl	8003434 <HAL_ADCEx_Calibration_Start>
	// Enable the gate driver
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2140      	movs	r1, #64	; 0x40
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <setup+0x34>)
 800134c:	f002 fe66 	bl	800401c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001350:	200a      	movs	r0, #10
 8001352:	f000 fbb7 	bl	8001ac4 <HAL_Delay>

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000002c 	.word	0x2000002c
 8001360:	2000003c 	.word	0x2000003c
 8001364:	48000c00 	.word	0x48000c00

08001368 <loop>:

void loop() {
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

//	HAL_ADC_Start_IT(CurrSensDriver::ADC_handle);
//	double volatile cool_num = CurrSensDriver::get_current_Amp(CurrSensDriver::PhaseType::A);
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_Z7tf_parkddd>:
 *      Author: Sashreek and Jonah
 */
#include "math_utils.h"
#include <cmath>

ParkOut tf_park (double ialpha, double ibeta, double theta_d){
 8001376:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800137a:	b092      	sub	sp, #72	; 0x48
 800137c:	af00      	add	r7, sp, #0
 800137e:	ed87 0b08 	vstr	d0, [r7, #32]
 8001382:	ed87 1b06 	vstr	d1, [r7, #24]
 8001386:	ed87 2b04 	vstr	d2, [r7, #16]
	ParkOut output;
	output.id = ialpha * cos(theta_d) + ibeta * sin(theta_d);
 800138a:	ed97 0b04 	vldr	d0, [r7, #16]
 800138e:	f005 fa5f 	bl	8006850 <cos>
 8001392:	ec51 0b10 	vmov	r0, r1, d0
 8001396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800139a:	f7ff f8f9 	bl	8000590 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4690      	mov	r8, r2
 80013a4:	4699      	mov	r9, r3
 80013a6:	ed97 0b04 	vldr	d0, [r7, #16]
 80013aa:	f005 faa5 	bl	80068f8 <sin>
 80013ae:	ec51 0b10 	vmov	r0, r1, d0
 80013b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013b6:	f7ff f8eb 	bl	8000590 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4640      	mov	r0, r8
 80013c0:	4649      	mov	r1, r9
 80013c2:	f7fe ff2f 	bl	8000224 <__adddf3>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.iq = -ialpha * sin(theta_d) + ibeta * cos(theta_d);
 80013ce:	6a3c      	ldr	r4, [r7, #32]
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013d6:	ed97 0b04 	vldr	d0, [r7, #16]
 80013da:	f005 fa8d 	bl	80068f8 <sin>
 80013de:	ec53 2b10 	vmov	r2, r3, d0
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7ff f8d3 	bl	8000590 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	461d      	mov	r5, r3
 80013f2:	ed97 0b04 	vldr	d0, [r7, #16]
 80013f6:	f005 fa2b 	bl	8006850 <cos>
 80013fa:	ec51 0b10 	vmov	r0, r1, d0
 80013fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001402:	f7ff f8c5 	bl	8000590 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7fe ff09 	bl	8000224 <__adddf3>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 800141a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800141e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001428:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800142c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001430:	ec41 0b16 	vmov	d6, r0, r1
 8001434:	ec43 2b17 	vmov	d7, r2, r3

}
 8001438:	eeb0 0a46 	vmov.f32	s0, s12
 800143c:	eef0 0a66 	vmov.f32	s1, s13
 8001440:	eeb0 1a47 	vmov.f32	s2, s14
 8001444:	eef0 1a67 	vmov.f32	s3, s15
 8001448:	3748      	adds	r7, #72	; 0x48
 800144a:	46bd      	mov	sp, r7
 800144c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001450 <_Z9tf_clarkeddd>:
	output.vbeta = vd * sin(theta_d) + vq * cos(theta_d);
	return output;
}

//Clarke transform
ClarkeOut tf_clarke (double ia, double ib, double ic){
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b092      	sub	sp, #72	; 0x48
 8001454:	af00      	add	r7, sp, #0
 8001456:	ed87 0b08 	vstr	d0, [r7, #32]
 800145a:	ed87 1b06 	vstr	d1, [r7, #24]
 800145e:	ed87 2b04 	vstr	d2, [r7, #16]
	ClarkeOut output;
	output.ialpha = (3.0/2.0) * ia;
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <_Z9tf_clarkeddd+0xa0>)
 8001468:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800146c:	f7ff f890 	bl	8000590 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.ibeta = (sqrt(3)/2) * ib - (sqrt(3)/2) * ic;
 8001478:	a31b      	add	r3, pc, #108	; (adr r3, 80014e8 <_Z9tf_clarkeddd+0x98>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001482:	f7ff f885 	bl	8000590 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4614      	mov	r4, r2
 800148c:	461d      	mov	r5, r3
 800148e:	a316      	add	r3, pc, #88	; (adr r3, 80014e8 <_Z9tf_clarkeddd+0x98>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001498:	f7ff f87a 	bl	8000590 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4620      	mov	r0, r4
 80014a2:	4629      	mov	r1, r5
 80014a4:	f7fe febc 	bl	8000220 <__aeabi_dsub>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 80014b0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80014b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80014c6:	ec41 0b16 	vmov	d6, r0, r1
 80014ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ce:	eeb0 0a46 	vmov.f32	s0, s12
 80014d2:	eef0 0a66 	vmov.f32	s1, s13
 80014d6:	eeb0 1a47 	vmov.f32	s2, s14
 80014da:	eef0 1a67 	vmov.f32	s3, s15
 80014de:	3748      	adds	r7, #72	; 0x48
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	f3af 8000 	nop.w
 80014e8:	e8584caa 	.word	0xe8584caa
 80014ec:	3febb67a 	.word	0x3febb67a
 80014f0:	3ff80000 	.word	0x3ff80000

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_MspInit+0x44>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	; 0x60
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_MspInit+0x44>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x44>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6593      	str	r3, [r2, #88]	; 0x58
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x44>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800152a:	f002 fe33 	bl	8004194 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0a2      	sub	sp, #136	; 0x88
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	2254      	movs	r2, #84	; 0x54
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f006 fa0b 	bl	8007978 <memset>
  if(hadc->Instance==ADC1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800156a:	d15e      	bne.n	800162a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800156c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001570:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001572:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001576:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fb15 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001588:	f7ff fecc 	bl	8001324 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800158c:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <HAL_ADC_MspInit+0x18c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	4a4d      	ldr	r2, [pc, #308]	; (80016c8 <HAL_ADC_MspInit+0x18c>)
 8001594:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001596:	4b4c      	ldr	r3, [pc, #304]	; (80016c8 <HAL_ADC_MspInit+0x18c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10b      	bne.n	80015b6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800159e:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <HAL_ADC_MspInit+0x190>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4a4a      	ldr	r2, [pc, #296]	; (80016cc <HAL_ADC_MspInit+0x190>)
 80015a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015aa:	4b48      	ldr	r3, [pc, #288]	; (80016cc <HAL_ADC_MspInit+0x190>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	4b45      	ldr	r3, [pc, #276]	; (80016cc <HAL_ADC_MspInit+0x190>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	4a44      	ldr	r2, [pc, #272]	; (80016cc <HAL_ADC_MspInit+0x190>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c2:	4b42      	ldr	r3, [pc, #264]	; (80016cc <HAL_ADC_MspInit+0x190>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_ADC_MspInit+0x190>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_ADC_MspInit+0x190>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015da:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <HAL_ADC_MspInit+0x190>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015e6:	230f      	movs	r3, #15
 80015e8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ea:	2303      	movs	r3, #3
 80015ec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015f6:	4619      	mov	r1, r3
 80015f8:	4835      	ldr	r0, [pc, #212]	; (80016d0 <HAL_ADC_MspInit+0x194>)
 80015fa:	f002 fb8d 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015fe:	230f      	movs	r3, #15
 8001600:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001602:	2303      	movs	r3, #3
 8001604:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f002 fb80 	bl	8003d18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2012      	movs	r0, #18
 800161e:	f002 f980 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001622:	2012      	movs	r0, #18
 8001624:	f002 f997 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001628:	e049      	b.n	80016be <HAL_ADC_MspInit+0x182>
  else if(hadc->Instance==ADC2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <HAL_ADC_MspInit+0x198>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d144      	bne.n	80016be <HAL_ADC_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001638:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800163a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800163e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fab1 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_ADC_MspInit+0x118>
      Error_Handler();
 8001650:	f7ff fe68 	bl	8001324 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_ADC_MspInit+0x18c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <HAL_ADC_MspInit+0x18c>)
 800165c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_ADC_MspInit+0x18c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d10b      	bne.n	800167e <HAL_ADC_MspInit+0x142>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_ADC_MspInit+0x190>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a18      	ldr	r2, [pc, #96]	; (80016cc <HAL_ADC_MspInit+0x190>)
 800166c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_ADC_MspInit+0x190>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_ADC_MspInit+0x190>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_ADC_MspInit+0x190>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_ADC_MspInit+0x190>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_TEMP_Pin;
 8001696:	2320      	movs	r3, #32
 8001698:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169a:	2303      	movs	r3, #3
 800169c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(MOTOR_TEMP_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016a6:	4619      	mov	r1, r3
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <HAL_ADC_MspInit+0x194>)
 80016aa:	f002 fb35 	bl	8003d18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2012      	movs	r0, #18
 80016b4:	f002 f935 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016b8:	2012      	movs	r0, #18
 80016ba:	f002 f94c 	bl	8003956 <HAL_NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3788      	adds	r7, #136	; 0x88
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000280 	.word	0x20000280
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000800 	.word	0x48000800
 80016d4:	50000100 	.word	0x50000100

080016d8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b09e      	sub	sp, #120	; 0x78
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2254      	movs	r2, #84	; 0x54
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f006 f93d 	bl	8007978 <memset>
  if(hfdcan->Instance==FDCAN1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a20      	ldr	r2, [pc, #128]	; (8001784 <HAL_FDCAN_MspInit+0xac>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d139      	bne.n	800177c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800170e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001712:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fa47 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001724:	f7ff fdfe 	bl	8001324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_FDCAN_MspInit+0xb0>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	4a16      	ldr	r2, [pc, #88]	; (8001788 <HAL_FDCAN_MspInit+0xb0>)
 800172e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001732:	6593      	str	r3, [r2, #88]	; 0x58
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_FDCAN_MspInit+0xb0>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_FDCAN_MspInit+0xb0>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_FDCAN_MspInit+0xb0>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_FDCAN_MspInit+0xb0>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001758:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800175c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800176a:	2309      	movs	r3, #9
 800176c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f002 face 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	3778      	adds	r7, #120	; 0x78
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40006400 	.word	0x40006400
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_SPI_MspInit+0x7c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d128      	bne.n	8001800 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_SPI_MspInit+0x80>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	4a16      	ldr	r2, [pc, #88]	; (800180c <HAL_SPI_MspInit+0x80>)
 80017b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_SPI_MspInit+0x80>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_SPI_MspInit+0x80>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_SPI_MspInit+0x80>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_SPI_MspInit+0x80>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f0:	2306      	movs	r3, #6
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_SPI_MspInit+0x84>)
 80017fc:	f002 fa8c 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40003c00 	.word	0x40003c00
 800180c:	40021000 	.word	0x40021000
 8001810:	48000800 	.word	0x48000800

08001814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d114      	bne.n	8001860 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_TIM_Base_MspInit+0xb0>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <HAL_TIM_Base_MspInit+0xb0>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6593      	str	r3, [r2, #88]	; 0x58
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_TIM_Base_MspInit+0xb0>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	201c      	movs	r0, #28
 8001854:	f002 f865 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001858:	201c      	movs	r0, #28
 800185a:	f002 f87c 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800185e:	e02d      	b.n	80018bc <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_TIM_Base_MspInit+0xb4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d128      	bne.n	80018bc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_TIM_Base_MspInit+0xb0>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <HAL_TIM_Base_MspInit+0xb0>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_TIM_Base_MspInit+0xb0>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_TIM_Base_MspInit+0xb0>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <HAL_TIM_Base_MspInit+0xb0>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_TIM_Base_MspInit+0xb0>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL1_INPUT_Pin|HALL_2_INPUT_Pin|HALL_3_INPUT_Pin;
 800189a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ac:	2302      	movs	r3, #2
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <HAL_TIM_Base_MspInit+0xb8>)
 80018b8:	f002 fa2e 	bl	8003d18 <HAL_GPIO_Init>
}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40000400 	.word	0x40000400
 80018cc:	48000800 	.word	0x48000800

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <NMI_Handler+0x4>

080018d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler+0x4>

080018e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <UsageFault_Handler+0x4>

080018ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191c:	f000 f8b4 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <ADC1_2_IRQHandler+0x28>)
 800192a:	f000 fd61 	bl	80023f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <ADC1_2_IRQHandler+0x2c>)
 8001930:	f000 fd5e 	bl	80023f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  ADC_count++;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <ADC1_2_IRQHandler+0x30>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	1c54      	adds	r4, r2, #1
 800193c:	f143 0500 	adc.w	r5, r3, #0
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <ADC1_2_IRQHandler+0x30>)
 8001942:	e9c3 4500 	strd	r4, r5, [r3]
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bdb0      	pop	{r4, r5, r7, pc}
 800194a:	bf00      	nop
 800194c:	2000003c 	.word	0x2000003c
 8001950:	200000a8 	.word	0x200000a8
 8001954:	20000278 	.word	0x20000278

08001958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM2_IRQHandler+0x10>)
 800195e:	f003 fd37 	bl	80053d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001dc 	.word	0x200001dc

0800196c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <SystemInit+0x20>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <SystemInit+0x20>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001992:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001996:	490e      	ldr	r1, [pc, #56]	; (80019d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <LoopForever+0xe>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ac:	4c0b      	ldr	r4, [pc, #44]	; (80019dc <LoopForever+0x16>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ba:	f7ff ffd7 	bl	800196c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019be:	f005 ffe3 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019c2:	f7ff f977 	bl	8000cb4 <main>

080019c6 <LoopForever>:

LoopForever:
    b LoopForever
 80019c6:	e7fe      	b.n	80019c6 <LoopForever>
  ldr   r0, =_estack
 80019c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019d4:	08007bd8 	.word	0x08007bd8
  ldr r2, =_sbss
 80019d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019dc:	20000288 	.word	0x20000288

080019e0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC3_IRQHandler>

080019e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f001 ff8d 	bl	800390c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f2:	200f      	movs	r0, #15
 80019f4:	f000 f80e 	bl	8001a14 <HAL_InitTick>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	e001      	b.n	8001a08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a04:	f7ff fd76 	bl	80014f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a08:	79fb      	ldrb	r3, [r7, #7]

}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_InitTick+0x68>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d022      	beq.n	8001a6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_InitTick+0x6c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_InitTick+0x68>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 ff98 	bl	8003972 <HAL_SYSTICK_Config>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10f      	bne.n	8001a68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	d809      	bhi.n	8001a62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	f04f 30ff 	mov.w	r0, #4294967295
 8001a56:	f001 ff64 	bl	8003922 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_InitTick+0x70>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e007      	b.n	8001a72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e004      	b.n	8001a72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e001      	b.n	8001a72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x1c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <HAL_IncTick+0x1c>)
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000284 	.word	0x20000284
 8001aa8:	20000008 	.word	0x20000008

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000284 	.word	0x20000284

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d004      	beq.n	8001ae8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_Delay+0x40>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae8:	bf00      	nop
 8001aea:	f7ff ffdf 	bl	8001aac <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d8f7      	bhi.n	8001aea <HAL_Delay+0x26>
  {
  }
}
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000008 	.word	0x20000008

08001b08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3360      	adds	r3, #96	; 0x60
 8001b82:	461a      	mov	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <LL_ADC_SetOffset+0x44>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ba8:	bf00      	nop
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	03fff000 	.word	0x03fff000

08001bb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3360      	adds	r3, #96	; 0x60
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3360      	adds	r3, #96	; 0x60
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b087      	sub	sp, #28
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3360      	adds	r3, #96	; 0x60
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c44:	bf00      	nop
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3360      	adds	r3, #96	; 0x60
 8001c60:	461a      	mov	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c7a:	bf00      	nop
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	615a      	str	r2, [r3, #20]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b087      	sub	sp, #28
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3330      	adds	r3, #48	; 0x30
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	4413      	add	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	211f      	movs	r1, #31
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	401a      	ands	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	f003 011f 	and.w	r1, r3, #31
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d1e:	bf00      	nop
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3314      	adds	r3, #20
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	0e5b      	lsrs	r3, r3, #25
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	0d1b      	lsrs	r3, r3, #20
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2107      	movs	r1, #7
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	401a      	ands	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	0d1b      	lsrs	r3, r3, #20
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	431a      	orrs	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d9a:	bf00      	nop
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d10a      	bne.n	8001dd2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	43db      	mvns	r3, r3
 8001de0:	401a      	ands	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	407f0000 	.word	0x407f0000

08001df8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 031f 	and.w	r3, r3, #31
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6093      	str	r3, [r2, #8]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee0:	f043 0202 	orr.w	r2, r3, #2
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <LL_ADC_IsEnabled+0x18>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <LL_ADC_IsEnabled+0x1a>
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d101      	bne.n	8001f32 <LL_ADC_IsDisableOngoing+0x18>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <LL_ADC_IsDisableOngoing+0x1a>
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d101      	bne.n	8001f80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d101      	bne.n	8001fce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e1af      	b.n	8002356 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fa99 	bl	800153c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff19 	bl	8001e54 <LL_ADC_IsDeepPowerDownEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff feff 	bl	8001e30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff34 	bl	8001ea4 <LL_ADC_IsInternalRegulatorEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff18 	bl	8001e7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800204c:	4b9f      	ldr	r3, [pc, #636]	; (80022cc <HAL_ADC_Init+0x2f0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	4a9f      	ldr	r2, [pc, #636]	; (80022d0 <HAL_ADC_Init+0x2f4>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	3301      	adds	r3, #1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002060:	e002      	b.n	8002068 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff16 	bl	8001ea4 <LL_ADC_IsInternalRegulatorEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff62 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 80020a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8148 	bne.w	8002344 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 8144 	bne.w	8002344 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020c4:	f043 0202 	orr.w	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff0f 	bl	8001ef4 <LL_ADC_IsEnabled>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d141      	bne.n	8002160 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e4:	d004      	beq.n	80020f0 <HAL_ADC_Init+0x114>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <HAL_ADC_Init+0x2f8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d10f      	bne.n	8002110 <HAL_ADC_Init+0x134>
 80020f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020f4:	f7ff fefe 	bl	8001ef4 <LL_ADC_IsEnabled>
 80020f8:	4604      	mov	r4, r0
 80020fa:	4876      	ldr	r0, [pc, #472]	; (80022d4 <HAL_ADC_Init+0x2f8>)
 80020fc:	f7ff fefa 	bl	8001ef4 <LL_ADC_IsEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	4323      	orrs	r3, r4
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e012      	b.n	8002136 <HAL_ADC_Init+0x15a>
 8002110:	4871      	ldr	r0, [pc, #452]	; (80022d8 <HAL_ADC_Init+0x2fc>)
 8002112:	f7ff feef 	bl	8001ef4 <LL_ADC_IsEnabled>
 8002116:	4604      	mov	r4, r0
 8002118:	4870      	ldr	r0, [pc, #448]	; (80022dc <HAL_ADC_Init+0x300>)
 800211a:	f7ff feeb 	bl	8001ef4 <LL_ADC_IsEnabled>
 800211e:	4603      	mov	r3, r0
 8002120:	431c      	orrs	r4, r3
 8002122:	486f      	ldr	r0, [pc, #444]	; (80022e0 <HAL_ADC_Init+0x304>)
 8002124:	f7ff fee6 	bl	8001ef4 <LL_ADC_IsEnabled>
 8002128:	4603      	mov	r3, r0
 800212a:	4323      	orrs	r3, r4
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002142:	d004      	beq.n	800214e <HAL_ADC_Init+0x172>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a62      	ldr	r2, [pc, #392]	; (80022d4 <HAL_ADC_Init+0x2f8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_ADC_Init+0x176>
 800214e:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <HAL_ADC_Init+0x308>)
 8002150:	e000      	b.n	8002154 <HAL_ADC_Init+0x178>
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <HAL_ADC_Init+0x30c>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f7ff fcd4 	bl	8001b08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7f5b      	ldrb	r3, [r3, #29]
 8002164:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800216a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002170:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002176:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800218a:	2b01      	cmp	r3, #1
 800218c:	d106      	bne.n	800219c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	3b01      	subs	r3, #1
 8002194:	045b      	lsls	r3, r3, #17
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_ADC_Init+0x310>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff febe 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 80021ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fedf 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 80021f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d17f      	bne.n	8002300 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d17c      	bne.n	8002300 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800220a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002212:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002222:	f023 0302 	bic.w	r3, r3, #2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	430b      	orrs	r3, r1
 800222e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d017      	beq.n	8002268 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002246:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002250:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6911      	ldr	r1, [r2, #16]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	430b      	orrs	r3, r1
 8002262:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002266:	e013      	b.n	8002290 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002276:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800228c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002296:	2b01      	cmp	r3, #1
 8002298:	d12a      	bne.n	80022f0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022b0:	4311      	orrs	r1, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022bc:	430a      	orrs	r2, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	e019      	b.n	8002300 <HAL_ADC_Init+0x324>
 80022cc:	20000000 	.word	0x20000000
 80022d0:	053e2d63 	.word	0x053e2d63
 80022d4:	50000100 	.word	0x50000100
 80022d8:	50000400 	.word	0x50000400
 80022dc:	50000500 	.word	0x50000500
 80022e0:	50000600 	.word	0x50000600
 80022e4:	50000300 	.word	0x50000300
 80022e8:	50000700 	.word	0x50000700
 80022ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10c      	bne.n	8002322 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f023 010f 	bic.w	r1, r3, #15
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	1e5a      	subs	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
 8002320:	e007      	b.n	8002332 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 020f 	bic.w	r2, r2, #15
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	65da      	str	r2, [r3, #92]	; 0x5c
 8002342:	e007      	b.n	8002354 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002354:	7ffb      	ldrb	r3, [r7, #31]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}
 800235e:	bf00      	nop

08002360 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Stop_IT+0x16>
 8002372:	2302      	movs	r3, #2
 8002374:	e02b      	b.n	80023ce <HAL_ADC_Stop_IT+0x6e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800237e:	2103      	movs	r1, #3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fee9 	bl	8003158 <ADC_ConversionStop>
 8002386:	4603      	mov	r3, r0
 8002388:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d119      	bne.n	80023c4 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 021c 	bic.w	r2, r2, #28
 800239e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 ff95 	bl	80032d0 <ADC_Disable>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002414:	d004      	beq.n	8002420 <HAL_ADC_IRQHandler+0x30>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a8e      	ldr	r2, [pc, #568]	; (8002654 <HAL_ADC_IRQHandler+0x264>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_ADC_IRQHandler+0x34>
 8002420:	4b8d      	ldr	r3, [pc, #564]	; (8002658 <HAL_ADC_IRQHandler+0x268>)
 8002422:	e000      	b.n	8002426 <HAL_ADC_IRQHandler+0x36>
 8002424:	4b8d      	ldr	r3, [pc, #564]	; (800265c <HAL_ADC_IRQHandler+0x26c>)
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fce6 	bl	8001df8 <LL_ADC_GetMultimode>
 800242c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d017      	beq.n	8002468 <HAL_ADC_IRQHandler+0x78>
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f001 f874 	bl	8003548 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d004      	beq.n	800247c <HAL_ADC_IRQHandler+0x8c>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8094 	beq.w	80025b0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 808e 	beq.w	80025b0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fbfb 	bl	8001cac <LL_ADC_REG_IsTriggerSourceSWStart>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d072      	beq.n	80025a2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a64      	ldr	r2, [pc, #400]	; (8002654 <HAL_ADC_IRQHandler+0x264>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_ADC_IRQHandler+0xea>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a65      	ldr	r2, [pc, #404]	; (8002660 <HAL_ADC_IRQHandler+0x270>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d002      	beq.n	80024d6 <HAL_ADC_IRQHandler+0xe6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	e003      	b.n	80024de <HAL_ADC_IRQHandler+0xee>
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_ADC_IRQHandler+0x274>)
 80024d8:	e001      	b.n	80024de <HAL_ADC_IRQHandler+0xee>
 80024da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d008      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d002      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d104      	bne.n	8002502 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	e014      	b.n	800252c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a53      	ldr	r2, [pc, #332]	; (8002654 <HAL_ADC_IRQHandler+0x264>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_ADC_IRQHandler+0x130>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a53      	ldr	r2, [pc, #332]	; (8002660 <HAL_ADC_IRQHandler+0x270>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d002      	beq.n	800251c <HAL_ADC_IRQHandler+0x12c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	e003      	b.n	8002524 <HAL_ADC_IRQHandler+0x134>
 800251c:	4b51      	ldr	r3, [pc, #324]	; (8002664 <HAL_ADC_IRQHandler+0x274>)
 800251e:	e001      	b.n	8002524 <HAL_ADC_IRQHandler+0x134>
 8002520:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002524:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d135      	bne.n	80025a2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b08      	cmp	r3, #8
 8002542:	d12e      	bne.n	80025a2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fd0d 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11a      	bne.n	800258a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 020c 	bic.w	r2, r2, #12
 8002562:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d112      	bne.n	80025a2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	65da      	str	r2, [r3, #92]	; 0x5c
 8002588:	e00b      	b.n	80025a2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fab6 	bl	8000b14 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	220c      	movs	r2, #12
 80025ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x1d4>
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80b3 	beq.w	8002736 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80ad 	beq.w	8002736 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fb96 	bl	8001d2a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80025fe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fb51 	bl	8001cac <LL_ADC_REG_IsTriggerSourceSWStart>
 800260a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_ADC_IRQHandler+0x264>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_ADC_IRQHandler+0x23a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a11      	ldr	r2, [pc, #68]	; (8002660 <HAL_ADC_IRQHandler+0x270>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d002      	beq.n	8002626 <HAL_ADC_IRQHandler+0x236>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e003      	b.n	800262e <HAL_ADC_IRQHandler+0x23e>
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <HAL_ADC_IRQHandler+0x274>)
 8002628:	e001      	b.n	800262e <HAL_ADC_IRQHandler+0x23e>
 800262a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	4293      	cmp	r3, r2
 8002634:	d008      	beq.n	8002648 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b06      	cmp	r3, #6
 8002640:	d002      	beq.n	8002648 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b07      	cmp	r3, #7
 8002646:	d10f      	bne.n	8002668 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	e01f      	b.n	8002692 <HAL_ADC_IRQHandler+0x2a2>
 8002652:	bf00      	nop
 8002654:	50000100 	.word	0x50000100
 8002658:	50000300 	.word	0x50000300
 800265c:	50000700 	.word	0x50000700
 8002660:	50000500 	.word	0x50000500
 8002664:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a8b      	ldr	r2, [pc, #556]	; (800289c <HAL_ADC_IRQHandler+0x4ac>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_ADC_IRQHandler+0x296>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a8a      	ldr	r2, [pc, #552]	; (80028a0 <HAL_ADC_IRQHandler+0x4b0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d002      	beq.n	8002682 <HAL_ADC_IRQHandler+0x292>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	e003      	b.n	800268a <HAL_ADC_IRQHandler+0x29a>
 8002682:	4b88      	ldr	r3, [pc, #544]	; (80028a4 <HAL_ADC_IRQHandler+0x4b4>)
 8002684:	e001      	b.n	800268a <HAL_ADC_IRQHandler+0x29a>
 8002686:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800268a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d047      	beq.n	8002728 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_ADC_IRQHandler+0x2c2>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d03f      	beq.n	8002728 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d13a      	bne.n	8002728 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d133      	bne.n	8002728 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d12e      	bne.n	8002728 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fc71 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d11a      	bne.n	8002710 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d112      	bne.n	8002728 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	65da      	str	r2, [r3, #92]	; 0x5c
 800270e:	e00b      	b.n	8002728 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	f043 0210 	orr.w	r2, r3, #16
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002720:	f043 0201 	orr.w	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fee5 	bl	80034f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2260      	movs	r2, #96	; 0x60
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b00      	cmp	r3, #0
 800273e:	d011      	beq.n	8002764 <HAL_ADC_IRQHandler+0x374>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f8aa 	bl	80028b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d012      	beq.n	8002794 <HAL_ADC_IRQHandler+0x3a4>
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00d      	beq.n	8002794 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fecb 	bl	8003520 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002792:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x3d4>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00d      	beq.n	80027c4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 febd 	bl	8003534 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d043      	beq.n	8002856 <HAL_ADC_IRQHandler+0x466>
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d03e      	beq.n	8002856 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80027e0:	2301      	movs	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
 80027e4:	e021      	b.n	800282a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d015      	beq.n	8002818 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_IRQHandler+0x410>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_ADC_IRQHandler+0x4ac>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_IRQHandler+0x414>
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <HAL_ADC_IRQHandler+0x4b8>)
 8002802:	e000      	b.n	8002806 <HAL_ADC_IRQHandler+0x416>
 8002804:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_ADC_IRQHandler+0x4bc>)
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fb04 	bl	8001e14 <LL_ADC_GetMultiDMATransfer>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002812:	2301      	movs	r3, #1
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e008      	b.n	800282a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002826:	2301      	movs	r3, #1
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10e      	bne.n	800284e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002840:	f043 0202 	orr.w	r2, r3, #2
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f83b 	bl	80028c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2210      	movs	r2, #16
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d018      	beq.n	8002892 <HAL_ADC_IRQHandler+0x4a2>
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002866:	2b00      	cmp	r3, #0
 8002868:	d013      	beq.n	8002892 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287a:	f043 0208 	orr.w	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fe3d 	bl	800350c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002892:	bf00      	nop
 8002894:	3728      	adds	r7, #40	; 0x28
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	50000100 	.word	0x50000100
 80028a0:	50000500 	.word	0x50000500
 80028a4:	50000400 	.word	0x50000400
 80028a8:	50000300 	.word	0x50000300
 80028ac:	50000700 	.word	0x50000700

080028b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0b6      	sub	sp, #216	; 0xd8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x24>
 80028f6:	2302      	movs	r3, #2
 80028f8:	f000 bc13 	b.w	8003122 <HAL_ADC_ConfigChannel+0x84a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fb2d 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 83f3 	bne.w	80030fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	f7ff f9d5 	bl	8001cd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fb1b 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 8002932:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fb3b 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 8002940:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002944:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 81d9 	bne.w	8002d00 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800294e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 81d4 	bne.w	8002d00 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002960:	d10f      	bne.n	8002982 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	4619      	mov	r1, r3
 800296e:	f7ff f9ef 	bl	8001d50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f983 	bl	8001c86 <LL_ADC_SetSamplingTimeCommonConfig>
 8002980:	e00e      	b.n	80029a0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	461a      	mov	r2, r3
 8002990:	f7ff f9de 	bl	8001d50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff f973 	bl	8001c86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d022      	beq.n	8002a08 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6919      	ldr	r1, [r3, #16]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029d2:	f7ff f8cd 	bl	8001b70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6919      	ldr	r1, [r3, #16]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7ff f919 	bl	8001c1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6919      	ldr	r1, [r3, #16]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	7f1b      	ldrb	r3, [r3, #28]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d102      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x126>
 80029f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029fc:	e000      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x128>
 80029fe:	2300      	movs	r3, #0
 8002a00:	461a      	mov	r2, r3
 8002a02:	f7ff f925 	bl	8001c50 <LL_ADC_SetOffsetSaturation>
 8002a06:	e17b      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f8d2 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x15c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f8c7 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	f003 021f 	and.w	r2, r3, #31
 8002a32:	e01e      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x19a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff f8bc 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a62:	2320      	movs	r3, #32
 8002a64:	e004      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x1b2>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	0e9b      	lsrs	r3, r3, #26
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	e018      	b.n	8002abc <HAL_ADC_ConfigChannel+0x1e4>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	e004      	b.n	8002abc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002ab2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d106      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff f88b 	bl	8001be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff f86f 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x222>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f864 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	e01e      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x260>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff f859 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e004      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x278>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0e9b      	lsrs	r3, r3, #26
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	e018      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x2aa>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b74:	2320      	movs	r3, #32
 8002b76:	e004      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d106      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f828 	bl	8001be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff f80c 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x2e8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f801 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	e01e      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x326>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fff6 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e004      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d105      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x33e>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e9b      	lsrs	r3, r3, #26
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	e016      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x36c>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e004      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d106      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe ffc7 	bl	8001be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2103      	movs	r1, #3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe ffab 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x3aa>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2103      	movs	r1, #3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe ffa0 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	e017      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x3da>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2103      	movs	r1, #3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe ff95 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c9c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	e003      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x3f2>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0e9b      	lsrs	r3, r3, #26
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	e011      	b.n	8002cee <HAL_ADC_ConfigChannel+0x416>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cda:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e003      	b.n	8002cee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d106      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe ff72 	bl	8001be4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f8f5 	bl	8001ef4 <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f040 813d 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f7ff f842 	bl	8001da8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4aa2      	ldr	r2, [pc, #648]	; (8002fb4 <HAL_ADC_ConfigChannel+0x6dc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f040 812e 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x480>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2b09      	cmp	r3, #9
 8002d4e:	bf94      	ite	ls
 8002d50:	2301      	movls	r3, #1
 8002d52:	2300      	movhi	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e019      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x4b4>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e003      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2b09      	cmp	r3, #9
 8002d84:	bf94      	ite	ls
 8002d86:	2301      	movls	r3, #1
 8002d88:	2300      	movhi	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d079      	beq.n	8002e84 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d107      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x4d4>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	3301      	adds	r3, #1
 8002da4:	069b      	lsls	r3, r3, #26
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002daa:	e015      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x500>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	e003      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	069b      	lsls	r3, r3, #26
 8002dd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x520>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	3301      	adds	r3, #1
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	e017      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x550>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	ea42 0103 	orr.w	r1, r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x576>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0e9b      	lsrs	r3, r3, #26
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	051b      	lsls	r3, r3, #20
 8002e4c:	e018      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x5a8>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e66:	2320      	movs	r3, #32
 8002e68:	e003      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f003 021f 	and.w	r2, r3, #31
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e80:	430b      	orrs	r3, r1
 8002e82:	e07e      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d107      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x5c8>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	3301      	adds	r3, #1
 8002e98:	069b      	lsls	r3, r3, #26
 8002e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9e:	e015      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x5f4>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e003      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	069b      	lsls	r3, r3, #26
 8002ec8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x614>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	e017      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x644>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	61fb      	str	r3, [r7, #28]
  return result;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e003      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	ea42 0103 	orr.w	r1, r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10d      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x670>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	0e9b      	lsrs	r3, r3, #26
 8002f32:	3301      	adds	r3, #1
 8002f34:	f003 021f 	and.w	r2, r3, #31
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3b1e      	subs	r3, #30
 8002f40:	051b      	lsls	r3, r3, #20
 8002f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f46:	e01b      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x6a8>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	613b      	str	r3, [r7, #16]
  return result;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 021f 	and.w	r2, r3, #31
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	3b1e      	subs	r3, #30
 8002f7a:	051b      	lsls	r3, r3, #20
 8002f7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f80:	430b      	orrs	r3, r1
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	6892      	ldr	r2, [r2, #8]
 8002f86:	4619      	mov	r1, r3
 8002f88:	f7fe fee2 	bl	8001d50 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80be 	beq.w	8003116 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa2:	d004      	beq.n	8002fae <HAL_ADC_ConfigChannel+0x6d6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_ADC_ConfigChannel+0x6e4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10a      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x6ec>
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002fb0:	e009      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x6ee>
 8002fb2:	bf00      	nop
 8002fb4:	407f0000 	.word	0x407f0000
 8002fb8:	80080000 	.word	0x80080000
 8002fbc:	50000100 	.word	0x50000100
 8002fc0:	50000300 	.word	0x50000300
 8002fc4:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_ADC_ConfigChannel+0x854>)
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fdc4 	bl	8001b54 <LL_ADC_GetCommonPathInternalCh>
 8002fcc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a56      	ldr	r2, [pc, #344]	; (8003130 <HAL_ADC_ConfigChannel+0x858>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x70c>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a55      	ldr	r2, [pc, #340]	; (8003134 <HAL_ADC_ConfigChannel+0x85c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d13a      	bne.n	800305a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d134      	bne.n	800305a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ff8:	d005      	beq.n	8003006 <HAL_ADC_ConfigChannel+0x72e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a4e      	ldr	r2, [pc, #312]	; (8003138 <HAL_ADC_ConfigChannel+0x860>)
 8003000:	4293      	cmp	r3, r2
 8003002:	f040 8085 	bne.w	8003110 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800300e:	d004      	beq.n	800301a <HAL_ADC_ConfigChannel+0x742>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a49      	ldr	r2, [pc, #292]	; (800313c <HAL_ADC_ConfigChannel+0x864>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_ADC_ConfigChannel+0x746>
 800301a:	4a49      	ldr	r2, [pc, #292]	; (8003140 <HAL_ADC_ConfigChannel+0x868>)
 800301c:	e000      	b.n	8003020 <HAL_ADC_ConfigChannel+0x748>
 800301e:	4a43      	ldr	r2, [pc, #268]	; (800312c <HAL_ADC_ConfigChannel+0x854>)
 8003020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003024:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7fe fd7f 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003030:	4b44      	ldr	r3, [pc, #272]	; (8003144 <HAL_ADC_ConfigChannel+0x86c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	4a44      	ldr	r2, [pc, #272]	; (8003148 <HAL_ADC_ConfigChannel+0x870>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800304a:	e002      	b.n	8003052 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3b01      	subs	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f9      	bne.n	800304c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003058:	e05a      	b.n	8003110 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3b      	ldr	r2, [pc, #236]	; (800314c <HAL_ADC_ConfigChannel+0x874>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d125      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x7d8>
 8003064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d11f      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a31      	ldr	r2, [pc, #196]	; (800313c <HAL_ADC_ConfigChannel+0x864>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d104      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x7ac>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a34      	ldr	r2, [pc, #208]	; (8003150 <HAL_ADC_ConfigChannel+0x878>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d047      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800308c:	d004      	beq.n	8003098 <HAL_ADC_ConfigChannel+0x7c0>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2a      	ldr	r2, [pc, #168]	; (800313c <HAL_ADC_ConfigChannel+0x864>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x7c4>
 8003098:	4a29      	ldr	r2, [pc, #164]	; (8003140 <HAL_ADC_ConfigChannel+0x868>)
 800309a:	e000      	b.n	800309e <HAL_ADC_ConfigChannel+0x7c6>
 800309c:	4a23      	ldr	r2, [pc, #140]	; (800312c <HAL_ADC_ConfigChannel+0x854>)
 800309e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7fe fd40 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030ae:	e031      	b.n	8003114 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a27      	ldr	r2, [pc, #156]	; (8003154 <HAL_ADC_ConfigChannel+0x87c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d12d      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d127      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1c      	ldr	r2, [pc, #112]	; (800313c <HAL_ADC_ConfigChannel+0x864>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d8:	d004      	beq.n	80030e4 <HAL_ADC_ConfigChannel+0x80c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_ADC_ConfigChannel+0x864>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x810>
 80030e4:	4a16      	ldr	r2, [pc, #88]	; (8003140 <HAL_ADC_ConfigChannel+0x868>)
 80030e6:	e000      	b.n	80030ea <HAL_ADC_ConfigChannel+0x812>
 80030e8:	4a10      	ldr	r2, [pc, #64]	; (800312c <HAL_ADC_ConfigChannel+0x854>)
 80030ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030f2:	4619      	mov	r1, r3
 80030f4:	4610      	mov	r0, r2
 80030f6:	f7fe fd1a 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
 80030fa:	e00c      	b.n	8003116 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800310e:	e002      	b.n	8003116 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003114:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800311e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003122:	4618      	mov	r0, r3
 8003124:	37d8      	adds	r7, #216	; 0xd8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	50000700 	.word	0x50000700
 8003130:	c3210000 	.word	0xc3210000
 8003134:	90c00010 	.word	0x90c00010
 8003138:	50000600 	.word	0x50000600
 800313c:	50000100 	.word	0x50000100
 8003140:	50000300 	.word	0x50000300
 8003144:	20000000 	.word	0x20000000
 8003148:	053e2d63 	.word	0x053e2d63
 800314c:	c7520000 	.word	0xc7520000
 8003150:	50000500 	.word	0x50000500
 8003154:	cb840000 	.word	0xcb840000

08003158 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fefa 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 8003174:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe ff1b 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 8003180:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8098 	beq.w	80032c0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02a      	beq.n	80031f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7f5b      	ldrb	r3, [r3, #29]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d126      	bne.n	80031f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7f1b      	ldrb	r3, [r3, #28]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d122      	bne.n	80031f4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80031b2:	e014      	b.n	80031de <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	4a45      	ldr	r2, [pc, #276]	; (80032cc <ADC_ConversionStop+0x174>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d90d      	bls.n	80031d8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	f043 0210 	orr.w	r2, r3, #16
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e074      	b.n	80032c2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	3301      	adds	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d1e3      	bne.n	80031b4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d014      	beq.n	8003224 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe feb2 	bl	8001f68 <LL_ADC_REG_IsConversionOngoing>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00c      	beq.n	8003224 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fe83 	bl	8001f1a <LL_ADC_IsDisableOngoing>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fe8e 	bl	8001f40 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d014      	beq.n	8003254 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fec1 	bl	8001fb6 <LL_ADC_INJ_IsConversionOngoing>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fe6b 	bl	8001f1a <LL_ADC_IsDisableOngoing>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fe9d 	bl	8001f8e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d005      	beq.n	8003266 <ADC_ConversionStop+0x10e>
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d105      	bne.n	800326c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003260:	230c      	movs	r3, #12
 8003262:	617b      	str	r3, [r7, #20]
        break;
 8003264:	e005      	b.n	8003272 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003266:	2308      	movs	r3, #8
 8003268:	617b      	str	r3, [r7, #20]
        break;
 800326a:	e002      	b.n	8003272 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800326c:	2304      	movs	r3, #4
 800326e:	617b      	str	r3, [r7, #20]
        break;
 8003270:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003272:	f7fe fc1b 	bl	8001aac <HAL_GetTick>
 8003276:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003278:	e01b      	b.n	80032b2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800327a:	f7fe fc17 	bl	8001aac <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b05      	cmp	r3, #5
 8003286:	d914      	bls.n	80032b2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e007      	b.n	80032c2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1dc      	bne.n	800327a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	a33fffff 	.word	0xa33fffff

080032d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fe1c 	bl	8001f1a <LL_ADC_IsDisableOngoing>
 80032e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fe03 	bl	8001ef4 <LL_ADC_IsEnabled>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d047      	beq.n	8003384 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d144      	bne.n	8003384 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030d 	and.w	r3, r3, #13
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10c      	bne.n	8003322 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fddd 	bl	8001ecc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2203      	movs	r2, #3
 8003318:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800331a:	f7fe fbc7 	bl	8001aac <HAL_GetTick>
 800331e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003320:	e029      	b.n	8003376 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	f043 0210 	orr.w	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e023      	b.n	8003386 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800333e:	f7fe fbb5 	bl	8001aac <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d914      	bls.n	8003376 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	f043 0210 	orr.w	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e007      	b.n	8003386 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1dc      	bne.n	800333e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <LL_ADC_IsEnabled>:
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <LL_ADC_IsEnabled+0x18>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <LL_ADC_IsEnabled+0x1a>
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_StartCalibration>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	609a      	str	r2, [r3, #8]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_ADC_IsCalibrationOnGoing>:
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033fa:	d101      	bne.n	8003400 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <LL_ADC_REG_IsConversionOngoing>:
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b04      	cmp	r3, #4
 8003420:	d101      	bne.n	8003426 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_ADCEx_Calibration_Start+0x1c>
 800344c:	2302      	movs	r3, #2
 800344e:	e04d      	b.n	80034ec <HAL_ADCEx_Calibration_Start+0xb8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff39 	bl	80032d0 <ADC_Disable>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d136      	bne.n	80034d6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003470:	f023 0302 	bic.w	r3, r3, #2
 8003474:	f043 0202 	orr.w	r2, r3, #2
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6839      	ldr	r1, [r7, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff96 	bl	80033b4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003488:	e014      	b.n	80034b4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3301      	adds	r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d90d      	bls.n	80034b4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	f023 0312 	bic.w	r3, r3, #18
 80034a0:	f043 0210 	orr.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e01b      	b.n	80034ec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff94 	bl	80033e6 <LL_ADC_IsCalibrationOnGoing>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e2      	bne.n	800348a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	f023 0303 	bic.w	r3, r3, #3
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80034d4:	e005      	b.n	80034e2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	f043 0210 	orr.w	r2, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	0004de01 	.word	0x0004de01

080034f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b0a1      	sub	sp, #132	; 0x84
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003576:	2302      	movs	r3, #2
 8003578:	e0e7      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003582:	2300      	movs	r3, #0
 8003584:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003586:	2300      	movs	r3, #0
 8003588:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003592:	d102      	bne.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	e009      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6e      	ldr	r2, [pc, #440]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d102      	bne.n	80035aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80035a4:	4b6d      	ldr	r3, [pc, #436]	; (800375c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	e001      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10b      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0be      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ff1d 	bl	800340e <LL_ADC_REG_IsConversionOngoing>
 80035d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff17 	bl	800340e <LL_ADC_REG_IsConversionOngoing>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 80a0 	bne.w	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 809c 	bne.w	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f8:	d004      	beq.n	8003604 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a55      	ldr	r2, [pc, #340]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003604:	4b56      	ldr	r3, [pc, #344]	; (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003606:	e000      	b.n	800360a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003608:	4b56      	ldr	r3, [pc, #344]	; (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800360a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d04b      	beq.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003626:	035b      	lsls	r3, r3, #13
 8003628:	430b      	orrs	r3, r1
 800362a:	431a      	orrs	r2, r3
 800362c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003638:	d004      	beq.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a45      	ldr	r2, [pc, #276]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10f      	bne.n	8003664 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003644:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003648:	f7ff fea1 	bl	800338e <LL_ADC_IsEnabled>
 800364c:	4604      	mov	r4, r0
 800364e:	4841      	ldr	r0, [pc, #260]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003650:	f7ff fe9d 	bl	800338e <LL_ADC_IsEnabled>
 8003654:	4603      	mov	r3, r0
 8003656:	4323      	orrs	r3, r4
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e012      	b.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003664:	483c      	ldr	r0, [pc, #240]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003666:	f7ff fe92 	bl	800338e <LL_ADC_IsEnabled>
 800366a:	4604      	mov	r4, r0
 800366c:	483b      	ldr	r0, [pc, #236]	; (800375c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800366e:	f7ff fe8e 	bl	800338e <LL_ADC_IsEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	431c      	orrs	r4, r3
 8003676:	483c      	ldr	r0, [pc, #240]	; (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003678:	f7ff fe89 	bl	800338e <LL_ADC_IsEnabled>
 800367c:	4603      	mov	r3, r0
 800367e:	4323      	orrs	r3, r4
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d056      	beq.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800368e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003696:	f023 030f 	bic.w	r3, r3, #15
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	6811      	ldr	r1, [r2, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	431a      	orrs	r2, r3
 80036a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036aa:	e047      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c0:	d004      	beq.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a23      	ldr	r2, [pc, #140]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10f      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80036cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036d0:	f7ff fe5d 	bl	800338e <LL_ADC_IsEnabled>
 80036d4:	4604      	mov	r4, r0
 80036d6:	481f      	ldr	r0, [pc, #124]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036d8:	f7ff fe59 	bl	800338e <LL_ADC_IsEnabled>
 80036dc:	4603      	mov	r3, r0
 80036de:	4323      	orrs	r3, r4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e012      	b.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80036ec:	481a      	ldr	r0, [pc, #104]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036ee:	f7ff fe4e 	bl	800338e <LL_ADC_IsEnabled>
 80036f2:	4604      	mov	r4, r0
 80036f4:	4819      	ldr	r0, [pc, #100]	; (800375c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036f6:	f7ff fe4a 	bl	800338e <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	431c      	orrs	r4, r3
 80036fe:	481a      	ldr	r0, [pc, #104]	; (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003700:	f7ff fe45 	bl	800338e <LL_ADC_IsEnabled>
 8003704:	4603      	mov	r3, r0
 8003706:	4323      	orrs	r3, r4
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d012      	beq.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800371e:	f023 030f 	bic.w	r3, r3, #15
 8003722:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003724:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003726:	e009      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800373a:	e000      	b.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800373c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003746:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800374a:	4618      	mov	r0, r3
 800374c:	3784      	adds	r7, #132	; 0x84
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	bf00      	nop
 8003754:	50000100 	.word	0x50000100
 8003758:	50000400 	.word	0x50000400
 800375c:	50000500 	.word	0x50000500
 8003760:	50000300 	.word	0x50000300
 8003764:	50000700 	.word	0x50000700
 8003768:	50000600 	.word	0x50000600

0800376c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4907      	ldr	r1, [pc, #28]	; (8003808 <__NVIC_EnableIRQ+0x38>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db0a      	blt.n	8003836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	490c      	ldr	r1, [pc, #48]	; (8003858 <__NVIC_SetPriority+0x4c>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003834:	e00a      	b.n	800384c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4908      	ldr	r1, [pc, #32]	; (800385c <__NVIC_SetPriority+0x50>)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3b04      	subs	r3, #4
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	440b      	add	r3, r1
 800384a:	761a      	strb	r2, [r3, #24]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000e100 	.word	0xe000e100
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf28      	it	cs
 800387e:	2304      	movcs	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3304      	adds	r3, #4
 8003886:	2b06      	cmp	r3, #6
 8003888:	d902      	bls.n	8003890 <NVIC_EncodePriority+0x30>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3b03      	subs	r3, #3
 800388e:	e000      	b.n	8003892 <NVIC_EncodePriority+0x32>
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	401a      	ands	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	4313      	orrs	r3, r2
         );
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	; 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d8:	d301      	bcc.n	80038de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038da:	2301      	movs	r3, #1
 80038dc:	e00f      	b.n	80038fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <SysTick_Config+0x40>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e6:	210f      	movs	r1, #15
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	f7ff ff8e 	bl	800380c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <SysTick_Config+0x40>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <SysTick_Config+0x40>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	e000e010 	.word	0xe000e010

0800390c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff29 	bl	800376c <__NVIC_SetPriorityGrouping>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003930:	f7ff ff40 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 8003934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff ff90 	bl	8003860 <NVIC_EncodePriority>
 8003940:	4602      	mov	r2, r0
 8003942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff5f 	bl	800380c <__NVIC_SetPriority>
}
 800394e:	bf00      	nop
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff33 	bl	80037d0 <__NVIC_EnableIRQ>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ffa4 	bl	80038c8 <SysTick_Config>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e147      	b.n	8003c2e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fe90 	bl	80016d8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0210 	bic.w	r2, r2, #16
 80039c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c8:	f7fe f870 	bl	8001aac <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039ce:	e012      	b.n	80039f6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039d0:	f7fe f86c 	bl	8001aac <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b0a      	cmp	r3, #10
 80039dc:	d90b      	bls.n	80039f6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2203      	movs	r2, #3
 80039ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e11b      	b.n	8003c2e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d0e5      	beq.n	80039d0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a14:	f7fe f84a 	bl	8001aac <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a1a:	e012      	b.n	8003a42 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a1c:	f7fe f846 	bl	8001aac <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b0a      	cmp	r3, #10
 8003a28:	d90b      	bls.n	8003a42 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0f5      	b.n	8003c2e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0e5      	beq.n	8003a1c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0202 	orr.w	r2, r2, #2
 8003a5e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a74      	ldr	r2, [pc, #464]	; (8003c38 <HAL_FDCAN_Init+0x2ac>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d103      	bne.n	8003a72 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003a6a:	4a74      	ldr	r2, [pc, #464]	; (8003c3c <HAL_FDCAN_Init+0x2b0>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7c1b      	ldrb	r3, [r3, #16]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a88:	619a      	str	r2, [r3, #24]
 8003a8a:	e007      	b.n	8003a9c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	7c5b      	ldrb	r3, [r3, #17]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d108      	bne.n	8003ab6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ab2:	619a      	str	r2, [r3, #24]
 8003ab4:	e007      	b.n	8003ac6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ac4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7c9b      	ldrb	r3, [r3, #18]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d108      	bne.n	8003ae0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003adc:	619a      	str	r2, [r3, #24]
 8003ade:	e007      	b.n	8003af0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003b14:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0210 	bic.w	r2, r2, #16
 8003b24:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d108      	bne.n	8003b40 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699a      	ldr	r2, [r3, #24]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0204 	orr.w	r2, r2, #4
 8003b3c:	619a      	str	r2, [r3, #24]
 8003b3e:	e02c      	b.n	8003b9a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d028      	beq.n	8003b9a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d01c      	beq.n	8003b8a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b5e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0210 	orr.w	r2, r2, #16
 8003b6e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d110      	bne.n	8003b9a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0220 	orr.w	r2, r2, #32
 8003b86:	619a      	str	r2, [r3, #24]
 8003b88:	e007      	b.n	8003b9a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0220 	orr.w	r2, r2, #32
 8003b98:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003baa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bb2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bc2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bc4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bce:	d115      	bne.n	8003bfc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bde:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	3b01      	subs	r3, #1
 8003be6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003be8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003bf8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bfa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f814 	bl	8003c40 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40006400 	.word	0x40006400
 8003c3c:	40006500 	.word	0x40006500

08003c40 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c48:	4b30      	ldr	r3, [pc, #192]	; (8003d0c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003c4a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2f      	ldr	r2, [pc, #188]	; (8003d10 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d103      	bne.n	8003c5e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003c5c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d103      	bne.n	8003c70 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8003c6e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	041a      	lsls	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	061a      	lsls	r2, r3, #24
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e005      	b.n	8003cf2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d3f3      	bcc.n	8003ce6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	4000a400 	.word	0x4000a400
 8003d10:	40006800 	.word	0x40006800
 8003d14:	40006c00 	.word	0x40006c00

08003d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d26:	e15a      	b.n	8003fde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 814c 	beq.w	8003fd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d005      	beq.n	8003d58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d130      	bne.n	8003dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d8e:	2201      	movs	r2, #1
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 0201 	and.w	r2, r3, #1
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d017      	beq.n	8003df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d123      	bne.n	8003e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	220f      	movs	r2, #15
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	6939      	ldr	r1, [r7, #16]
 8003e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 0203 	and.w	r2, r3, #3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80a6 	beq.w	8003fd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8c:	4b5b      	ldr	r3, [pc, #364]	; (8003ffc <HAL_GPIO_Init+0x2e4>)
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e90:	4a5a      	ldr	r2, [pc, #360]	; (8003ffc <HAL_GPIO_Init+0x2e4>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6613      	str	r3, [r2, #96]	; 0x60
 8003e98:	4b58      	ldr	r3, [pc, #352]	; (8003ffc <HAL_GPIO_Init+0x2e4>)
 8003e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ea4:	4a56      	ldr	r2, [pc, #344]	; (8004000 <HAL_GPIO_Init+0x2e8>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	220f      	movs	r2, #15
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ece:	d01f      	beq.n	8003f10 <HAL_GPIO_Init+0x1f8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a4c      	ldr	r2, [pc, #304]	; (8004004 <HAL_GPIO_Init+0x2ec>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d019      	beq.n	8003f0c <HAL_GPIO_Init+0x1f4>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a4b      	ldr	r2, [pc, #300]	; (8004008 <HAL_GPIO_Init+0x2f0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <HAL_GPIO_Init+0x1f0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a4a      	ldr	r2, [pc, #296]	; (800400c <HAL_GPIO_Init+0x2f4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00d      	beq.n	8003f04 <HAL_GPIO_Init+0x1ec>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a49      	ldr	r2, [pc, #292]	; (8004010 <HAL_GPIO_Init+0x2f8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <HAL_GPIO_Init+0x1e8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a48      	ldr	r2, [pc, #288]	; (8004014 <HAL_GPIO_Init+0x2fc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <HAL_GPIO_Init+0x1e4>
 8003ef8:	2305      	movs	r3, #5
 8003efa:	e00a      	b.n	8003f12 <HAL_GPIO_Init+0x1fa>
 8003efc:	2306      	movs	r3, #6
 8003efe:	e008      	b.n	8003f12 <HAL_GPIO_Init+0x1fa>
 8003f00:	2304      	movs	r3, #4
 8003f02:	e006      	b.n	8003f12 <HAL_GPIO_Init+0x1fa>
 8003f04:	2303      	movs	r3, #3
 8003f06:	e004      	b.n	8003f12 <HAL_GPIO_Init+0x1fa>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e002      	b.n	8003f12 <HAL_GPIO_Init+0x1fa>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <HAL_GPIO_Init+0x1fa>
 8003f10:	2300      	movs	r3, #0
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	f002 0203 	and.w	r2, r2, #3
 8003f18:	0092      	lsls	r2, r2, #2
 8003f1a:	4093      	lsls	r3, r2
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f22:	4937      	ldr	r1, [pc, #220]	; (8004000 <HAL_GPIO_Init+0x2e8>)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	089b      	lsrs	r3, r3, #2
 8003f28:	3302      	adds	r3, #2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f30:	4b39      	ldr	r3, [pc, #228]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f54:	4a30      	ldr	r2, [pc, #192]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f7e:	4a26      	ldr	r2, [pc, #152]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f84:	4b24      	ldr	r3, [pc, #144]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fae:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fd2:	4a11      	ldr	r2, [pc, #68]	; (8004018 <HAL_GPIO_Init+0x300>)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f47f ae9d 	bne.w	8003d28 <HAL_GPIO_Init+0x10>
  }
}
 8003fee:	bf00      	nop
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40010000 	.word	0x40010000
 8004004:	48000400 	.word	0x48000400
 8004008:	48000800 	.word	0x48000800
 800400c:	48000c00 	.word	0x48000c00
 8004010:	48001000 	.word	0x48001000
 8004014:	48001400 	.word	0x48001400
 8004018:	40010400 	.word	0x40010400

0800401c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
 8004028:	4613      	mov	r3, r2
 800402a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800402c:	787b      	ldrb	r3, [r7, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004038:	e002      	b.n	8004040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d141      	bne.n	80040de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800405a:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d131      	bne.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004068:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406e:	4a46      	ldr	r2, [pc, #280]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004078:	4b43      	ldr	r3, [pc, #268]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004080:	4a41      	ldr	r2, [pc, #260]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004088:	4b40      	ldr	r3, [pc, #256]	; (800418c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2232      	movs	r2, #50	; 0x32
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	4a3f      	ldr	r2, [pc, #252]	; (8004190 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	0c9b      	lsrs	r3, r3, #18
 800409a:	3301      	adds	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409e:	e002      	b.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a6:	4b38      	ldr	r3, [pc, #224]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	d102      	bne.n	80040ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f2      	bne.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ba:	4b33      	ldr	r3, [pc, #204]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d158      	bne.n	800417a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e057      	b.n	800417c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040cc:	4b2e      	ldr	r3, [pc, #184]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d2:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040dc:	e04d      	b.n	800417a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e4:	d141      	bne.n	800416a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f2:	d131      	bne.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040f4:	4b24      	ldr	r3, [pc, #144]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fa:	4a23      	ldr	r2, [pc, #140]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004104:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004112:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004114:	4b1d      	ldr	r3, [pc, #116]	; (800418c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2232      	movs	r2, #50	; 0x32
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	0c9b      	lsrs	r3, r3, #18
 8004126:	3301      	adds	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412a:	e002      	b.n	8004132 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3b01      	subs	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413e:	d102      	bne.n	8004146 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f2      	bne.n	800412c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004152:	d112      	bne.n	800417a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e011      	b.n	800417c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800415e:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004164:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004168:	e007      	b.n	800417a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004174:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004178:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40007000 	.word	0x40007000
 800418c:	20000000 	.word	0x20000000
 8004190:	431bde83 	.word	0x431bde83

08004194 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800419e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a2:	6093      	str	r3, [r2, #8]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000

080041b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e306      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d075      	beq.n	80042be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d2:	4b97      	ldr	r3, [pc, #604]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041dc:	4b94      	ldr	r3, [pc, #592]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_OscConfig+0x3e>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d002      	beq.n	80041f8 <HAL_RCC_OscConfig+0x44>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d10b      	bne.n	8004210 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	4b8d      	ldr	r3, [pc, #564]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d05b      	beq.n	80042bc <HAL_RCC_OscConfig+0x108>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d157      	bne.n	80042bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e2e1      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004218:	d106      	bne.n	8004228 <HAL_RCC_OscConfig+0x74>
 800421a:	4b85      	ldr	r3, [pc, #532]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a84      	ldr	r2, [pc, #528]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e01d      	b.n	8004264 <HAL_RCC_OscConfig+0xb0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x98>
 8004232:	4b7f      	ldr	r3, [pc, #508]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a7e      	ldr	r2, [pc, #504]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b7c      	ldr	r3, [pc, #496]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a7b      	ldr	r2, [pc, #492]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0xb0>
 800424c:	4b78      	ldr	r3, [pc, #480]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a77      	ldr	r2, [pc, #476]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b75      	ldr	r3, [pc, #468]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a74      	ldr	r2, [pc, #464]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800425e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fd fc1e 	bl	8001aac <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7fd fc1a 	bl	8001aac <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e2a6      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004286:	4b6a      	ldr	r3, [pc, #424]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0xc0>
 8004292:	e014      	b.n	80042be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd fc0a 	bl	8001aac <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800429c:	f7fd fc06 	bl	8001aac <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e292      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ae:	4b60      	ldr	r3, [pc, #384]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0xe8>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d075      	beq.n	80043b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ca:	4b59      	ldr	r3, [pc, #356]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d4:	4b56      	ldr	r3, [pc, #344]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	d102      	bne.n	80042ea <HAL_RCC_OscConfig+0x136>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d002      	beq.n	80042f0 <HAL_RCC_OscConfig+0x13c>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d11f      	bne.n	8004330 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f0:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x154>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e265      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b49      	ldr	r3, [pc, #292]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	4946      	ldr	r1, [pc, #280]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800431c:	4b45      	ldr	r3, [pc, #276]	; (8004434 <HAL_RCC_OscConfig+0x280>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7fd fb77 	bl	8001a14 <HAL_InitTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d043      	beq.n	80043b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e251      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d023      	beq.n	8004380 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004338:	4b3d      	ldr	r3, [pc, #244]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a3c      	ldr	r2, [pc, #240]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800433e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fd fbb2 	bl	8001aac <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434c:	f7fd fbae 	bl	8001aac <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e23a      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800435e:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4b31      	ldr	r3, [pc, #196]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	061b      	lsls	r3, r3, #24
 8004378:	492d      	ldr	r1, [pc, #180]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
 800437e:	e01a      	b.n	80043b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004380:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2a      	ldr	r2, [pc, #168]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd fb8e 	bl	8001aac <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004394:	f7fd fb8a 	bl	8001aac <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e216      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x1e0>
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d041      	beq.n	8004446 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01c      	beq.n	8004404 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b19      	ldr	r3, [pc, #100]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d0:	4a17      	ldr	r2, [pc, #92]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fd fb67 	bl	8001aac <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e2:	f7fd fb63 	bl	8001aac <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e1ef      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 80043f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0ef      	beq.n	80043e2 <HAL_RCC_OscConfig+0x22e>
 8004402:	e020      	b.n	8004446 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <HAL_RCC_OscConfig+0x27c>)
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fd fb4a 	bl	8001aac <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441a:	e00d      	b.n	8004438 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441c:	f7fd fb46 	bl	8001aac <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d906      	bls.n	8004438 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1d2      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004438:	4b8c      	ldr	r3, [pc, #560]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 800443a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1ea      	bne.n	800441c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80a6 	beq.w	80045a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004458:	4b84      	ldr	r3, [pc, #528]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_OscConfig+0x2b4>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <HAL_RCC_OscConfig+0x2b6>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	4b7f      	ldr	r3, [pc, #508]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	4a7e      	ldr	r2, [pc, #504]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004478:	6593      	str	r3, [r2, #88]	; 0x58
 800447a:	4b7c      	ldr	r3, [pc, #496]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004486:	2301      	movs	r3, #1
 8004488:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800448a:	4b79      	ldr	r3, [pc, #484]	; (8004670 <HAL_RCC_OscConfig+0x4bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d118      	bne.n	80044c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004496:	4b76      	ldr	r3, [pc, #472]	; (8004670 <HAL_RCC_OscConfig+0x4bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a75      	ldr	r2, [pc, #468]	; (8004670 <HAL_RCC_OscConfig+0x4bc>)
 800449c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a2:	f7fd fb03 	bl	8001aac <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044aa:	f7fd faff 	bl	8001aac <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e18b      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044bc:	4b6c      	ldr	r3, [pc, #432]	; (8004670 <HAL_RCC_OscConfig+0x4bc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d108      	bne.n	80044e2 <HAL_RCC_OscConfig+0x32e>
 80044d0:	4b66      	ldr	r3, [pc, #408]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	4a65      	ldr	r2, [pc, #404]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e0:	e024      	b.n	800452c <HAL_RCC_OscConfig+0x378>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b05      	cmp	r3, #5
 80044e8:	d110      	bne.n	800450c <HAL_RCC_OscConfig+0x358>
 80044ea:	4b60      	ldr	r3, [pc, #384]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	4a5e      	ldr	r2, [pc, #376]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	f043 0304 	orr.w	r3, r3, #4
 80044f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044fa:	4b5c      	ldr	r3, [pc, #368]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	4a5a      	ldr	r2, [pc, #360]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800450a:	e00f      	b.n	800452c <HAL_RCC_OscConfig+0x378>
 800450c:	4b57      	ldr	r3, [pc, #348]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	4a56      	ldr	r2, [pc, #344]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800451c:	4b53      	ldr	r3, [pc, #332]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	4a52      	ldr	r2, [pc, #328]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d016      	beq.n	8004562 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fd faba 	bl	8001aac <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fd fab6 	bl	8001aac <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e140      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	4b46      	ldr	r3, [pc, #280]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ed      	beq.n	800453c <HAL_RCC_OscConfig+0x388>
 8004560:	e015      	b.n	800458e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fd faa3 	bl	8001aac <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd fa9f 	bl	8001aac <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e129      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004580:	4b3a      	ldr	r3, [pc, #232]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ed      	bne.n	800456a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800458e:	7ffb      	ldrb	r3, [r7, #31]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b35      	ldr	r3, [pc, #212]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	4a34      	ldr	r2, [pc, #208]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d03c      	beq.n	8004626 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045b4:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ba:	4a2c      	ldr	r2, [pc, #176]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fd fa72 	bl	8001aac <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045cc:	f7fd fa6e 	bl	8001aac <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e0fa      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045de:	4b23      	ldr	r3, [pc, #140]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ef      	beq.n	80045cc <HAL_RCC_OscConfig+0x418>
 80045ec:	e01b      	b.n	8004626 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ee:	4b1f      	ldr	r3, [pc, #124]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fe:	f7fd fa55 	bl	8001aac <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004606:	f7fd fa51 	bl	8001aac <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e0dd      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 800461a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ef      	bne.n	8004606 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80d1 	beq.w	80047d2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b0c      	cmp	r3, #12
 800463a:	f000 808b 	beq.w	8004754 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d15e      	bne.n	8004704 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a08      	ldr	r2, [pc, #32]	; (800466c <HAL_RCC_OscConfig+0x4b8>)
 800464c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd fa2b 	bl	8001aac <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	e00c      	b.n	8004674 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7fd fa27 	bl	8001aac <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d905      	bls.n	8004674 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0b3      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
 800466c:	40021000 	.word	0x40021000
 8004670:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	4b59      	ldr	r3, [pc, #356]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ec      	bne.n	800465a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004680:	4b56      	ldr	r3, [pc, #344]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	4b56      	ldr	r3, [pc, #344]	; (80047e0 <HAL_RCC_OscConfig+0x62c>)
 8004686:	4013      	ands	r3, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6a11      	ldr	r1, [r2, #32]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004690:	3a01      	subs	r2, #1
 8004692:	0112      	lsls	r2, r2, #4
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800469a:	0212      	lsls	r2, r2, #8
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046a2:	0852      	lsrs	r2, r2, #1
 80046a4:	3a01      	subs	r2, #1
 80046a6:	0552      	lsls	r2, r2, #21
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046ae:	0852      	lsrs	r2, r2, #1
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0652      	lsls	r2, r2, #25
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046ba:	06d2      	lsls	r2, r2, #27
 80046bc:	430a      	orrs	r2, r1
 80046be:	4947      	ldr	r1, [pc, #284]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b45      	ldr	r3, [pc, #276]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a44      	ldr	r2, [pc, #272]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 80046ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d0:	4b42      	ldr	r3, [pc, #264]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a41      	ldr	r2, [pc, #260]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd f9e6 	bl	8001aac <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fd f9e2 	bl	8001aac <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e06e      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f6:	4b39      	ldr	r3, [pc, #228]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x530>
 8004702:	e066      	b.n	80047d2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a34      	ldr	r2, [pc, #208]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 800470a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800470e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004710:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a31      	ldr	r2, [pc, #196]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 8004716:	f023 0303 	bic.w	r3, r3, #3
 800471a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800471c:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a2e      	ldr	r2, [pc, #184]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 8004722:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fd f9be 	bl	8001aac <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004734:	f7fd f9ba 	bl	8001aac <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e046      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004746:	4b25      	ldr	r3, [pc, #148]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x580>
 8004752:	e03e      	b.n	80047d2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e039      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004760:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <HAL_RCC_OscConfig+0x628>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 0203 	and.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	429a      	cmp	r2, r3
 8004772:	d12c      	bne.n	80047ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	3b01      	subs	r3, #1
 8004780:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d123      	bne.n	80047ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d11b      	bne.n	80047ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d113      	bne.n	80047ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	3b01      	subs	r3, #1
 80047b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d109      	bne.n	80047ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	3b01      	subs	r3, #1
 80047c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	019f800c 	.word	0x019f800c

080047e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e11e      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b91      	ldr	r3, [pc, #580]	; (8004a44 <HAL_RCC_ClockConfig+0x260>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d910      	bls.n	800482c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b8e      	ldr	r3, [pc, #568]	; (8004a44 <HAL_RCC_ClockConfig+0x260>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 020f 	bic.w	r2, r3, #15
 8004812:	498c      	ldr	r1, [pc, #560]	; (8004a44 <HAL_RCC_ClockConfig+0x260>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b8a      	ldr	r3, [pc, #552]	; (8004a44 <HAL_RCC_ClockConfig+0x260>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e106      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d073      	beq.n	8004920 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d129      	bne.n	8004894 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0f4      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004850:	f000 f966 	bl	8004b20 <RCC_GetSysClockFreqFromPLLSource>
 8004854:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4a7c      	ldr	r2, [pc, #496]	; (8004a4c <HAL_RCC_ClockConfig+0x268>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d93f      	bls.n	80048de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800485e:	4b7a      	ldr	r3, [pc, #488]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	d033      	beq.n	80048de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800487a:	2b00      	cmp	r3, #0
 800487c:	d12f      	bne.n	80048de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800487e:	4b72      	ldr	r3, [pc, #456]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004886:	4a70      	ldr	r2, [pc, #448]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e024      	b.n	80048de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d107      	bne.n	80048ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489c:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0c6      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ac:	4b66      	ldr	r3, [pc, #408]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0be      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048bc:	f000 f8ce 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4a61      	ldr	r2, [pc, #388]	; (8004a4c <HAL_RCC_ClockConfig+0x268>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d909      	bls.n	80048de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ca:	4b5f      	ldr	r3, [pc, #380]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d2:	4a5d      	ldr	r2, [pc, #372]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4b5a      	ldr	r3, [pc, #360]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4957      	ldr	r1, [pc, #348]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fd f8dc 	bl	8001aac <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fd f8d8 	bl	8001aac <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e095      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b4e      	ldr	r3, [pc, #312]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d1eb      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d023      	beq.n	8004974 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004938:	4b43      	ldr	r3, [pc, #268]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a42      	ldr	r2, [pc, #264]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800493e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004942:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004950:	4b3d      	ldr	r3, [pc, #244]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004958:	4a3b      	ldr	r2, [pc, #236]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800495a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800495e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b39      	ldr	r3, [pc, #228]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4936      	ldr	r1, [pc, #216]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
 8004972:	e008      	b.n	8004986 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d105      	bne.n	8004986 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800497a:	4b33      	ldr	r3, [pc, #204]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	4a32      	ldr	r2, [pc, #200]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004980:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004984:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <HAL_RCC_ClockConfig+0x260>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d21d      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCC_ClockConfig+0x260>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 020f 	bic.w	r2, r3, #15
 800499c:	4929      	ldr	r1, [pc, #164]	; (8004a44 <HAL_RCC_ClockConfig+0x260>)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049a4:	f7fd f882 	bl	8001aac <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7fd f87e 	bl	8001aac <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e03b      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_RCC_ClockConfig+0x260>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d1ed      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049dc:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4917      	ldr	r1, [pc, #92]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fa:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	490f      	ldr	r1, [pc, #60]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a0e:	f000 f825 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	490c      	ldr	r1, [pc, #48]	; (8004a50 <HAL_RCC_ClockConfig+0x26c>)
 8004a20:	5ccb      	ldrb	r3, [r1, r3]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x270>)
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <HAL_RCC_ClockConfig+0x274>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fc ffee 	bl	8001a14 <HAL_InitTick>
 8004a38:	4603      	mov	r3, r0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40022000 	.word	0x40022000
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	04c4b400 	.word	0x04c4b400
 8004a50:	080079e8 	.word	0x080079e8
 8004a54:	20000000 	.word	0x20000000
 8004a58:	20000004 	.word	0x20000004

08004a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a62:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a6e:	4b2a      	ldr	r3, [pc, #168]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e047      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d102      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a80:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e03e      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a86:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d136      	bne.n	8004b00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d10c      	bne.n	8004aca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aba:	68d2      	ldr	r2, [r2, #12]
 8004abc:	0a12      	lsrs	r2, r2, #8
 8004abe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	617b      	str	r3, [r7, #20]
      break;
 8004ac8:	e00c      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aca:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	0a12      	lsrs	r2, r2, #8
 8004ad8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]
      break;
 8004ae2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0e5b      	lsrs	r3, r3, #25
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	3301      	adds	r3, #1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e001      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b04:	693b      	ldr	r3, [r7, #16]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	007a1200 	.word	0x007a1200

08004b20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b26:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d10c      	bne.n	8004b5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b44:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b4e:	68d2      	ldr	r2, [r2, #12]
 8004b50:	0a12      	lsrs	r2, r2, #8
 8004b52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	617b      	str	r3, [r7, #20]
    break;
 8004b5c:	e00c      	b.n	8004b78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b5e:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	4a0e      	ldr	r2, [pc, #56]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b68:	68d2      	ldr	r2, [r2, #12]
 8004b6a:	0a12      	lsrs	r2, r2, #8
 8004b6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b70:	fb02 f303 	mul.w	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]
    break;
 8004b76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	0e5b      	lsrs	r3, r3, #25
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	3301      	adds	r3, #1
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b92:	687b      	ldr	r3, [r7, #4]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	007a1200 	.word	0x007a1200
 8004ba8:	00f42400 	.word	0x00f42400

08004bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bb8:	2300      	movs	r3, #0
 8004bba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8098 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bce:	4b43      	ldr	r3, [pc, #268]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bda:	4b40      	ldr	r3, [pc, #256]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	4a3f      	ldr	r2, [pc, #252]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6593      	str	r3, [r2, #88]	; 0x58
 8004be6:	4b3d      	ldr	r3, [pc, #244]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf6:	4b3a      	ldr	r3, [pc, #232]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a39      	ldr	r2, [pc, #228]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c02:	f7fc ff53 	bl	8001aac <HAL_GetTick>
 8004c06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c08:	e009      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c0a:	f7fc ff4f 	bl	8001aac <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d902      	bls.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c1c:	e005      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c1e:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ef      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d159      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c30:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01e      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d019      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c4c:	4b23      	ldr	r3, [pc, #140]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c68:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	4a1b      	ldr	r2, [pc, #108]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c78:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8a:	f7fc ff0f 	bl	8001aac <HAL_GetTick>
 8004c8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c90:	e00b      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c92:	f7fc ff0b 	bl	8001aac <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d902      	bls.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ca8:	e006      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004caa:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ec      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	4903      	ldr	r1, [pc, #12]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cd6:	7cfb      	ldrb	r3, [r7, #19]
 8004cd8:	74bb      	strb	r3, [r7, #18]
 8004cda:	e005      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce8:	7c7b      	ldrb	r3, [r7, #17]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d105      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cee:	4ba7      	ldr	r3, [pc, #668]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf2:	4aa6      	ldr	r2, [pc, #664]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d06:	4ba1      	ldr	r3, [pc, #644]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f023 0203 	bic.w	r2, r3, #3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	499d      	ldr	r1, [pc, #628]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d28:	4b98      	ldr	r3, [pc, #608]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f023 020c 	bic.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4995      	ldr	r1, [pc, #596]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d4a:	4b90      	ldr	r3, [pc, #576]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	498c      	ldr	r1, [pc, #560]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d6c:	4b87      	ldr	r3, [pc, #540]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	4984      	ldr	r1, [pc, #528]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d8e:	4b7f      	ldr	r3, [pc, #508]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	497b      	ldr	r1, [pc, #492]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004db0:	4b76      	ldr	r3, [pc, #472]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	4973      	ldr	r1, [pc, #460]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd2:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	496a      	ldr	r1, [pc, #424]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004df4:	4b65      	ldr	r3, [pc, #404]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	4962      	ldr	r1, [pc, #392]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e16:	4b5d      	ldr	r3, [pc, #372]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	4959      	ldr	r1, [pc, #356]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e38:	4b54      	ldr	r3, [pc, #336]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3e:	f023 0203 	bic.w	r2, r3, #3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	4951      	ldr	r1, [pc, #324]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e5a:	4b4c      	ldr	r3, [pc, #304]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	4948      	ldr	r1, [pc, #288]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e7c:	4b43      	ldr	r3, [pc, #268]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	4940      	ldr	r1, [pc, #256]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9a:	d105      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e9c:	4b3b      	ldr	r3, [pc, #236]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4a3a      	ldr	r2, [pc, #232]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eb4:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	4932      	ldr	r1, [pc, #200]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed2:	d105      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ede:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004eec:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	4924      	ldr	r1, [pc, #144]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f0c:	4b1f      	ldr	r3, [pc, #124]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d015      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	4916      	ldr	r1, [pc, #88]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f42:	d105      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f44:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a10      	ldr	r2, [pc, #64]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d019      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4908      	ldr	r1, [pc, #32]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7a:	d109      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f7c:	4b03      	ldr	r3, [pc, #12]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a02      	ldr	r2, [pc, #8]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f86:	60d3      	str	r3, [r2, #12]
 8004f88:	e002      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d015      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f9c:	4b29      	ldr	r3, [pc, #164]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	4926      	ldr	r1, [pc, #152]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fba:	d105      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fbc:	4b21      	ldr	r3, [pc, #132]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a20      	ldr	r2, [pc, #128]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	4918      	ldr	r1, [pc, #96]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff2:	d105      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ff4:	4b13      	ldr	r3, [pc, #76]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a12      	ldr	r2, [pc, #72]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800500c:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800500e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005012:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	490a      	ldr	r1, [pc, #40]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800502a:	d105      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005036:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005038:	7cbb      	ldrb	r3, [r7, #18]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000

08005048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e09d      	b.n	8005196 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d108      	bne.n	8005074 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506a:	d009      	beq.n	8005080 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	61da      	str	r2, [r3, #28]
 8005072:	e005      	b.n	8005080 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc fb76 	bl	800178c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050c0:	d902      	bls.n	80050c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e002      	b.n	80050ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050d6:	d007      	beq.n	80050e8 <HAL_SPI_Init+0xa0>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e0:	d002      	beq.n	80050e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	ea42 0103 	orr.w	r1, r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	0c1b      	lsrs	r3, r3, #16
 8005144:	f003 0204 	and.w	r2, r3, #4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005164:	ea42 0103 	orr.w	r1, r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005184:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e049      	b.n	8005244 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7fc fb25 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f000 fcc1 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e049      	b.n	80052f2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f841 	bl	80052fa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f000 fc6a 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e049      	b.n	80053b4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f841 	bl	80053bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 fc09 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0202 	mvn.w	r2, #2
 80053fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fb88 	bl	8005b28 <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fb7a 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fb8b 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b04      	cmp	r3, #4
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b04      	cmp	r3, #4
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0204 	mvn.w	r2, #4
 8005450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2202      	movs	r2, #2
 8005456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fb5e 	bl	8005b28 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fb50 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb61 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b08      	cmp	r3, #8
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0208 	mvn.w	r2, #8
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2204      	movs	r2, #4
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb34 	bl	8005b28 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fb26 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fb37 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b10      	cmp	r3, #16
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0210 	mvn.w	r2, #16
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2208      	movs	r2, #8
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fb0a 	bl	8005b28 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fafc 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fb0d 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d10e      	bne.n	8005554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b01      	cmp	r3, #1
 8005542:	d107      	bne.n	8005554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0201 	mvn.w	r2, #1
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fb fb54 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555e:	2b80      	cmp	r3, #128	; 0x80
 8005560:	d10e      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d107      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 f92a 	bl	80067d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558e:	d10e      	bne.n	80055ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559a:	2b80      	cmp	r3, #128	; 0x80
 800559c:	d107      	bne.n	80055ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f001 f91d 	bl	80067e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d10e      	bne.n	80055da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d107      	bne.n	80055da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fabb 	bl	8005b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d10e      	bne.n	8005606 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d107      	bne.n	8005606 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f06f 0220 	mvn.w	r2, #32
 80055fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 f8dd 	bl	80067c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005614:	d10f      	bne.n	8005636 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005624:	d107      	bne.n	8005636 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800562e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 f8e3 	bl	80067fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005640:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005644:	d10f      	bne.n	8005666 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005654:	d107      	bne.n	8005666 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800565e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 f8d5 	bl	8006810 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005674:	d10f      	bne.n	8005696 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005684:	d107      	bne.n	8005696 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800568e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 f8c7 	bl	8006824 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056a4:	d10f      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056b4:	d107      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 f8b9 	bl	8006838 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_OC_ConfigChannel+0x1e>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e066      	b.n	80057bc <HAL_TIM_OC_ConfigChannel+0xec>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b14      	cmp	r3, #20
 80056fa:	d857      	bhi.n	80057ac <HAL_TIM_OC_ConfigChannel+0xdc>
 80056fc:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <HAL_TIM_OC_ConfigChannel+0x34>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005759 	.word	0x08005759
 8005708:	080057ad 	.word	0x080057ad
 800570c:	080057ad 	.word	0x080057ad
 8005710:	080057ad 	.word	0x080057ad
 8005714:	08005767 	.word	0x08005767
 8005718:	080057ad 	.word	0x080057ad
 800571c:	080057ad 	.word	0x080057ad
 8005720:	080057ad 	.word	0x080057ad
 8005724:	08005775 	.word	0x08005775
 8005728:	080057ad 	.word	0x080057ad
 800572c:	080057ad 	.word	0x080057ad
 8005730:	080057ad 	.word	0x080057ad
 8005734:	08005783 	.word	0x08005783
 8005738:	080057ad 	.word	0x080057ad
 800573c:	080057ad 	.word	0x080057ad
 8005740:	080057ad 	.word	0x080057ad
 8005744:	08005791 	.word	0x08005791
 8005748:	080057ad 	.word	0x080057ad
 800574c:	080057ad 	.word	0x080057ad
 8005750:	080057ad 	.word	0x080057ad
 8005754:	0800579f 	.word	0x0800579f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 faa8 	bl	8005cb4 <TIM_OC1_SetConfig>
      break;
 8005764:	e025      	b.n	80057b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fb3b 	bl	8005de8 <TIM_OC2_SetConfig>
      break;
 8005772:	e01e      	b.n	80057b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fbc8 	bl	8005f10 <TIM_OC3_SetConfig>
      break;
 8005780:	e017      	b.n	80057b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fc53 	bl	8006034 <TIM_OC4_SetConfig>
      break;
 800578e:	e010      	b.n	80057b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fce0 	bl	800615c <TIM_OC5_SetConfig>
      break;
 800579c:	e009      	b.n	80057b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fd43 	bl	8006230 <TIM_OC6_SetConfig>
      break;
 80057aa:	e002      	b.n	80057b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75fb      	strb	r3, [r7, #23]
      break;
 80057b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80057de:	2302      	movs	r3, #2
 80057e0:	e088      	b.n	80058f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d11b      	bne.n	8005828 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6819      	ldr	r1, [r3, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f000 fd82 	bl	8006308 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 020c 	bic.w	r2, r2, #12
 8005812:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6999      	ldr	r1, [r3, #24]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	619a      	str	r2, [r3, #24]
 8005826:	e060      	b.n	80058ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d11c      	bne.n	8005868 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f000 fe06 	bl	800644e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699a      	ldr	r2, [r3, #24]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005850:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6999      	ldr	r1, [r3, #24]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	021a      	lsls	r2, r3, #8
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	619a      	str	r2, [r3, #24]
 8005866:	e040      	b.n	80058ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b08      	cmp	r3, #8
 800586c:	d11b      	bne.n	80058a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f000 fe53 	bl	8006528 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 020c 	bic.w	r2, r2, #12
 8005890:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69d9      	ldr	r1, [r3, #28]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	61da      	str	r2, [r3, #28]
 80058a4:	e021      	b.n	80058ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b0c      	cmp	r3, #12
 80058aa:	d11c      	bne.n	80058e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f000 fe70 	bl	80065a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69da      	ldr	r2, [r3, #28]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69d9      	ldr	r1, [r3, #28]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	61da      	str	r2, [r3, #28]
 80058e4:	e001      	b.n	80058ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_TIM_ConfigClockSource+0x1c>
 8005914:	2302      	movs	r3, #2
 8005916:	e0ee      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x1fa>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800593a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a6b      	ldr	r2, [pc, #428]	; (8005b00 <HAL_TIM_ConfigClockSource+0x204>)
 8005952:	4293      	cmp	r3, r2
 8005954:	f000 80b9 	beq.w	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 8005958:	4a69      	ldr	r2, [pc, #420]	; (8005b00 <HAL_TIM_ConfigClockSource+0x204>)
 800595a:	4293      	cmp	r3, r2
 800595c:	f200 80be 	bhi.w	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 8005960:	4a68      	ldr	r2, [pc, #416]	; (8005b04 <HAL_TIM_ConfigClockSource+0x208>)
 8005962:	4293      	cmp	r3, r2
 8005964:	f000 80b1 	beq.w	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 8005968:	4a66      	ldr	r2, [pc, #408]	; (8005b04 <HAL_TIM_ConfigClockSource+0x208>)
 800596a:	4293      	cmp	r3, r2
 800596c:	f200 80b6 	bhi.w	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 8005970:	4a65      	ldr	r2, [pc, #404]	; (8005b08 <HAL_TIM_ConfigClockSource+0x20c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	f000 80a9 	beq.w	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 8005978:	4a63      	ldr	r2, [pc, #396]	; (8005b08 <HAL_TIM_ConfigClockSource+0x20c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	f200 80ae 	bhi.w	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 8005980:	4a62      	ldr	r2, [pc, #392]	; (8005b0c <HAL_TIM_ConfigClockSource+0x210>)
 8005982:	4293      	cmp	r3, r2
 8005984:	f000 80a1 	beq.w	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 8005988:	4a60      	ldr	r2, [pc, #384]	; (8005b0c <HAL_TIM_ConfigClockSource+0x210>)
 800598a:	4293      	cmp	r3, r2
 800598c:	f200 80a6 	bhi.w	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 8005990:	4a5f      	ldr	r2, [pc, #380]	; (8005b10 <HAL_TIM_ConfigClockSource+0x214>)
 8005992:	4293      	cmp	r3, r2
 8005994:	f000 8099 	beq.w	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 8005998:	4a5d      	ldr	r2, [pc, #372]	; (8005b10 <HAL_TIM_ConfigClockSource+0x214>)
 800599a:	4293      	cmp	r3, r2
 800599c:	f200 809e 	bhi.w	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 80059a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80059a4:	f000 8091 	beq.w	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 80059a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80059ac:	f200 8096 	bhi.w	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 80059b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b4:	f000 8089 	beq.w	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 80059b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059bc:	f200 808e 	bhi.w	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 80059c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059c4:	d03e      	beq.n	8005a44 <HAL_TIM_ConfigClockSource+0x148>
 80059c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ca:	f200 8087 	bhi.w	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d2:	f000 8086 	beq.w	8005ae2 <HAL_TIM_ConfigClockSource+0x1e6>
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059da:	d87f      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 80059dc:	2b70      	cmp	r3, #112	; 0x70
 80059de:	d01a      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x11a>
 80059e0:	2b70      	cmp	r3, #112	; 0x70
 80059e2:	d87b      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 80059e4:	2b60      	cmp	r3, #96	; 0x60
 80059e6:	d050      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x18e>
 80059e8:	2b60      	cmp	r3, #96	; 0x60
 80059ea:	d877      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 80059ec:	2b50      	cmp	r3, #80	; 0x50
 80059ee:	d03c      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x16e>
 80059f0:	2b50      	cmp	r3, #80	; 0x50
 80059f2:	d873      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d058      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x1ae>
 80059f8:	2b40      	cmp	r3, #64	; 0x40
 80059fa:	d86f      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 80059fc:	2b30      	cmp	r3, #48	; 0x30
 80059fe:	d064      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 8005a00:	2b30      	cmp	r3, #48	; 0x30
 8005a02:	d86b      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d060      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d867      	bhi.n	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d05c      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d05a      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x1ce>
 8005a14:	e062      	b.n	8005adc <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6899      	ldr	r1, [r3, #8]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f000 fe15 	bl	8006654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	609a      	str	r2, [r3, #8]
      break;
 8005a42:	e04f      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	6899      	ldr	r1, [r3, #8]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f000 fdfe 	bl	8006654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a66:	609a      	str	r2, [r3, #8]
      break;
 8005a68:	e03c      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 fcba 	bl	80063f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2150      	movs	r1, #80	; 0x50
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fdc9 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8005a88:	e02c      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 fd16 	bl	80064c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2160      	movs	r1, #96	; 0x60
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fdb9 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e01c      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6859      	ldr	r1, [r3, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f000 fc9a 	bl	80063f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2140      	movs	r1, #64	; 0x40
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fda9 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8005ac8:	e00c      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	f000 fda0 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8005ada:	e003      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae0:	e000      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8005ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	00100070 	.word	0x00100070
 8005b04:	00100050 	.word	0x00100050
 8005b08:	00100040 	.word	0x00100040
 8005b0c:	00100030 	.word	0x00100030
 8005b10:	00100020 	.word	0x00100020

08005b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a46      	ldr	r2, [pc, #280]	; (8005c90 <TIM_Base_SetConfig+0x12c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d017      	beq.n	8005bac <TIM_Base_SetConfig+0x48>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b82:	d013      	beq.n	8005bac <TIM_Base_SetConfig+0x48>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a43      	ldr	r2, [pc, #268]	; (8005c94 <TIM_Base_SetConfig+0x130>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00f      	beq.n	8005bac <TIM_Base_SetConfig+0x48>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a42      	ldr	r2, [pc, #264]	; (8005c98 <TIM_Base_SetConfig+0x134>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00b      	beq.n	8005bac <TIM_Base_SetConfig+0x48>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a41      	ldr	r2, [pc, #260]	; (8005c9c <TIM_Base_SetConfig+0x138>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d007      	beq.n	8005bac <TIM_Base_SetConfig+0x48>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a40      	ldr	r2, [pc, #256]	; (8005ca0 <TIM_Base_SetConfig+0x13c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_Base_SetConfig+0x48>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3f      	ldr	r2, [pc, #252]	; (8005ca4 <TIM_Base_SetConfig+0x140>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d108      	bne.n	8005bbe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a33      	ldr	r2, [pc, #204]	; (8005c90 <TIM_Base_SetConfig+0x12c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d023      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bcc:	d01f      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a30      	ldr	r2, [pc, #192]	; (8005c94 <TIM_Base_SetConfig+0x130>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01b      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2f      	ldr	r2, [pc, #188]	; (8005c98 <TIM_Base_SetConfig+0x134>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d017      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2e      	ldr	r2, [pc, #184]	; (8005c9c <TIM_Base_SetConfig+0x138>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2d      	ldr	r2, [pc, #180]	; (8005ca0 <TIM_Base_SetConfig+0x13c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00f      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2d      	ldr	r2, [pc, #180]	; (8005ca8 <TIM_Base_SetConfig+0x144>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <TIM_Base_SetConfig+0x148>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <TIM_Base_SetConfig+0x14c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a26      	ldr	r2, [pc, #152]	; (8005ca4 <TIM_Base_SetConfig+0x140>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d108      	bne.n	8005c20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a12      	ldr	r2, [pc, #72]	; (8005c90 <TIM_Base_SetConfig+0x12c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d013      	beq.n	8005c74 <TIM_Base_SetConfig+0x110>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <TIM_Base_SetConfig+0x13c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00f      	beq.n	8005c74 <TIM_Base_SetConfig+0x110>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a14      	ldr	r2, [pc, #80]	; (8005ca8 <TIM_Base_SetConfig+0x144>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <TIM_Base_SetConfig+0x110>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a13      	ldr	r2, [pc, #76]	; (8005cac <TIM_Base_SetConfig+0x148>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <TIM_Base_SetConfig+0x110>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a12      	ldr	r2, [pc, #72]	; (8005cb0 <TIM_Base_SetConfig+0x14c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_Base_SetConfig+0x110>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <TIM_Base_SetConfig+0x140>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d103      	bne.n	8005c7c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	615a      	str	r2, [r3, #20]
}
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800
 8005c9c:	40000c00 	.word	0x40000c00
 8005ca0:	40013400 	.word	0x40013400
 8005ca4:	40015000 	.word	0x40015000
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800

08005cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f023 0201 	bic.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f023 0302 	bic.w	r3, r3, #2
 8005d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a30      	ldr	r2, [pc, #192]	; (8005dd0 <TIM_OC1_SetConfig+0x11c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d013      	beq.n	8005d3c <TIM_OC1_SetConfig+0x88>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a2f      	ldr	r2, [pc, #188]	; (8005dd4 <TIM_OC1_SetConfig+0x120>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00f      	beq.n	8005d3c <TIM_OC1_SetConfig+0x88>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a2e      	ldr	r2, [pc, #184]	; (8005dd8 <TIM_OC1_SetConfig+0x124>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00b      	beq.n	8005d3c <TIM_OC1_SetConfig+0x88>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a2d      	ldr	r2, [pc, #180]	; (8005ddc <TIM_OC1_SetConfig+0x128>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d007      	beq.n	8005d3c <TIM_OC1_SetConfig+0x88>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a2c      	ldr	r2, [pc, #176]	; (8005de0 <TIM_OC1_SetConfig+0x12c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_OC1_SetConfig+0x88>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a2b      	ldr	r2, [pc, #172]	; (8005de4 <TIM_OC1_SetConfig+0x130>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d10c      	bne.n	8005d56 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0308 	bic.w	r3, r3, #8
 8005d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f023 0304 	bic.w	r3, r3, #4
 8005d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <TIM_OC1_SetConfig+0x11c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <TIM_OC1_SetConfig+0xd2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <TIM_OC1_SetConfig+0x120>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00f      	beq.n	8005d86 <TIM_OC1_SetConfig+0xd2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <TIM_OC1_SetConfig+0x124>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00b      	beq.n	8005d86 <TIM_OC1_SetConfig+0xd2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1a      	ldr	r2, [pc, #104]	; (8005ddc <TIM_OC1_SetConfig+0x128>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <TIM_OC1_SetConfig+0xd2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <TIM_OC1_SetConfig+0x12c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_OC1_SetConfig+0xd2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <TIM_OC1_SetConfig+0x130>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d111      	bne.n	8005daa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	621a      	str	r2, [r3, #32]
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40013400 	.word	0x40013400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800
 8005de4:	40015000 	.word	0x40015000

08005de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0210 	bic.w	r2, r3, #16
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0320 	bic.w	r3, r3, #32
 8005e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <TIM_OC2_SetConfig+0x110>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d007      	beq.n	8005e5c <TIM_OC2_SetConfig+0x74>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <TIM_OC2_SetConfig+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_OC2_SetConfig+0x74>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a2a      	ldr	r2, [pc, #168]	; (8005f00 <TIM_OC2_SetConfig+0x118>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d10d      	bne.n	8005e78 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <TIM_OC2_SetConfig+0x110>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d013      	beq.n	8005ea8 <TIM_OC2_SetConfig+0xc0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <TIM_OC2_SetConfig+0x114>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00f      	beq.n	8005ea8 <TIM_OC2_SetConfig+0xc0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a1e      	ldr	r2, [pc, #120]	; (8005f04 <TIM_OC2_SetConfig+0x11c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00b      	beq.n	8005ea8 <TIM_OC2_SetConfig+0xc0>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a1d      	ldr	r2, [pc, #116]	; (8005f08 <TIM_OC2_SetConfig+0x120>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d007      	beq.n	8005ea8 <TIM_OC2_SetConfig+0xc0>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a1c      	ldr	r2, [pc, #112]	; (8005f0c <TIM_OC2_SetConfig+0x124>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_OC2_SetConfig+0xc0>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a17      	ldr	r2, [pc, #92]	; (8005f00 <TIM_OC2_SetConfig+0x118>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d113      	bne.n	8005ed0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40012c00 	.word	0x40012c00
 8005efc:	40013400 	.word	0x40013400
 8005f00:	40015000 	.word	0x40015000
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40014400 	.word	0x40014400
 8005f0c:	40014800 	.word	0x40014800

08005f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a2b      	ldr	r2, [pc, #172]	; (800601c <TIM_OC3_SetConfig+0x10c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d007      	beq.n	8005f82 <TIM_OC3_SetConfig+0x72>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2a      	ldr	r2, [pc, #168]	; (8006020 <TIM_OC3_SetConfig+0x110>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC3_SetConfig+0x72>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a29      	ldr	r2, [pc, #164]	; (8006024 <TIM_OC3_SetConfig+0x114>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d10d      	bne.n	8005f9e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1e      	ldr	r2, [pc, #120]	; (800601c <TIM_OC3_SetConfig+0x10c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d013      	beq.n	8005fce <TIM_OC3_SetConfig+0xbe>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <TIM_OC3_SetConfig+0x110>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00f      	beq.n	8005fce <TIM_OC3_SetConfig+0xbe>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <TIM_OC3_SetConfig+0x118>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00b      	beq.n	8005fce <TIM_OC3_SetConfig+0xbe>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1c      	ldr	r2, [pc, #112]	; (800602c <TIM_OC3_SetConfig+0x11c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d007      	beq.n	8005fce <TIM_OC3_SetConfig+0xbe>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <TIM_OC3_SetConfig+0x120>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_OC3_SetConfig+0xbe>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a16      	ldr	r2, [pc, #88]	; (8006024 <TIM_OC3_SetConfig+0x114>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d113      	bne.n	8005ff6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40015000 	.word	0x40015000
 8006028:	40014000 	.word	0x40014000
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800

08006034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	031b      	lsls	r3, r3, #12
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a2c      	ldr	r2, [pc, #176]	; (8006144 <TIM_OC4_SetConfig+0x110>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_OC4_SetConfig+0x74>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <TIM_OC4_SetConfig+0x114>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC4_SetConfig+0x74>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a2a      	ldr	r2, [pc, #168]	; (800614c <TIM_OC4_SetConfig+0x118>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d10d      	bne.n	80060c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <TIM_OC4_SetConfig+0x110>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <TIM_OC4_SetConfig+0xc0>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <TIM_OC4_SetConfig+0x114>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00f      	beq.n	80060f4 <TIM_OC4_SetConfig+0xc0>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <TIM_OC4_SetConfig+0x11c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00b      	beq.n	80060f4 <TIM_OC4_SetConfig+0xc0>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <TIM_OC4_SetConfig+0x120>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d007      	beq.n	80060f4 <TIM_OC4_SetConfig+0xc0>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <TIM_OC4_SetConfig+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC4_SetConfig+0xc0>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a17      	ldr	r2, [pc, #92]	; (800614c <TIM_OC4_SetConfig+0x118>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d113      	bne.n	800611c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006102:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40013400 	.word	0x40013400
 800614c:	40015000 	.word	0x40015000
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800

0800615c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	041b      	lsls	r3, r3, #16
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a19      	ldr	r2, [pc, #100]	; (8006218 <TIM_OC5_SetConfig+0xbc>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d013      	beq.n	80061de <TIM_OC5_SetConfig+0x82>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a18      	ldr	r2, [pc, #96]	; (800621c <TIM_OC5_SetConfig+0xc0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00f      	beq.n	80061de <TIM_OC5_SetConfig+0x82>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a17      	ldr	r2, [pc, #92]	; (8006220 <TIM_OC5_SetConfig+0xc4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00b      	beq.n	80061de <TIM_OC5_SetConfig+0x82>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a16      	ldr	r2, [pc, #88]	; (8006224 <TIM_OC5_SetConfig+0xc8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d007      	beq.n	80061de <TIM_OC5_SetConfig+0x82>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a15      	ldr	r2, [pc, #84]	; (8006228 <TIM_OC5_SetConfig+0xcc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <TIM_OC5_SetConfig+0x82>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a14      	ldr	r2, [pc, #80]	; (800622c <TIM_OC5_SetConfig+0xd0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d109      	bne.n	80061f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	621a      	str	r2, [r3, #32]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40013400 	.word	0x40013400
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800
 800622c:	40015000 	.word	0x40015000

08006230 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800625e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	051b      	lsls	r3, r3, #20
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a1a      	ldr	r2, [pc, #104]	; (80062f0 <TIM_OC6_SetConfig+0xc0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <TIM_OC6_SetConfig+0x84>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a19      	ldr	r2, [pc, #100]	; (80062f4 <TIM_OC6_SetConfig+0xc4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00f      	beq.n	80062b4 <TIM_OC6_SetConfig+0x84>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <TIM_OC6_SetConfig+0xc8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_OC6_SetConfig+0x84>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a17      	ldr	r2, [pc, #92]	; (80062fc <TIM_OC6_SetConfig+0xcc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_OC6_SetConfig+0x84>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a16      	ldr	r2, [pc, #88]	; (8006300 <TIM_OC6_SetConfig+0xd0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC6_SetConfig+0x84>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a15      	ldr	r2, [pc, #84]	; (8006304 <TIM_OC6_SetConfig+0xd4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d109      	bne.n	80062c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40013400 	.word	0x40013400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800
 8006304:	40015000 	.word	0x40015000

08006308 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f023 0201 	bic.w	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4a28      	ldr	r2, [pc, #160]	; (80063d4 <TIM_TI1_SetConfig+0xcc>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01b      	beq.n	800636e <TIM_TI1_SetConfig+0x66>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d017      	beq.n	800636e <TIM_TI1_SetConfig+0x66>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4a25      	ldr	r2, [pc, #148]	; (80063d8 <TIM_TI1_SetConfig+0xd0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <TIM_TI1_SetConfig+0x66>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a24      	ldr	r2, [pc, #144]	; (80063dc <TIM_TI1_SetConfig+0xd4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00f      	beq.n	800636e <TIM_TI1_SetConfig+0x66>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4a23      	ldr	r2, [pc, #140]	; (80063e0 <TIM_TI1_SetConfig+0xd8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_TI1_SetConfig+0x66>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <TIM_TI1_SetConfig+0xdc>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <TIM_TI1_SetConfig+0x66>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <TIM_TI1_SetConfig+0xe0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_TI1_SetConfig+0x66>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a20      	ldr	r2, [pc, #128]	; (80063ec <TIM_TI1_SetConfig+0xe4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d101      	bne.n	8006372 <TIM_TI1_SetConfig+0x6a>
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <TIM_TI1_SetConfig+0x6c>
 8006372:	2300      	movs	r3, #0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f023 0303 	bic.w	r3, r3, #3
 800637e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e003      	b.n	8006392 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f023 030a 	bic.w	r3, r3, #10
 80063ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f003 030a 	and.w	r3, r3, #10
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	40000400 	.word	0x40000400
 80063dc:	40000800 	.word	0x40000800
 80063e0:	40000c00 	.word	0x40000c00
 80063e4:	40013400 	.word	0x40013400
 80063e8:	40014000 	.word	0x40014000
 80063ec:	40015000 	.word	0x40015000

080063f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f023 0201 	bic.w	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800641a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f023 030a 	bic.w	r3, r3, #10
 800642c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800644e:	b480      	push	{r7}
 8006450:	b087      	sub	sp, #28
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f023 0210 	bic.w	r2, r3, #16
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800648c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	031b      	lsls	r3, r3, #12
 8006492:	b29b      	uxth	r3, r3
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	621a      	str	r2, [r3, #32]
}
 80064bc:	bf00      	nop
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f023 0210 	bic.w	r2, r3, #16
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	031b      	lsls	r3, r3, #12
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006504:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	621a      	str	r2, [r3, #32]
}
 800651c:	bf00      	nop
 800651e:	371c      	adds	r7, #28
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f023 0303 	bic.w	r3, r3, #3
 8006554:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006564:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	b2db      	uxtb	r3, r3
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006578:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	621a      	str	r2, [r3, #32]
}
 8006594:	bf00      	nop
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	031b      	lsls	r3, r3, #12
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80065f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	031b      	lsls	r3, r3, #12
 80065f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	f043 0307 	orr.w	r3, r3, #7
 8006640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	609a      	str	r2, [r3, #8]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	021a      	lsls	r2, r3, #8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	431a      	orrs	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4313      	orrs	r3, r2
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	609a      	str	r2, [r3, #8]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e074      	b.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a34      	ldr	r2, [pc, #208]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d009      	beq.n	80066ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a33      	ldr	r2, [pc, #204]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d004      	beq.n	80066ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a31      	ldr	r2, [pc, #196]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a21      	ldr	r2, [pc, #132]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d022      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672c:	d01d      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1f      	ldr	r2, [pc, #124]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d018      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1c      	ldr	r2, [pc, #112]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00e      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a18      	ldr	r2, [pc, #96]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a11      	ldr	r2, [pc, #68]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d10c      	bne.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4313      	orrs	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40013400 	.word	0x40013400
 80067ac:	40015000 	.word	0x40015000
 80067b0:	40000400 	.word	0x40000400
 80067b4:	40000800 	.word	0x40000800
 80067b8:	40000c00 	.word	0x40000c00
 80067bc:	40014000 	.word	0x40014000

080067c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	0000      	movs	r0, r0
	...

08006850 <cos>:
 8006850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006852:	ec53 2b10 	vmov	r2, r3, d0
 8006856:	4826      	ldr	r0, [pc, #152]	; (80068f0 <cos+0xa0>)
 8006858:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800685c:	4281      	cmp	r1, r0
 800685e:	dc06      	bgt.n	800686e <cos+0x1e>
 8006860:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80068e8 <cos+0x98>
 8006864:	b005      	add	sp, #20
 8006866:	f85d eb04 	ldr.w	lr, [sp], #4
 800686a:	f000 b89d 	b.w	80069a8 <__kernel_cos>
 800686e:	4821      	ldr	r0, [pc, #132]	; (80068f4 <cos+0xa4>)
 8006870:	4281      	cmp	r1, r0
 8006872:	dd09      	ble.n	8006888 <cos+0x38>
 8006874:	ee10 0a10 	vmov	r0, s0
 8006878:	4619      	mov	r1, r3
 800687a:	f7f9 fcd1 	bl	8000220 <__aeabi_dsub>
 800687e:	ec41 0b10 	vmov	d0, r0, r1
 8006882:	b005      	add	sp, #20
 8006884:	f85d fb04 	ldr.w	pc, [sp], #4
 8006888:	4668      	mov	r0, sp
 800688a:	f000 fa15 	bl	8006cb8 <__ieee754_rem_pio2>
 800688e:	f000 0003 	and.w	r0, r0, #3
 8006892:	2801      	cmp	r0, #1
 8006894:	d00b      	beq.n	80068ae <cos+0x5e>
 8006896:	2802      	cmp	r0, #2
 8006898:	d016      	beq.n	80068c8 <cos+0x78>
 800689a:	b9e0      	cbnz	r0, 80068d6 <cos+0x86>
 800689c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068a0:	ed9d 0b00 	vldr	d0, [sp]
 80068a4:	f000 f880 	bl	80069a8 <__kernel_cos>
 80068a8:	ec51 0b10 	vmov	r0, r1, d0
 80068ac:	e7e7      	b.n	800687e <cos+0x2e>
 80068ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068b2:	ed9d 0b00 	vldr	d0, [sp]
 80068b6:	f000 f93f 	bl	8006b38 <__kernel_sin>
 80068ba:	ec53 2b10 	vmov	r2, r3, d0
 80068be:	ee10 0a10 	vmov	r0, s0
 80068c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80068c6:	e7da      	b.n	800687e <cos+0x2e>
 80068c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068cc:	ed9d 0b00 	vldr	d0, [sp]
 80068d0:	f000 f86a 	bl	80069a8 <__kernel_cos>
 80068d4:	e7f1      	b.n	80068ba <cos+0x6a>
 80068d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068da:	ed9d 0b00 	vldr	d0, [sp]
 80068de:	2001      	movs	r0, #1
 80068e0:	f000 f92a 	bl	8006b38 <__kernel_sin>
 80068e4:	e7e0      	b.n	80068a8 <cos+0x58>
 80068e6:	bf00      	nop
	...
 80068f0:	3fe921fb 	.word	0x3fe921fb
 80068f4:	7fefffff 	.word	0x7fefffff

080068f8 <sin>:
 80068f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068fa:	ec53 2b10 	vmov	r2, r3, d0
 80068fe:	4828      	ldr	r0, [pc, #160]	; (80069a0 <sin+0xa8>)
 8006900:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006904:	4281      	cmp	r1, r0
 8006906:	dc07      	bgt.n	8006918 <sin+0x20>
 8006908:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006998 <sin+0xa0>
 800690c:	2000      	movs	r0, #0
 800690e:	b005      	add	sp, #20
 8006910:	f85d eb04 	ldr.w	lr, [sp], #4
 8006914:	f000 b910 	b.w	8006b38 <__kernel_sin>
 8006918:	4822      	ldr	r0, [pc, #136]	; (80069a4 <sin+0xac>)
 800691a:	4281      	cmp	r1, r0
 800691c:	dd09      	ble.n	8006932 <sin+0x3a>
 800691e:	ee10 0a10 	vmov	r0, s0
 8006922:	4619      	mov	r1, r3
 8006924:	f7f9 fc7c 	bl	8000220 <__aeabi_dsub>
 8006928:	ec41 0b10 	vmov	d0, r0, r1
 800692c:	b005      	add	sp, #20
 800692e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006932:	4668      	mov	r0, sp
 8006934:	f000 f9c0 	bl	8006cb8 <__ieee754_rem_pio2>
 8006938:	f000 0003 	and.w	r0, r0, #3
 800693c:	2801      	cmp	r0, #1
 800693e:	d00c      	beq.n	800695a <sin+0x62>
 8006940:	2802      	cmp	r0, #2
 8006942:	d011      	beq.n	8006968 <sin+0x70>
 8006944:	b9f0      	cbnz	r0, 8006984 <sin+0x8c>
 8006946:	ed9d 1b02 	vldr	d1, [sp, #8]
 800694a:	ed9d 0b00 	vldr	d0, [sp]
 800694e:	2001      	movs	r0, #1
 8006950:	f000 f8f2 	bl	8006b38 <__kernel_sin>
 8006954:	ec51 0b10 	vmov	r0, r1, d0
 8006958:	e7e6      	b.n	8006928 <sin+0x30>
 800695a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800695e:	ed9d 0b00 	vldr	d0, [sp]
 8006962:	f000 f821 	bl	80069a8 <__kernel_cos>
 8006966:	e7f5      	b.n	8006954 <sin+0x5c>
 8006968:	ed9d 1b02 	vldr	d1, [sp, #8]
 800696c:	ed9d 0b00 	vldr	d0, [sp]
 8006970:	2001      	movs	r0, #1
 8006972:	f000 f8e1 	bl	8006b38 <__kernel_sin>
 8006976:	ec53 2b10 	vmov	r2, r3, d0
 800697a:	ee10 0a10 	vmov	r0, s0
 800697e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006982:	e7d1      	b.n	8006928 <sin+0x30>
 8006984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006988:	ed9d 0b00 	vldr	d0, [sp]
 800698c:	f000 f80c 	bl	80069a8 <__kernel_cos>
 8006990:	e7f1      	b.n	8006976 <sin+0x7e>
 8006992:	bf00      	nop
 8006994:	f3af 8000 	nop.w
	...
 80069a0:	3fe921fb 	.word	0x3fe921fb
 80069a4:	7fefffff 	.word	0x7fefffff

080069a8 <__kernel_cos>:
 80069a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	ec57 6b10 	vmov	r6, r7, d0
 80069b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80069b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80069b8:	ed8d 1b00 	vstr	d1, [sp]
 80069bc:	da07      	bge.n	80069ce <__kernel_cos+0x26>
 80069be:	ee10 0a10 	vmov	r0, s0
 80069c2:	4639      	mov	r1, r7
 80069c4:	f7fa f87e 	bl	8000ac4 <__aeabi_d2iz>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f000 8088 	beq.w	8006ade <__kernel_cos+0x136>
 80069ce:	4632      	mov	r2, r6
 80069d0:	463b      	mov	r3, r7
 80069d2:	4630      	mov	r0, r6
 80069d4:	4639      	mov	r1, r7
 80069d6:	f7f9 fddb 	bl	8000590 <__aeabi_dmul>
 80069da:	4b51      	ldr	r3, [pc, #324]	; (8006b20 <__kernel_cos+0x178>)
 80069dc:	2200      	movs	r2, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	460d      	mov	r5, r1
 80069e2:	f7f9 fdd5 	bl	8000590 <__aeabi_dmul>
 80069e6:	a340      	add	r3, pc, #256	; (adr r3, 8006ae8 <__kernel_cos+0x140>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	4682      	mov	sl, r0
 80069ee:	468b      	mov	fp, r1
 80069f0:	4620      	mov	r0, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	f7f9 fdcc 	bl	8000590 <__aeabi_dmul>
 80069f8:	a33d      	add	r3, pc, #244	; (adr r3, 8006af0 <__kernel_cos+0x148>)
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f7f9 fc11 	bl	8000224 <__adddf3>
 8006a02:	4622      	mov	r2, r4
 8006a04:	462b      	mov	r3, r5
 8006a06:	f7f9 fdc3 	bl	8000590 <__aeabi_dmul>
 8006a0a:	a33b      	add	r3, pc, #236	; (adr r3, 8006af8 <__kernel_cos+0x150>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fc06 	bl	8000220 <__aeabi_dsub>
 8006a14:	4622      	mov	r2, r4
 8006a16:	462b      	mov	r3, r5
 8006a18:	f7f9 fdba 	bl	8000590 <__aeabi_dmul>
 8006a1c:	a338      	add	r3, pc, #224	; (adr r3, 8006b00 <__kernel_cos+0x158>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 fbff 	bl	8000224 <__adddf3>
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	f7f9 fdb1 	bl	8000590 <__aeabi_dmul>
 8006a2e:	a336      	add	r3, pc, #216	; (adr r3, 8006b08 <__kernel_cos+0x160>)
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f7f9 fbf4 	bl	8000220 <__aeabi_dsub>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	462b      	mov	r3, r5
 8006a3c:	f7f9 fda8 	bl	8000590 <__aeabi_dmul>
 8006a40:	a333      	add	r3, pc, #204	; (adr r3, 8006b10 <__kernel_cos+0x168>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fbed 	bl	8000224 <__adddf3>
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	f7f9 fd9f 	bl	8000590 <__aeabi_dmul>
 8006a52:	4622      	mov	r2, r4
 8006a54:	462b      	mov	r3, r5
 8006a56:	f7f9 fd9b 	bl	8000590 <__aeabi_dmul>
 8006a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a5e:	4604      	mov	r4, r0
 8006a60:	460d      	mov	r5, r1
 8006a62:	4630      	mov	r0, r6
 8006a64:	4639      	mov	r1, r7
 8006a66:	f7f9 fd93 	bl	8000590 <__aeabi_dmul>
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	4629      	mov	r1, r5
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7f9 fbd5 	bl	8000220 <__aeabi_dsub>
 8006a76:	4b2b      	ldr	r3, [pc, #172]	; (8006b24 <__kernel_cos+0x17c>)
 8006a78:	4598      	cmp	r8, r3
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	dc10      	bgt.n	8006aa2 <__kernel_cos+0xfa>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4650      	mov	r0, sl
 8006a86:	4659      	mov	r1, fp
 8006a88:	f7f9 fbca 	bl	8000220 <__aeabi_dsub>
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4926      	ldr	r1, [pc, #152]	; (8006b28 <__kernel_cos+0x180>)
 8006a90:	4602      	mov	r2, r0
 8006a92:	2000      	movs	r0, #0
 8006a94:	f7f9 fbc4 	bl	8000220 <__aeabi_dsub>
 8006a98:	ec41 0b10 	vmov	d0, r0, r1
 8006a9c:	b003      	add	sp, #12
 8006a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa2:	4b22      	ldr	r3, [pc, #136]	; (8006b2c <__kernel_cos+0x184>)
 8006aa4:	4920      	ldr	r1, [pc, #128]	; (8006b28 <__kernel_cos+0x180>)
 8006aa6:	4598      	cmp	r8, r3
 8006aa8:	bfcc      	ite	gt
 8006aaa:	4d21      	ldrgt	r5, [pc, #132]	; (8006b30 <__kernel_cos+0x188>)
 8006aac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006ab0:	2400      	movs	r4, #0
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	f7f9 fbb2 	bl	8000220 <__aeabi_dsub>
 8006abc:	4622      	mov	r2, r4
 8006abe:	4680      	mov	r8, r0
 8006ac0:	4689      	mov	r9, r1
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	4650      	mov	r0, sl
 8006ac6:	4659      	mov	r1, fp
 8006ac8:	f7f9 fbaa 	bl	8000220 <__aeabi_dsub>
 8006acc:	4632      	mov	r2, r6
 8006ace:	463b      	mov	r3, r7
 8006ad0:	f7f9 fba6 	bl	8000220 <__aeabi_dsub>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4640      	mov	r0, r8
 8006ada:	4649      	mov	r1, r9
 8006adc:	e7da      	b.n	8006a94 <__kernel_cos+0xec>
 8006ade:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006b18 <__kernel_cos+0x170>
 8006ae2:	e7db      	b.n	8006a9c <__kernel_cos+0xf4>
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	be8838d4 	.word	0xbe8838d4
 8006aec:	bda8fae9 	.word	0xbda8fae9
 8006af0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006af4:	3e21ee9e 	.word	0x3e21ee9e
 8006af8:	809c52ad 	.word	0x809c52ad
 8006afc:	3e927e4f 	.word	0x3e927e4f
 8006b00:	19cb1590 	.word	0x19cb1590
 8006b04:	3efa01a0 	.word	0x3efa01a0
 8006b08:	16c15177 	.word	0x16c15177
 8006b0c:	3f56c16c 	.word	0x3f56c16c
 8006b10:	5555554c 	.word	0x5555554c
 8006b14:	3fa55555 	.word	0x3fa55555
 8006b18:	00000000 	.word	0x00000000
 8006b1c:	3ff00000 	.word	0x3ff00000
 8006b20:	3fe00000 	.word	0x3fe00000
 8006b24:	3fd33332 	.word	0x3fd33332
 8006b28:	3ff00000 	.word	0x3ff00000
 8006b2c:	3fe90000 	.word	0x3fe90000
 8006b30:	3fd20000 	.word	0x3fd20000
 8006b34:	00000000 	.word	0x00000000

08006b38 <__kernel_sin>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	ed2d 8b04 	vpush	{d8-d9}
 8006b40:	eeb0 8a41 	vmov.f32	s16, s2
 8006b44:	eef0 8a61 	vmov.f32	s17, s3
 8006b48:	ec55 4b10 	vmov	r4, r5, d0
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006b52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006b56:	9001      	str	r0, [sp, #4]
 8006b58:	da06      	bge.n	8006b68 <__kernel_sin+0x30>
 8006b5a:	ee10 0a10 	vmov	r0, s0
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7f9 ffb0 	bl	8000ac4 <__aeabi_d2iz>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d051      	beq.n	8006c0c <__kernel_sin+0xd4>
 8006b68:	4622      	mov	r2, r4
 8006b6a:	462b      	mov	r3, r5
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	4629      	mov	r1, r5
 8006b70:	f7f9 fd0e 	bl	8000590 <__aeabi_dmul>
 8006b74:	4682      	mov	sl, r0
 8006b76:	468b      	mov	fp, r1
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	f7f9 fd06 	bl	8000590 <__aeabi_dmul>
 8006b84:	a341      	add	r3, pc, #260	; (adr r3, 8006c8c <__kernel_sin+0x154>)
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	4689      	mov	r9, r1
 8006b8e:	4650      	mov	r0, sl
 8006b90:	4659      	mov	r1, fp
 8006b92:	f7f9 fcfd 	bl	8000590 <__aeabi_dmul>
 8006b96:	a33f      	add	r3, pc, #252	; (adr r3, 8006c94 <__kernel_sin+0x15c>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f7f9 fb40 	bl	8000220 <__aeabi_dsub>
 8006ba0:	4652      	mov	r2, sl
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	f7f9 fcf4 	bl	8000590 <__aeabi_dmul>
 8006ba8:	a33c      	add	r3, pc, #240	; (adr r3, 8006c9c <__kernel_sin+0x164>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 fb39 	bl	8000224 <__adddf3>
 8006bb2:	4652      	mov	r2, sl
 8006bb4:	465b      	mov	r3, fp
 8006bb6:	f7f9 fceb 	bl	8000590 <__aeabi_dmul>
 8006bba:	a33a      	add	r3, pc, #232	; (adr r3, 8006ca4 <__kernel_sin+0x16c>)
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f7f9 fb2e 	bl	8000220 <__aeabi_dsub>
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	465b      	mov	r3, fp
 8006bc8:	f7f9 fce2 	bl	8000590 <__aeabi_dmul>
 8006bcc:	a337      	add	r3, pc, #220	; (adr r3, 8006cac <__kernel_sin+0x174>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f7f9 fb27 	bl	8000224 <__adddf3>
 8006bd6:	9b01      	ldr	r3, [sp, #4]
 8006bd8:	4606      	mov	r6, r0
 8006bda:	460f      	mov	r7, r1
 8006bdc:	b9eb      	cbnz	r3, 8006c1a <__kernel_sin+0xe2>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4650      	mov	r0, sl
 8006be4:	4659      	mov	r1, fp
 8006be6:	f7f9 fcd3 	bl	8000590 <__aeabi_dmul>
 8006bea:	a325      	add	r3, pc, #148	; (adr r3, 8006c80 <__kernel_sin+0x148>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fb16 	bl	8000220 <__aeabi_dsub>
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	f7f9 fcca 	bl	8000590 <__aeabi_dmul>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	f7f9 fb0e 	bl	8000224 <__adddf3>
 8006c08:	4604      	mov	r4, r0
 8006c0a:	460d      	mov	r5, r1
 8006c0c:	ec45 4b10 	vmov	d0, r4, r5
 8006c10:	b003      	add	sp, #12
 8006c12:	ecbd 8b04 	vpop	{d8-d9}
 8006c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <__kernel_sin+0x150>)
 8006c1c:	ec51 0b18 	vmov	r0, r1, d8
 8006c20:	2200      	movs	r2, #0
 8006c22:	f7f9 fcb5 	bl	8000590 <__aeabi_dmul>
 8006c26:	4632      	mov	r2, r6
 8006c28:	ec41 0b19 	vmov	d9, r0, r1
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	4640      	mov	r0, r8
 8006c30:	4649      	mov	r1, r9
 8006c32:	f7f9 fcad 	bl	8000590 <__aeabi_dmul>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	ec51 0b19 	vmov	r0, r1, d9
 8006c3e:	f7f9 faef 	bl	8000220 <__aeabi_dsub>
 8006c42:	4652      	mov	r2, sl
 8006c44:	465b      	mov	r3, fp
 8006c46:	f7f9 fca3 	bl	8000590 <__aeabi_dmul>
 8006c4a:	ec53 2b18 	vmov	r2, r3, d8
 8006c4e:	f7f9 fae7 	bl	8000220 <__aeabi_dsub>
 8006c52:	a30b      	add	r3, pc, #44	; (adr r3, 8006c80 <__kernel_sin+0x148>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	4606      	mov	r6, r0
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4649      	mov	r1, r9
 8006c60:	f7f9 fc96 	bl	8000590 <__aeabi_dmul>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7f9 fada 	bl	8000224 <__adddf3>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	4620      	mov	r0, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	f7f9 fad2 	bl	8000220 <__aeabi_dsub>
 8006c7c:	e7c4      	b.n	8006c08 <__kernel_sin+0xd0>
 8006c7e:	bf00      	nop
 8006c80:	55555549 	.word	0x55555549
 8006c84:	3fc55555 	.word	0x3fc55555
 8006c88:	3fe00000 	.word	0x3fe00000
 8006c8c:	5acfd57c 	.word	0x5acfd57c
 8006c90:	3de5d93a 	.word	0x3de5d93a
 8006c94:	8a2b9ceb 	.word	0x8a2b9ceb
 8006c98:	3e5ae5e6 	.word	0x3e5ae5e6
 8006c9c:	57b1fe7d 	.word	0x57b1fe7d
 8006ca0:	3ec71de3 	.word	0x3ec71de3
 8006ca4:	19c161d5 	.word	0x19c161d5
 8006ca8:	3f2a01a0 	.word	0x3f2a01a0
 8006cac:	1110f8a6 	.word	0x1110f8a6
 8006cb0:	3f811111 	.word	0x3f811111
 8006cb4:	00000000 	.word	0x00000000

08006cb8 <__ieee754_rem_pio2>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	ed2d 8b02 	vpush	{d8}
 8006cc0:	ec55 4b10 	vmov	r4, r5, d0
 8006cc4:	4bca      	ldr	r3, [pc, #808]	; (8006ff0 <__ieee754_rem_pio2+0x338>)
 8006cc6:	b08b      	sub	sp, #44	; 0x2c
 8006cc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006ccc:	4598      	cmp	r8, r3
 8006cce:	4682      	mov	sl, r0
 8006cd0:	9502      	str	r5, [sp, #8]
 8006cd2:	dc08      	bgt.n	8006ce6 <__ieee754_rem_pio2+0x2e>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	ed80 0b00 	vstr	d0, [r0]
 8006cdc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006ce0:	f04f 0b00 	mov.w	fp, #0
 8006ce4:	e028      	b.n	8006d38 <__ieee754_rem_pio2+0x80>
 8006ce6:	4bc3      	ldr	r3, [pc, #780]	; (8006ff4 <__ieee754_rem_pio2+0x33c>)
 8006ce8:	4598      	cmp	r8, r3
 8006cea:	dc78      	bgt.n	8006dde <__ieee754_rem_pio2+0x126>
 8006cec:	9b02      	ldr	r3, [sp, #8]
 8006cee:	4ec2      	ldr	r6, [pc, #776]	; (8006ff8 <__ieee754_rem_pio2+0x340>)
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	ee10 0a10 	vmov	r0, s0
 8006cf6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006fb8 <__ieee754_rem_pio2+0x300>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	dd39      	ble.n	8006d74 <__ieee754_rem_pio2+0xbc>
 8006d00:	f7f9 fa8e 	bl	8000220 <__aeabi_dsub>
 8006d04:	45b0      	cmp	r8, r6
 8006d06:	4604      	mov	r4, r0
 8006d08:	460d      	mov	r5, r1
 8006d0a:	d01b      	beq.n	8006d44 <__ieee754_rem_pio2+0x8c>
 8006d0c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x308>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fa85 	bl	8000220 <__aeabi_dsub>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	e9ca 2300 	strd	r2, r3, [sl]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fa7d 	bl	8000220 <__aeabi_dsub>
 8006d26:	a3a6      	add	r3, pc, #664	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x308>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f7f9 fa78 	bl	8000220 <__aeabi_dsub>
 8006d30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d34:	f04f 0b01 	mov.w	fp, #1
 8006d38:	4658      	mov	r0, fp
 8006d3a:	b00b      	add	sp, #44	; 0x2c
 8006d3c:	ecbd 8b02 	vpop	{d8}
 8006d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d44:	a3a0      	add	r3, pc, #640	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x310>)
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f7f9 fa69 	bl	8000220 <__aeabi_dsub>
 8006d4e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x318>)
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	4604      	mov	r4, r0
 8006d56:	460d      	mov	r5, r1
 8006d58:	f7f9 fa62 	bl	8000220 <__aeabi_dsub>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	e9ca 2300 	strd	r2, r3, [sl]
 8006d64:	4620      	mov	r0, r4
 8006d66:	4629      	mov	r1, r5
 8006d68:	f7f9 fa5a 	bl	8000220 <__aeabi_dsub>
 8006d6c:	a398      	add	r3, pc, #608	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x318>)
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	e7db      	b.n	8006d2c <__ieee754_rem_pio2+0x74>
 8006d74:	f7f9 fa56 	bl	8000224 <__adddf3>
 8006d78:	45b0      	cmp	r8, r6
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	460d      	mov	r5, r1
 8006d7e:	d016      	beq.n	8006dae <__ieee754_rem_pio2+0xf6>
 8006d80:	a38f      	add	r3, pc, #572	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x308>)
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f7f9 fa4d 	bl	8000224 <__adddf3>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	e9ca 2300 	strd	r2, r3, [sl]
 8006d92:	4620      	mov	r0, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	f7f9 fa43 	bl	8000220 <__aeabi_dsub>
 8006d9a:	a389      	add	r3, pc, #548	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x308>)
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f7f9 fa40 	bl	8000224 <__adddf3>
 8006da4:	f04f 3bff 	mov.w	fp, #4294967295
 8006da8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006dac:	e7c4      	b.n	8006d38 <__ieee754_rem_pio2+0x80>
 8006dae:	a386      	add	r3, pc, #536	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x310>)
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	f7f9 fa36 	bl	8000224 <__adddf3>
 8006db8:	a385      	add	r3, pc, #532	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x318>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	f7f9 fa2f 	bl	8000224 <__adddf3>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	e9ca 2300 	strd	r2, r3, [sl]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	f7f9 fa25 	bl	8000220 <__aeabi_dsub>
 8006dd6:	a37e      	add	r3, pc, #504	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x318>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	e7e0      	b.n	8006da0 <__ieee754_rem_pio2+0xe8>
 8006dde:	4b87      	ldr	r3, [pc, #540]	; (8006ffc <__ieee754_rem_pio2+0x344>)
 8006de0:	4598      	cmp	r8, r3
 8006de2:	f300 80d8 	bgt.w	8006f96 <__ieee754_rem_pio2+0x2de>
 8006de6:	f000 f96d 	bl	80070c4 <fabs>
 8006dea:	ec55 4b10 	vmov	r4, r5, d0
 8006dee:	ee10 0a10 	vmov	r0, s0
 8006df2:	a379      	add	r3, pc, #484	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x320>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fbc9 	bl	8000590 <__aeabi_dmul>
 8006dfe:	4b80      	ldr	r3, [pc, #512]	; (8007000 <__ieee754_rem_pio2+0x348>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	f7f9 fa0f 	bl	8000224 <__adddf3>
 8006e06:	f7f9 fe5d 	bl	8000ac4 <__aeabi_d2iz>
 8006e0a:	4683      	mov	fp, r0
 8006e0c:	f7f9 fb56 	bl	80004bc <__aeabi_i2d>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	ec43 2b18 	vmov	d8, r2, r3
 8006e18:	a367      	add	r3, pc, #412	; (adr r3, 8006fb8 <__ieee754_rem_pio2+0x300>)
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f7f9 fbb7 	bl	8000590 <__aeabi_dmul>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4620      	mov	r0, r4
 8006e28:	4629      	mov	r1, r5
 8006e2a:	f7f9 f9f9 	bl	8000220 <__aeabi_dsub>
 8006e2e:	a364      	add	r3, pc, #400	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x308>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
 8006e38:	ec51 0b18 	vmov	r0, r1, d8
 8006e3c:	f7f9 fba8 	bl	8000590 <__aeabi_dmul>
 8006e40:	f1bb 0f1f 	cmp.w	fp, #31
 8006e44:	4604      	mov	r4, r0
 8006e46:	460d      	mov	r5, r1
 8006e48:	dc0d      	bgt.n	8006e66 <__ieee754_rem_pio2+0x1ae>
 8006e4a:	4b6e      	ldr	r3, [pc, #440]	; (8007004 <__ieee754_rem_pio2+0x34c>)
 8006e4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e54:	4543      	cmp	r3, r8
 8006e56:	d006      	beq.n	8006e66 <__ieee754_rem_pio2+0x1ae>
 8006e58:	4622      	mov	r2, r4
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 f9de 	bl	8000220 <__aeabi_dsub>
 8006e64:	e00e      	b.n	8006e84 <__ieee754_rem_pio2+0x1cc>
 8006e66:	462b      	mov	r3, r5
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	f7f9 f9d7 	bl	8000220 <__aeabi_dsub>
 8006e72:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006e76:	9303      	str	r3, [sp, #12]
 8006e78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e7c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	dc02      	bgt.n	8006e8a <__ieee754_rem_pio2+0x1d2>
 8006e84:	e9ca 0100 	strd	r0, r1, [sl]
 8006e88:	e039      	b.n	8006efe <__ieee754_rem_pio2+0x246>
 8006e8a:	a34f      	add	r3, pc, #316	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x310>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	ec51 0b18 	vmov	r0, r1, d8
 8006e94:	f7f9 fb7c 	bl	8000590 <__aeabi_dmul>
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	f7f9 f9bc 	bl	8000220 <__aeabi_dsub>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4680      	mov	r8, r0
 8006eae:	4689      	mov	r9, r1
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	f7f9 f9b4 	bl	8000220 <__aeabi_dsub>
 8006eb8:	4622      	mov	r2, r4
 8006eba:	462b      	mov	r3, r5
 8006ebc:	f7f9 f9b0 	bl	8000220 <__aeabi_dsub>
 8006ec0:	a343      	add	r3, pc, #268	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x318>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	460d      	mov	r5, r1
 8006eca:	ec51 0b18 	vmov	r0, r1, d8
 8006ece:	f7f9 fb5f 	bl	8000590 <__aeabi_dmul>
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	f7f9 f9a3 	bl	8000220 <__aeabi_dsub>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4604      	mov	r4, r0
 8006ee0:	460d      	mov	r5, r1
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	f7f9 f99b 	bl	8000220 <__aeabi_dsub>
 8006eea:	9a03      	ldr	r2, [sp, #12]
 8006eec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b31      	cmp	r3, #49	; 0x31
 8006ef4:	dc24      	bgt.n	8006f40 <__ieee754_rem_pio2+0x288>
 8006ef6:	e9ca 0100 	strd	r0, r1, [sl]
 8006efa:	4646      	mov	r6, r8
 8006efc:	464f      	mov	r7, r9
 8006efe:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f02:	4630      	mov	r0, r6
 8006f04:	4642      	mov	r2, r8
 8006f06:	464b      	mov	r3, r9
 8006f08:	4639      	mov	r1, r7
 8006f0a:	f7f9 f989 	bl	8000220 <__aeabi_dsub>
 8006f0e:	462b      	mov	r3, r5
 8006f10:	4622      	mov	r2, r4
 8006f12:	f7f9 f985 	bl	8000220 <__aeabi_dsub>
 8006f16:	9b02      	ldr	r3, [sp, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f1e:	f6bf af0b 	bge.w	8006d38 <__ieee754_rem_pio2+0x80>
 8006f22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f26:	f8ca 3004 	str.w	r3, [sl, #4]
 8006f2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f2e:	f8ca 8000 	str.w	r8, [sl]
 8006f32:	f8ca 0008 	str.w	r0, [sl, #8]
 8006f36:	f8ca 300c 	str.w	r3, [sl, #12]
 8006f3a:	f1cb 0b00 	rsb	fp, fp, #0
 8006f3e:	e6fb      	b.n	8006d38 <__ieee754_rem_pio2+0x80>
 8006f40:	a327      	add	r3, pc, #156	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x328>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	ec51 0b18 	vmov	r0, r1, d8
 8006f4a:	f7f9 fb21 	bl	8000590 <__aeabi_dmul>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460d      	mov	r5, r1
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 f961 	bl	8000220 <__aeabi_dsub>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4606      	mov	r6, r0
 8006f64:	460f      	mov	r7, r1
 8006f66:	4640      	mov	r0, r8
 8006f68:	4649      	mov	r1, r9
 8006f6a:	f7f9 f959 	bl	8000220 <__aeabi_dsub>
 8006f6e:	4622      	mov	r2, r4
 8006f70:	462b      	mov	r3, r5
 8006f72:	f7f9 f955 	bl	8000220 <__aeabi_dsub>
 8006f76:	a31c      	add	r3, pc, #112	; (adr r3, 8006fe8 <__ieee754_rem_pio2+0x330>)
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	ec51 0b18 	vmov	r0, r1, d8
 8006f84:	f7f9 fb04 	bl	8000590 <__aeabi_dmul>
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	f7f9 f948 	bl	8000220 <__aeabi_dsub>
 8006f90:	4604      	mov	r4, r0
 8006f92:	460d      	mov	r5, r1
 8006f94:	e760      	b.n	8006e58 <__ieee754_rem_pio2+0x1a0>
 8006f96:	4b1c      	ldr	r3, [pc, #112]	; (8007008 <__ieee754_rem_pio2+0x350>)
 8006f98:	4598      	cmp	r8, r3
 8006f9a:	dd37      	ble.n	800700c <__ieee754_rem_pio2+0x354>
 8006f9c:	ee10 2a10 	vmov	r2, s0
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	f7f9 f93b 	bl	8000220 <__aeabi_dsub>
 8006faa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006fae:	e9ca 0100 	strd	r0, r1, [sl]
 8006fb2:	e695      	b.n	8006ce0 <__ieee754_rem_pio2+0x28>
 8006fb4:	f3af 8000 	nop.w
 8006fb8:	54400000 	.word	0x54400000
 8006fbc:	3ff921fb 	.word	0x3ff921fb
 8006fc0:	1a626331 	.word	0x1a626331
 8006fc4:	3dd0b461 	.word	0x3dd0b461
 8006fc8:	1a600000 	.word	0x1a600000
 8006fcc:	3dd0b461 	.word	0x3dd0b461
 8006fd0:	2e037073 	.word	0x2e037073
 8006fd4:	3ba3198a 	.word	0x3ba3198a
 8006fd8:	6dc9c883 	.word	0x6dc9c883
 8006fdc:	3fe45f30 	.word	0x3fe45f30
 8006fe0:	2e000000 	.word	0x2e000000
 8006fe4:	3ba3198a 	.word	0x3ba3198a
 8006fe8:	252049c1 	.word	0x252049c1
 8006fec:	397b839a 	.word	0x397b839a
 8006ff0:	3fe921fb 	.word	0x3fe921fb
 8006ff4:	4002d97b 	.word	0x4002d97b
 8006ff8:	3ff921fb 	.word	0x3ff921fb
 8006ffc:	413921fb 	.word	0x413921fb
 8007000:	3fe00000 	.word	0x3fe00000
 8007004:	080079f8 	.word	0x080079f8
 8007008:	7fefffff 	.word	0x7fefffff
 800700c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007010:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007014:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007018:	4620      	mov	r0, r4
 800701a:	460d      	mov	r5, r1
 800701c:	f7f9 fd52 	bl	8000ac4 <__aeabi_d2iz>
 8007020:	f7f9 fa4c 	bl	80004bc <__aeabi_i2d>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4620      	mov	r0, r4
 800702a:	4629      	mov	r1, r5
 800702c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007030:	f7f9 f8f6 	bl	8000220 <__aeabi_dsub>
 8007034:	4b21      	ldr	r3, [pc, #132]	; (80070bc <__ieee754_rem_pio2+0x404>)
 8007036:	2200      	movs	r2, #0
 8007038:	f7f9 faaa 	bl	8000590 <__aeabi_dmul>
 800703c:	460d      	mov	r5, r1
 800703e:	4604      	mov	r4, r0
 8007040:	f7f9 fd40 	bl	8000ac4 <__aeabi_d2iz>
 8007044:	f7f9 fa3a 	bl	80004bc <__aeabi_i2d>
 8007048:	4602      	mov	r2, r0
 800704a:	460b      	mov	r3, r1
 800704c:	4620      	mov	r0, r4
 800704e:	4629      	mov	r1, r5
 8007050:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007054:	f7f9 f8e4 	bl	8000220 <__aeabi_dsub>
 8007058:	4b18      	ldr	r3, [pc, #96]	; (80070bc <__ieee754_rem_pio2+0x404>)
 800705a:	2200      	movs	r2, #0
 800705c:	f7f9 fa98 	bl	8000590 <__aeabi_dmul>
 8007060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007064:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007068:	2703      	movs	r7, #3
 800706a:	2400      	movs	r4, #0
 800706c:	2500      	movs	r5, #0
 800706e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8007072:	4622      	mov	r2, r4
 8007074:	462b      	mov	r3, r5
 8007076:	46b9      	mov	r9, r7
 8007078:	3f01      	subs	r7, #1
 800707a:	f7f9 fcf1 	bl	8000a60 <__aeabi_dcmpeq>
 800707e:	2800      	cmp	r0, #0
 8007080:	d1f5      	bne.n	800706e <__ieee754_rem_pio2+0x3b6>
 8007082:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <__ieee754_rem_pio2+0x408>)
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	2302      	movs	r3, #2
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	4632      	mov	r2, r6
 800708c:	464b      	mov	r3, r9
 800708e:	4651      	mov	r1, sl
 8007090:	a804      	add	r0, sp, #16
 8007092:	f000 f821 	bl	80070d8 <__kernel_rem_pio2>
 8007096:	9b02      	ldr	r3, [sp, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	4683      	mov	fp, r0
 800709c:	f6bf ae4c 	bge.w	8006d38 <__ieee754_rem_pio2+0x80>
 80070a0:	e9da 2100 	ldrd	r2, r1, [sl]
 80070a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070a8:	e9ca 2300 	strd	r2, r3, [sl]
 80070ac:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80070b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070b4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80070b8:	e73f      	b.n	8006f3a <__ieee754_rem_pio2+0x282>
 80070ba:	bf00      	nop
 80070bc:	41700000 	.word	0x41700000
 80070c0:	08007a78 	.word	0x08007a78

080070c4 <fabs>:
 80070c4:	ec51 0b10 	vmov	r0, r1, d0
 80070c8:	ee10 2a10 	vmov	r2, s0
 80070cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070d0:	ec43 2b10 	vmov	d0, r2, r3
 80070d4:	4770      	bx	lr
	...

080070d8 <__kernel_rem_pio2>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	ed2d 8b02 	vpush	{d8}
 80070e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80070e4:	f112 0f14 	cmn.w	r2, #20
 80070e8:	9306      	str	r3, [sp, #24]
 80070ea:	9104      	str	r1, [sp, #16]
 80070ec:	4bc2      	ldr	r3, [pc, #776]	; (80073f8 <__kernel_rem_pio2+0x320>)
 80070ee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80070f0:	9009      	str	r0, [sp, #36]	; 0x24
 80070f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	9b06      	ldr	r3, [sp, #24]
 80070fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80070fe:	bfa8      	it	ge
 8007100:	1ed4      	subge	r4, r2, #3
 8007102:	9305      	str	r3, [sp, #20]
 8007104:	bfb2      	itee	lt
 8007106:	2400      	movlt	r4, #0
 8007108:	2318      	movge	r3, #24
 800710a:	fb94 f4f3 	sdivge	r4, r4, r3
 800710e:	f06f 0317 	mvn.w	r3, #23
 8007112:	fb04 3303 	mla	r3, r4, r3, r3
 8007116:	eb03 0a02 	add.w	sl, r3, r2
 800711a:	9b00      	ldr	r3, [sp, #0]
 800711c:	9a05      	ldr	r2, [sp, #20]
 800711e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80073e8 <__kernel_rem_pio2+0x310>
 8007122:	eb03 0802 	add.w	r8, r3, r2
 8007126:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007128:	1aa7      	subs	r7, r4, r2
 800712a:	ae20      	add	r6, sp, #128	; 0x80
 800712c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007130:	2500      	movs	r5, #0
 8007132:	4545      	cmp	r5, r8
 8007134:	dd13      	ble.n	800715e <__kernel_rem_pio2+0x86>
 8007136:	9b06      	ldr	r3, [sp, #24]
 8007138:	aa20      	add	r2, sp, #128	; 0x80
 800713a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800713e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007142:	f04f 0800 	mov.w	r8, #0
 8007146:	9b00      	ldr	r3, [sp, #0]
 8007148:	4598      	cmp	r8, r3
 800714a:	dc31      	bgt.n	80071b0 <__kernel_rem_pio2+0xd8>
 800714c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80073e8 <__kernel_rem_pio2+0x310>
 8007150:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007154:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007158:	462f      	mov	r7, r5
 800715a:	2600      	movs	r6, #0
 800715c:	e01b      	b.n	8007196 <__kernel_rem_pio2+0xbe>
 800715e:	42ef      	cmn	r7, r5
 8007160:	d407      	bmi.n	8007172 <__kernel_rem_pio2+0x9a>
 8007162:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007166:	f7f9 f9a9 	bl	80004bc <__aeabi_i2d>
 800716a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800716e:	3501      	adds	r5, #1
 8007170:	e7df      	b.n	8007132 <__kernel_rem_pio2+0x5a>
 8007172:	ec51 0b18 	vmov	r0, r1, d8
 8007176:	e7f8      	b.n	800716a <__kernel_rem_pio2+0x92>
 8007178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800717c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007180:	f7f9 fa06 	bl	8000590 <__aeabi_dmul>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800718c:	f7f9 f84a 	bl	8000224 <__adddf3>
 8007190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007194:	3601      	adds	r6, #1
 8007196:	9b05      	ldr	r3, [sp, #20]
 8007198:	429e      	cmp	r6, r3
 800719a:	f1a7 0708 	sub.w	r7, r7, #8
 800719e:	ddeb      	ble.n	8007178 <__kernel_rem_pio2+0xa0>
 80071a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071a4:	f108 0801 	add.w	r8, r8, #1
 80071a8:	ecab 7b02 	vstmia	fp!, {d7}
 80071ac:	3508      	adds	r5, #8
 80071ae:	e7ca      	b.n	8007146 <__kernel_rem_pio2+0x6e>
 80071b0:	9b00      	ldr	r3, [sp, #0]
 80071b2:	aa0c      	add	r2, sp, #48	; 0x30
 80071b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ba:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80071bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80071c0:	9c00      	ldr	r4, [sp, #0]
 80071c2:	930a      	str	r3, [sp, #40]	; 0x28
 80071c4:	00e3      	lsls	r3, r4, #3
 80071c6:	9308      	str	r3, [sp, #32]
 80071c8:	ab98      	add	r3, sp, #608	; 0x260
 80071ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80071d2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80071d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80071d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80071dc:	46c3      	mov	fp, r8
 80071de:	46a1      	mov	r9, r4
 80071e0:	f1b9 0f00 	cmp.w	r9, #0
 80071e4:	f1a5 0508 	sub.w	r5, r5, #8
 80071e8:	dc77      	bgt.n	80072da <__kernel_rem_pio2+0x202>
 80071ea:	ec47 6b10 	vmov	d0, r6, r7
 80071ee:	4650      	mov	r0, sl
 80071f0:	f000 fac2 	bl	8007778 <scalbn>
 80071f4:	ec57 6b10 	vmov	r6, r7, d0
 80071f8:	2200      	movs	r2, #0
 80071fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80071fe:	ee10 0a10 	vmov	r0, s0
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 f9c4 	bl	8000590 <__aeabi_dmul>
 8007208:	ec41 0b10 	vmov	d0, r0, r1
 800720c:	f000 fb34 	bl	8007878 <floor>
 8007210:	4b7a      	ldr	r3, [pc, #488]	; (80073fc <__kernel_rem_pio2+0x324>)
 8007212:	ec51 0b10 	vmov	r0, r1, d0
 8007216:	2200      	movs	r2, #0
 8007218:	f7f9 f9ba 	bl	8000590 <__aeabi_dmul>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4630      	mov	r0, r6
 8007222:	4639      	mov	r1, r7
 8007224:	f7f8 fffc 	bl	8000220 <__aeabi_dsub>
 8007228:	460f      	mov	r7, r1
 800722a:	4606      	mov	r6, r0
 800722c:	f7f9 fc4a 	bl	8000ac4 <__aeabi_d2iz>
 8007230:	9002      	str	r0, [sp, #8]
 8007232:	f7f9 f943 	bl	80004bc <__aeabi_i2d>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4630      	mov	r0, r6
 800723c:	4639      	mov	r1, r7
 800723e:	f7f8 ffef 	bl	8000220 <__aeabi_dsub>
 8007242:	f1ba 0f00 	cmp.w	sl, #0
 8007246:	4606      	mov	r6, r0
 8007248:	460f      	mov	r7, r1
 800724a:	dd6d      	ble.n	8007328 <__kernel_rem_pio2+0x250>
 800724c:	1e61      	subs	r1, r4, #1
 800724e:	ab0c      	add	r3, sp, #48	; 0x30
 8007250:	9d02      	ldr	r5, [sp, #8]
 8007252:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007256:	f1ca 0018 	rsb	r0, sl, #24
 800725a:	fa43 f200 	asr.w	r2, r3, r0
 800725e:	4415      	add	r5, r2
 8007260:	4082      	lsls	r2, r0
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	aa0c      	add	r2, sp, #48	; 0x30
 8007266:	9502      	str	r5, [sp, #8]
 8007268:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800726c:	f1ca 0217 	rsb	r2, sl, #23
 8007270:	fa43 fb02 	asr.w	fp, r3, r2
 8007274:	f1bb 0f00 	cmp.w	fp, #0
 8007278:	dd65      	ble.n	8007346 <__kernel_rem_pio2+0x26e>
 800727a:	9b02      	ldr	r3, [sp, #8]
 800727c:	2200      	movs	r2, #0
 800727e:	3301      	adds	r3, #1
 8007280:	9302      	str	r3, [sp, #8]
 8007282:	4615      	mov	r5, r2
 8007284:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007288:	4294      	cmp	r4, r2
 800728a:	f300 809f 	bgt.w	80073cc <__kernel_rem_pio2+0x2f4>
 800728e:	f1ba 0f00 	cmp.w	sl, #0
 8007292:	dd07      	ble.n	80072a4 <__kernel_rem_pio2+0x1cc>
 8007294:	f1ba 0f01 	cmp.w	sl, #1
 8007298:	f000 80c1 	beq.w	800741e <__kernel_rem_pio2+0x346>
 800729c:	f1ba 0f02 	cmp.w	sl, #2
 80072a0:	f000 80c7 	beq.w	8007432 <__kernel_rem_pio2+0x35a>
 80072a4:	f1bb 0f02 	cmp.w	fp, #2
 80072a8:	d14d      	bne.n	8007346 <__kernel_rem_pio2+0x26e>
 80072aa:	4632      	mov	r2, r6
 80072ac:	463b      	mov	r3, r7
 80072ae:	4954      	ldr	r1, [pc, #336]	; (8007400 <__kernel_rem_pio2+0x328>)
 80072b0:	2000      	movs	r0, #0
 80072b2:	f7f8 ffb5 	bl	8000220 <__aeabi_dsub>
 80072b6:	4606      	mov	r6, r0
 80072b8:	460f      	mov	r7, r1
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	d043      	beq.n	8007346 <__kernel_rem_pio2+0x26e>
 80072be:	4650      	mov	r0, sl
 80072c0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80073f0 <__kernel_rem_pio2+0x318>
 80072c4:	f000 fa58 	bl	8007778 <scalbn>
 80072c8:	4630      	mov	r0, r6
 80072ca:	4639      	mov	r1, r7
 80072cc:	ec53 2b10 	vmov	r2, r3, d0
 80072d0:	f7f8 ffa6 	bl	8000220 <__aeabi_dsub>
 80072d4:	4606      	mov	r6, r0
 80072d6:	460f      	mov	r7, r1
 80072d8:	e035      	b.n	8007346 <__kernel_rem_pio2+0x26e>
 80072da:	4b4a      	ldr	r3, [pc, #296]	; (8007404 <__kernel_rem_pio2+0x32c>)
 80072dc:	2200      	movs	r2, #0
 80072de:	4630      	mov	r0, r6
 80072e0:	4639      	mov	r1, r7
 80072e2:	f7f9 f955 	bl	8000590 <__aeabi_dmul>
 80072e6:	f7f9 fbed 	bl	8000ac4 <__aeabi_d2iz>
 80072ea:	f7f9 f8e7 	bl	80004bc <__aeabi_i2d>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	ec43 2b18 	vmov	d8, r2, r3
 80072f6:	4b44      	ldr	r3, [pc, #272]	; (8007408 <__kernel_rem_pio2+0x330>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	f7f9 f949 	bl	8000590 <__aeabi_dmul>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4630      	mov	r0, r6
 8007304:	4639      	mov	r1, r7
 8007306:	f7f8 ff8b 	bl	8000220 <__aeabi_dsub>
 800730a:	f7f9 fbdb 	bl	8000ac4 <__aeabi_d2iz>
 800730e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007312:	f84b 0b04 	str.w	r0, [fp], #4
 8007316:	ec51 0b18 	vmov	r0, r1, d8
 800731a:	f7f8 ff83 	bl	8000224 <__adddf3>
 800731e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007322:	4606      	mov	r6, r0
 8007324:	460f      	mov	r7, r1
 8007326:	e75b      	b.n	80071e0 <__kernel_rem_pio2+0x108>
 8007328:	d106      	bne.n	8007338 <__kernel_rem_pio2+0x260>
 800732a:	1e63      	subs	r3, r4, #1
 800732c:	aa0c      	add	r2, sp, #48	; 0x30
 800732e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007332:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007336:	e79d      	b.n	8007274 <__kernel_rem_pio2+0x19c>
 8007338:	4b34      	ldr	r3, [pc, #208]	; (800740c <__kernel_rem_pio2+0x334>)
 800733a:	2200      	movs	r2, #0
 800733c:	f7f9 fbae 	bl	8000a9c <__aeabi_dcmpge>
 8007340:	2800      	cmp	r0, #0
 8007342:	d140      	bne.n	80073c6 <__kernel_rem_pio2+0x2ee>
 8007344:	4683      	mov	fp, r0
 8007346:	2200      	movs	r2, #0
 8007348:	2300      	movs	r3, #0
 800734a:	4630      	mov	r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	f7f9 fb87 	bl	8000a60 <__aeabi_dcmpeq>
 8007352:	2800      	cmp	r0, #0
 8007354:	f000 80c1 	beq.w	80074da <__kernel_rem_pio2+0x402>
 8007358:	1e65      	subs	r5, r4, #1
 800735a:	462b      	mov	r3, r5
 800735c:	2200      	movs	r2, #0
 800735e:	9900      	ldr	r1, [sp, #0]
 8007360:	428b      	cmp	r3, r1
 8007362:	da6d      	bge.n	8007440 <__kernel_rem_pio2+0x368>
 8007364:	2a00      	cmp	r2, #0
 8007366:	f000 808a 	beq.w	800747e <__kernel_rem_pio2+0x3a6>
 800736a:	ab0c      	add	r3, sp, #48	; 0x30
 800736c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007370:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80ae 	beq.w	80074d6 <__kernel_rem_pio2+0x3fe>
 800737a:	4650      	mov	r0, sl
 800737c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80073f0 <__kernel_rem_pio2+0x318>
 8007380:	f000 f9fa 	bl	8007778 <scalbn>
 8007384:	1c6b      	adds	r3, r5, #1
 8007386:	00da      	lsls	r2, r3, #3
 8007388:	9205      	str	r2, [sp, #20]
 800738a:	ec57 6b10 	vmov	r6, r7, d0
 800738e:	aa70      	add	r2, sp, #448	; 0x1c0
 8007390:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007404 <__kernel_rem_pio2+0x32c>
 8007394:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007398:	462c      	mov	r4, r5
 800739a:	f04f 0800 	mov.w	r8, #0
 800739e:	2c00      	cmp	r4, #0
 80073a0:	f280 80d4 	bge.w	800754c <__kernel_rem_pio2+0x474>
 80073a4:	462c      	mov	r4, r5
 80073a6:	2c00      	cmp	r4, #0
 80073a8:	f2c0 8102 	blt.w	80075b0 <__kernel_rem_pio2+0x4d8>
 80073ac:	4b18      	ldr	r3, [pc, #96]	; (8007410 <__kernel_rem_pio2+0x338>)
 80073ae:	461e      	mov	r6, r3
 80073b0:	ab70      	add	r3, sp, #448	; 0x1c0
 80073b2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80073b6:	1b2b      	subs	r3, r5, r4
 80073b8:	f04f 0900 	mov.w	r9, #0
 80073bc:	f04f 0a00 	mov.w	sl, #0
 80073c0:	2700      	movs	r7, #0
 80073c2:	9306      	str	r3, [sp, #24]
 80073c4:	e0e6      	b.n	8007594 <__kernel_rem_pio2+0x4bc>
 80073c6:	f04f 0b02 	mov.w	fp, #2
 80073ca:	e756      	b.n	800727a <__kernel_rem_pio2+0x1a2>
 80073cc:	f8d8 3000 	ldr.w	r3, [r8]
 80073d0:	bb05      	cbnz	r5, 8007414 <__kernel_rem_pio2+0x33c>
 80073d2:	b123      	cbz	r3, 80073de <__kernel_rem_pio2+0x306>
 80073d4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80073d8:	f8c8 3000 	str.w	r3, [r8]
 80073dc:	2301      	movs	r3, #1
 80073de:	3201      	adds	r2, #1
 80073e0:	f108 0804 	add.w	r8, r8, #4
 80073e4:	461d      	mov	r5, r3
 80073e6:	e74f      	b.n	8007288 <__kernel_rem_pio2+0x1b0>
	...
 80073f4:	3ff00000 	.word	0x3ff00000
 80073f8:	08007bc0 	.word	0x08007bc0
 80073fc:	40200000 	.word	0x40200000
 8007400:	3ff00000 	.word	0x3ff00000
 8007404:	3e700000 	.word	0x3e700000
 8007408:	41700000 	.word	0x41700000
 800740c:	3fe00000 	.word	0x3fe00000
 8007410:	08007b80 	.word	0x08007b80
 8007414:	1acb      	subs	r3, r1, r3
 8007416:	f8c8 3000 	str.w	r3, [r8]
 800741a:	462b      	mov	r3, r5
 800741c:	e7df      	b.n	80073de <__kernel_rem_pio2+0x306>
 800741e:	1e62      	subs	r2, r4, #1
 8007420:	ab0c      	add	r3, sp, #48	; 0x30
 8007422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007426:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800742a:	a90c      	add	r1, sp, #48	; 0x30
 800742c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007430:	e738      	b.n	80072a4 <__kernel_rem_pio2+0x1cc>
 8007432:	1e62      	subs	r2, r4, #1
 8007434:	ab0c      	add	r3, sp, #48	; 0x30
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800743e:	e7f4      	b.n	800742a <__kernel_rem_pio2+0x352>
 8007440:	a90c      	add	r1, sp, #48	; 0x30
 8007442:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007446:	3b01      	subs	r3, #1
 8007448:	430a      	orrs	r2, r1
 800744a:	e788      	b.n	800735e <__kernel_rem_pio2+0x286>
 800744c:	3301      	adds	r3, #1
 800744e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007452:	2900      	cmp	r1, #0
 8007454:	d0fa      	beq.n	800744c <__kernel_rem_pio2+0x374>
 8007456:	9a08      	ldr	r2, [sp, #32]
 8007458:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800745c:	446a      	add	r2, sp
 800745e:	3a98      	subs	r2, #152	; 0x98
 8007460:	9208      	str	r2, [sp, #32]
 8007462:	9a06      	ldr	r2, [sp, #24]
 8007464:	a920      	add	r1, sp, #128	; 0x80
 8007466:	18a2      	adds	r2, r4, r2
 8007468:	18e3      	adds	r3, r4, r3
 800746a:	f104 0801 	add.w	r8, r4, #1
 800746e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007472:	9302      	str	r3, [sp, #8]
 8007474:	9b02      	ldr	r3, [sp, #8]
 8007476:	4543      	cmp	r3, r8
 8007478:	da04      	bge.n	8007484 <__kernel_rem_pio2+0x3ac>
 800747a:	461c      	mov	r4, r3
 800747c:	e6a2      	b.n	80071c4 <__kernel_rem_pio2+0xec>
 800747e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007480:	2301      	movs	r3, #1
 8007482:	e7e4      	b.n	800744e <__kernel_rem_pio2+0x376>
 8007484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007486:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800748a:	f7f9 f817 	bl	80004bc <__aeabi_i2d>
 800748e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007494:	46ab      	mov	fp, r5
 8007496:	461c      	mov	r4, r3
 8007498:	f04f 0900 	mov.w	r9, #0
 800749c:	2600      	movs	r6, #0
 800749e:	2700      	movs	r7, #0
 80074a0:	9b05      	ldr	r3, [sp, #20]
 80074a2:	4599      	cmp	r9, r3
 80074a4:	dd06      	ble.n	80074b4 <__kernel_rem_pio2+0x3dc>
 80074a6:	9b08      	ldr	r3, [sp, #32]
 80074a8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80074ac:	f108 0801 	add.w	r8, r8, #1
 80074b0:	9308      	str	r3, [sp, #32]
 80074b2:	e7df      	b.n	8007474 <__kernel_rem_pio2+0x39c>
 80074b4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80074b8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80074bc:	f7f9 f868 	bl	8000590 <__aeabi_dmul>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4630      	mov	r0, r6
 80074c6:	4639      	mov	r1, r7
 80074c8:	f7f8 feac 	bl	8000224 <__adddf3>
 80074cc:	f109 0901 	add.w	r9, r9, #1
 80074d0:	4606      	mov	r6, r0
 80074d2:	460f      	mov	r7, r1
 80074d4:	e7e4      	b.n	80074a0 <__kernel_rem_pio2+0x3c8>
 80074d6:	3d01      	subs	r5, #1
 80074d8:	e747      	b.n	800736a <__kernel_rem_pio2+0x292>
 80074da:	ec47 6b10 	vmov	d0, r6, r7
 80074de:	f1ca 0000 	rsb	r0, sl, #0
 80074e2:	f000 f949 	bl	8007778 <scalbn>
 80074e6:	ec57 6b10 	vmov	r6, r7, d0
 80074ea:	4ba0      	ldr	r3, [pc, #640]	; (800776c <__kernel_rem_pio2+0x694>)
 80074ec:	ee10 0a10 	vmov	r0, s0
 80074f0:	2200      	movs	r2, #0
 80074f2:	4639      	mov	r1, r7
 80074f4:	f7f9 fad2 	bl	8000a9c <__aeabi_dcmpge>
 80074f8:	b1f8      	cbz	r0, 800753a <__kernel_rem_pio2+0x462>
 80074fa:	4b9d      	ldr	r3, [pc, #628]	; (8007770 <__kernel_rem_pio2+0x698>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f9 f845 	bl	8000590 <__aeabi_dmul>
 8007506:	f7f9 fadd 	bl	8000ac4 <__aeabi_d2iz>
 800750a:	4680      	mov	r8, r0
 800750c:	f7f8 ffd6 	bl	80004bc <__aeabi_i2d>
 8007510:	4b96      	ldr	r3, [pc, #600]	; (800776c <__kernel_rem_pio2+0x694>)
 8007512:	2200      	movs	r2, #0
 8007514:	f7f9 f83c 	bl	8000590 <__aeabi_dmul>
 8007518:	460b      	mov	r3, r1
 800751a:	4602      	mov	r2, r0
 800751c:	4639      	mov	r1, r7
 800751e:	4630      	mov	r0, r6
 8007520:	f7f8 fe7e 	bl	8000220 <__aeabi_dsub>
 8007524:	f7f9 face 	bl	8000ac4 <__aeabi_d2iz>
 8007528:	1c65      	adds	r5, r4, #1
 800752a:	ab0c      	add	r3, sp, #48	; 0x30
 800752c:	f10a 0a18 	add.w	sl, sl, #24
 8007530:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007534:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007538:	e71f      	b.n	800737a <__kernel_rem_pio2+0x2a2>
 800753a:	4630      	mov	r0, r6
 800753c:	4639      	mov	r1, r7
 800753e:	f7f9 fac1 	bl	8000ac4 <__aeabi_d2iz>
 8007542:	ab0c      	add	r3, sp, #48	; 0x30
 8007544:	4625      	mov	r5, r4
 8007546:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800754a:	e716      	b.n	800737a <__kernel_rem_pio2+0x2a2>
 800754c:	ab0c      	add	r3, sp, #48	; 0x30
 800754e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007552:	f7f8 ffb3 	bl	80004bc <__aeabi_i2d>
 8007556:	4632      	mov	r2, r6
 8007558:	463b      	mov	r3, r7
 800755a:	f7f9 f819 	bl	8000590 <__aeabi_dmul>
 800755e:	4642      	mov	r2, r8
 8007560:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007564:	464b      	mov	r3, r9
 8007566:	4630      	mov	r0, r6
 8007568:	4639      	mov	r1, r7
 800756a:	f7f9 f811 	bl	8000590 <__aeabi_dmul>
 800756e:	3c01      	subs	r4, #1
 8007570:	4606      	mov	r6, r0
 8007572:	460f      	mov	r7, r1
 8007574:	e713      	b.n	800739e <__kernel_rem_pio2+0x2c6>
 8007576:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800757a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800757e:	f7f9 f807 	bl	8000590 <__aeabi_dmul>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4648      	mov	r0, r9
 8007588:	4651      	mov	r1, sl
 800758a:	f7f8 fe4b 	bl	8000224 <__adddf3>
 800758e:	3701      	adds	r7, #1
 8007590:	4681      	mov	r9, r0
 8007592:	468a      	mov	sl, r1
 8007594:	9b00      	ldr	r3, [sp, #0]
 8007596:	429f      	cmp	r7, r3
 8007598:	dc02      	bgt.n	80075a0 <__kernel_rem_pio2+0x4c8>
 800759a:	9b06      	ldr	r3, [sp, #24]
 800759c:	429f      	cmp	r7, r3
 800759e:	ddea      	ble.n	8007576 <__kernel_rem_pio2+0x49e>
 80075a0:	9a06      	ldr	r2, [sp, #24]
 80075a2:	ab48      	add	r3, sp, #288	; 0x120
 80075a4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80075a8:	e9c6 9a00 	strd	r9, sl, [r6]
 80075ac:	3c01      	subs	r4, #1
 80075ae:	e6fa      	b.n	80073a6 <__kernel_rem_pio2+0x2ce>
 80075b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	dc0b      	bgt.n	80075ce <__kernel_rem_pio2+0x4f6>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	dc39      	bgt.n	800762e <__kernel_rem_pio2+0x556>
 80075ba:	d05d      	beq.n	8007678 <__kernel_rem_pio2+0x5a0>
 80075bc:	9b02      	ldr	r3, [sp, #8]
 80075be:	f003 0007 	and.w	r0, r3, #7
 80075c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80075c6:	ecbd 8b02 	vpop	{d8}
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d1f3      	bne.n	80075bc <__kernel_rem_pio2+0x4e4>
 80075d4:	9b05      	ldr	r3, [sp, #20]
 80075d6:	9500      	str	r5, [sp, #0]
 80075d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80075dc:	eb0d 0403 	add.w	r4, sp, r3
 80075e0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80075e4:	46a2      	mov	sl, r4
 80075e6:	9b00      	ldr	r3, [sp, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f1aa 0a08 	sub.w	sl, sl, #8
 80075ee:	dc69      	bgt.n	80076c4 <__kernel_rem_pio2+0x5ec>
 80075f0:	46aa      	mov	sl, r5
 80075f2:	f1ba 0f01 	cmp.w	sl, #1
 80075f6:	f1a4 0408 	sub.w	r4, r4, #8
 80075fa:	f300 8083 	bgt.w	8007704 <__kernel_rem_pio2+0x62c>
 80075fe:	9c05      	ldr	r4, [sp, #20]
 8007600:	ab48      	add	r3, sp, #288	; 0x120
 8007602:	441c      	add	r4, r3
 8007604:	2000      	movs	r0, #0
 8007606:	2100      	movs	r1, #0
 8007608:	2d01      	cmp	r5, #1
 800760a:	f300 809a 	bgt.w	8007742 <__kernel_rem_pio2+0x66a>
 800760e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007612:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007616:	f1bb 0f00 	cmp.w	fp, #0
 800761a:	f040 8098 	bne.w	800774e <__kernel_rem_pio2+0x676>
 800761e:	9b04      	ldr	r3, [sp, #16]
 8007620:	e9c3 7800 	strd	r7, r8, [r3]
 8007624:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007628:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800762c:	e7c6      	b.n	80075bc <__kernel_rem_pio2+0x4e4>
 800762e:	9e05      	ldr	r6, [sp, #20]
 8007630:	ab48      	add	r3, sp, #288	; 0x120
 8007632:	441e      	add	r6, r3
 8007634:	462c      	mov	r4, r5
 8007636:	2000      	movs	r0, #0
 8007638:	2100      	movs	r1, #0
 800763a:	2c00      	cmp	r4, #0
 800763c:	da33      	bge.n	80076a6 <__kernel_rem_pio2+0x5ce>
 800763e:	f1bb 0f00 	cmp.w	fp, #0
 8007642:	d036      	beq.n	80076b2 <__kernel_rem_pio2+0x5da>
 8007644:	4602      	mov	r2, r0
 8007646:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800764a:	9c04      	ldr	r4, [sp, #16]
 800764c:	e9c4 2300 	strd	r2, r3, [r4]
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007658:	f7f8 fde2 	bl	8000220 <__aeabi_dsub>
 800765c:	ae4a      	add	r6, sp, #296	; 0x128
 800765e:	2401      	movs	r4, #1
 8007660:	42a5      	cmp	r5, r4
 8007662:	da29      	bge.n	80076b8 <__kernel_rem_pio2+0x5e0>
 8007664:	f1bb 0f00 	cmp.w	fp, #0
 8007668:	d002      	beq.n	8007670 <__kernel_rem_pio2+0x598>
 800766a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800766e:	4619      	mov	r1, r3
 8007670:	9b04      	ldr	r3, [sp, #16]
 8007672:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007676:	e7a1      	b.n	80075bc <__kernel_rem_pio2+0x4e4>
 8007678:	9c05      	ldr	r4, [sp, #20]
 800767a:	ab48      	add	r3, sp, #288	; 0x120
 800767c:	441c      	add	r4, r3
 800767e:	2000      	movs	r0, #0
 8007680:	2100      	movs	r1, #0
 8007682:	2d00      	cmp	r5, #0
 8007684:	da09      	bge.n	800769a <__kernel_rem_pio2+0x5c2>
 8007686:	f1bb 0f00 	cmp.w	fp, #0
 800768a:	d002      	beq.n	8007692 <__kernel_rem_pio2+0x5ba>
 800768c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007690:	4619      	mov	r1, r3
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	e9c3 0100 	strd	r0, r1, [r3]
 8007698:	e790      	b.n	80075bc <__kernel_rem_pio2+0x4e4>
 800769a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800769e:	f7f8 fdc1 	bl	8000224 <__adddf3>
 80076a2:	3d01      	subs	r5, #1
 80076a4:	e7ed      	b.n	8007682 <__kernel_rem_pio2+0x5aa>
 80076a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80076aa:	f7f8 fdbb 	bl	8000224 <__adddf3>
 80076ae:	3c01      	subs	r4, #1
 80076b0:	e7c3      	b.n	800763a <__kernel_rem_pio2+0x562>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	e7c8      	b.n	800764a <__kernel_rem_pio2+0x572>
 80076b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80076bc:	f7f8 fdb2 	bl	8000224 <__adddf3>
 80076c0:	3401      	adds	r4, #1
 80076c2:	e7cd      	b.n	8007660 <__kernel_rem_pio2+0x588>
 80076c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80076c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80076cc:	9b00      	ldr	r3, [sp, #0]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	4632      	mov	r2, r6
 80076d4:	463b      	mov	r3, r7
 80076d6:	4640      	mov	r0, r8
 80076d8:	4649      	mov	r1, r9
 80076da:	f7f8 fda3 	bl	8000224 <__adddf3>
 80076de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4640      	mov	r0, r8
 80076e8:	4649      	mov	r1, r9
 80076ea:	f7f8 fd99 	bl	8000220 <__aeabi_dsub>
 80076ee:	4632      	mov	r2, r6
 80076f0:	463b      	mov	r3, r7
 80076f2:	f7f8 fd97 	bl	8000224 <__adddf3>
 80076f6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80076fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80076fe:	ed8a 7b00 	vstr	d7, [sl]
 8007702:	e770      	b.n	80075e6 <__kernel_rem_pio2+0x50e>
 8007704:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007708:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800770c:	4640      	mov	r0, r8
 800770e:	4632      	mov	r2, r6
 8007710:	463b      	mov	r3, r7
 8007712:	4649      	mov	r1, r9
 8007714:	f7f8 fd86 	bl	8000224 <__adddf3>
 8007718:	e9cd 0100 	strd	r0, r1, [sp]
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4640      	mov	r0, r8
 8007722:	4649      	mov	r1, r9
 8007724:	f7f8 fd7c 	bl	8000220 <__aeabi_dsub>
 8007728:	4632      	mov	r2, r6
 800772a:	463b      	mov	r3, r7
 800772c:	f7f8 fd7a 	bl	8000224 <__adddf3>
 8007730:	ed9d 7b00 	vldr	d7, [sp]
 8007734:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007738:	ed84 7b00 	vstr	d7, [r4]
 800773c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007740:	e757      	b.n	80075f2 <__kernel_rem_pio2+0x51a>
 8007742:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007746:	f7f8 fd6d 	bl	8000224 <__adddf3>
 800774a:	3d01      	subs	r5, #1
 800774c:	e75c      	b.n	8007608 <__kernel_rem_pio2+0x530>
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	9a04      	ldr	r2, [sp, #16]
 8007752:	601f      	str	r7, [r3, #0]
 8007754:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007758:	605c      	str	r4, [r3, #4]
 800775a:	609d      	str	r5, [r3, #8]
 800775c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007760:	60d3      	str	r3, [r2, #12]
 8007762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007766:	6110      	str	r0, [r2, #16]
 8007768:	6153      	str	r3, [r2, #20]
 800776a:	e727      	b.n	80075bc <__kernel_rem_pio2+0x4e4>
 800776c:	41700000 	.word	0x41700000
 8007770:	3e700000 	.word	0x3e700000
 8007774:	00000000 	.word	0x00000000

08007778 <scalbn>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	ec55 4b10 	vmov	r4, r5, d0
 800777e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007782:	4606      	mov	r6, r0
 8007784:	462b      	mov	r3, r5
 8007786:	b999      	cbnz	r1, 80077b0 <scalbn+0x38>
 8007788:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800778c:	4323      	orrs	r3, r4
 800778e:	d03f      	beq.n	8007810 <scalbn+0x98>
 8007790:	4b35      	ldr	r3, [pc, #212]	; (8007868 <scalbn+0xf0>)
 8007792:	4629      	mov	r1, r5
 8007794:	ee10 0a10 	vmov	r0, s0
 8007798:	2200      	movs	r2, #0
 800779a:	f7f8 fef9 	bl	8000590 <__aeabi_dmul>
 800779e:	4b33      	ldr	r3, [pc, #204]	; (800786c <scalbn+0xf4>)
 80077a0:	429e      	cmp	r6, r3
 80077a2:	4604      	mov	r4, r0
 80077a4:	460d      	mov	r5, r1
 80077a6:	da10      	bge.n	80077ca <scalbn+0x52>
 80077a8:	a327      	add	r3, pc, #156	; (adr r3, 8007848 <scalbn+0xd0>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	e01f      	b.n	80077f0 <scalbn+0x78>
 80077b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80077b4:	4291      	cmp	r1, r2
 80077b6:	d10c      	bne.n	80077d2 <scalbn+0x5a>
 80077b8:	ee10 2a10 	vmov	r2, s0
 80077bc:	4620      	mov	r0, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	f7f8 fd30 	bl	8000224 <__adddf3>
 80077c4:	4604      	mov	r4, r0
 80077c6:	460d      	mov	r5, r1
 80077c8:	e022      	b.n	8007810 <scalbn+0x98>
 80077ca:	460b      	mov	r3, r1
 80077cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80077d0:	3936      	subs	r1, #54	; 0x36
 80077d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80077d6:	4296      	cmp	r6, r2
 80077d8:	dd0d      	ble.n	80077f6 <scalbn+0x7e>
 80077da:	2d00      	cmp	r5, #0
 80077dc:	a11c      	add	r1, pc, #112	; (adr r1, 8007850 <scalbn+0xd8>)
 80077de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077e2:	da02      	bge.n	80077ea <scalbn+0x72>
 80077e4:	a11c      	add	r1, pc, #112	; (adr r1, 8007858 <scalbn+0xe0>)
 80077e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ea:	a319      	add	r3, pc, #100	; (adr r3, 8007850 <scalbn+0xd8>)
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f7f8 fece 	bl	8000590 <__aeabi_dmul>
 80077f4:	e7e6      	b.n	80077c4 <scalbn+0x4c>
 80077f6:	1872      	adds	r2, r6, r1
 80077f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80077fc:	428a      	cmp	r2, r1
 80077fe:	dcec      	bgt.n	80077da <scalbn+0x62>
 8007800:	2a00      	cmp	r2, #0
 8007802:	dd08      	ble.n	8007816 <scalbn+0x9e>
 8007804:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007808:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800780c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007810:	ec45 4b10 	vmov	d0, r4, r5
 8007814:	bd70      	pop	{r4, r5, r6, pc}
 8007816:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800781a:	da08      	bge.n	800782e <scalbn+0xb6>
 800781c:	2d00      	cmp	r5, #0
 800781e:	a10a      	add	r1, pc, #40	; (adr r1, 8007848 <scalbn+0xd0>)
 8007820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007824:	dac0      	bge.n	80077a8 <scalbn+0x30>
 8007826:	a10e      	add	r1, pc, #56	; (adr r1, 8007860 <scalbn+0xe8>)
 8007828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800782c:	e7bc      	b.n	80077a8 <scalbn+0x30>
 800782e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007832:	3236      	adds	r2, #54	; 0x36
 8007834:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007838:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800783c:	4620      	mov	r0, r4
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <scalbn+0xf8>)
 8007840:	2200      	movs	r2, #0
 8007842:	e7d5      	b.n	80077f0 <scalbn+0x78>
 8007844:	f3af 8000 	nop.w
 8007848:	c2f8f359 	.word	0xc2f8f359
 800784c:	01a56e1f 	.word	0x01a56e1f
 8007850:	8800759c 	.word	0x8800759c
 8007854:	7e37e43c 	.word	0x7e37e43c
 8007858:	8800759c 	.word	0x8800759c
 800785c:	fe37e43c 	.word	0xfe37e43c
 8007860:	c2f8f359 	.word	0xc2f8f359
 8007864:	81a56e1f 	.word	0x81a56e1f
 8007868:	43500000 	.word	0x43500000
 800786c:	ffff3cb0 	.word	0xffff3cb0
 8007870:	3c900000 	.word	0x3c900000
 8007874:	00000000 	.word	0x00000000

08007878 <floor>:
 8007878:	ec51 0b10 	vmov	r0, r1, d0
 800787c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007884:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007888:	2e13      	cmp	r6, #19
 800788a:	ee10 5a10 	vmov	r5, s0
 800788e:	ee10 8a10 	vmov	r8, s0
 8007892:	460c      	mov	r4, r1
 8007894:	dc31      	bgt.n	80078fa <floor+0x82>
 8007896:	2e00      	cmp	r6, #0
 8007898:	da14      	bge.n	80078c4 <floor+0x4c>
 800789a:	a333      	add	r3, pc, #204	; (adr r3, 8007968 <floor+0xf0>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 fcc0 	bl	8000224 <__adddf3>
 80078a4:	2200      	movs	r2, #0
 80078a6:	2300      	movs	r3, #0
 80078a8:	f7f9 f902 	bl	8000ab0 <__aeabi_dcmpgt>
 80078ac:	b138      	cbz	r0, 80078be <floor+0x46>
 80078ae:	2c00      	cmp	r4, #0
 80078b0:	da53      	bge.n	800795a <floor+0xe2>
 80078b2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80078b6:	4325      	orrs	r5, r4
 80078b8:	d052      	beq.n	8007960 <floor+0xe8>
 80078ba:	4c2d      	ldr	r4, [pc, #180]	; (8007970 <floor+0xf8>)
 80078bc:	2500      	movs	r5, #0
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	e024      	b.n	800790e <floor+0x96>
 80078c4:	4f2b      	ldr	r7, [pc, #172]	; (8007974 <floor+0xfc>)
 80078c6:	4137      	asrs	r7, r6
 80078c8:	ea01 0307 	and.w	r3, r1, r7
 80078cc:	4303      	orrs	r3, r0
 80078ce:	d01e      	beq.n	800790e <floor+0x96>
 80078d0:	a325      	add	r3, pc, #148	; (adr r3, 8007968 <floor+0xf0>)
 80078d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d6:	f7f8 fca5 	bl	8000224 <__adddf3>
 80078da:	2200      	movs	r2, #0
 80078dc:	2300      	movs	r3, #0
 80078de:	f7f9 f8e7 	bl	8000ab0 <__aeabi_dcmpgt>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d0eb      	beq.n	80078be <floor+0x46>
 80078e6:	2c00      	cmp	r4, #0
 80078e8:	bfbe      	ittt	lt
 80078ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80078ee:	4133      	asrlt	r3, r6
 80078f0:	18e4      	addlt	r4, r4, r3
 80078f2:	ea24 0407 	bic.w	r4, r4, r7
 80078f6:	2500      	movs	r5, #0
 80078f8:	e7e1      	b.n	80078be <floor+0x46>
 80078fa:	2e33      	cmp	r6, #51	; 0x33
 80078fc:	dd0b      	ble.n	8007916 <floor+0x9e>
 80078fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007902:	d104      	bne.n	800790e <floor+0x96>
 8007904:	ee10 2a10 	vmov	r2, s0
 8007908:	460b      	mov	r3, r1
 800790a:	f7f8 fc8b 	bl	8000224 <__adddf3>
 800790e:	ec41 0b10 	vmov	d0, r0, r1
 8007912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007916:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800791a:	f04f 37ff 	mov.w	r7, #4294967295
 800791e:	40df      	lsrs	r7, r3
 8007920:	4238      	tst	r0, r7
 8007922:	d0f4      	beq.n	800790e <floor+0x96>
 8007924:	a310      	add	r3, pc, #64	; (adr r3, 8007968 <floor+0xf0>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f7f8 fc7b 	bl	8000224 <__adddf3>
 800792e:	2200      	movs	r2, #0
 8007930:	2300      	movs	r3, #0
 8007932:	f7f9 f8bd 	bl	8000ab0 <__aeabi_dcmpgt>
 8007936:	2800      	cmp	r0, #0
 8007938:	d0c1      	beq.n	80078be <floor+0x46>
 800793a:	2c00      	cmp	r4, #0
 800793c:	da0a      	bge.n	8007954 <floor+0xdc>
 800793e:	2e14      	cmp	r6, #20
 8007940:	d101      	bne.n	8007946 <floor+0xce>
 8007942:	3401      	adds	r4, #1
 8007944:	e006      	b.n	8007954 <floor+0xdc>
 8007946:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800794a:	2301      	movs	r3, #1
 800794c:	40b3      	lsls	r3, r6
 800794e:	441d      	add	r5, r3
 8007950:	45a8      	cmp	r8, r5
 8007952:	d8f6      	bhi.n	8007942 <floor+0xca>
 8007954:	ea25 0507 	bic.w	r5, r5, r7
 8007958:	e7b1      	b.n	80078be <floor+0x46>
 800795a:	2500      	movs	r5, #0
 800795c:	462c      	mov	r4, r5
 800795e:	e7ae      	b.n	80078be <floor+0x46>
 8007960:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007964:	e7ab      	b.n	80078be <floor+0x46>
 8007966:	bf00      	nop
 8007968:	8800759c 	.word	0x8800759c
 800796c:	7e37e43c 	.word	0x7e37e43c
 8007970:	bff00000 	.word	0xbff00000
 8007974:	000fffff 	.word	0x000fffff

08007978 <memset>:
 8007978:	4402      	add	r2, r0
 800797a:	4603      	mov	r3, r0
 800797c:	4293      	cmp	r3, r2
 800797e:	d100      	bne.n	8007982 <memset+0xa>
 8007980:	4770      	bx	lr
 8007982:	f803 1b01 	strb.w	r1, [r3], #1
 8007986:	e7f9      	b.n	800797c <memset+0x4>

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	4d0d      	ldr	r5, [pc, #52]	; (80079c0 <__libc_init_array+0x38>)
 800798c:	4c0d      	ldr	r4, [pc, #52]	; (80079c4 <__libc_init_array+0x3c>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	2600      	movs	r6, #0
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	4d0b      	ldr	r5, [pc, #44]	; (80079c8 <__libc_init_array+0x40>)
 800799a:	4c0c      	ldr	r4, [pc, #48]	; (80079cc <__libc_init_array+0x44>)
 800799c:	f000 f818 	bl	80079d0 <_init>
 80079a0:	1b64      	subs	r4, r4, r5
 80079a2:	10a4      	asrs	r4, r4, #2
 80079a4:	2600      	movs	r6, #0
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	08007bd0 	.word	0x08007bd0
 80079c4:	08007bd0 	.word	0x08007bd0
 80079c8:	08007bd0 	.word	0x08007bd0
 80079cc:	08007bd4 	.word	0x08007bd4

080079d0 <_init>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr

080079dc <_fini>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	bf00      	nop
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr

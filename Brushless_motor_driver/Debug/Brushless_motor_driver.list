
Brushless_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d6c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08009f48  08009f48  00019f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a178  0800a178  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a178  0800a178  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a178  0800a178  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a178  0800a178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a180  0800a180  0001a180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800a188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000060  0800a1e4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800a1e4  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002011d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000444b  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  00044638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d6  00000000  00000000  00046178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002739d  00000000  00000000  0004764e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d668  00000000  00000000  0006e9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb354  00000000  00000000  0008c053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000080c0  00000000  00000000  001873a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0018f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009f2c 	.word	0x08009f2c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08009f2c 	.word	0x08009f2c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	0000      	movs	r0, r0
	...

08000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>:

MovingAvgFilter CurrSensDriver::curr_A_filter(10);
MovingAvgFilter CurrSensDriver::curr_B_filter(10);
MovingAvgFilter CurrSensDriver::curr_C_filter(10);

double CurrSensDriver::counts_to_amps(uint32_t ADC_counts){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

	double sense_out = ( ADC_counts * MAX_ADC_READ_VOLTAGE/MAX_ADC_COUNTS);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fcbb 	bl	800049c <__aeabi_ui2d>
 8000b26:	a326      	add	r3, pc, #152	; (adr r3, 8000bc0 <_ZN14CurrSensDriver14counts_to_ampsEm+0xa8>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	f7ff fd30 	bl	8000590 <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4610      	mov	r0, r2
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <_ZN14CurrSensDriver14counts_to_ampsEm+0xa0>)
 8000b3e:	f7ff fe51 	bl	80007e4 <__aeabi_ddiv>
 8000b42:	4602      	mov	r2, r0
 8000b44:	460b      	mov	r3, r1
 8000b46:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double shifted_voltage = sense_out - AMPLIFIER_SHIFT;
 8000b4a:	a317      	add	r3, pc, #92	; (adr r3, 8000ba8 <_ZN14CurrSensDriver14counts_to_ampsEm+0x90>)
 8000b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000b54:	f7ff fb64 	bl	8000220 <__aeabi_dsub>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double scaled_voltage = shifted_voltage/AMPLIFIER_SCALE;
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_ZN14CurrSensDriver14counts_to_ampsEm+0xa4>)
 8000b66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b6a:	f7ff fe3b 	bl	80007e4 <__aeabi_ddiv>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double current = scaled_voltage/SHUNT_RESISTANCE;
 8000b76:	a30e      	add	r3, pc, #56	; (adr r3, 8000bb0 <_ZN14CurrSensDriver14counts_to_ampsEm+0x98>)
 8000b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b80:	f7ff fe30 	bl	80007e4 <__aeabi_ddiv>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return current;
 8000b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b90:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b94:	eeb0 0a47 	vmov.f32	s0, s14
 8000b98:	eef0 0a67 	vmov.f32	s1, s15
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	66666666 	.word	0x66666666
 8000bac:	3ffa6666 	.word	0x3ffa6666
 8000bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000bb4:	3f40624d 	.word	0x3f40624d
 8000bb8:	40b00000 	.word	0x40b00000
 8000bbc:	40340000 	.word	0x40340000
 8000bc0:	66666666 	.word	0x66666666
 8000bc4:	400a6666 	.word	0x400a6666

08000bc8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>:


void CurrSensDriver::get_current_Amp(PhaseCurrents& currents){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start_DMA(ADC_handle, CurrSensDriver::ADCValues, 3);
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xbc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	492c      	ldr	r1, [pc, #176]	; (8000c88 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fa2f 	bl	800403c <HAL_ADC_Start_DMA>
	curr_A_filter.add_new_element(counts_to_amps(ADCValues[0]));
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff98 	bl	8000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8000be8:	eeb0 7a40 	vmov.f32	s14, s0
 8000bec:	eef0 7a60 	vmov.f32	s15, s1
 8000bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8000bf4:	eef0 0a67 	vmov.f32	s1, s15
 8000bf8:	4824      	ldr	r0, [pc, #144]	; (8000c8c <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc4>)
 8000bfa:	f000 fb02 	bl	8001202 <_ZN15MovingAvgFilter15add_new_elementEd>
	curr_B_filter.add_new_element(counts_to_amps(ADCValues[1]));
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff88 	bl	8000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8000c08:	eeb0 7a40 	vmov.f32	s14, s0
 8000c0c:	eef0 7a60 	vmov.f32	s15, s1
 8000c10:	eeb0 0a47 	vmov.f32	s0, s14
 8000c14:	eef0 0a67 	vmov.f32	s1, s15
 8000c18:	481d      	ldr	r0, [pc, #116]	; (8000c90 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc8>)
 8000c1a:	f000 faf2 	bl	8001202 <_ZN15MovingAvgFilter15add_new_elementEd>
	curr_C_filter.add_new_element(counts_to_amps(ADCValues[2]));
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc0>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff78 	bl	8000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8000c28:	eeb0 7a40 	vmov.f32	s14, s0
 8000c2c:	eef0 7a60 	vmov.f32	s15, s1
 8000c30:	eeb0 0a47 	vmov.f32	s0, s14
 8000c34:	eef0 0a67 	vmov.f32	s1, s15
 8000c38:	4816      	ldr	r0, [pc, #88]	; (8000c94 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xcc>)
 8000c3a:	f000 fae2 	bl	8001202 <_ZN15MovingAvgFilter15add_new_elementEd>
	currents.iA = curr_A_filter.filtered_output();
 8000c3e:	4813      	ldr	r0, [pc, #76]	; (8000c8c <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc4>)
 8000c40:	f000 fb27 	bl	8001292 <_ZN15MovingAvgFilter15filtered_outputEv>
 8000c44:	eeb0 7a40 	vmov.f32	s14, s0
 8000c48:	eef0 7a60 	vmov.f32	s15, s1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	ed83 7b00 	vstr	d7, [r3]
	currents.iB = curr_B_filter.filtered_output();
 8000c52:	480f      	ldr	r0, [pc, #60]	; (8000c90 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xc8>)
 8000c54:	f000 fb1d 	bl	8001292 <_ZN15MovingAvgFilter15filtered_outputEv>
 8000c58:	eeb0 7a40 	vmov.f32	s14, s0
 8000c5c:	eef0 7a60 	vmov.f32	s15, s1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	ed83 7b02 	vstr	d7, [r3, #8]
	currents.iC = curr_C_filter.filtered_output();
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xcc>)
 8000c68:	f000 fb13 	bl	8001292 <_ZN15MovingAvgFilter15filtered_outputEv>
 8000c6c:	eeb0 7a40 	vmov.f32	s14, s0
 8000c70:	eef0 7a60 	vmov.f32	s15, s1
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	ed83 7b04 	vstr	d7, [r3, #16]
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000007c 	.word	0x2000007c
 8000c88:	20000080 	.word	0x20000080
 8000c8c:	20000090 	.word	0x20000090
 8000c90:	200000a8 	.word	0x200000a8
 8000c94:	200000c0 	.word	0x200000c0

08000c98 <_ZN15MovingAvgFilterD1Ev>:
#define INC_FILTER_H_

#include<vector>
#include<cstdint>

class MovingAvgFilter{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f839 	bl	8000d1c <_ZNSt6vectorIdSaIdEED1Ev>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_Z41__static_initialization_and_destruction_0ii>:
	return 0;
}

bool CurrSensDriver::set_voltage_V(PhaseType phase, double voltage){
	return true;
}
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d110      	bne.n	8000ce6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10b      	bne.n	8000ce6 <_Z41__static_initialization_and_destruction_0ii+0x32>
MovingAvgFilter CurrSensDriver::curr_A_filter(10);
 8000cce:	210a      	movs	r1, #10
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000cd2:	f000 fa67 	bl	80011a4 <_ZN15MovingAvgFilterC1Eh>
MovingAvgFilter CurrSensDriver::curr_B_filter(10);
 8000cd6:	210a      	movs	r1, #10
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000cda:	f000 fa63 	bl	80011a4 <_ZN15MovingAvgFilterC1Eh>
MovingAvgFilter CurrSensDriver::curr_C_filter(10);
 8000cde:	210a      	movs	r1, #10
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000ce2:	f000 fa5f 	bl	80011a4 <_ZN15MovingAvgFilterC1Eh>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10d      	bne.n	8000d08 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d108      	bne.n	8000d08 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8000cf6:	4808      	ldr	r0, [pc, #32]	; (8000d18 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000cf8:	f7ff ffce 	bl	8000c98 <_ZN15MovingAvgFilterD1Ev>
MovingAvgFilter CurrSensDriver::curr_B_filter(10);
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000cfe:	f7ff ffcb 	bl	8000c98 <_ZN15MovingAvgFilterD1Ev>
MovingAvgFilter CurrSensDriver::curr_A_filter(10);
 8000d02:	4803      	ldr	r0, [pc, #12]	; (8000d10 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000d04:	f7ff ffc8 	bl	8000c98 <_ZN15MovingAvgFilterD1Ev>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000090 	.word	0x20000090
 8000d14:	200000a8 	.word	0x200000a8
 8000d18:	200000c0 	.word	0x200000c0

08000d1c <_ZNSt6vectorIdSaIdEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681c      	ldr	r4, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f834 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8000d34:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000d36:	461a      	mov	r2, r3
 8000d38:	4629      	mov	r1, r5
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 f839 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f811 	bl	8000d6a <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bdb0      	pop	{r4, r5, r7, pc}

08000d52 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f837 	bl	8000dce <_ZNSaIdED1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8000d82:	461a      	mov	r2, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f82e 	bl	8000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ffe0 	bl	8000d52 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f000 f823 	bl	8000e0c <_ZSt8_DestroyIPdEvT_S1_>
    }
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_ZNSaIdED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f825 	bl	8000e26 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
	if (__p)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f81c 	bl	8000e3c <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_ZSt8_DestroyIPdEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f81e 	bl	8000e5a <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 f80f 	bl	8000e70 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4619      	mov	r1, r3
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f007 fde4 	bl	8008a50 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_GLOBAL__sub_I__ZN14CurrSensDriver10ADC_handleE>:
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff0b 	bl	8000cb4 <_Z41__static_initialization_and_destruction_0ii>
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_GLOBAL__sub_D__ZN14CurrSensDriver10ADC_handleE>:
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ff03 	bl	8000cb4 <_Z41__static_initialization_and_destruction_0ii>
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	bf00      	nop
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_TIM_PeriodElapsedCallback>:
#include "main_bridge.h"
#include <algorithm>


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b092      	sub	sp, #72	; 0x48
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	// check if it gets here
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 8000ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fe7b 	bl	8000bc8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>

	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8000ed2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000ed6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8000eda:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8000ede:	eeb0 2a45 	vmov.f32	s4, s10
 8000ee2:	eef0 2a65 	vmov.f32	s5, s11
 8000ee6:	eeb0 1a46 	vmov.f32	s2, s12
 8000eea:	eef0 1a66 	vmov.f32	s3, s13
 8000eee:	eeb0 0a47 	vmov.f32	s0, s14
 8000ef2:	eef0 0a67 	vmov.f32	s1, s15
 8000ef6:	f002 f8a7 	bl	8003048 <_Z9tf_clarkeddd>
 8000efa:	eeb0 6a40 	vmov.f32	s12, s0
 8000efe:	eef0 6a60 	vmov.f32	s13, s1
 8000f02:	eeb0 7a41 	vmov.f32	s14, s2
 8000f06:	eef0 7a61 	vmov.f32	s15, s3
 8000f0a:	ed87 6b06 	vstr	d6, [r7, #24]
 8000f0e:	ed87 7b08 	vstr	d7, [r7, #32]

	double theta_d =  HallEncoderDriver::get_thetad();
 8000f12:	f001 fc3b 	bl	800278c <_ZN17HallEncoderDriver10get_thetadEv>
 8000f16:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8000f1a:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f1e:	ed97 6b08 	vldr	d6, [r7, #32]
	auto [curr_d, curr_q] = tf_park(curr_alpha, curr_beta, theta_d);
 8000f22:	ed97 2b10 	vldr	d2, [r7, #64]	; 0x40
 8000f26:	eeb0 1a46 	vmov.f32	s2, s12
 8000f2a:	eef0 1a66 	vmov.f32	s3, s13
 8000f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f32:	eef0 0a67 	vmov.f32	s1, s15
 8000f36:	f002 f818 	bl	8002f6a <_Z7tf_parkddd>
 8000f3a:	eeb0 6a40 	vmov.f32	s12, s0
 8000f3e:	eef0 6a60 	vmov.f32	s13, s1
 8000f42:	eeb0 7a41 	vmov.f32	s14, s2
 8000f46:	eef0 7a61 	vmov.f32	s15, s3
 8000f4a:	ed87 6b02 	vstr	d6, [r7, #8]
 8000f4e:	ed87 7b04 	vstr	d7, [r7, #16]

	return;
 8000f52:	bf00      	nop
}
 8000f54:	3748      	adds	r7, #72	; 0x48
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b090      	sub	sp, #64	; 0x40
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	// increment position counts by one every time in the callback

	// Every time this callback is called, the angle in the
	//motor increases by delta theta

	uint32_t H1 = TIM3->CCR1;
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f68:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t H2 = TIM3->CCR2;
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t H3 = TIM3->CCR3;
 8000f70:	4b24      	ldr	r3, [pc, #144]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t longest_CCR = std::max({H1, H2, H3});
 8000f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	2303      	movs	r3, #3
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f94:	f000 f840 	bl	8001018 <_ZSt3maxImET_St16initializer_listIS0_E>
 8000f98:	6338      	str	r0, [r7, #48]	; 0x30
	// The longest CCR represents the amount of time taken for the motor to move delta theta
	// where delta theta is (360/number of poles)
	double time_per_count = TIM3->ARR/(64000000);
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa4:	0e1b      	lsrs	r3, r3, #24
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa78 	bl	800049c <__aeabi_ui2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double angular_velocity = DELTA_THETA/(longest_CCR*time_per_count); //degrees per second
 8000fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fb6:	f7ff fa71 	bl	800049c <__aeabi_ui2d>
 8000fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fbe:	f7ff fae7 	bl	8000590 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4910      	ldr	r1, [pc, #64]	; (800100c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000fcc:	f7ff fc0a 	bl	80007e4 <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	motor_velocity = angular_velocity;
 8000fd8:	490d      	ldr	r1, [pc, #52]	; (8001010 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fde:	e9c1 2300 	strd	r2, r3, [r1]
	motor_position += DELTA_THETA;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000fe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000fee:	f7ff f919 	bl	8000224 <__adddf3>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4907      	ldr	r1, [pc, #28]	; (8001014 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000ff8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000ffc:	bf00      	nop
 8000ffe:	3740      	adds	r7, #64	; 0x40
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40000400 	.word	0x40000400
 8001008:	431bde83 	.word	0x431bde83
 800100c:	40360000 	.word	0x40360000
 8001010:	200000d8 	.word	0x200000d8
 8001014:	200000e0 	.word	0x200000e0

08001018 <_ZSt3maxImET_St16initializer_listIS0_E>:
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline _Tp
    max(initializer_list<_Tp> __l)
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	463b      	mov	r3, r7
 8001020:	e883 0003 	stmia.w	r3, {r0, r1}
    { return *std::max_element(__l.begin(), __l.end()); }
 8001024:	463b      	mov	r3, r7
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f810 	bl	800104c <_ZNKSt16initializer_listImE5beginEv>
 800102c:	4604      	mov	r4, r0
 800102e:	463b      	mov	r3, r7
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f817 	bl	8001064 <_ZNKSt16initializer_listImE3endEv>
 8001036:	4603      	mov	r3, r0
 8001038:	4619      	mov	r1, r3
 800103a:	4620      	mov	r0, r4
 800103c:	f000 f824 	bl	8001088 <_ZSt11max_elementIPKmET_S2_S2_>
 8001040:	4603      	mov	r3, r0
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bd90      	pop	{r4, r7, pc}

0800104c <_ZNKSt16initializer_listImE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_ZNKSt16initializer_listImE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffed 	bl	800104c <_ZNKSt16initializer_listImE5beginEv>
 8001072:	4604      	mov	r4, r0
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f818 	bl	80010aa <_ZNKSt16initializer_listImE4sizeEv>
 800107a:	4603      	mov	r3, r0
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4423      	add	r3, r4
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bd90      	pop	{r4, r7, pc}

08001088 <_ZSt11max_elementIPKmET_S2_S2_>:
   *  @return  Iterator referencing the first instance of the largest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__max_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 8001092:	f7ff ff0d 	bl	8000eb0 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__max_element(__first, __last,
 8001096:	4622      	mov	r2, r4
 8001098:	6839      	ldr	r1, [r7, #0]
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f826 	bl	80010ec <_ZSt13__max_elementIPKmN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>
 80010a0:	4603      	mov	r3, r0
    }
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}

080010aa <_ZNKSt16initializer_listImE4sizeEv>:
      size() const noexcept { return _M_len; }
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKmS4_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	bf34      	ite	cc
 80010da:	2301      	movcc	r3, #1
 80010dc:	2300      	movcs	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_ZSt13__max_elementIPKmN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>:
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return __first;
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d101      	bne.n	8001104 <_ZSt13__max_elementIPKmN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x18>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	e01a      	b.n	800113a <_ZSt13__max_elementIPKmN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4e>
      _ForwardIterator __result = __first;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 8001108:	e00a      	b.n	8001120 <_ZSt13__max_elementIPKmN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	if (__comp(__result, __first))
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	6979      	ldr	r1, [r7, #20]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffd6 	bl	80010c2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKmS4_EEbT_T0_>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <_ZSt13__max_elementIPKmN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	  __result = __first;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3304      	adds	r3, #4
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	429a      	cmp	r2, r3
 800112c:	bf14      	ite	ne
 800112e:	2301      	movne	r3, #1
 8001130:	2300      	moveq	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1e8      	bne.n	800110a <_ZSt13__max_elementIPKmN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1e>
      return __result;
 8001138:	697b      	ldr	r3, [r7, #20]
    }
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>:
      _Vector_base() = default;
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f8a6 	bl	80012cc <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_ZNSt6vectorIdSaIdEEC1Ev>:
      vector() = default;
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ffeb 	bl	8001170 <_ZNSt12_Vector_baseIdSaIdEEC1Ev>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_ZN15MovingAvgFilterC1Eh>:
 *      Author: Sashreek
 */
#include "main.h"
#include "filter.h"

MovingAvgFilter::MovingAvgFilter(uint8_t filter_size):filter_size(filter_size){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	78fa      	ldrb	r2, [r7, #3]
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3304      	adds	r3, #4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffe5 	bl	800118a <_ZNSt6vectorIdSaIdEEC1Ev>
	cache.resize(filter_size, 0);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	1d18      	adds	r0, r3, #4
 80011c4:	78f9      	ldrb	r1, [r7, #3]
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	461a      	mov	r2, r3
 80011d8:	f000 f888 	bl	80012ec <_ZNSt6vectorIdSaIdEE6resizeEjRKd>
	cache.reserve(filter_size);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3304      	adds	r3, #4
 80011e0:	78fa      	ldrb	r2, [r7, #3]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f8d3 	bl	8001390 <_ZNSt6vectorIdSaIdEE7reserveEj>
	sum = 0;
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_ZN15MovingAvgFilter15add_new_elementEd>:


void MovingAvgFilter::add_new_element(double item){
 8001202:	b590      	push	{r4, r7, lr}
 8001204:	b089      	sub	sp, #36	; 0x24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	ed87 0b00 	vstr	d0, [r7]
	double removed = cache.back();
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3304      	adds	r3, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f93c 	bl	8001490 <_ZNSt6vectorIdSaIdEE4backEv>
 8001218:	4603      	mov	r3, r0
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	cache.pop_back();
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3304      	adds	r3, #4
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f94d 	bl	80014c6 <_ZNSt6vectorIdSaIdEE8pop_backEv>
	sum -= removed;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001236:	f7fe fff3 	bl	8000220 <__aeabi_dsub>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	68f9      	ldr	r1, [r7, #12]
 8001240:	e9c1 2304 	strd	r2, r3, [r1, #16]
	sum += item;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800124a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800124e:	f7fe ffe9 	bl	8000224 <__adddf3>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	68f9      	ldr	r1, [r7, #12]
 8001258:	e9c1 2304 	strd	r2, r3, [r1, #16]
	cache.insert(cache.begin(), item);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1d1c      	adds	r4, r3, #4
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3304      	adds	r3, #4
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f943 	bl	80014f0 <_ZNSt6vectorIdSaIdEE5beginEv>
 800126a:	4603      	mov	r3, r0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	f107 0214 	add.w	r2, r7, #20
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f949 	bl	8001510 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1IPdEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800127e:	463b      	mov	r3, r7
 8001280:	461a      	mov	r2, r3
 8001282:	6939      	ldr	r1, [r7, #16]
 8001284:	4620      	mov	r0, r4
 8001286:	f000 f954 	bl	8001532 <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_>
}
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}

08001292 <_ZN15MovingAvgFilter15filtered_outputEv>:


double MovingAvgFilter::filtered_output(){
 8001292:	b5b0      	push	{r4, r5, r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	return sum/filter_size;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f909 	bl	80004bc <__aeabi_i2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff fa97 	bl	80007e4 <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80012be:	eeb0 0a47 	vmov.f32	s0, s14
 80012c2:	eef0 0a67 	vmov.f32	s1, s15
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bdb0      	pop	{r4, r5, r7, pc}

080012cc <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f9ce 	bl	8001676 <_ZNSaIdEC1Ev>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f9d6 	bl	800168e <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_ZNSt6vectorIdSaIdEE6resizeEjRKd>:
       *  %vector's current size the %vector is truncated, otherwise
       *  the %vector is extended and new elements are populated with
       *  given data.
       */
      void
      resize(size_type __new_size, const value_type& __x)
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
      {
	if (__new_size > size())
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 f9dc 	bl	80016b6 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 80012fe:	4602      	mov	r2, r0
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4293      	cmp	r3, r2
 8001304:	bf8c      	ite	hi
 8001306:	2301      	movhi	r3, #1
 8001308:	2300      	movls	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00f      	beq.n	8001330 <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x44>
	  _M_fill_insert(end(), __new_size - size(), __x);
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f000 fb21 	bl	8001958 <_ZNSt6vectorIdSaIdEE3endEv>
 8001316:	4604      	mov	r4, r0
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f9cc 	bl	80016b6 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 800131e:	4602      	mov	r2, r0
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1a9a      	subs	r2, r3, r2
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4621      	mov	r1, r4
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 f9d5 	bl	80016d8 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 800132e:	e014      	b.n	800135a <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x6e>
	else if (__new_size < size())
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f000 f9c0 	bl	80016b6 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001336:	4602      	mov	r2, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4293      	cmp	r3, r2
 800133c:	bf34      	ite	cc
 800133e:	2301      	movcc	r3, #1
 8001340:	2300      	movcs	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <_ZNSt6vectorIdSaIdEE6resizeEjRKd+0x6e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	4619      	mov	r1, r3
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f000 fb10 	bl	800197a <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd>
      }
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bd90      	pop	{r4, r7, pc}

08001362 <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>:
      _S_use_relocate()
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f805 	bl	8001378 <_ZNSt6vectorIdSaIdEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800136e:	4603      	mov	r3, r0
      }
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZNSt6vectorIdSaIdEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001380:	2301      	movs	r3, #1
      }
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <_ZNSt6vectorIdSaIdEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fb0e 	bl	80019bc <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	bf8c      	ite	hi
 80013a8:	2301      	movhi	r3, #1
 80013aa:	2300      	movls	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <_ZNSt6vectorIdSaIdEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 80013b2:	4836      	ldr	r0, [pc, #216]	; (800148c <_ZNSt6vectorIdSaIdEE7reserveEj+0xfc>)
 80013b4:	f007 fb65 	bl	8008a82 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fb10 	bl	80019de <_ZNKSt6vectorIdSaIdEE8capacityEv>
 80013be:	4602      	mov	r2, r0
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	bf8c      	ite	hi
 80013c6:	2301      	movhi	r3, #1
 80013c8:	2300      	movls	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d059      	beq.n	8001484 <_ZNSt6vectorIdSaIdEE7reserveEj+0xf4>
	{
	  const size_type __old_size = size();
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f970 	bl	80016b6 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 80013d6:	60b8      	str	r0, [r7, #8]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80013d8:	f7ff ffc3 	bl	8001362 <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d014      	beq.n	800140c <_ZNSt6vectorIdSaIdEE7reserveEj+0x7c>
	    {
	      __tmp = this->_M_allocate(__n);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6839      	ldr	r1, [r7, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fb09 	bl	80019fe <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 80013ec:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681c      	ldr	r4, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fccf 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80013fe:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4629      	mov	r1, r5
 8001404:	4620      	mov	r0, r4
 8001406:	f000 fb0e 	bl	8001a26 <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>
 800140a:	e01f      	b.n	800144c <_ZNSt6vectorIdSaIdEE7reserveEj+0xbc>
	    }
	  else
#endif
	    {
	      __tmp = _M_allocate_and_copy(__n,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fb1c 	bl	8001a4e <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 8001416:	4604      	mov	r4, r0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fb16 	bl	8001a4e <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 8001422:	4603      	mov	r3, r0
 8001424:	4622      	mov	r2, r4
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fb1f 	bl	8001a6c <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyISt13move_iteratorIPdEEES4_jT_S6_>
 800142e:	60f8      	str	r0, [r7, #12]
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681c      	ldr	r4, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fcae 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001440:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001442:	461a      	mov	r2, r3
 8001444:	4629      	mov	r1, r5
 8001446:	4620      	mov	r0, r4
 8001448:	f7ff fcb3 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	10db      	asrs	r3, r3, #3
	  _M_deallocate(this->_M_impl._M_start,
 800145e:	461a      	mov	r2, r3
 8001460:	f7ff fcc1 	bl	8000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
	  this->_M_impl._M_start = __tmp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	441a      	add	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	441a      	add	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
	}
    }
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bdb0      	pop	{r4, r5, r7, pc}
 800148c:	08009f48 	.word	0x08009f48

08001490 <_ZNSt6vectorIdSaIdEE4backEv>:
      /**
       *  Returns a read/write reference to the data at the last
       *  element of the %vector.
       */
      reference
      back() _GLIBCXX_NOEXCEPT
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *(end() - 1);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fa5d 	bl	8001958 <_ZNSt6vectorIdSaIdEE3endEv>
 800149e:	4603      	mov	r3, r0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2101      	movs	r1, #1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fafb 	bl	8001aa4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEmiEi>
 80014ae:	4603      	mov	r3, r0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fb0d 	bl	8001ad6 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>
 80014bc:	4603      	mov	r3, r0
      }
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_ZNSt6vectorIdSaIdEE8pop_backEv>:
       *  Note that no data is returned, and if the last element's
       *  data is needed, it should be retrieved before pop_back() is
       *  called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f1a3 0208 	sub.w	r2, r3, #8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f000 fb03 	bl	8001aee <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
      }
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_ZNSt6vectorIdSaIdEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fb01 	bl	8001b08 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1IPdEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f000 fb04 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001520:	4603      	mov	r3, r0
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 8001532:	b580      	push	{r7, lr}
 8001534:	b092      	sub	sp, #72	; 0x48
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
    insert(const_iterator __position, const value_type& __x)
#else
    insert(iterator __position, const value_type& __x)
#endif
    {
      const size_type __n = __position - begin();
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff ffd6 	bl	80014f0 <_ZNSt6vectorIdSaIdEE5beginEv>
 8001544:	4603      	mov	r3, r0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
 8001548:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 faf3 	bl	8001b3e <_ZN9__gnu_cxxmiIPKdPdSt6vectorIdSaIdEEEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8001558:	4603      	mov	r3, r0
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	429a      	cmp	r2, r3
 8001566:	d054      	beq.n	8001612 <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0xe0>
	if (__position == end())
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f9f5 	bl	8001958 <_ZNSt6vectorIdSaIdEE3endEv>
 800156e:	4603      	mov	r3, r0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
 8001572:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f000 faf3 	bl	8001b68 <_ZN9__gnu_cxxeqIPKdPdSt6vectorIdSaIdEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00d      	beq.n	80015a4 <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0x72>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4619      	mov	r1, r3
 8001592:	f000 fb01 	bl	8001b98 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f103 0208 	add.w	r2, r3, #8
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	e055      	b.n	8001650 <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0x11e>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  {
#if __cplusplus >= 201103L
	    const auto __pos = begin() + (__position - cbegin());
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7ff ffa3 	bl	80014f0 <_ZNSt6vectorIdSaIdEE5beginEv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fb05 	bl	8001bbe <_ZNKSt6vectorIdSaIdEE6cbeginEv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
 80015b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fb0b 	bl	8001bde <_ZN9__gnu_cxxmiIPKdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fb19 	bl	8001c08 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>
 80015d6:	4603      	mov	r3, r0
 80015d8:	623b      	str	r3, [r7, #32]
	    // __x could be an existing element of this vector, so make a
	    // copy of it before _M_insert_aux moves elements around.
	    _Temporary_value __x_copy(this, __x);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fb28 	bl	8001c38 <_ZNSt6vectorIdSaIdEE16_Temporary_valueC1IJRKdEEEPS1_DpOT_>
	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fb55 	bl	8001c9c <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_valEv>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fb5d 	bl	8001cb4 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	6a39      	ldr	r1, [r7, #32]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 fb62 	bl	8001cca <_ZNSt6vectorIdSaIdEE13_M_insert_auxIdEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEOT_>
#else
	    _M_insert_aux(__position, __x);
#endif
	  }
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fb32 	bl	8001c74 <_ZNSt6vectorIdSaIdEE16_Temporary_valueD1Ev>
 8001610:	e01e      	b.n	8001650 <_ZNSt6vectorIdSaIdEE6insertEN9__gnu_cxx17__normal_iteratorIPKdS1_EERS4_+0x11e>
      else
#if __cplusplus >= 201103L
	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff ff6c 	bl	80014f0 <_ZNSt6vectorIdSaIdEE5beginEv>
 8001618:	4603      	mov	r3, r0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 face 	bl	8001bbe <_ZNKSt6vectorIdSaIdEE6cbeginEv>
 8001622:	4603      	mov	r3, r0
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
 8001626:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fad4 	bl	8001bde <_ZN9__gnu_cxxmiIPKdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8001636:	4602      	mov	r2, r0
 8001638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fae2 	bl	8001c08 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>
 8001644:	4603      	mov	r3, r0
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4619      	mov	r1, r3
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fb7c 	bl	8001d48 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>
#else
	_M_realloc_insert(__position, __x);
#endif

      return iterator(this->_M_impl._M_start + __n);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
 800165c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001660:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fa4e 	bl	8001b08 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 800166c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800166e:	4618      	mov	r0, r3
 8001670:	3748      	adds	r7, #72	; 0x48
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_ZNSaIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fc1e 	bl	8001ec0 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
	{ }
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_ZNKSt6vectorIdSaIdEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	10db      	asrs	r3, r3, #3
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd>:
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 80016d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016da:	b093      	sub	sp, #76	; 0x4c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 812e 	beq.w	800194a <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x272>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	10db      	asrs	r3, r3, #3
	  if (size_type(this->_M_impl._M_end_of_storage
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4293      	cmp	r3, r2
 8001700:	f200 80a3 	bhi.w	800184a <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x172>
	    {
#if __cplusplus < 201103L
	      value_type __x_copy = __x;
#else
	      _Temporary_value __tmp(this, __x);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	68f9      	ldr	r1, [r7, #12]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fa93 	bl	8001c38 <_ZNSt6vectorIdSaIdEE16_Temporary_valueC1IJRKdEEEPS1_DpOT_>
	      value_type& __x_copy = __tmp._M_val();
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fac0 	bl	8001c9c <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_valEv>
 800171c:	6378      	str	r0, [r7, #52]	; 0x34
#endif
	      const size_type __elems_after = end() - __position;
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f91a 	bl	8001958 <_ZNSt6vectorIdSaIdEE3endEv>
 8001724:	4603      	mov	r3, r0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
 8001728:	f107 0208 	add.w	r2, r7, #8
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fbcf 	bl	8001ed6 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8001738:	4603      	mov	r3, r0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
	      pointer __old_finish(this->_M_impl._M_finish);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__elems_after > __n)
 8001742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	d941      	bls.n	80017ce <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0xf6>
		{
		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	425b      	negs	r3, r3
 8001754:	18d4      	adds	r4, r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	685d      	ldr	r5, [r3, #4]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	685e      	ldr	r6, [r3, #4]
					      this->_M_impl._M_finish,
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fb1b 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001766:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8001768:	4632      	mov	r2, r6
 800176a:	4629      	mov	r1, r5
 800176c:	4620      	mov	r0, r4
 800176e:	f000 fbc7 	bl	8001f00 <_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __n;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	441a      	add	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4618      	mov	r0, r3
 8001786:	f000 f9cf 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 800178a:	4603      	mov	r3, r0
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	425b      	negs	r3, r3
 8001794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001796:	4413      	add	r3, r2
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	4619      	mov	r1, r3
 800179c:	f000 fbc9 	bl	8001f32 <_ZSt13move_backwardIPdS0_ET0_T_S2_S1_>
					  __old_finish - __n, __old_finish);
		  std::fill(__position.base(), __position.base() + __n,
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f9bf 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80017aa:	4603      	mov	r3, r0
 80017ac:	681c      	ldr	r4, [r3, #0]
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f9b8 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80017b8:	4603      	mov	r3, r0
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4413      	add	r3, r2
 80017c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017c4:	4619      	mov	r1, r3
 80017c6:	4620      	mov	r0, r4
 80017c8:	f000 fbcb 	bl	8001f62 <_ZSt4fillIPddEvT_S1_RKT0_>
 80017cc:	e037      	b.n	800183e <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x166>
		}
	      else
		{
		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		  this->_M_impl._M_finish =
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	685c      	ldr	r4, [r3, #4]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	1ad5      	subs	r5, r2, r3
						  __n - __elems_after,
						  __x_copy,
						  _M_get_Tp_allocator());
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fade 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80017e0:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 80017e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017e4:	4629      	mov	r1, r5
 80017e6:	4620      	mov	r0, r4
 80017e8:	f000 fbca 	bl	8001f80 <_ZSt24__uninitialized_fill_n_aIPdjddET_S1_T0_RKT1_RSaIT2_E>
 80017ec:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f996 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80017fc:	4603      	mov	r3, r0
 80017fe:	681c      	ldr	r4, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685d      	ldr	r5, [r3, #4]
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fac8 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800180c:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 800180e:	462a      	mov	r2, r5
 8001810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001812:	4620      	mov	r0, r4
 8001814:	f000 fb74 	bl	8001f00 <_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	441a      	add	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);
		  std::fill(__position.base(), __old_finish, __x_copy);
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f97c 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001830:	4603      	mov	r3, r0
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fb92 	bl	8001f62 <_ZSt4fillIPddEvT_S1_RKT0_>
		}
	    }
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fa16 	bl	8001c74 <_ZNSt6vectorIdSaIdEE16_Temporary_valueD1Ev>
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8001848:	e07f      	b.n	800194a <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x272>
		_M_check_len(__n, "vector::_M_fill_insert");
 800184a:	4a42      	ldr	r2, [pc, #264]	; (8001954 <_ZNSt6vectorIdSaIdEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPdS1_EEjRKd+0x27c>)
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fba7 	bl	8001fa2 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>
 8001854:	6478      	str	r0, [r7, #68]	; 0x44
	      const size_type __elems_before = __position - begin();
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff fe4a 	bl	80014f0 <_ZNSt6vectorIdSaIdEE5beginEv>
 800185c:	4603      	mov	r3, r0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001860:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fb33 	bl	8001ed6 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8001870:	4603      	mov	r3, r0
 8001872:	643b      	str	r3, [r7, #64]	; 0x40
	      pointer __new_start(this->_M_allocate(__len));
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f8c0 	bl	80019fe <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 800187e:	63f8      	str	r0, [r7, #60]	; 0x3c
	      pointer __new_finish(__new_start);
 8001880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001882:	63bb      	str	r3, [r7, #56]	; 0x38
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8001884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800188a:	18d4      	adds	r4, r2, r3
						_M_get_Tp_allocator());
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fa84 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001894:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4620      	mov	r0, r4
 800189c:	f000 fb70 	bl	8001f80 <_ZSt24__uninitialized_fill_n_aIPdjddET_S1_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
		    (this->_M_impl._M_start, __position.base(),
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681c      	ldr	r4, [r3, #0]
 80018a8:	f107 0308 	add.w	r3, r7, #8
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f93b 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80018b2:	4603      	mov	r3, r0
 80018b4:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fa6f 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80018be:	4603      	mov	r3, r0
		    (this->_M_impl._M_start, __position.base(),
 80018c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018c2:	4629      	mov	r1, r5
 80018c4:	4620      	mov	r0, r4
 80018c6:	f000 fbb3 	bl	8002030 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 80018ca:	63b8      	str	r0, [r7, #56]	; 0x38
		  __new_finish += __n;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018d2:	4413      	add	r3, r2
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
		    (__position.base(), this->_M_impl._M_finish,
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f924 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 80018e0:	4603      	mov	r3, r0
 80018e2:	681c      	ldr	r4, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fa56 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80018f0:	4603      	mov	r3, r0
		    (__position.base(), this->_M_impl._M_finish,
 80018f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018f4:	4629      	mov	r1, r5
 80018f6:	4620      	mov	r0, r4
 80018f8:	f000 fb9a 	bl	8002030 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 80018fc:	63b8      	str	r0, [r7, #56]	; 0x38
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681c      	ldr	r4, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fa47 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 800190e:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001910:	461a      	mov	r2, r3
 8001912:	4629      	mov	r1, r5
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff fa4c 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	10db      	asrs	r3, r3, #3
	      _M_deallocate(this->_M_impl._M_start,
 800192c:	461a      	mov	r2, r3
 800192e:	f7ff fa5a 	bl	8000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
	      this->_M_impl._M_start = __new_start;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001936:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800193c:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800193e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001944:	441a      	add	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	609a      	str	r2, [r3, #8]
    }
 800194a:	bf00      	nop
 800194c:	374c      	adds	r7, #76	; 0x4c
 800194e:	46bd      	mov	sp, r7
 8001950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001952:	bf00      	nop
 8001954:	08009f58 	.word	0x08009f58

08001958 <_ZNSt6vectorIdSaIdEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f8cc 	bl	8001b08 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800197a:	b590      	push	{r4, r7, lr}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	10db      	asrs	r3, r3, #3
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00e      	beq.n	80019b4 <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f9fd 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80019a2:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80019a4:	461a      	mov	r2, r3
 80019a6:	4621      	mov	r1, r4
 80019a8:	6838      	ldr	r0, [r7, #0]
 80019aa:	f7ff fa02 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}

080019bc <_ZNKSt6vectorIdSaIdEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fb65 	bl	8002096 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fb47 	bl	8002062 <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_ZNKSt6vectorIdSaIdEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	10db      	asrs	r3, r3, #3
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fb4a 	bl	80020ac <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	e000      	b.n	8001a1e <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8001a1c:	2300      	movs	r3, #0
      }
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8001a26:	b590      	push	{r4, r7, lr}
 8001a28:	b087      	sub	sp, #28
 8001a2a:	af02      	add	r7, sp, #8
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8001a34:	f88d 4000 	strb.w	r4, [sp]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 fb43 	bl	80020ca <_ZNSt6vectorIdSaIdEE14_S_do_relocateEPdS2_S2_RS0_St17integral_constantIbLb1EE>
 8001a44:	4603      	mov	r3, r0
      }
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}

08001a4e <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fb46 	bl	80020ee <_ZNSt13move_iteratorIPdEC1ES0_>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyISt13move_iteratorIPdEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ffbd 	bl	80019fe <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8001a84:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f987 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001a8e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	6839      	ldr	r1, [r7, #0]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fb3c 	bl	8002112 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8001a9a:	697b      	ldr	r3, [r7, #20]
	}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	425b      	negs	r3, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	f107 020c 	add.w	r2, r7, #12
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f81e 	bl	8001b08 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fb1a 	bl	8002134 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>
	}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_ZN9__gnu_cxxmiIPKdPdSt6vectorIdSaIdEEEEDTmicldtfp_4baseEcldtfp0_4baseEERKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8001b3e:	b590      	push	{r4, r7, lr}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fafe 	bl	800214a <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	681c      	ldr	r4, [r3, #0]
 8001b52:	6838      	ldr	r0, [r7, #0]
 8001b54:	f7ff ffe8 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1ae3      	subs	r3, r4, r3
 8001b5e:	10db      	asrs	r3, r3, #3
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <_ZN9__gnu_cxxeqIPKdPdSt6vectorIdSaIdEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fae9 	bl	800214a <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	681c      	ldr	r4, [r3, #0]
 8001b7c:	6838      	ldr	r0, [r7, #0]
 8001b7e:	f7ff ffd3 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001b82:	4603      	mov	r3, r0
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	429c      	cmp	r4, r3
 8001b88:	bf0c      	ite	eq
 8001b8a:	2301      	moveq	r3, #1
 8001b8c:	2300      	movne	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}

08001b98 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fadb 	bl	8002160 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 fae0 	bl	8002176 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJRKdEEEvPT_DpOT0_>
	}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_ZNKSt6vectorIdSaIdEE6cbeginEv>:
      cbegin() const noexcept
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fae9 	bl	80021a6 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1ERKS2_>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_ZN9__gnu_cxxmiIPKdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001bde:	b590      	push	{r4, r7, lr}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 faae 	bl	800214a <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	681c      	ldr	r4, [r3, #0]
 8001bf2:	6838      	ldr	r0, [r7, #0]
 8001bf4:	f000 faa9 	bl	800214a <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	1ae3      	subs	r3, r4, r3
 8001bfe:	10db      	asrs	r3, r3, #3
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	f107 020c 	add.w	r2, r7, #12
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff6d 	bl	8001b08 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZNSt6vectorIdSaIdEE16_Temporary_valueC1IJRKdEEEPS1_DpOT_>:
	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	601a      	str	r2, [r3, #0]
	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	461d      	mov	r5, r3
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 fab8 	bl	80021c6 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>
 8001c56:	4604      	mov	r4, r0
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fa81 	bl	8002160 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	4621      	mov	r1, r4
 8001c64:	4628      	mov	r0, r5
 8001c66:	f7ff ff97 	bl	8001b98 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
	  }
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bdb0      	pop	{r4, r5, r7, pc}

08001c74 <_ZNSt6vectorIdSaIdEE16_Temporary_valueD1Ev>:
	~_Temporary_value()
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461c      	mov	r4, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fa9f 	bl	80021c6 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff ff2e 	bl	8001aee <_ZNSt16allocator_traitsISaIdEE7destroyIdEEvRS0_PT_>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}

08001c9c <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_valEv>:
	_M_val() { return *_M_ptr(); }
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fa8e 	bl	80021c6 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_ZNSt6vectorIdSaIdEE13_M_insert_auxIdEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEOT_>:
      vector<_Tp, _Alloc>::
 8001cca:	b5b0      	push	{r4, r5, r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001cd6:	68fc      	ldr	r4, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	685d      	ldr	r5, [r3, #4]
			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	3b08      	subs	r3, #8
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ffe6 	bl	8001cb4 <_ZSt4moveIRdEONSt16remove_referenceIT_E4typeEOS2_>
 8001ce8:	4603      	mov	r3, r0
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001cea:	461a      	mov	r2, r3
 8001cec:	4629      	mov	r1, r5
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f000 fa75 	bl	80021de <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>
      ++this->_M_impl._M_finish;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f103 0208 	add.w	r2, r3, #8
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]
      _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff0f 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f1a3 0110 	sub.w	r1, r3, #16
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	3b08      	subs	r3, #8
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f000 f908 	bl	8001f32 <_ZSt13move_backwardIPdS0_ET0_T_S2_S1_>
      *__position = std::forward<_Arg>(__arg);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fa6e 	bl	8002204 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8001d28:	4604      	mov	r4, r0
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fed1 	bl	8001ad6 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEdeEv>
 8001d34:	4601      	mov	r1, r0
 8001d36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001d3a:	e9c1 2300 	strd	r2, r3, [r1]
    }
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d48 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001d54:	4a59      	ldr	r2, [pc, #356]	; (8001ebc <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x174>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f922 	bl	8001fa2 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>
 8001d5e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff fbbf 	bl	80014f0 <_ZNSt6vectorIdSaIdEE5beginEv>
 8001d72:	4603      	mov	r3, r0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	f107 0214 	add.w	r2, r7, #20
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 f8a8 	bl	8001ed6 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8001d86:	4603      	mov	r3, r0
 8001d88:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fe35 	bl	80019fe <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8001d94:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8001d9a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	18d5      	adds	r5, r2, r3
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f9db 	bl	8002160 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	4629      	mov	r1, r5
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff fef1 	bl	8001b98 <_ZNSt16allocator_traitsISaIdEE9constructIdJRKdEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8001db6:	2300      	movs	r3, #0
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001dba:	f7ff fad2 	bl	8001362 <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d027      	beq.n	8001e14 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fead 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ffe1 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001dda:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4621      	mov	r1, r4
 8001de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001de2:	f7ff fe20 	bl	8001a26 <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>
 8001de6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	3308      	adds	r3, #8
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fe98 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe ffcc 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001e04:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e08:	6a39      	ldr	r1, [r7, #32]
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7ff fe0b 	bl	8001a26 <_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_>
 8001e10:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001e12:	e026      	b.n	8001e62 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fe85 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe ffb9 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001e2a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4621      	mov	r1, r4
 8001e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e32:	f000 f8fd 	bl	8002030 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8001e36:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fe70 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe ffa4 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001e54:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e58:	6a39      	ldr	r1, [r7, #32]
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f000 f8e8 	bl	8002030 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 8001e60:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001e62:	f7ff fa7e 	bl	8001362 <_ZNSt6vectorIdSaIdEE15_S_use_relocateEv>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <_ZNSt6vectorIdSaIdEE17_M_realloc_insertIJRKdEEEvN9__gnu_cxx17__normal_iteratorIPdS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe ff91 	bl	8000d9c <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6a39      	ldr	r1, [r7, #32]
 8001e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e82:	f7fe ff96 	bl	8000db2 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8001e86:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8001e92:	461a      	mov	r2, r3
 8001e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e96:	f7fe ffa6 	bl	8000de6 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      this->_M_impl._M_start = __new_start;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	441a      	add	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	609a      	str	r2, [r3, #8]
    }
 8001eb2:	bf00      	nop
 8001eb4:	3730      	adds	r7, #48	; 0x30
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	08009f70 	.word	0x08009f70

08001ec0 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_ZN9__gnu_cxxmiIPdSt6vectorIdSaIdEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001ed6:	b590      	push	{r4, r7, lr}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fe21 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	681c      	ldr	r4, [r3, #0]
 8001eea:	6838      	ldr	r0, [r7, #0]
 8001eec:	f7ff fe1c 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	1ae3      	subs	r3, r4, r3
 8001ef6:	10db      	asrs	r3, r3, #3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd90      	pop	{r4, r7, pc}

08001f00 <_ZSt22__uninitialized_move_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f983 	bl	800221a <_ZSt18make_move_iteratorIPdESt13move_iteratorIT_ES2_>
 8001f14:	4604      	mov	r4, r0
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	f000 f97f 	bl	800221a <_ZSt18make_move_iteratorIPdESt13move_iteratorIT_ES2_>
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4620      	mov	r0, r4
 8001f24:	f000 f8f5 	bl	8002112 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
 8001f28:	4603      	mov	r3, r0
					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
					 __result, __alloc);
    }
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}

08001f32 <_ZSt13move_backwardIPdS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8001f32:	b590      	push	{r4, r7, lr}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f980 	bl	8002244 <_ZSt12__miter_baseIPdET_S1_>
 8001f44:	4604      	mov	r4, r0
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	f000 f97c 	bl	8002244 <_ZSt12__miter_baseIPdET_S1_>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4619      	mov	r1, r3
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 f981 	bl	800225a <_ZSt22__copy_move_backward_aILb1EPdS0_ET1_T0_S2_S1_>
 8001f58:	4603      	mov	r3, r0
    }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}

08001f62 <_ZSt4fillIPddEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __last, __value);
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f994 	bl	80022a0 <_ZSt8__fill_aIPddEvT_S1_RKT0_>
    }
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZSt24__uninitialized_fill_n_aIPdjddET_S1_T0_RKT1_RSaIT2_E>:
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f993 	bl	80022be <_ZSt20uninitialized_fill_nIPdjdET_S1_T0_RKT1_>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8001fa2:	b590      	push	{r4, r7, lr}
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff fd04 	bl	80019bc <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff fb7d 	bl	80016b6 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	1ae2      	subs	r2, r4, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	bf34      	ite	cc
 8001fc6:	2301      	movcc	r3, #1
 8001fc8:	2300      	movcs	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f006 fd56 	bl	8008a82 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff fb6d 	bl	80016b6 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001fdc:	4604      	mov	r4, r0
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff fb69 	bl	80016b6 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	f107 0208 	add.w	r2, r7, #8
 8001fec:	f107 0310 	add.w	r3, r7, #16
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f975 	bl	80022e2 <_ZSt3maxIjERKT_S2_S2_>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4423      	add	r3, r4
 8001ffe:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7ff fb58 	bl	80016b6 <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8002006:	4602      	mov	r2, r0
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	4293      	cmp	r3, r2
 800200c:	d306      	bcc.n	800201c <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x7a>
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fcd4 	bl	80019bc <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 8002014:	4602      	mov	r2, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4293      	cmp	r3, r2
 800201a:	d904      	bls.n	8002026 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x84>
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff fccd 	bl	80019bc <_ZNKSt6vectorIdSaIdEE8max_sizeEv>
 8002022:	4603      	mov	r3, r0
 8002024:	e000      	b.n	8002028 <_ZNKSt6vectorIdSaIdEE12_M_check_lenEjPKc+0x86>
 8002026:	697b      	ldr	r3, [r7, #20]
      }
 8002028:	4618      	mov	r0, r3
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}

08002030 <_ZSt34__uninitialized_move_if_noexcept_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff fd05 	bl	8001a4e <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 8002044:	4604      	mov	r4, r0
 8002046:	68b8      	ldr	r0, [r7, #8]
 8002048:	f7ff fd01 	bl	8001a4e <_ZSt32__make_move_if_noexcept_iteratorIdSt13move_iteratorIPdEET0_PT_>
 800204c:	4601      	mov	r1, r0
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4620      	mov	r0, r4
 8002054:	f000 f85d 	bl	8002112 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>
 8002058:	4603      	mov	r3, r0
    }
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}

08002062 <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800206a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800206e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f94a 	bl	800230a <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8002076:	4603      	mov	r3, r0
 8002078:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800207a:	f107 0208 	add.w	r2, r7, #8
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f94c 	bl	8002322 <_ZSt3minIjERKT_S2_S2_>
 800208a:	4603      	mov	r3, r0
 800208c:	681b      	ldr	r3, [r3, #0]
      }
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80020b6:	2200      	movs	r2, #0
 80020b8:	6839      	ldr	r1, [r7, #0]
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f951 	bl	8002362 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_ZNSt6vectorIdSaIdEE14_S_do_relocateEPdS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f968 	bl	80023b4 <_ZSt12__relocate_aIPdS0_SaIdEET0_T_S3_S2_RT1_>
 80020e4:	4603      	mov	r3, r0
      }
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZNSt13move_iteratorIPdEC1ES0_>:
      move_iterator(iterator_type __i)
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80020f8:	463b      	mov	r3, r7
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f977 	bl	80023ee <_ZSt4moveIRPdEONSt16remove_referenceIT_E4typeEOS3_>
 8002100:	4603      	mov	r3, r0
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPdES1_dET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f96d 	bl	8002404 <_ZSt18uninitialized_copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>
 800212a:	4603      	mov	r3, r0
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZN9__gnu_cxx13new_allocatorIdE7destroyIdEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJRKdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002176:	b5b0      	push	{r4, r5, r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ffec 	bl	8002160 <_ZSt7forwardIRKdEOT_RNSt16remove_referenceIS2_E4typeE>
 8002188:	4603      	mov	r3, r0
 800218a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4619      	mov	r1, r3
 8002192:	2008      	movs	r0, #8
 8002194:	f7fe ffe0 	bl	8001158 <_ZnwjPv>
 8002198:	4603      	mov	r3, r0
 800219a:	e9c3 4500 	strd	r4, r5, [r3]
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bdb0      	pop	{r4, r5, r7, pc}

080021a6 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_ZNSt6vectorIdSaIdEE16_Temporary_value6_M_ptrEv>:
	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3308      	adds	r3, #8
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_ZNSt16allocator_traitsISaIdEE9constructIdJdEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f80a 	bl	8002204 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f916 	bl	8002428 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>
	}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_ZSt18make_move_iteratorIPdESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f8e2 	bl	80023ee <_ZSt4moveIRPdEONSt16remove_referenceIT_E4typeEOS3_>
 800222a:	4603      	mov	r3, r0
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff5a 	bl	80020ee <_ZNSt13move_iteratorIPdEC1ES0_>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZSt12__miter_baseIPdET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZSt22__copy_move_backward_aILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800225a:	b5b0      	push	{r4, r5, r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8f6 	bl	8002458 <_ZSt12__niter_baseIPdET_S1_>
 800226c:	4604      	mov	r4, r0
 800226e:	68b8      	ldr	r0, [r7, #8]
 8002270:	f000 f8f2 	bl	8002458 <_ZSt12__niter_baseIPdET_S1_>
 8002274:	4605      	mov	r5, r0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f8ed 	bl	8002458 <_ZSt12__niter_baseIPdET_S1_>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	4629      	mov	r1, r5
 8002284:	4620      	mov	r0, r4
 8002286:	f000 f8f2 	bl	800246e <_ZSt23__copy_move_backward_a1ILb1EPdS0_ET1_T0_S2_S1_>
 800228a:	4602      	mov	r2, r0
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f8fc 	bl	800248e <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 8002296:	4603      	mov	r3, r0
    }
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bdb0      	pop	{r4, r5, r7, pc}

080022a0 <_ZSt8__fill_aIPddEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f8f8 	bl	80024a6 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_ZSt20uninitialized_fill_nIPdjdET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
      constexpr bool __can_fill
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f906 	bl	80024e4 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPdjdEET_S3_T0_RKT1_>
 80022d8:	4603      	mov	r3, r0
    }
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d201      	bcs.n	80022fc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	e000      	b.n	80022fe <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80022fc:	687b      	ldr	r3, [r7, #4]
    }
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8f6 	bl	8002504 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 8002318:	4603      	mov	r3, r0
      }
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d201      	bcs.n	800233c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	e000      	b.n	800233e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800233c:	687b      	ldr	r3, [r7, #4]
    }
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002352:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff ffeb 	bl	800234a <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 8002374:	4602      	mov	r2, r0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4293      	cmp	r3, r2
 800237a:	bf8c      	ite	hi
 800237c:	2301      	movhi	r3, #1
 800237e:	2300      	movls	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002396:	d301      	bcc.n	800239c <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002398:	f006 fb70 	bl	8008a7c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800239c:	f006 fb6b 	bl	8008a76 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f006 fb55 	bl	8008a54 <_Znwj>
 80023aa:	4603      	mov	r3, r0
      }
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_ZSt12__relocate_aIPdS0_SaIdEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f848 	bl	8002458 <_ZSt12__niter_baseIPdET_S1_>
 80023c8:	4604      	mov	r4, r0
 80023ca:	68b8      	ldr	r0, [r7, #8]
 80023cc:	f000 f844 	bl	8002458 <_ZSt12__niter_baseIPdET_S1_>
 80023d0:	4605      	mov	r5, r0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f840 	bl	8002458 <_ZSt12__niter_baseIPdET_S1_>
 80023d8:	4602      	mov	r2, r0
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	4629      	mov	r1, r5
 80023de:	4620      	mov	r0, r4
 80023e0:	f000 f89c 	bl	800251c <_ZSt14__relocate_a_1IddENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80023e4:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdb0      	pop	{r4, r5, r7, pc}

080023ee <_ZSt4moveIRPdEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_ZSt18uninitialized_copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002410:	2301      	movs	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f89d 	bl	8002558 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPdES3_EET0_T_S6_S5_>
 800241e:	4603      	mov	r3, r0
    }
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_ZN9__gnu_cxx13new_allocatorIdE9constructIdJdEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fee5 	bl	8002204 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 800243a:	4603      	mov	r3, r0
 800243c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4619      	mov	r1, r3
 8002444:	2008      	movs	r0, #8
 8002446:	f7fe fe87 	bl	8001158 <_ZnwjPv>
 800244a:	4603      	mov	r3, r0
 800244c:	e9c3 4500 	strd	r4, r5, [r3]
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bdb0      	pop	{r4, r5, r7, pc}

08002458 <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_ZSt23__copy_move_backward_a1ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f87a 	bl	8002578 <_ZSt23__copy_move_backward_a2ILb1EPdS0_ET1_T0_S2_S1_>
 8002484:	4603      	mov	r3, r0
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 80024a6:	b480      	push	{r7}
 80024a8:	b087      	sub	sp, #28
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (; __first != __last; ++__first)
 80024bc:	e007      	b.n	80024ce <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 80024be:	68f9      	ldr	r1, [r7, #12]
 80024c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024c4:	e9c1 2300 	strd	r2, r3, [r1]
      for (; __first != __last; ++__first)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3308      	adds	r3, #8
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d1f3      	bne.n	80024be <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x18>
    }
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPdjdEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f84f 	bl	8002598 <_ZSt6fill_nIPdjdET_S1_T0_RKT1_>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff1c 	bl	800234a <_ZNK9__gnu_cxx13new_allocatorIdE11_M_max_sizeEv>
 8002512:	4603      	mov	r3, r0
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZSt14__relocate_a_1IddENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	10db      	asrs	r3, r3, #3
 8002532:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	dd06      	ble.n	8002548 <_ZSt14__relocate_a_1IddENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	461a      	mov	r2, r3
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f007 fc04 	bl	8009d50 <memmove>
      return __result + __count;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
    }
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPdES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f830 	bl	80025ce <_ZSt4copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>
 800256e:	4603      	mov	r3, r0
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <_ZSt23__copy_move_backward_a2ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f838 	bl	80025fe <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_>
 800258e:	4603      	mov	r3, r0
    }
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_ZSt6fill_nIPdjdET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8002598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80025a4:	68fc      	ldr	r4, [r7, #12]
 80025a6:	68b8      	ldr	r0, [r7, #8]
 80025a8:	f7fe fdcb 	bl	8001142 <_ZSt17__size_to_integerj>
 80025ac:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f845 	bl	8002642 <_ZSt19__iterator_categoryIPdENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80025b8:	4633      	mov	r3, r6
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4629      	mov	r1, r5
 80025be:	4620      	mov	r0, r4
 80025c0:	f000 f84a 	bl	8002658 <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag>
 80025c4:	4603      	mov	r3, r0
    }
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ce <_ZSt4copyISt13move_iteratorIPdES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80025ce:	b590      	push	{r4, r7, lr}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f859 	bl	8002692 <_ZSt12__miter_baseIPdEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80025e0:	4604      	mov	r4, r0
 80025e2:	68b8      	ldr	r0, [r7, #8]
 80025e4:	f000 f855 	bl	8002692 <_ZSt12__miter_baseIPdEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80025e8:	4603      	mov	r3, r0
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4619      	mov	r1, r3
 80025ee:	4620      	mov	r0, r4
 80025f0:	f000 f860 	bl	80026b4 <_ZSt13__copy_move_aILb1EPdS0_ET1_T0_S2_S1_>
 80025f4:	4603      	mov	r3, r0
    }
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}

080025fe <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	10db      	asrs	r3, r3, #3
 8002612:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIdEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	425b      	negs	r3, r3
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	18d0      	adds	r0, r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	461a      	mov	r2, r3
 800262a:	68f9      	ldr	r1, [r7, #12]
 800262c:	f007 fb90 	bl	8009d50 <memmove>
	  return __result - _Num;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	425b      	negs	r3, r3
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
	}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <_ZSt19__iterator_categoryIPdENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800264a:	bf00      	nop
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	e00c      	b.n	800268a <_ZSt10__fill_n_aIPdjdET_S1_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4619      	mov	r1, r3
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff fe0f 	bl	80022a0 <_ZSt8__fill_aIPddEvT_S1_RKT0_>
      return __first + __n;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4413      	add	r3, r2
    }
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_ZSt12__miter_baseIPdEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f82c 	bl	80026fa <_ZNKSt13move_iteratorIPdE4baseEv>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fdcd 	bl	8002244 <_ZSt12__miter_baseIPdET_S1_>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_ZSt13__copy_move_aILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80026b4:	b5b0      	push	{r4, r5, r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fec9 	bl	8002458 <_ZSt12__niter_baseIPdET_S1_>
 80026c6:	4604      	mov	r4, r0
 80026c8:	68b8      	ldr	r0, [r7, #8]
 80026ca:	f7ff fec5 	bl	8002458 <_ZSt12__niter_baseIPdET_S1_>
 80026ce:	4605      	mov	r5, r0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fec0 	bl	8002458 <_ZSt12__niter_baseIPdET_S1_>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	4629      	mov	r1, r5
 80026de:	4620      	mov	r0, r4
 80026e0:	f000 f817 	bl	8002712 <_ZSt14__copy_move_a1ILb1EPdS0_ET1_T0_S2_S1_>
 80026e4:	4602      	mov	r2, r0
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fecf 	bl	800248e <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 80026f0:	4603      	mov	r3, r0
    }
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bdb0      	pop	{r4, r5, r7, pc}

080026fa <_ZNKSt13move_iteratorIPdE4baseEv>:
      base() const
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_ZSt14__copy_move_a1ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f805 	bl	8002732 <_ZSt14__copy_move_a2ILb1EPdS0_ET1_T0_S2_S1_>
 8002728:	4603      	mov	r3, r0
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <_ZSt14__copy_move_a2ILb1EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f805 	bl	8002752 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8002748:	4603      	mov	r3, r0
    }
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	10db      	asrs	r3, r3, #3
 8002766:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	461a      	mov	r2, r3
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f007 faea 	bl	8009d50 <memmove>
	  return __result + _Num;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
	}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <_ZN17HallEncoderDriver10get_thetadEv>:
 */
#include "hall_encoder.h"



double HallEncoderDriver::get_thetad(){
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
	return 0;
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	ec43 2b17 	vmov	d7, r2, r3
}
 800279c:	eeb0 0a47 	vmov.f32	s0, s14
 80027a0:	eef0 0a67 	vmov.f32	s1, s15
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TIM2->CCR1 = 17895697;
 80027b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <main+0x40>)
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027b8:	f000 ffa3 	bl	8003702 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027bc:	f000 f818 	bl	80027f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027c0:	f000 fb0a 	bl	8002dd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80027c4:	f000 fade 	bl	8002d84 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80027c8:	f000 f95c 	bl	8002a84 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 80027cc:	f000 f85c 	bl	8002888 <MX_ADC1_Init>
  MX_SPI3_Init();
 80027d0:	f000 f99e 	bl	8002b10 <MX_SPI3_Init>
  MX_TIM3_Init();
 80027d4:	f000 fa4e 	bl	8002c74 <MX_TIM3_Init>
  MX_ADC2_Init();
 80027d8:	f000 f8ee 	bl	80029b8 <MX_ADC2_Init>
  MX_TIM2_Init();
 80027dc:	f000 f9d6 	bl	8002b8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80027e0:	f000 fb6e 	bl	8002ec0 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80027e4:	f000 fbb2 	bl	8002f4c <loop>
 80027e8:	e7fc      	b.n	80027e4 <main+0x38>
 80027ea:	bf00      	nop
 80027ec:	01111111 	.word	0x01111111

080027f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b094      	sub	sp, #80	; 0x50
 80027f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f6:	f107 0318 	add.w	r3, r7, #24
 80027fa:	2238      	movs	r2, #56	; 0x38
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f007 fac0 	bl	8009d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002812:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002816:	f003 fb37 	bl	8005e88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800281a:	2302      	movs	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800281e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002824:	2340      	movs	r3, #64	; 0x40
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002828:	2302      	movs	r3, #2
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800282c:	2302      	movs	r3, #2
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002830:	2301      	movs	r3, #1
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002834:	2308      	movs	r3, #8
 8002836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002838:	2302      	movs	r3, #2
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800283c:	2302      	movs	r3, #2
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002840:	2302      	movs	r3, #2
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002844:	f107 0318 	add.w	r3, r7, #24
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fbd1 	bl	8005ff0 <HAL_RCC_OscConfig>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002854:	f000 fb2e 	bl	8002eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002858:	230f      	movs	r3, #15
 800285a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800285c:	2303      	movs	r3, #3
 800285e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	2102      	movs	r1, #2
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fed5 	bl	8006620 <HAL_RCC_ClockConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800287c:	f000 fb1a 	bl	8002eb4 <Error_Handler>
  }
}
 8002880:	bf00      	nop
 8002882:	3750      	adds	r7, #80	; 0x50
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800288e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2220      	movs	r2, #32
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f007 fa6f 	bl	8009d84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80028ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80028ae:	4b3e      	ldr	r3, [pc, #248]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028b6:	4b3c      	ldr	r3, [pc, #240]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028bc:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80028ce:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028d0:	2208      	movs	r2, #8
 80028d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80028da:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028dc:	2201      	movs	r2, #1
 80028de:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80028e0:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028e2:	2203      	movs	r2, #3
 80028e4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028e6:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028f4:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <MX_ADC1_Init+0x120>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <MX_ADC1_Init+0x120>)
 8002904:	2200      	movs	r2, #0
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <MX_ADC1_Init+0x120>)
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002910:	4825      	ldr	r0, [pc, #148]	; (80029a8 <MX_ADC1_Init+0x120>)
 8002912:	f001 f9d1 	bl	8003cb8 <HAL_ADC_Init>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800291c:	f000 faca 	bl	8002eb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002928:	4619      	mov	r1, r3
 800292a:	481f      	ldr	r0, [pc, #124]	; (80029a8 <MX_ADC1_Init+0x120>)
 800292c:	f002 fac2 	bl	8004eb4 <HAL_ADCEx_MultiModeConfigChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002936:	f000 fabd 	bl	8002eb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <MX_ADC1_Init+0x124>)
 800293c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800293e:	2306      	movs	r3, #6
 8002940:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002942:	2302      	movs	r3, #2
 8002944:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002946:	237f      	movs	r3, #127	; 0x7f
 8002948:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800294a:	2304      	movs	r3, #4
 800294c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4814      	ldr	r0, [pc, #80]	; (80029a8 <MX_ADC1_Init+0x120>)
 8002958:	f001 fc62 	bl	8004220 <HAL_ADC_ConfigChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002962:	f000 faa7 	bl	8002eb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <MX_ADC1_Init+0x128>)
 8002968:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800296a:	230c      	movs	r3, #12
 800296c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	4619      	mov	r1, r3
 8002972:	480d      	ldr	r0, [pc, #52]	; (80029a8 <MX_ADC1_Init+0x120>)
 8002974:	f001 fc54 	bl	8004220 <HAL_ADC_ConfigChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800297e:	f000 fa99 	bl	8002eb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <MX_ADC1_Init+0x12c>)
 8002984:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002986:	2312      	movs	r3, #18
 8002988:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4806      	ldr	r0, [pc, #24]	; (80029a8 <MX_ADC1_Init+0x120>)
 8002990:	f001 fc46 	bl	8004220 <HAL_ADC_ConfigChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800299a:	f000 fa8b 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	3730      	adds	r7, #48	; 0x30
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200000e8 	.word	0x200000e8
 80029ac:	19200040 	.word	0x19200040
 80029b0:	1d500080 	.word	0x1d500080
 80029b4:	21800100 	.word	0x21800100

080029b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029be:	463b      	mov	r3, r7
 80029c0:	2220      	movs	r2, #32
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f007 f9dd 	bl	8009d84 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80029ca:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <MX_ADC2_Init+0xc0>)
 80029cc:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <MX_ADC2_Init+0xc4>)
 80029ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80029d0:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <MX_ADC2_Init+0xc0>)
 80029d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <MX_ADC2_Init+0xc0>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <MX_ADC2_Init+0xc0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <MX_ADC2_Init+0xc0>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029ea:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <MX_ADC2_Init+0xc0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029f0:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <MX_ADC2_Init+0xc0>)
 80029f2:	2204      	movs	r2, #4
 80029f4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <MX_ADC2_Init+0xc0>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80029fc:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <MX_ADC2_Init+0xc0>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <MX_ADC2_Init+0xc0>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <MX_ADC2_Init+0xc0>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <MX_ADC2_Init+0xc0>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <MX_ADC2_Init+0xc0>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <MX_ADC2_Init+0xc0>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <MX_ADC2_Init+0xc0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <MX_ADC2_Init+0xc0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a32:	4811      	ldr	r0, [pc, #68]	; (8002a78 <MX_ADC2_Init+0xc0>)
 8002a34:	f001 f940 	bl	8003cb8 <HAL_ADC_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002a3e:	f000 fa39 	bl	8002eb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <MX_ADC2_Init+0xc8>)
 8002a44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a46:	2306      	movs	r3, #6
 8002a48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a4e:	237f      	movs	r3, #127	; 0x7f
 8002a50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a52:	2304      	movs	r3, #4
 8002a54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4806      	ldr	r0, [pc, #24]	; (8002a78 <MX_ADC2_Init+0xc0>)
 8002a60:	f001 fbde 	bl	8004220 <HAL_ADC_ConfigChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002a6a:	f000 fa23 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000154 	.word	0x20000154
 8002a7c:	50000100 	.word	0x50000100
 8002a80:	2e300800 	.word	0x2e300800

08002a84 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002a8a:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <MX_FDCAN1_Init+0x88>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002a94:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002aac:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002af4:	4804      	ldr	r0, [pc, #16]	; (8002b08 <MX_FDCAN1_Init+0x84>)
 8002af6:	f002 fe67 	bl	80057c8 <HAL_FDCAN_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002b00:	f000 f9d8 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000220 	.word	0x20000220
 8002b0c:	40006400 	.word	0x40006400

08002b10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <MX_SPI3_Init+0x78>)
 8002b18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b2e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b42:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002b5c:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b5e:	2207      	movs	r2, #7
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b6e:	4805      	ldr	r0, [pc, #20]	; (8002b84 <MX_SPI3_Init+0x74>)
 8002b70:	f004 f988 	bl	8006e84 <HAL_SPI_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002b7a:	f000 f99b 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000284 	.word	0x20000284
 8002b88:	40003c00 	.word	0x40003c00

08002b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08e      	sub	sp, #56	; 0x38
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba0:	f107 031c 	add.w	r3, r7, #28
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bac:	463b      	mov	r3, r7
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	60da      	str	r2, [r3, #12]
 8002bb8:	611a      	str	r2, [r3, #16]
 8002bba:	615a      	str	r2, [r3, #20]
 8002bbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bbe:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7.1582788E7;
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002bd4:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <MX_TIM2_Init+0xe4>)
 8002bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002be4:	4821      	ldr	r0, [pc, #132]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002be6:	f004 f9f8 	bl	8006fda <HAL_TIM_Base_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002bf0:	f000 f960 	bl	8002eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	481a      	ldr	r0, [pc, #104]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002c02:	f004 ff61 	bl	8007ac8 <HAL_TIM_ConfigClockSource>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002c0c:	f000 f952 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002c10:	4816      	ldr	r0, [pc, #88]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002c12:	f004 fab1 	bl	8007178 <HAL_TIM_OC_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002c1c:	f000 f94a 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	480f      	ldr	r0, [pc, #60]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002c30:	f005 fe32 	bl	8008898 <HAL_TIMEx_MasterConfigSynchronization>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002c3a:	f000 f93b 	bl	8002eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c4e:	463b      	mov	r3, r7
 8002c50:	2200      	movs	r2, #0
 8002c52:	4619      	mov	r1, r3
 8002c54:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_TIM2_Init+0xe0>)
 8002c56:	f004 fe21 	bl	800789c <HAL_TIM_OC_ConfigChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002c60:	f000 f928 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c64:	bf00      	nop
 8002c66:	3738      	adds	r7, #56	; 0x38
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200002e8 	.word	0x200002e8
 8002c70:	04444444 	.word	0x04444444

08002c74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08c      	sub	sp, #48	; 0x30
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7a:	f107 0320 	add.w	r3, r7, #32
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002ca2:	4a37      	ldr	r2, [pc, #220]	; (8002d80 <MX_TIM3_Init+0x10c>)
 8002ca4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ca6:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cac:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cba:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cc6:	482d      	ldr	r0, [pc, #180]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002cc8:	f004 f987 	bl	8006fda <HAL_TIM_Base_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002cd2:	f000 f8ef 	bl	8002eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cda:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cdc:	f107 0320 	add.w	r3, r7, #32
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4826      	ldr	r0, [pc, #152]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002ce4:	f004 fef0 	bl	8007ac8 <HAL_TIM_ConfigClockSource>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002cee:	f000 f8e1 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002cf2:	4822      	ldr	r0, [pc, #136]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002cf4:	f004 faa1 	bl	800723a <HAL_TIM_IC_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002cfe:	f000 f8d9 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	481a      	ldr	r0, [pc, #104]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002d12:	f005 fdc1 	bl	8008898 <HAL_TIMEx_MasterConfigSynchronization>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8002d1c:	f000 f8ca 	bl	8002eb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002d20:	230a      	movs	r3, #10
 8002d22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d24:	2301      	movs	r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	2200      	movs	r2, #0
 8002d34:	4619      	mov	r1, r3
 8002d36:	4811      	ldr	r0, [pc, #68]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002d38:	f004 fe2a 	bl	8007990 <HAL_TIM_IC_ConfigChannel>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002d42:	f000 f8b7 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	2204      	movs	r2, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480b      	ldr	r0, [pc, #44]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002d4e:	f004 fe1f 	bl	8007990 <HAL_TIM_IC_ConfigChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8002d58:	f000 f8ac 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	2208      	movs	r2, #8
 8002d60:	4619      	mov	r1, r3
 8002d62:	4806      	ldr	r0, [pc, #24]	; (8002d7c <MX_TIM3_Init+0x108>)
 8002d64:	f004 fe14 	bl	8007990 <HAL_TIM_IC_ConfigChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8002d6e:	f000 f8a1 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	3730      	adds	r7, #48	; 0x30
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000334 	.word	0x20000334
 8002d80:	40000400 	.word	0x40000400

08002d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <MX_DMA_Init+0x50>)
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	4a11      	ldr	r2, [pc, #68]	; (8002dd4 <MX_DMA_Init+0x50>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6493      	str	r3, [r2, #72]	; 0x48
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <MX_DMA_Init+0x50>)
 8002d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <MX_DMA_Init+0x50>)
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da6:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <MX_DMA_Init+0x50>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6493      	str	r3, [r2, #72]	; 0x48
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <MX_DMA_Init+0x50>)
 8002db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	200b      	movs	r0, #11
 8002dc0:	f002 fa5b 	bl	800527a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002dc4:	200b      	movs	r0, #11
 8002dc6:	f002 fa72 	bl	80052ae <HAL_NVIC_EnableIRQ>

}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	4a2e      	ldr	r2, [pc, #184]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	4b29      	ldr	r3, [pc, #164]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	4a28      	ldr	r2, [pc, #160]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e12:	4b26      	ldr	r3, [pc, #152]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002e24:	f043 0308 	orr.w	r3, r3, #8
 8002e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <MX_GPIO_Init+0xd4>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e58:	f002 fffe 	bl	8005e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2147      	movs	r1, #71	; 0x47
 8002e60:	4813      	ldr	r0, [pc, #76]	; (8002eb0 <MX_GPIO_Init+0xd8>)
 8002e62:	f002 fff9 	bl	8005e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 8002e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e82:	f002 fe67 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_OUTPUT_Pin H2_OUTPUT_Pin H3_OUTPUT_Pin PD6 */
  GPIO_InitStruct.Pin = H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6;
 8002e86:	2347      	movs	r3, #71	; 0x47
 8002e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <MX_GPIO_Init+0xd8>)
 8002e9e:	f002 fe59 	bl	8005b54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ea2:	bf00      	nop
 8002ea4:	3728      	adds	r7, #40	; 0x28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	48000c00 	.word	0x48000c00

08002eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb8:	b672      	cpsid	i
}
 8002eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <Error_Handler+0x8>
	...

08002ec0 <setup>:

extern ADC_HandleTypeDef hadc1;
extern TIM_HandleTypeDef htim3;
uint64_t ADC_count = 0;

void setup() {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0

	CurrSensDriver::ADC_handle = &hadc1;
 8002ec4:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <setup+0x74>)
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <setup+0x78>)
 8002ec8:	601a      	str	r2, [r3, #0]
	HAL_ADCEx_Calibration_Start(CurrSensDriver::ADC_handle, ADC_SINGLE_ENDED);
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <setup+0x74>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	217f      	movs	r1, #127	; 0x7f
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 ff8d 	bl	8004df0 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002ed6:	4819      	ldr	r0, [pc, #100]	; (8002f3c <setup+0x7c>)
 8002ed8:	f004 f8d6 	bl	8007088 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002edc:	2100      	movs	r1, #0
 8002ede:	4817      	ldr	r0, [pc, #92]	; (8002f3c <setup+0x7c>)
 8002ee0:	f004 fa0c 	bl	80072fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	4815      	ldr	r0, [pc, #84]	; (8002f3c <setup+0x7c>)
 8002ee8:	f004 fa08 	bl	80072fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002eec:	2108      	movs	r1, #8
 8002eee:	4813      	ldr	r0, [pc, #76]	; (8002f3c <setup+0x7c>)
 8002ef0:	f004 fa04 	bl	80072fc <HAL_TIM_IC_Start_IT>
	// Enable the gate driver
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2140      	movs	r1, #64	; 0x40
 8002ef8:	4811      	ldr	r0, [pc, #68]	; (8002f40 <setup+0x80>)
 8002efa:	f002 ffad 	bl	8005e58 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002efe:	200a      	movs	r0, #10
 8002f00:	f000 fc70 	bl	80037e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8002f04:	2201      	movs	r2, #1
 8002f06:	2101      	movs	r1, #1
 8002f08:	480d      	ldr	r0, [pc, #52]	; (8002f40 <setup+0x80>)
 8002f0a:	f002 ffa5 	bl	8005e58 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8002f0e:	200a      	movs	r0, #10
 8002f10:	f000 fc68 	bl	80037e4 <HAL_Delay>

	motor_velocity = 0;
 8002f14:	490b      	ldr	r1, [pc, #44]	; (8002f44 <setup+0x84>)
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9c1 2300 	strd	r2, r3, [r1]
	motor_position = 0;
 8002f22:	4909      	ldr	r1, [pc, #36]	; (8002f48 <setup+0x88>)
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9c1 2300 	strd	r2, r3, [r1]

}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	2000007c 	.word	0x2000007c
 8002f38:	200000e8 	.word	0x200000e8
 8002f3c:	20000334 	.word	0x20000334
 8002f40:	48000c00 	.word	0x48000c00
 8002f44:	20000380 	.word	0x20000380
 8002f48:	20000388 	.word	0x20000388

08002f4c <loop>:

void loop() {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0

//	HAL_ADC_Start_IT(CurrSensDriver::ADC_handle);
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 8002f52:	463b      	mov	r3, r7
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd fe37 	bl	8000bc8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>
	HAL_Delay(1000);
 8002f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f5e:	f000 fc41 	bl	80037e4 <HAL_Delay>
}
 8002f62:	bf00      	nop
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_Z7tf_parkddd>:
 *      Author: Sashreek and Jonah
 */
#include "math_utils.h"
#include <cmath>

ParkOut tf_park (double ialpha, double ibeta, double theta_d){
 8002f6a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f6e:	b092      	sub	sp, #72	; 0x48
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	ed87 0b08 	vstr	d0, [r7, #32]
 8002f76:	ed87 1b06 	vstr	d1, [r7, #24]
 8002f7a:	ed87 2b04 	vstr	d2, [r7, #16]
	ParkOut output;
	output.id = ialpha * cos(theta_d) + ibeta * sin(theta_d);
 8002f7e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002f82:	f005 fd8d 	bl	8008aa0 <cos>
 8002f86:	ec51 0b10 	vmov	r0, r1, d0
 8002f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f8e:	f7fd faff 	bl	8000590 <__aeabi_dmul>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4690      	mov	r8, r2
 8002f98:	4699      	mov	r9, r3
 8002f9a:	ed97 0b04 	vldr	d0, [r7, #16]
 8002f9e:	f005 fdd3 	bl	8008b48 <sin>
 8002fa2:	ec51 0b10 	vmov	r0, r1, d0
 8002fa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002faa:	f7fd faf1 	bl	8000590 <__aeabi_dmul>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	4649      	mov	r1, r9
 8002fb6:	f7fd f935 	bl	8000224 <__adddf3>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.iq = -ialpha * sin(theta_d) + ibeta * cos(theta_d);
 8002fc2:	6a3c      	ldr	r4, [r7, #32]
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002fca:	ed97 0b04 	vldr	d0, [r7, #16]
 8002fce:	f005 fdbb 	bl	8008b48 <sin>
 8002fd2:	ec53 2b10 	vmov	r2, r3, d0
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	4629      	mov	r1, r5
 8002fda:	f7fd fad9 	bl	8000590 <__aeabi_dmul>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4614      	mov	r4, r2
 8002fe4:	461d      	mov	r5, r3
 8002fe6:	ed97 0b04 	vldr	d0, [r7, #16]
 8002fea:	f005 fd59 	bl	8008aa0 <cos>
 8002fee:	ec51 0b10 	vmov	r0, r1, d0
 8002ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff6:	f7fd facb 	bl	8000590 <__aeabi_dmul>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4620      	mov	r0, r4
 8003000:	4629      	mov	r1, r5
 8003002:	f7fd f90f 	bl	8000224 <__adddf3>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 800300e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800301c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003020:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003024:	ec41 0b16 	vmov	d6, r0, r1
 8003028:	ec43 2b17 	vmov	d7, r2, r3

}
 800302c:	eeb0 0a46 	vmov.f32	s0, s12
 8003030:	eef0 0a66 	vmov.f32	s1, s13
 8003034:	eeb0 1a47 	vmov.f32	s2, s14
 8003038:	eef0 1a67 	vmov.f32	s3, s15
 800303c:	3748      	adds	r7, #72	; 0x48
 800303e:	46bd      	mov	sp, r7
 8003040:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003044:	0000      	movs	r0, r0
	...

08003048 <_Z9tf_clarkeddd>:
	output.vbeta = vd * sin(theta_d) + vq * cos(theta_d);
	return output;
}

//Clarke transform
ClarkeOut tf_clarke (double ia, double ib, double ic){
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b092      	sub	sp, #72	; 0x48
 800304c:	af00      	add	r7, sp, #0
 800304e:	ed87 0b08 	vstr	d0, [r7, #32]
 8003052:	ed87 1b06 	vstr	d1, [r7, #24]
 8003056:	ed87 2b04 	vstr	d2, [r7, #16]
	ClarkeOut output;
	output.ialpha = (3.0/2.0) * ia;
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <_Z9tf_clarkeddd+0xa0>)
 8003060:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003064:	f7fd fa94 	bl	8000590 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.ibeta = (sqrt(3)/2) * ib - (sqrt(3)/2) * ic;
 8003070:	a31b      	add	r3, pc, #108	; (adr r3, 80030e0 <_Z9tf_clarkeddd+0x98>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800307a:	f7fd fa89 	bl	8000590 <__aeabi_dmul>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4614      	mov	r4, r2
 8003084:	461d      	mov	r5, r3
 8003086:	a316      	add	r3, pc, #88	; (adr r3, 80030e0 <_Z9tf_clarkeddd+0x98>)
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003090:	f7fd fa7e 	bl	8000590 <__aeabi_dmul>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4620      	mov	r0, r4
 800309a:	4629      	mov	r1, r5
 800309c:	f7fd f8c0 	bl	8000220 <__aeabi_dsub>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 80030a8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80030ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80030ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030be:	ec41 0b16 	vmov	d6, r0, r1
 80030c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80030c6:	eeb0 0a46 	vmov.f32	s0, s12
 80030ca:	eef0 0a66 	vmov.f32	s1, s13
 80030ce:	eeb0 1a47 	vmov.f32	s2, s14
 80030d2:	eef0 1a67 	vmov.f32	s3, s15
 80030d6:	3748      	adds	r7, #72	; 0x48
 80030d8:	46bd      	mov	sp, r7
 80030da:	bdb0      	pop	{r4, r5, r7, pc}
 80030dc:	f3af 8000 	nop.w
 80030e0:	e8584caa 	.word	0xe8584caa
 80030e4:	3febb67a 	.word	0x3febb67a
 80030e8:	3ff80000 	.word	0x3ff80000

080030ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_MspInit+0x44>)
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <HAL_MspInit+0x44>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6613      	str	r3, [r2, #96]	; 0x60
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_MspInit+0x44>)
 8003100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_MspInit+0x44>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4a08      	ldr	r2, [pc, #32]	; (8003130 <HAL_MspInit+0x44>)
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003114:	6593      	str	r3, [r2, #88]	; 0x58
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_MspInit+0x44>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003122:	f002 ff55 	bl	8005fd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000

08003134 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b0a2      	sub	sp, #136	; 0x88
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800314c:	f107 0320 	add.w	r3, r7, #32
 8003150:	2254      	movs	r2, #84	; 0x54
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f006 fe15 	bl	8009d84 <memset>
  if(hadc->Instance==ADC1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003162:	f040 8083 	bne.w	800326c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800316a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800316c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003170:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003172:	f107 0320 	add.w	r3, r7, #32
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fc36 	bl	80069e8 <HAL_RCCEx_PeriphCLKConfig>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8003182:	f7ff fe97 	bl	8002eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003186:	4b69      	ldr	r3, [pc, #420]	; (800332c <HAL_ADC_MspInit+0x1f8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	4a67      	ldr	r2, [pc, #412]	; (800332c <HAL_ADC_MspInit+0x1f8>)
 800318e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_ADC_MspInit+0x1f8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d10b      	bne.n	80031b0 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003198:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	4a64      	ldr	r2, [pc, #400]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 800319e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a4:	4b62      	ldr	r3, [pc, #392]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b0:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b4:	4a5e      	ldr	r2, [pc, #376]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031bc:	4b5c      	ldr	r3, [pc, #368]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c8:	4b59      	ldr	r3, [pc, #356]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80031ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031cc:	4a58      	ldr	r2, [pc, #352]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031d4:	4b56      	ldr	r3, [pc, #344]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80031d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	697b      	ldr	r3, [r7, #20]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURR_A_Pin|CURR_B_Pin|CURR_C_Pin|ADC_TEMP_Pin;
 80031e0:	230f      	movs	r3, #15
 80031e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031e4:	2303      	movs	r3, #3
 80031e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80031f0:	4619      	mov	r1, r3
 80031f2:	4850      	ldr	r0, [pc, #320]	; (8003334 <HAL_ADC_MspInit+0x200>)
 80031f4:	f002 fcae 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SHC_V_Pin|SOURCE_VOLTAGE_Pin;
 80031f8:	230c      	movs	r3, #12
 80031fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031fc:	2303      	movs	r3, #3
 80031fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003204:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003208:	4619      	mov	r1, r3
 800320a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800320e:	f002 fca1 	bl	8005b54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003212:	4b49      	ldr	r3, [pc, #292]	; (8003338 <HAL_ADC_MspInit+0x204>)
 8003214:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_ADC_MspInit+0x208>)
 8003216:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003218:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_ADC_MspInit+0x204>)
 800321a:	2205      	movs	r2, #5
 800321c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800321e:	4b46      	ldr	r3, [pc, #280]	; (8003338 <HAL_ADC_MspInit+0x204>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003224:	4b44      	ldr	r3, [pc, #272]	; (8003338 <HAL_ADC_MspInit+0x204>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800322a:	4b43      	ldr	r3, [pc, #268]	; (8003338 <HAL_ADC_MspInit+0x204>)
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003230:	4b41      	ldr	r3, [pc, #260]	; (8003338 <HAL_ADC_MspInit+0x204>)
 8003232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003236:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003238:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_ADC_MspInit+0x204>)
 800323a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800323e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003240:	4b3d      	ldr	r3, [pc, #244]	; (8003338 <HAL_ADC_MspInit+0x204>)
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003246:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <HAL_ADC_MspInit+0x204>)
 8003248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800324c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800324e:	483a      	ldr	r0, [pc, #232]	; (8003338 <HAL_ADC_MspInit+0x204>)
 8003250:	f002 f848 	bl	80052e4 <HAL_DMA_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 800325a:	f7ff fe2b 	bl	8002eb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a35      	ldr	r2, [pc, #212]	; (8003338 <HAL_ADC_MspInit+0x204>)
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
 8003264:	4a34      	ldr	r2, [pc, #208]	; (8003338 <HAL_ADC_MspInit+0x204>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800326a:	e05a      	b.n	8003322 <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a33      	ldr	r2, [pc, #204]	; (8003340 <HAL_ADC_MspInit+0x20c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d155      	bne.n	8003322 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800327c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003280:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003282:	f107 0320 	add.w	r3, r7, #32
 8003286:	4618      	mov	r0, r3
 8003288:	f003 fbae 	bl	80069e8 <HAL_RCCEx_PeriphCLKConfig>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_ADC_MspInit+0x162>
      Error_Handler();
 8003292:	f7ff fe0f 	bl	8002eb4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003296:	4b25      	ldr	r3, [pc, #148]	; (800332c <HAL_ADC_MspInit+0x1f8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	4a23      	ldr	r2, [pc, #140]	; (800332c <HAL_ADC_MspInit+0x1f8>)
 800329e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <HAL_ADC_MspInit+0x1f8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10b      	bne.n	80032c0 <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80032a8:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ac:	4a20      	ldr	r2, [pc, #128]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80032ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d8:	4b15      	ldr	r3, [pc, #84]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_ADC_MspInit+0x1fc>)
 80032e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SHA_V_Pin|SHB_V_Pin;
 80032f0:	2303      	movs	r3, #3
 80032f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f4:	2303      	movs	r3, #3
 80032f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003300:	4619      	mov	r1, r3
 8003302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003306:	f002 fc25 	bl	8005b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_TEMP_Pin;
 800330a:	2320      	movs	r3, #32
 800330c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800330e:	2303      	movs	r3, #3
 8003310:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(MOTOR_TEMP_GPIO_Port, &GPIO_InitStruct);
 8003316:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800331a:	4619      	mov	r1, r3
 800331c:	4805      	ldr	r0, [pc, #20]	; (8003334 <HAL_ADC_MspInit+0x200>)
 800331e:	f002 fc19 	bl	8005b54 <HAL_GPIO_Init>
}
 8003322:	bf00      	nop
 8003324:	3788      	adds	r7, #136	; 0x88
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000390 	.word	0x20000390
 8003330:	40021000 	.word	0x40021000
 8003334:	48000800 	.word	0x48000800
 8003338:	200001c0 	.word	0x200001c0
 800333c:	40020008 	.word	0x40020008
 8003340:	50000100 	.word	0x50000100

08003344 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b09e      	sub	sp, #120	; 0x78
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800335c:	f107 0310 	add.w	r3, r7, #16
 8003360:	2254      	movs	r2, #84	; 0x54
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f006 fd0d 	bl	8009d84 <memset>
  if(hfdcan->Instance==FDCAN1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a20      	ldr	r2, [pc, #128]	; (80033f0 <HAL_FDCAN_MspInit+0xac>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d139      	bne.n	80033e8 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003378:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800337a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003380:	f107 0310 	add.w	r3, r7, #16
 8003384:	4618      	mov	r0, r3
 8003386:	f003 fb2f 	bl	80069e8 <HAL_RCCEx_PeriphCLKConfig>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003390:	f7ff fd90 	bl	8002eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <HAL_FDCAN_MspInit+0xb0>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <HAL_FDCAN_MspInit+0xb0>)
 800339a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800339e:	6593      	str	r3, [r2, #88]	; 0x58
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_FDCAN_MspInit+0xb0>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_FDCAN_MspInit+0xb0>)
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <HAL_FDCAN_MspInit+0xb0>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_FDCAN_MspInit+0xb0>)
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80033c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80033c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d2:	2300      	movs	r3, #0
 80033d4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80033d6:	2309      	movs	r3, #9
 80033d8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033de:	4619      	mov	r1, r3
 80033e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033e4:	f002 fbb6 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80033e8:	bf00      	nop
 80033ea:	3778      	adds	r7, #120	; 0x78
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40006400 	.word	0x40006400
 80033f4:	40021000 	.word	0x40021000

080033f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <HAL_SPI_MspInit+0x7c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d128      	bne.n	800346c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_SPI_MspInit+0x80>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003424:	6593      	str	r3, [r2, #88]	; 0x58
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	4a10      	ldr	r2, [pc, #64]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800344a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800344e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800345c:	2306      	movs	r3, #6
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4619      	mov	r1, r3
 8003466:	4805      	ldr	r0, [pc, #20]	; (800347c <HAL_SPI_MspInit+0x84>)
 8003468:	f002 fb74 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800346c:	bf00      	nop
 800346e:	3728      	adds	r7, #40	; 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40003c00 	.word	0x40003c00
 8003478:	40021000 	.word	0x40021000
 800347c:	48000800 	.word	0x48000800

08003480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d114      	bne.n	80034cc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a2:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_TIM_Base_MspInit+0xc0>)
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	4a26      	ldr	r2, [pc, #152]	; (8003540 <HAL_TIM_Base_MspInit+0xc0>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6593      	str	r3, [r2, #88]	; 0x58
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_TIM_Base_MspInit+0xc0>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	201c      	movs	r0, #28
 80034c0:	f001 fedb 	bl	800527a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034c4:	201c      	movs	r0, #28
 80034c6:	f001 fef2 	bl	80052ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034ca:	e035      	b.n	8003538 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM3)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <HAL_TIM_Base_MspInit+0xc4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d130      	bne.n	8003538 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_TIM_Base_MspInit+0xc0>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_TIM_Base_MspInit+0xc0>)
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6593      	str	r3, [r2, #88]	; 0x58
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_TIM_Base_MspInit+0xc0>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_TIM_Base_MspInit+0xc0>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	4a13      	ldr	r2, [pc, #76]	; (8003540 <HAL_TIM_Base_MspInit+0xc0>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_TIM_Base_MspInit+0xc0>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL1_INPUT_Pin|HALL_2_INPUT_Pin|HALL_3_INPUT_Pin;
 8003506:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800350a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	2300      	movs	r3, #0
 8003516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003518:	2302      	movs	r3, #2
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	4619      	mov	r1, r3
 8003522:	4809      	ldr	r0, [pc, #36]	; (8003548 <HAL_TIM_Base_MspInit+0xc8>)
 8003524:	f002 fb16 	bl	8005b54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003528:	2200      	movs	r2, #0
 800352a:	2100      	movs	r1, #0
 800352c:	201d      	movs	r0, #29
 800352e:	f001 fea4 	bl	800527a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003532:	201d      	movs	r0, #29
 8003534:	f001 febb 	bl	80052ae <HAL_NVIC_EnableIRQ>
}
 8003538:	bf00      	nop
 800353a:	3728      	adds	r7, #40	; 0x28
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	40000400 	.word	0x40000400
 8003548:	48000800 	.word	0x48000800

0800354c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003550:	e7fe      	b.n	8003550 <NMI_Handler+0x4>

08003552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003556:	e7fe      	b.n	8003556 <HardFault_Handler+0x4>

08003558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800355c:	e7fe      	b.n	800355c <MemManage_Handler+0x4>

0800355e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003562:	e7fe      	b.n	8003562 <BusFault_Handler+0x4>

08003564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003568:	e7fe      	b.n	8003568 <UsageFault_Handler+0x4>

0800356a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003598:	f000 f906 	bl	80037a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}

080035a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <DMA1_Channel1_IRQHandler+0x10>)
 80035a6:	f001 ffc0 	bl	800552a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200001c0 	.word	0x200001c0

080035b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <TIM2_IRQHandler+0x10>)
 80035ba:	f003 ffef 	bl	800759c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200002e8 	.word	0x200002e8

080035c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035cc:	4802      	ldr	r0, [pc, #8]	; (80035d8 <TIM3_IRQHandler+0x10>)
 80035ce:	f003 ffe5 	bl	800759c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000334 	.word	0x20000334

080035dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return 1;
 80035e0:	2301      	movs	r3, #1
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_kill>:

int _kill(int pid, int sig)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035f6:	f006 fc21 	bl	8009e3c <__errno>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2216      	movs	r2, #22
 80035fe:	601a      	str	r2, [r3, #0]
  return -1;
 8003600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_exit>:

void _exit (int status)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003614:	f04f 31ff 	mov.w	r1, #4294967295
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ffe7 	bl	80035ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800361e:	e7fe      	b.n	800361e <_exit+0x12>

08003620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <_sbrk+0x5c>)
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <_sbrk+0x60>)
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <_sbrk+0x64>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <_sbrk+0x64>)
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <_sbrk+0x68>)
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <_sbrk+0x64>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	429a      	cmp	r2, r3
 800364e:	d207      	bcs.n	8003660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003650:	f006 fbf4 	bl	8009e3c <__errno>
 8003654:	4603      	mov	r3, r0
 8003656:	220c      	movs	r2, #12
 8003658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	e009      	b.n	8003674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <_sbrk+0x64>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	4a05      	ldr	r2, [pc, #20]	; (8003684 <_sbrk+0x64>)
 8003670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003672:	68fb      	ldr	r3, [r7, #12]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20020000 	.word	0x20020000
 8003680:	00000400 	.word	0x00000400
 8003684:	20000394 	.word	0x20000394
 8003688:	200004e8 	.word	0x200004e8

0800368c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <SystemInit+0x20>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	4a05      	ldr	r2, [pc, #20]	; (80036ac <SystemInit+0x20>)
 8003698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800369c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036b0:	480d      	ldr	r0, [pc, #52]	; (80036e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b4:	480d      	ldr	r0, [pc, #52]	; (80036ec <LoopForever+0x6>)
  ldr r1, =_edata
 80036b6:	490e      	ldr	r1, [pc, #56]	; (80036f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036b8:	4a0e      	ldr	r2, [pc, #56]	; (80036f4 <LoopForever+0xe>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80036bc:	e002      	b.n	80036c4 <LoopCopyDataInit>

080036be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c2:	3304      	adds	r3, #4

080036c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c8:	d3f9      	bcc.n	80036be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ca:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036cc:	4c0b      	ldr	r4, [pc, #44]	; (80036fc <LoopForever+0x16>)
  movs r3, #0
 80036ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d0:	e001      	b.n	80036d6 <LoopFillZerobss>

080036d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d4:	3204      	adds	r2, #4

080036d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d8:	d3fb      	bcc.n	80036d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036da:	f7ff ffd7 	bl	800368c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036de:	f006 fbb3 	bl	8009e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036e2:	f7ff f863 	bl	80027ac <main>

080036e6 <LoopForever>:

LoopForever:
    b LoopForever
 80036e6:	e7fe      	b.n	80036e6 <LoopForever>
  ldr   r0, =_estack
 80036e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80036f4:	0800a188 	.word	0x0800a188
  ldr r2, =_sbss
 80036f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80036fc:	200004e8 	.word	0x200004e8

08003700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003700:	e7fe      	b.n	8003700 <ADC1_2_IRQHandler>

08003702 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800370c:	2003      	movs	r0, #3
 800370e:	f001 fda9 	bl	8005264 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003712:	200f      	movs	r0, #15
 8003714:	f000 f80e 	bl	8003734 <HAL_InitTick>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	71fb      	strb	r3, [r7, #7]
 8003722:	e001      	b.n	8003728 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003724:	f7ff fce2 	bl	80030ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003728:	79fb      	ldrb	r3, [r7, #7]

}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003740:	4b16      	ldr	r3, [pc, #88]	; (800379c <HAL_InitTick+0x68>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d022      	beq.n	800378e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003748:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_InitTick+0x6c>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <HAL_InitTick+0x68>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003754:	fbb1 f3f3 	udiv	r3, r1, r3
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	4618      	mov	r0, r3
 800375e:	f001 fdb4 	bl	80052ca <HAL_SYSTICK_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10f      	bne.n	8003788 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b0f      	cmp	r3, #15
 800376c:	d809      	bhi.n	8003782 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800376e:	2200      	movs	r2, #0
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	f04f 30ff 	mov.w	r0, #4294967295
 8003776:	f001 fd80 	bl	800527a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800377a:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <HAL_InitTick+0x70>)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e007      	b.n	8003792 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	e004      	b.n	8003792 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	e001      	b.n	8003792 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000008 	.word	0x20000008
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000004 	.word	0x20000004

080037a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_IncTick+0x1c>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_IncTick+0x20>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	4a03      	ldr	r2, [pc, #12]	; (80037c4 <HAL_IncTick+0x1c>)
 80037b8:	6013      	str	r3, [r2, #0]
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	20000398 	.word	0x20000398
 80037c8:	20000008 	.word	0x20000008

080037cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return uwTick;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_GetTick+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000398 	.word	0x20000398

080037e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ec:	f7ff ffee 	bl	80037cc <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d004      	beq.n	8003808 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_Delay+0x40>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003808:	bf00      	nop
 800380a:	f7ff ffdf 	bl	80037cc <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	429a      	cmp	r2, r3
 8003818:	d8f7      	bhi.n	800380a <HAL_Delay+0x26>
  {
  }
}
 800381a:	bf00      	nop
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000008 	.word	0x20000008

08003828 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	609a      	str	r2, [r3, #8]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	609a      	str	r2, [r3, #8]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3360      	adds	r3, #96	; 0x60
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <LL_ADC_SetOffset+0x44>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	4313      	orrs	r3, r2
 80038c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	03fff000 	.word	0x03fff000

080038d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3360      	adds	r3, #96	; 0x60
 80038e6:	461a      	mov	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3360      	adds	r3, #96	; 0x60
 8003914:	461a      	mov	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	431a      	orrs	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800393a:	b480      	push	{r7}
 800393c:	b087      	sub	sp, #28
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3360      	adds	r3, #96	; 0x60
 800394a:	461a      	mov	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	431a      	orrs	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003964:	bf00      	nop
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3360      	adds	r3, #96	; 0x60
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	431a      	orrs	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	615a      	str	r2, [r3, #20]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b087      	sub	sp, #28
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3330      	adds	r3, #48	; 0x30
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	4413      	add	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	211f      	movs	r1, #31
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	401a      	ands	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	f003 011f 	and.w	r1, r3, #31
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b087      	sub	sp, #28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3314      	adds	r3, #20
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	0e5b      	lsrs	r3, r3, #25
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	4413      	add	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	0d1b      	lsrs	r3, r3, #20
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2107      	movs	r1, #7
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	401a      	ands	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	0d1b      	lsrs	r3, r3, #20
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d10a      	bne.n	8003aca <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003ac8:	e00a      	b.n	8003ae0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	401a      	ands	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	407f0000 	.word	0x407f0000

08003af0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 031f 	and.w	r3, r3, #31
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6093      	str	r3, [r2, #8]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b44:	d101      	bne.n	8003b4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b94:	d101      	bne.n	8003b9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003be4:	f043 0202 	orr.w	r2, r3, #2
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <LL_ADC_IsEnabled+0x18>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <LL_ADC_IsEnabled+0x1a>
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d101      	bne.n	8003c36 <LL_ADC_IsDisableOngoing+0x18>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <LL_ADC_IsDisableOngoing+0x1a>
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c58:	f043 0204 	orr.w	r2, r3, #4
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d101      	bne.n	8003c84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d101      	bne.n	8003caa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e1af      	b.n	8004032 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fa27 	bl	8003134 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff19 	bl	8003b30 <LL_ADC_IsDeepPowerDownEnabled>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff feff 	bl	8003b0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff34 	bl	8003b80 <LL_ADC_IsInternalRegulatorEnabled>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d115      	bne.n	8003d4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff ff18 	bl	8003b58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d28:	4b9f      	ldr	r3, [pc, #636]	; (8003fa8 <HAL_ADC_Init+0x2f0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	4a9f      	ldr	r2, [pc, #636]	; (8003fac <HAL_ADC_Init+0x2f4>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	3301      	adds	r3, #1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d3c:	e002      	b.n	8003d44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f9      	bne.n	8003d3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff16 	bl	8003b80 <LL_ADC_IsInternalRegulatorEnabled>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	f043 0210 	orr.w	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ff76 	bl	8003c6c <LL_ADC_REG_IsConversionOngoing>
 8003d80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 8148 	bne.w	8004020 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 8144 	bne.w	8004020 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003da0:	f043 0202 	orr.w	r2, r3, #2
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff23 	bl	8003bf8 <LL_ADC_IsEnabled>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d141      	bne.n	8003e3c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc0:	d004      	beq.n	8003dcc <HAL_ADC_Init+0x114>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7a      	ldr	r2, [pc, #488]	; (8003fb0 <HAL_ADC_Init+0x2f8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10f      	bne.n	8003dec <HAL_ADC_Init+0x134>
 8003dcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003dd0:	f7ff ff12 	bl	8003bf8 <LL_ADC_IsEnabled>
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	4876      	ldr	r0, [pc, #472]	; (8003fb0 <HAL_ADC_Init+0x2f8>)
 8003dd8:	f7ff ff0e 	bl	8003bf8 <LL_ADC_IsEnabled>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4323      	orrs	r3, r4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	e012      	b.n	8003e12 <HAL_ADC_Init+0x15a>
 8003dec:	4871      	ldr	r0, [pc, #452]	; (8003fb4 <HAL_ADC_Init+0x2fc>)
 8003dee:	f7ff ff03 	bl	8003bf8 <LL_ADC_IsEnabled>
 8003df2:	4604      	mov	r4, r0
 8003df4:	4870      	ldr	r0, [pc, #448]	; (8003fb8 <HAL_ADC_Init+0x300>)
 8003df6:	f7ff feff 	bl	8003bf8 <LL_ADC_IsEnabled>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	431c      	orrs	r4, r3
 8003dfe:	486f      	ldr	r0, [pc, #444]	; (8003fbc <HAL_ADC_Init+0x304>)
 8003e00:	f7ff fefa 	bl	8003bf8 <LL_ADC_IsEnabled>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4323      	orrs	r3, r4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d012      	beq.n	8003e3c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e1e:	d004      	beq.n	8003e2a <HAL_ADC_Init+0x172>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a62      	ldr	r2, [pc, #392]	; (8003fb0 <HAL_ADC_Init+0x2f8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_ADC_Init+0x176>
 8003e2a:	4a65      	ldr	r2, [pc, #404]	; (8003fc0 <HAL_ADC_Init+0x308>)
 8003e2c:	e000      	b.n	8003e30 <HAL_ADC_Init+0x178>
 8003e2e:	4a65      	ldr	r2, [pc, #404]	; (8003fc4 <HAL_ADC_Init+0x30c>)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f7ff fcf6 	bl	8003828 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7f5b      	ldrb	r3, [r3, #29]
 8003e40:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e46:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003e4c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003e52:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e5a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d106      	bne.n	8003e78 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	045b      	lsls	r3, r3, #17
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	4b4b      	ldr	r3, [pc, #300]	; (8003fc8 <HAL_ADC_Init+0x310>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	69b9      	ldr	r1, [r7, #24]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fed2 	bl	8003c6c <LL_ADC_REG_IsConversionOngoing>
 8003ec8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fedf 	bl	8003c92 <LL_ADC_INJ_IsConversionOngoing>
 8003ed4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d17f      	bne.n	8003fdc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d17c      	bne.n	8003fdc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ee6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003efe:	f023 0302 	bic.w	r3, r3, #2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6911      	ldr	r1, [r2, #16]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003f42:	e013      	b.n	8003f6c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d12a      	bne.n	8003fcc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	611a      	str	r2, [r3, #16]
 8003fa6:	e019      	b.n	8003fdc <HAL_ADC_Init+0x324>
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	053e2d63 	.word	0x053e2d63
 8003fb0:	50000100 	.word	0x50000100
 8003fb4:	50000400 	.word	0x50000400
 8003fb8:	50000500 	.word	0x50000500
 8003fbc:	50000600 	.word	0x50000600
 8003fc0:	50000300 	.word	0x50000300
 8003fc4:	50000700 	.word	0x50000700
 8003fc8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d10c      	bne.n	8003ffe <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f023 010f 	bic.w	r1, r3, #15
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	1e5a      	subs	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8003ffc:	e007      	b.n	800400e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 020f 	bic.w	r2, r2, #15
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	f023 0303 	bic.w	r3, r3, #3
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	65da      	str	r2, [r3, #92]	; 0x5c
 800401e:	e007      	b.n	8004030 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f043 0210 	orr.w	r2, r3, #16
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004030:	7ffb      	ldrb	r3, [r7, #31]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3724      	adds	r7, #36	; 0x24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd90      	pop	{r4, r7, pc}
 800403a:	bf00      	nop

0800403c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004050:	d004      	beq.n	800405c <HAL_ADC_Start_DMA+0x20>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a5a      	ldr	r2, [pc, #360]	; (80041c0 <HAL_ADC_Start_DMA+0x184>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d101      	bne.n	8004060 <HAL_ADC_Start_DMA+0x24>
 800405c:	4b59      	ldr	r3, [pc, #356]	; (80041c4 <HAL_ADC_Start_DMA+0x188>)
 800405e:	e000      	b.n	8004062 <HAL_ADC_Start_DMA+0x26>
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <HAL_ADC_Start_DMA+0x18c>)
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fd44 	bl	8003af0 <LL_ADC_GetMultimode>
 8004068:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fdfc 	bl	8003c6c <LL_ADC_REG_IsConversionOngoing>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 809b 	bne.w	80041b2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_ADC_Start_DMA+0x4e>
 8004086:	2302      	movs	r3, #2
 8004088:	e096      	b.n	80041b8 <HAL_ADC_Start_DMA+0x17c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a4d      	ldr	r2, [pc, #308]	; (80041cc <HAL_ADC_Start_DMA+0x190>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d008      	beq.n	80040ae <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d002      	beq.n	80040ae <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	d17a      	bne.n	80041a4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fcf6 	bl	8004aa0 <ADC_Enable>
 80040b4:	4603      	mov	r3, r0
 80040b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d16d      	bne.n	800419a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <HAL_ADC_Start_DMA+0x184>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_ADC_Start_DMA+0xb4>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3b      	ldr	r2, [pc, #236]	; (80041d0 <HAL_ADC_Start_DMA+0x194>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d002      	beq.n	80040ec <HAL_ADC_Start_DMA+0xb0>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	e003      	b.n	80040f4 <HAL_ADC_Start_DMA+0xb8>
 80040ec:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_ADC_Start_DMA+0x198>)
 80040ee:	e001      	b.n	80040f4 <HAL_ADC_Start_DMA+0xb8>
 80040f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d002      	beq.n	8004102 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d006      	beq.n	8004128 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411e:	f023 0206 	bic.w	r2, r3, #6
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	661a      	str	r2, [r3, #96]	; 0x60
 8004126:	e002      	b.n	800412e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	4a29      	ldr	r2, [pc, #164]	; (80041d8 <HAL_ADC_Start_DMA+0x19c>)
 8004134:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	4a28      	ldr	r2, [pc, #160]	; (80041dc <HAL_ADC_Start_DMA+0x1a0>)
 800413c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <HAL_ADC_Start_DMA+0x1a4>)
 8004144:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	221c      	movs	r2, #28
 800414c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0210 	orr.w	r2, r2, #16
 8004164:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3340      	adds	r3, #64	; 0x40
 8004180:	4619      	mov	r1, r3
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f001 f955 	bl	8005434 <HAL_DMA_Start_IT>
 800418a:	4603      	mov	r3, r0
 800418c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fd56 	bl	8003c44 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004198:	e00d      	b.n	80041b6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80041a2:	e008      	b.n	80041b6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80041b0:	e001      	b.n	80041b6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
 80041b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	50000100 	.word	0x50000100
 80041c4:	50000300 	.word	0x50000300
 80041c8:	50000700 	.word	0x50000700
 80041cc:	50000600 	.word	0x50000600
 80041d0:	50000500 	.word	0x50000500
 80041d4:	50000400 	.word	0x50000400
 80041d8:	08004c23 	.word	0x08004c23
 80041dc:	08004cfb 	.word	0x08004cfb
 80041e0:	08004d17 	.word	0x08004d17

080041e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b0b6      	sub	sp, #216	; 0xd8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800423a:	2b01      	cmp	r3, #1
 800423c:	d102      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x24>
 800423e:	2302      	movs	r3, #2
 8004240:	f000 bc13 	b.w	8004a6a <HAL_ADC_ConfigChannel+0x84a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fd0b 	bl	8003c6c <LL_ADC_REG_IsConversionOngoing>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 83f3 	bne.w	8004a44 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	f7ff fbc1 	bl	80039f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fcf9 	bl	8003c6c <LL_ADC_REG_IsConversionOngoing>
 800427a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fd05 	bl	8003c92 <LL_ADC_INJ_IsConversionOngoing>
 8004288:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800428c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 81d9 	bne.w	8004648 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 81d4 	bne.w	8004648 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a8:	d10f      	bne.n	80042ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7ff fbc8 	bl	8003a4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fb6f 	bl	80039a6 <LL_ADC_SetSamplingTimeCommonConfig>
 80042c8:	e00e      	b.n	80042e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7ff fbb7 	bl	8003a4a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fb5f 	bl	80039a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	08db      	lsrs	r3, r3, #3
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b04      	cmp	r3, #4
 8004308:	d022      	beq.n	8004350 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6919      	ldr	r1, [r3, #16]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800431a:	f7ff fab9 	bl	8003890 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6919      	ldr	r1, [r3, #16]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	461a      	mov	r2, r3
 800432c:	f7ff fb05 	bl	800393a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6919      	ldr	r1, [r3, #16]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	7f1b      	ldrb	r3, [r3, #28]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d102      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x126>
 8004340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004344:	e000      	b.n	8004348 <HAL_ADC_ConfigChannel+0x128>
 8004346:	2300      	movs	r3, #0
 8004348:	461a      	mov	r2, r3
 800434a:	f7ff fb11 	bl	8003970 <LL_ADC_SetOffsetSaturation>
 800434e:	e17b      	b.n	8004648 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fabe 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_ADC_ConfigChannel+0x15c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fab3 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	e01e      	b.n	80043ba <HAL_ADC_ConfigChannel+0x19a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff faa8 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800439a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800439e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80043aa:	2320      	movs	r3, #32
 80043ac:	e004      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80043ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x1b2>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0e9b      	lsrs	r3, r3, #26
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	e018      	b.n	8004404 <HAL_ADC_ConfigChannel+0x1e4>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80043e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80043ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e004      	b.n	8004404 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80043fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004404:	429a      	cmp	r2, r3
 8004406:	d106      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2200      	movs	r2, #0
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fa77 	bl	8003904 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fa5b 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 8004422:	4603      	mov	r3, r0
 8004424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x222>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fa50 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 8004438:	4603      	mov	r3, r0
 800443a:	0e9b      	lsrs	r3, r3, #26
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	e01e      	b.n	8004480 <HAL_ADC_ConfigChannel+0x260>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2101      	movs	r1, #1
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fa45 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 800444e:	4603      	mov	r3, r0
 8004450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004470:	2320      	movs	r3, #32
 8004472:	e004      	b.n	800447e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004478:	fab3 f383 	clz	r3, r3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x278>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	e018      	b.n	80044ca <HAL_ADC_ConfigChannel+0x2aa>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a4:	fa93 f3a3 	rbit	r3, r3
 80044a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80044ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80044b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80044bc:	2320      	movs	r3, #32
 80044be:	e004      	b.n	80044ca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80044c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d106      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2101      	movs	r1, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fa14 	bl	8003904 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2102      	movs	r1, #2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff f9f8 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x2e8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2102      	movs	r1, #2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff f9ed 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 80044fe:	4603      	mov	r3, r0
 8004500:	0e9b      	lsrs	r3, r3, #26
 8004502:	f003 021f 	and.w	r2, r3, #31
 8004506:	e01e      	b.n	8004546 <HAL_ADC_ConfigChannel+0x326>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2102      	movs	r1, #2
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f9e2 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 8004514:	4603      	mov	r3, r0
 8004516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004526:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800452a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800452e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004536:	2320      	movs	r3, #32
 8004538:	e004      	b.n	8004544 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800453a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <HAL_ADC_ConfigChannel+0x33e>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0e9b      	lsrs	r3, r3, #26
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	e016      	b.n	800458c <HAL_ADC_ConfigChannel+0x36c>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800457e:	2320      	movs	r3, #32
 8004580:	e004      	b.n	800458c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800458c:	429a      	cmp	r2, r3
 800458e:	d106      	bne.n	800459e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2200      	movs	r2, #0
 8004596:	2102      	movs	r1, #2
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff f9b3 	bl	8003904 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2103      	movs	r1, #3
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff f997 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x3aa>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2103      	movs	r1, #3
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff f98c 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 80045c0:	4603      	mov	r3, r0
 80045c2:	0e9b      	lsrs	r3, r3, #26
 80045c4:	f003 021f 	and.w	r2, r3, #31
 80045c8:	e017      	b.n	80045fa <HAL_ADC_ConfigChannel+0x3da>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2103      	movs	r1, #3
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff f981 	bl	80038d8 <LL_ADC_GetOffsetChannel>
 80045d6:	4603      	mov	r3, r0
 80045d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80045e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80045e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80045ec:	2320      	movs	r3, #32
 80045ee:	e003      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80045f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f2:	fab3 f383 	clz	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x3f2>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0e9b      	lsrs	r3, r3, #26
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	e011      	b.n	8004636 <HAL_ADC_ConfigChannel+0x416>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004622:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800462a:	2320      	movs	r3, #32
 800462c:	e003      	b.n	8004636 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800462e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004636:	429a      	cmp	r2, r3
 8004638:	d106      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	2103      	movs	r1, #3
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f95e 	bl	8003904 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fad3 	bl	8003bf8 <LL_ADC_IsEnabled>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	f040 813d 	bne.w	80048d4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	461a      	mov	r2, r3
 8004668:	f7ff fa1a 	bl	8003aa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4aa2      	ldr	r2, [pc, #648]	; (80048fc <HAL_ADC_ConfigChannel+0x6dc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	f040 812e 	bne.w	80048d4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x480>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0e9b      	lsrs	r3, r3, #26
 800468e:	3301      	adds	r3, #1
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	2b09      	cmp	r3, #9
 8004696:	bf94      	ite	ls
 8004698:	2301      	movls	r3, #1
 800469a:	2300      	movhi	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e019      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x4b4>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80046ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80046b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	e003      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80046bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	2b09      	cmp	r3, #9
 80046cc:	bf94      	ite	ls
 80046ce:	2301      	movls	r3, #1
 80046d0:	2300      	movhi	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d079      	beq.n	80047cc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x4d4>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	0e9b      	lsrs	r3, r3, #26
 80046ea:	3301      	adds	r3, #1
 80046ec:	069b      	lsls	r3, r3, #26
 80046ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046f2:	e015      	b.n	8004720 <HAL_ADC_ConfigChannel+0x500>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004704:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800470c:	2320      	movs	r3, #32
 800470e:	e003      	b.n	8004718 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	3301      	adds	r3, #1
 800471a:	069b      	lsls	r3, r3, #26
 800471c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x520>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0e9b      	lsrs	r3, r3, #26
 8004732:	3301      	adds	r3, #1
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	e017      	b.n	8004770 <HAL_ADC_ConfigChannel+0x550>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004750:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004758:	2320      	movs	r3, #32
 800475a:	e003      	b.n	8004764 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3301      	adds	r3, #1
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	ea42 0103 	orr.w	r1, r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x576>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	0e9b      	lsrs	r3, r3, #26
 8004786:	3301      	adds	r3, #1
 8004788:	f003 021f 	and.w	r2, r3, #31
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	051b      	lsls	r3, r3, #20
 8004794:	e018      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x5a8>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80047ae:	2320      	movs	r3, #32
 80047b0:	e003      	b.n	80047ba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80047b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b4:	fab3 f383 	clz	r3, r3
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	3301      	adds	r3, #1
 80047bc:	f003 021f 	and.w	r2, r3, #31
 80047c0:	4613      	mov	r3, r2
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4413      	add	r3, r2
 80047c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047c8:	430b      	orrs	r3, r1
 80047ca:	e07e      	b.n	80048ca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d107      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x5c8>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0e9b      	lsrs	r3, r3, #26
 80047de:	3301      	adds	r3, #1
 80047e0:	069b      	lsls	r3, r3, #26
 80047e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047e6:	e015      	b.n	8004814 <HAL_ADC_ConfigChannel+0x5f4>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004800:	2320      	movs	r3, #32
 8004802:	e003      	b.n	800480c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3301      	adds	r3, #1
 800480e:	069b      	lsls	r3, r3, #26
 8004810:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x614>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	0e9b      	lsrs	r3, r3, #26
 8004826:	3301      	adds	r3, #1
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	e017      	b.n	8004864 <HAL_ADC_ConfigChannel+0x644>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	61fb      	str	r3, [r7, #28]
  return result;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	e003      	b.n	8004858 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	3301      	adds	r3, #1
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2101      	movs	r1, #1
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	ea42 0103 	orr.w	r1, r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10d      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x670>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	0e9b      	lsrs	r3, r3, #26
 800487a:	3301      	adds	r3, #1
 800487c:	f003 021f 	and.w	r2, r3, #31
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	3b1e      	subs	r3, #30
 8004888:	051b      	lsls	r3, r3, #20
 800488a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800488e:	e01b      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x6a8>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	613b      	str	r3, [r7, #16]
  return result;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80048a8:	2320      	movs	r3, #32
 80048aa:	e003      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	3301      	adds	r3, #1
 80048b6:	f003 021f 	and.w	r2, r3, #31
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	3b1e      	subs	r3, #30
 80048c2:	051b      	lsls	r3, r3, #20
 80048c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048c8:	430b      	orrs	r3, r1
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	6892      	ldr	r2, [r2, #8]
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7ff f8bb 	bl	8003a4a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_ADC_ConfigChannel+0x6e0>)
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80be 	beq.w	8004a5e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ea:	d004      	beq.n	80048f6 <HAL_ADC_ConfigChannel+0x6d6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <HAL_ADC_ConfigChannel+0x6e4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d10a      	bne.n	800490c <HAL_ADC_ConfigChannel+0x6ec>
 80048f6:	4b04      	ldr	r3, [pc, #16]	; (8004908 <HAL_ADC_ConfigChannel+0x6e8>)
 80048f8:	e009      	b.n	800490e <HAL_ADC_ConfigChannel+0x6ee>
 80048fa:	bf00      	nop
 80048fc:	407f0000 	.word	0x407f0000
 8004900:	80080000 	.word	0x80080000
 8004904:	50000100 	.word	0x50000100
 8004908:	50000300 	.word	0x50000300
 800490c:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <HAL_ADC_ConfigChannel+0x854>)
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe ffb0 	bl	8003874 <LL_ADC_GetCommonPathInternalCh>
 8004914:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a56      	ldr	r2, [pc, #344]	; (8004a78 <HAL_ADC_ConfigChannel+0x858>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_ADC_ConfigChannel+0x70c>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a55      	ldr	r2, [pc, #340]	; (8004a7c <HAL_ADC_ConfigChannel+0x85c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d13a      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800492c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d134      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004940:	d005      	beq.n	800494e <HAL_ADC_ConfigChannel+0x72e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a4e      	ldr	r2, [pc, #312]	; (8004a80 <HAL_ADC_ConfigChannel+0x860>)
 8004948:	4293      	cmp	r3, r2
 800494a:	f040 8085 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004956:	d004      	beq.n	8004962 <HAL_ADC_ConfigChannel+0x742>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a49      	ldr	r2, [pc, #292]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x746>
 8004962:	4a49      	ldr	r2, [pc, #292]	; (8004a88 <HAL_ADC_ConfigChannel+0x868>)
 8004964:	e000      	b.n	8004968 <HAL_ADC_ConfigChannel+0x748>
 8004966:	4a43      	ldr	r2, [pc, #268]	; (8004a74 <HAL_ADC_ConfigChannel+0x854>)
 8004968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800496c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f7fe ff6b 	bl	800384e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004978:	4b44      	ldr	r3, [pc, #272]	; (8004a8c <HAL_ADC_ConfigChannel+0x86c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	099b      	lsrs	r3, r3, #6
 800497e:	4a44      	ldr	r2, [pc, #272]	; (8004a90 <HAL_ADC_ConfigChannel+0x870>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004992:	e002      	b.n	800499a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b01      	subs	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f9      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049a0:	e05a      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <HAL_ADC_ConfigChannel+0x874>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d125      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x7d8>
 80049ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11f      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a31      	ldr	r2, [pc, #196]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d104      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x7ac>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a34      	ldr	r2, [pc, #208]	; (8004a98 <HAL_ADC_ConfigChannel+0x878>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d047      	beq.n	8004a5c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049d4:	d004      	beq.n	80049e0 <HAL_ADC_ConfigChannel+0x7c0>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x7c4>
 80049e0:	4a29      	ldr	r2, [pc, #164]	; (8004a88 <HAL_ADC_ConfigChannel+0x868>)
 80049e2:	e000      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x7c6>
 80049e4:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <HAL_ADC_ConfigChannel+0x854>)
 80049e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fe ff2c 	bl	800384e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049f6:	e031      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <HAL_ADC_ConfigChannel+0x87c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d12d      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d127      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d022      	beq.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a20:	d004      	beq.n	8004a2c <HAL_ADC_ConfigChannel+0x80c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a17      	ldr	r2, [pc, #92]	; (8004a84 <HAL_ADC_ConfigChannel+0x864>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x810>
 8004a2c:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <HAL_ADC_ConfigChannel+0x868>)
 8004a2e:	e000      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x812>
 8004a30:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <HAL_ADC_ConfigChannel+0x854>)
 8004a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f7fe ff06 	bl	800384e <LL_ADC_SetCommonPathInternalCh>
 8004a42:	e00c      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f043 0220 	orr.w	r2, r3, #32
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004a56:	e002      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a58:	bf00      	nop
 8004a5a:	e000      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	37d8      	adds	r7, #216	; 0xd8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	50000700 	.word	0x50000700
 8004a78:	c3210000 	.word	0xc3210000
 8004a7c:	90c00010 	.word	0x90c00010
 8004a80:	50000600 	.word	0x50000600
 8004a84:	50000100 	.word	0x50000100
 8004a88:	50000300 	.word	0x50000300
 8004a8c:	20000000 	.word	0x20000000
 8004a90:	053e2d63 	.word	0x053e2d63
 8004a94:	c7520000 	.word	0xc7520000
 8004a98:	50000500 	.word	0x50000500
 8004a9c:	cb840000 	.word	0xcb840000

08004aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff f8a3 	bl	8003bf8 <LL_ADC_IsEnabled>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d14d      	bne.n	8004b54 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <ADC_Enable+0xc0>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aca:	f043 0210 	orr.w	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e039      	b.n	8004b56 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff f85e 	bl	8003ba8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004aec:	f7fe fe6e 	bl	80037cc <HAL_GetTick>
 8004af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004af2:	e028      	b.n	8004b46 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff f87d 	bl	8003bf8 <LL_ADC_IsEnabled>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff f84d 	bl	8003ba8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b0e:	f7fe fe5d 	bl	80037cc <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d914      	bls.n	8004b46 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d00d      	beq.n	8004b46 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e007      	b.n	8004b56 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d1cf      	bne.n	8004af4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	8000003f 	.word	0x8000003f

08004b64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff f854 	bl	8003c1e <LL_ADC_IsDisableOngoing>
 8004b76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff f83b 	bl	8003bf8 <LL_ADC_IsEnabled>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d047      	beq.n	8004c18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d144      	bne.n	8004c18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 030d 	and.w	r3, r3, #13
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10c      	bne.n	8004bb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff f815 	bl	8003bd0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2203      	movs	r2, #3
 8004bac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bae:	f7fe fe0d 	bl	80037cc <HAL_GetTick>
 8004bb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bb4:	e029      	b.n	8004c0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	f043 0210 	orr.w	r2, r3, #16
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e023      	b.n	8004c1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bd2:	f7fe fdfb 	bl	80037cc <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d914      	bls.n	8004c0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf2:	f043 0210 	orr.w	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfe:	f043 0201 	orr.w	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e007      	b.n	8004c1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1dc      	bne.n	8004bd2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d14b      	bne.n	8004cd4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d021      	beq.n	8004c9a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe feb6 	bl	80039cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d032      	beq.n	8004ccc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d12b      	bne.n	8004ccc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11f      	bne.n	8004ccc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c90:	f043 0201 	orr.w	r2, r3, #1
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c98:	e018      	b.n	8004ccc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d111      	bne.n	8004ccc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	f043 0201 	orr.w	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff fa89 	bl	80041e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cd2:	e00e      	b.n	8004cf2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff fa93 	bl	800420c <HAL_ADC_ErrorCallback>
}
 8004ce6:	e004      	b.n	8004cf2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4798      	blx	r3
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fa75 	bl	80041f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	f043 0204 	orr.w	r2, r3, #4
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff fa65 	bl	800420c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <LL_ADC_IsEnabled>:
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <LL_ADC_IsEnabled+0x18>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <LL_ADC_IsEnabled+0x1a>
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_ADC_StartCalibration>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004d82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	609a      	str	r2, [r3, #8]
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <LL_ADC_IsCalibrationOnGoing>:
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db6:	d101      	bne.n	8004dbc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <LL_ADC_REG_IsConversionOngoing>:
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d101      	bne.n	8004de2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_ADCEx_Calibration_Start+0x1c>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e04d      	b.n	8004ea8 <HAL_ADCEx_Calibration_Start+0xb8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fea5 	bl	8004b64 <ADC_Disable>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d136      	bne.n	8004e92 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e2c:	f023 0302 	bic.w	r3, r3, #2
 8004e30:	f043 0202 	orr.w	r2, r3, #2
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6839      	ldr	r1, [r7, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff ff96 	bl	8004d70 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e44:	e014      	b.n	8004e70 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d90d      	bls.n	8004e70 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e58:	f023 0312 	bic.w	r3, r3, #18
 8004e5c:	f043 0210 	orr.w	r2, r3, #16
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e01b      	b.n	8004ea8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff ff94 	bl	8004da2 <LL_ADC_IsCalibrationOnGoing>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e2      	bne.n	8004e46 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e84:	f023 0303 	bic.w	r3, r3, #3
 8004e88:	f043 0201 	orr.w	r2, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e90:	e005      	b.n	8004e9e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e96:	f043 0210 	orr.w	r2, r3, #16
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	0004de01 	.word	0x0004de01

08004eb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b0a1      	sub	sp, #132	; 0x84
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e0e7      	b.n	80050a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004eda:	2300      	movs	r3, #0
 8004edc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eea:	d102      	bne.n	8004ef2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004eec:	4b6f      	ldr	r3, [pc, #444]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	e009      	b.n	8004f06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a6e      	ldr	r2, [pc, #440]	; (80050b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d102      	bne.n	8004f02 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004efc:	4b6d      	ldr	r3, [pc, #436]	; (80050b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	e001      	b.n	8004f06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0be      	b.n	80050a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff ff4f 	bl	8004dca <LL_ADC_REG_IsConversionOngoing>
 8004f2c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff49 	bl	8004dca <LL_ADC_REG_IsConversionOngoing>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 80a0 	bne.w	8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 809c 	bne.w	8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f50:	d004      	beq.n	8004f5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a55      	ldr	r2, [pc, #340]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004f5c:	4b56      	ldr	r3, [pc, #344]	; (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004f5e:	e000      	b.n	8004f62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004f60:	4b56      	ldr	r3, [pc, #344]	; (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004f62:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d04b      	beq.n	8005004 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f7e:	035b      	lsls	r3, r3, #13
 8004f80:	430b      	orrs	r3, r1
 8004f82:	431a      	orrs	r2, r3
 8004f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f90:	d004      	beq.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a45      	ldr	r2, [pc, #276]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d10f      	bne.n	8004fbc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004f9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004fa0:	f7ff fed3 	bl	8004d4a <LL_ADC_IsEnabled>
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	4841      	ldr	r0, [pc, #260]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fa8:	f7ff fecf 	bl	8004d4a <LL_ADC_IsEnabled>
 8004fac:	4603      	mov	r3, r0
 8004fae:	4323      	orrs	r3, r4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e012      	b.n	8004fe2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004fbc:	483c      	ldr	r0, [pc, #240]	; (80050b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004fbe:	f7ff fec4 	bl	8004d4a <LL_ADC_IsEnabled>
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	483b      	ldr	r0, [pc, #236]	; (80050b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004fc6:	f7ff fec0 	bl	8004d4a <LL_ADC_IsEnabled>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	431c      	orrs	r4, r3
 8004fce:	483c      	ldr	r0, [pc, #240]	; (80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004fd0:	f7ff febb 	bl	8004d4a <LL_ADC_IsEnabled>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	4323      	orrs	r3, r4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf0c      	ite	eq
 8004fdc:	2301      	moveq	r3, #1
 8004fde:	2300      	movne	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d056      	beq.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fee:	f023 030f 	bic.w	r3, r3, #15
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	6811      	ldr	r1, [r2, #0]
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	6892      	ldr	r2, [r2, #8]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005000:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005002:	e047      	b.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800500c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800500e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005018:	d004      	beq.n	8005024 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a23      	ldr	r2, [pc, #140]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10f      	bne.n	8005044 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005024:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005028:	f7ff fe8f 	bl	8004d4a <LL_ADC_IsEnabled>
 800502c:	4604      	mov	r4, r0
 800502e:	481f      	ldr	r0, [pc, #124]	; (80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005030:	f7ff fe8b 	bl	8004d4a <LL_ADC_IsEnabled>
 8005034:	4603      	mov	r3, r0
 8005036:	4323      	orrs	r3, r4
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e012      	b.n	800506a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005044:	481a      	ldr	r0, [pc, #104]	; (80050b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005046:	f7ff fe80 	bl	8004d4a <LL_ADC_IsEnabled>
 800504a:	4604      	mov	r4, r0
 800504c:	4819      	ldr	r0, [pc, #100]	; (80050b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800504e:	f7ff fe7c 	bl	8004d4a <LL_ADC_IsEnabled>
 8005052:	4603      	mov	r3, r0
 8005054:	431c      	orrs	r4, r3
 8005056:	481a      	ldr	r0, [pc, #104]	; (80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005058:	f7ff fe77 	bl	8004d4a <LL_ADC_IsEnabled>
 800505c:	4603      	mov	r3, r0
 800505e:	4323      	orrs	r3, r4
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d012      	beq.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800506e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005076:	f023 030f 	bic.w	r3, r3, #15
 800507a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800507c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800507e:	e009      	b.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005092:	e000      	b.n	8005096 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005094:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800509e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3784      	adds	r7, #132	; 0x84
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd90      	pop	{r4, r7, pc}
 80050aa:	bf00      	nop
 80050ac:	50000100 	.word	0x50000100
 80050b0:	50000400 	.word	0x50000400
 80050b4:	50000500 	.word	0x50000500
 80050b8:	50000300 	.word	0x50000300
 80050bc:	50000700 	.word	0x50000700
 80050c0:	50000600 	.word	0x50000600

080050c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d4:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <__NVIC_SetPriorityGrouping+0x44>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050e0:	4013      	ands	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050f6:	4a04      	ldr	r2, [pc, #16]	; (8005108 <__NVIC_SetPriorityGrouping+0x44>)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	60d3      	str	r3, [r2, #12]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	e000ed00 	.word	0xe000ed00

0800510c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <__NVIC_GetPriorityGrouping+0x18>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	0a1b      	lsrs	r3, r3, #8
 8005116:	f003 0307 	and.w	r3, r3, #7
}
 800511a:	4618      	mov	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	e000ed00 	.word	0xe000ed00

08005128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005136:	2b00      	cmp	r3, #0
 8005138:	db0b      	blt.n	8005152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	f003 021f 	and.w	r2, r3, #31
 8005140:	4907      	ldr	r1, [pc, #28]	; (8005160 <__NVIC_EnableIRQ+0x38>)
 8005142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	2001      	movs	r0, #1
 800514a:	fa00 f202 	lsl.w	r2, r0, r2
 800514e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	e000e100 	.word	0xe000e100

08005164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	6039      	str	r1, [r7, #0]
 800516e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005174:	2b00      	cmp	r3, #0
 8005176:	db0a      	blt.n	800518e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	490c      	ldr	r1, [pc, #48]	; (80051b0 <__NVIC_SetPriority+0x4c>)
 800517e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005182:	0112      	lsls	r2, r2, #4
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	440b      	add	r3, r1
 8005188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800518c:	e00a      	b.n	80051a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	4908      	ldr	r1, [pc, #32]	; (80051b4 <__NVIC_SetPriority+0x50>)
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	3b04      	subs	r3, #4
 800519c:	0112      	lsls	r2, r2, #4
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	440b      	add	r3, r1
 80051a2:	761a      	strb	r2, [r3, #24]
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000e100 	.word	0xe000e100
 80051b4:	e000ed00 	.word	0xe000ed00

080051b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b089      	sub	sp, #36	; 0x24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f1c3 0307 	rsb	r3, r3, #7
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	bf28      	it	cs
 80051d6:	2304      	movcs	r3, #4
 80051d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3304      	adds	r3, #4
 80051de:	2b06      	cmp	r3, #6
 80051e0:	d902      	bls.n	80051e8 <NVIC_EncodePriority+0x30>
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3b03      	subs	r3, #3
 80051e6:	e000      	b.n	80051ea <NVIC_EncodePriority+0x32>
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051ec:	f04f 32ff 	mov.w	r2, #4294967295
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	43da      	mvns	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	401a      	ands	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005200:	f04f 31ff 	mov.w	r1, #4294967295
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	fa01 f303 	lsl.w	r3, r1, r3
 800520a:	43d9      	mvns	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005210:	4313      	orrs	r3, r2
         );
}
 8005212:	4618      	mov	r0, r3
 8005214:	3724      	adds	r7, #36	; 0x24
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
	...

08005220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3b01      	subs	r3, #1
 800522c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005230:	d301      	bcc.n	8005236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005232:	2301      	movs	r3, #1
 8005234:	e00f      	b.n	8005256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005236:	4a0a      	ldr	r2, [pc, #40]	; (8005260 <SysTick_Config+0x40>)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3b01      	subs	r3, #1
 800523c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800523e:	210f      	movs	r1, #15
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	f7ff ff8e 	bl	8005164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <SysTick_Config+0x40>)
 800524a:	2200      	movs	r2, #0
 800524c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800524e:	4b04      	ldr	r3, [pc, #16]	; (8005260 <SysTick_Config+0x40>)
 8005250:	2207      	movs	r2, #7
 8005252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	e000e010 	.word	0xe000e010

08005264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff ff29 	bl	80050c4 <__NVIC_SetPriorityGrouping>
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b086      	sub	sp, #24
 800527e:	af00      	add	r7, sp, #0
 8005280:	4603      	mov	r3, r0
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
 8005286:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005288:	f7ff ff40 	bl	800510c <__NVIC_GetPriorityGrouping>
 800528c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	6978      	ldr	r0, [r7, #20]
 8005294:	f7ff ff90 	bl	80051b8 <NVIC_EncodePriority>
 8005298:	4602      	mov	r2, r0
 800529a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800529e:	4611      	mov	r1, r2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff ff5f 	bl	8005164 <__NVIC_SetPriority>
}
 80052a6:	bf00      	nop
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	4603      	mov	r3, r0
 80052b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff ff33 	bl	8005128 <__NVIC_EnableIRQ>
}
 80052c2:	bf00      	nop
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff ffa4 	bl	8005220 <SysTick_Config>
 80052d8:	4603      	mov	r3, r0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e08d      	b.n	8005412 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	4b47      	ldr	r3, [pc, #284]	; (800541c <HAL_DMA_Init+0x138>)
 80052fe:	429a      	cmp	r2, r3
 8005300:	d80f      	bhi.n	8005322 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	4b45      	ldr	r3, [pc, #276]	; (8005420 <HAL_DMA_Init+0x13c>)
 800530a:	4413      	add	r3, r2
 800530c:	4a45      	ldr	r2, [pc, #276]	; (8005424 <HAL_DMA_Init+0x140>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	009a      	lsls	r2, r3, #2
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a42      	ldr	r2, [pc, #264]	; (8005428 <HAL_DMA_Init+0x144>)
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
 8005320:	e00e      	b.n	8005340 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	4b40      	ldr	r3, [pc, #256]	; (800542c <HAL_DMA_Init+0x148>)
 800532a:	4413      	add	r3, r2
 800532c:	4a3d      	ldr	r2, [pc, #244]	; (8005424 <HAL_DMA_Init+0x140>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	009a      	lsls	r2, r3, #2
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a3c      	ldr	r2, [pc, #240]	; (8005430 <HAL_DMA_Init+0x14c>)
 800533e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800537c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9b6 	bl	8005704 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a0:	d102      	bne.n	80053a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <HAL_DMA_Init+0x104>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d80c      	bhi.n	80053e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f9d6 	bl	8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	e008      	b.n	80053fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40020407 	.word	0x40020407
 8005420:	bffdfff8 	.word	0xbffdfff8
 8005424:	cccccccd 	.word	0xcccccccd
 8005428:	40020000 	.word	0x40020000
 800542c:	bffdfbf8 	.word	0xbffdfbf8
 8005430:	40020400 	.word	0x40020400

08005434 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_DMA_Start_IT+0x20>
 8005450:	2302      	movs	r3, #2
 8005452:	e066      	b.n	8005522 <HAL_DMA_Start_IT+0xee>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	d155      	bne.n	8005514 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0201 	bic.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f8fb 	bl	8005688 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 020e 	orr.w	r2, r2, #14
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e00f      	b.n	80054cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0204 	bic.w	r2, r2, #4
 80054ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 020a 	orr.w	r2, r2, #10
 80054ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005500:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e005      	b.n	8005520 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800551c:	2302      	movs	r3, #2
 800551e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2204      	movs	r2, #4
 800554c:	409a      	lsls	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d026      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x7a>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d021      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d107      	bne.n	800557e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0204 	bic.w	r2, r2, #4
 800557c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	f003 021f 	and.w	r2, r3, #31
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	2104      	movs	r1, #4
 800558c:	fa01 f202 	lsl.w	r2, r1, r2
 8005590:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	2b00      	cmp	r3, #0
 8005598:	d071      	beq.n	800567e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055a2:	e06c      	b.n	800567e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	2202      	movs	r2, #2
 80055ae:	409a      	lsls	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d02e      	beq.n	8005616 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d029      	beq.n	8005616 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 020a 	bic.w	r2, r2, #10
 80055de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ec:	f003 021f 	and.w	r2, r3, #31
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	2102      	movs	r1, #2
 80055f6:	fa01 f202 	lsl.w	r2, r1, r2
 80055fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d038      	beq.n	800567e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005614:	e033      	b.n	800567e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	2208      	movs	r2, #8
 8005620:	409a      	lsls	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d02a      	beq.n	8005680 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d025      	beq.n	8005680 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 020e 	bic.w	r2, r2, #14
 8005642:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	f003 021f 	and.w	r2, r3, #31
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	2101      	movs	r1, #1
 8005652:	fa01 f202 	lsl.w	r2, r1, r2
 8005656:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800567e:	bf00      	nop
 8005680:	bf00      	nop
}
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800569e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	f003 021f 	and.w	r2, r3, #31
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	2101      	movs	r1, #1
 80056c0:	fa01 f202 	lsl.w	r2, r1, r2
 80056c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d108      	bne.n	80056e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056e6:	e007      	b.n	80056f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	4b16      	ldr	r3, [pc, #88]	; (800576c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005714:	429a      	cmp	r2, r3
 8005716:	d802      	bhi.n	800571e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e001      	b.n	8005722 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800571e:	4b15      	ldr	r3, [pc, #84]	; (8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005720:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	3b08      	subs	r3, #8
 800572e:	4a12      	ldr	r2, [pc, #72]	; (8005778 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	089b      	lsrs	r3, r3, #2
 800573e:	009a      	lsls	r2, r3, #2
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4413      	add	r3, r2
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a0b      	ldr	r2, [pc, #44]	; (800577c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800574e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2201      	movs	r2, #1
 8005758:	409a      	lsls	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40020407 	.word	0x40020407
 8005770:	40020800 	.word	0x40020800
 8005774:	40020820 	.word	0x40020820
 8005778:	cccccccd 	.word	0xcccccccd
 800577c:	40020880 	.word	0x40020880

08005780 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	461a      	mov	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a08      	ldr	r2, [pc, #32]	; (80057c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057a2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	2201      	movs	r2, #1
 80057ae:	409a      	lsls	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80057b4:	bf00      	nop
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	1000823f 	.word	0x1000823f
 80057c4:	40020940 	.word	0x40020940

080057c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e147      	b.n	8005a6a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd fda8 	bl	8003344 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0210 	bic.w	r2, r2, #16
 8005802:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005804:	f7fd ffe2 	bl	80037cc <HAL_GetTick>
 8005808:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800580a:	e012      	b.n	8005832 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800580c:	f7fd ffde 	bl	80037cc <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b0a      	cmp	r3, #10
 8005818:	d90b      	bls.n	8005832 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581e:	f043 0201 	orr.w	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2203      	movs	r2, #3
 800582a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e11b      	b.n	8005a6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b08      	cmp	r3, #8
 800583e:	d0e5      	beq.n	800580c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005850:	f7fd ffbc 	bl	80037cc <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005856:	e012      	b.n	800587e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005858:	f7fd ffb8 	bl	80037cc <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b0a      	cmp	r3, #10
 8005864:	d90b      	bls.n	800587e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586a:	f043 0201 	orr.w	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2203      	movs	r2, #3
 8005876:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0f5      	b.n	8005a6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0e5      	beq.n	8005858 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0202 	orr.w	r2, r2, #2
 800589a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a74      	ldr	r2, [pc, #464]	; (8005a74 <HAL_FDCAN_Init+0x2ac>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d103      	bne.n	80058ae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80058a6:	4a74      	ldr	r2, [pc, #464]	; (8005a78 <HAL_FDCAN_Init+0x2b0>)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	7c1b      	ldrb	r3, [r3, #16]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d108      	bne.n	80058c8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c4:	619a      	str	r2, [r3, #24]
 80058c6:	e007      	b.n	80058d8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	7c5b      	ldrb	r3, [r3, #17]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d108      	bne.n	80058f2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ee:	619a      	str	r2, [r3, #24]
 80058f0:	e007      	b.n	8005902 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699a      	ldr	r2, [r3, #24]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005900:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	7c9b      	ldrb	r3, [r3, #18]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d108      	bne.n	800591c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005918:	619a      	str	r2, [r3, #24]
 800591a:	e007      	b.n	800592c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800592a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005950:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0210 	bic.w	r2, r2, #16
 8005960:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d108      	bne.n	800597c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0204 	orr.w	r2, r2, #4
 8005978:	619a      	str	r2, [r3, #24]
 800597a:	e02c      	b.n	80059d6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d028      	beq.n	80059d6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d01c      	beq.n	80059c6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800599a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0210 	orr.w	r2, r2, #16
 80059aa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d110      	bne.n	80059d6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0220 	orr.w	r2, r2, #32
 80059c2:	619a      	str	r2, [r3, #24]
 80059c4:	e007      	b.n	80059d6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699a      	ldr	r2, [r3, #24]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0220 	orr.w	r2, r2, #32
 80059d4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	3b01      	subs	r3, #1
 80059dc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059e6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059ee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059fe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a00:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a0a:	d115      	bne.n	8005a38 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	3b01      	subs	r3, #1
 8005a18:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a1a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	3b01      	subs	r3, #1
 8005a22:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a24:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a34:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a36:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f814 	bl	8005a7c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40006400 	.word	0x40006400
 8005a78:	40006500 	.word	0x40006500

08005a7c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005a84:	4b30      	ldr	r3, [pc, #192]	; (8005b48 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005a86:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a2f      	ldr	r2, [pc, #188]	; (8005b4c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d103      	bne.n	8005a9a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a98:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a2c      	ldr	r2, [pc, #176]	; (8005b50 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d103      	bne.n	8005aac <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005aaa:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aba:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac2:	041a      	lsls	r2, r3, #16
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	061a      	lsls	r2, r3, #24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e005      	b.n	8005b2e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3f3      	bcc.n	8005b22 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	4000a400 	.word	0x4000a400
 8005b4c:	40006800 	.word	0x40006800
 8005b50:	40006c00 	.word	0x40006c00

08005b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b62:	e15a      	b.n	8005e1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	2101      	movs	r1, #1
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 814c 	beq.w	8005e14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d005      	beq.n	8005b94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d130      	bne.n	8005bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bca:	2201      	movs	r2, #1
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	f003 0201 	and.w	r2, r3, #1
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d017      	beq.n	8005c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4013      	ands	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d123      	bne.n	8005c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	08da      	lsrs	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3208      	adds	r2, #8
 8005c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	220f      	movs	r2, #15
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	08da      	lsrs	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3208      	adds	r2, #8
 8005c80:	6939      	ldr	r1, [r7, #16]
 8005c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	2203      	movs	r2, #3
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 0203 	and.w	r2, r3, #3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80a6 	beq.w	8005e14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc8:	4b5b      	ldr	r3, [pc, #364]	; (8005e38 <HAL_GPIO_Init+0x2e4>)
 8005cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ccc:	4a5a      	ldr	r2, [pc, #360]	; (8005e38 <HAL_GPIO_Init+0x2e4>)
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	6613      	str	r3, [r2, #96]	; 0x60
 8005cd4:	4b58      	ldr	r3, [pc, #352]	; (8005e38 <HAL_GPIO_Init+0x2e4>)
 8005cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ce0:	4a56      	ldr	r2, [pc, #344]	; (8005e3c <HAL_GPIO_Init+0x2e8>)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	089b      	lsrs	r3, r3, #2
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	220f      	movs	r2, #15
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4013      	ands	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d0a:	d01f      	beq.n	8005d4c <HAL_GPIO_Init+0x1f8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a4c      	ldr	r2, [pc, #304]	; (8005e40 <HAL_GPIO_Init+0x2ec>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d019      	beq.n	8005d48 <HAL_GPIO_Init+0x1f4>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a4b      	ldr	r2, [pc, #300]	; (8005e44 <HAL_GPIO_Init+0x2f0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d013      	beq.n	8005d44 <HAL_GPIO_Init+0x1f0>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a4a      	ldr	r2, [pc, #296]	; (8005e48 <HAL_GPIO_Init+0x2f4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00d      	beq.n	8005d40 <HAL_GPIO_Init+0x1ec>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a49      	ldr	r2, [pc, #292]	; (8005e4c <HAL_GPIO_Init+0x2f8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d007      	beq.n	8005d3c <HAL_GPIO_Init+0x1e8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a48      	ldr	r2, [pc, #288]	; (8005e50 <HAL_GPIO_Init+0x2fc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d101      	bne.n	8005d38 <HAL_GPIO_Init+0x1e4>
 8005d34:	2305      	movs	r3, #5
 8005d36:	e00a      	b.n	8005d4e <HAL_GPIO_Init+0x1fa>
 8005d38:	2306      	movs	r3, #6
 8005d3a:	e008      	b.n	8005d4e <HAL_GPIO_Init+0x1fa>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	e006      	b.n	8005d4e <HAL_GPIO_Init+0x1fa>
 8005d40:	2303      	movs	r3, #3
 8005d42:	e004      	b.n	8005d4e <HAL_GPIO_Init+0x1fa>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e002      	b.n	8005d4e <HAL_GPIO_Init+0x1fa>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_GPIO_Init+0x1fa>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	f002 0203 	and.w	r2, r2, #3
 8005d54:	0092      	lsls	r2, r2, #2
 8005d56:	4093      	lsls	r3, r2
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d5e:	4937      	ldr	r1, [pc, #220]	; (8005e3c <HAL_GPIO_Init+0x2e8>)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	3302      	adds	r3, #2
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d6c:	4b39      	ldr	r3, [pc, #228]	; (8005e54 <HAL_GPIO_Init+0x300>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d90:	4a30      	ldr	r2, [pc, #192]	; (8005e54 <HAL_GPIO_Init+0x300>)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d96:	4b2f      	ldr	r3, [pc, #188]	; (8005e54 <HAL_GPIO_Init+0x300>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4013      	ands	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005dba:	4a26      	ldr	r2, [pc, #152]	; (8005e54 <HAL_GPIO_Init+0x300>)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005dc0:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <HAL_GPIO_Init+0x300>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005de4:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <HAL_GPIO_Init+0x300>)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005dea:	4b1a      	ldr	r3, [pc, #104]	; (8005e54 <HAL_GPIO_Init+0x300>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	43db      	mvns	r3, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4013      	ands	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e0e:	4a11      	ldr	r2, [pc, #68]	; (8005e54 <HAL_GPIO_Init+0x300>)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3301      	adds	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f47f ae9d 	bne.w	8005b64 <HAL_GPIO_Init+0x10>
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	48000400 	.word	0x48000400
 8005e44:	48000800 	.word	0x48000800
 8005e48:	48000c00 	.word	0x48000c00
 8005e4c:	48001000 	.word	0x48001000
 8005e50:	48001400 	.word	0x48001400
 8005e54:	40010400 	.word	0x40010400

08005e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	807b      	strh	r3, [r7, #2]
 8005e64:	4613      	mov	r3, r2
 8005e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e68:	787b      	ldrb	r3, [r7, #1]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e6e:	887a      	ldrh	r2, [r7, #2]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e74:	e002      	b.n	8005e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e76:	887a      	ldrh	r2, [r7, #2]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d141      	bne.n	8005f1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e96:	4b4b      	ldr	r3, [pc, #300]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea2:	d131      	bne.n	8005f08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ea4:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eaa:	4a46      	ldr	r2, [pc, #280]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005eb4:	4b43      	ldr	r3, [pc, #268]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ebc:	4a41      	ldr	r2, [pc, #260]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ec2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ec4:	4b40      	ldr	r3, [pc, #256]	; (8005fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2232      	movs	r2, #50	; 0x32
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	4a3f      	ldr	r2, [pc, #252]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	0c9b      	lsrs	r3, r3, #18
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eda:	e002      	b.n	8005ee2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ee2:	4b38      	ldr	r3, [pc, #224]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d102      	bne.n	8005ef6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f2      	bne.n	8005edc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ef6:	4b33      	ldr	r3, [pc, #204]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f02:	d158      	bne.n	8005fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e057      	b.n	8005fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f08:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f0e:	4a2d      	ldr	r2, [pc, #180]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f18:	e04d      	b.n	8005fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f20:	d141      	bne.n	8005fa6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f22:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f2e:	d131      	bne.n	8005f94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f30:	4b24      	ldr	r3, [pc, #144]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f36:	4a23      	ldr	r2, [pc, #140]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f40:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f48:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f50:	4b1d      	ldr	r3, [pc, #116]	; (8005fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2232      	movs	r2, #50	; 0x32
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f60:	0c9b      	lsrs	r3, r3, #18
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f66:	e002      	b.n	8005f6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f6e:	4b15      	ldr	r3, [pc, #84]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f7a:	d102      	bne.n	8005f82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f2      	bne.n	8005f68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f82:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8e:	d112      	bne.n	8005fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e011      	b.n	8005fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005fa4:	e007      	b.n	8005fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fae:	4a05      	ldr	r2, [pc, #20]	; (8005fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	40007000 	.word	0x40007000
 8005fc8:	20000000 	.word	0x20000000
 8005fcc:	431bde83 	.word	0x431bde83

08005fd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4a04      	ldr	r2, [pc, #16]	; (8005fec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fde:	6093      	str	r3, [r2, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40007000 	.word	0x40007000

08005ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e306      	b.n	8006610 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d075      	beq.n	80060fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800600e:	4b97      	ldr	r3, [pc, #604]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
 8006016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006018:	4b94      	ldr	r3, [pc, #592]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b0c      	cmp	r3, #12
 8006026:	d102      	bne.n	800602e <HAL_RCC_OscConfig+0x3e>
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d002      	beq.n	8006034 <HAL_RCC_OscConfig+0x44>
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d10b      	bne.n	800604c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006034:	4b8d      	ldr	r3, [pc, #564]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d05b      	beq.n	80060f8 <HAL_RCC_OscConfig+0x108>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d157      	bne.n	80060f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e2e1      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006054:	d106      	bne.n	8006064 <HAL_RCC_OscConfig+0x74>
 8006056:	4b85      	ldr	r3, [pc, #532]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a84      	ldr	r2, [pc, #528]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e01d      	b.n	80060a0 <HAL_RCC_OscConfig+0xb0>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800606c:	d10c      	bne.n	8006088 <HAL_RCC_OscConfig+0x98>
 800606e:	4b7f      	ldr	r3, [pc, #508]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a7e      	ldr	r2, [pc, #504]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	4b7c      	ldr	r3, [pc, #496]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a7b      	ldr	r2, [pc, #492]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	e00b      	b.n	80060a0 <HAL_RCC_OscConfig+0xb0>
 8006088:	4b78      	ldr	r3, [pc, #480]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a77      	ldr	r2, [pc, #476]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800608e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	4b75      	ldr	r3, [pc, #468]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a74      	ldr	r2, [pc, #464]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800609a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d013      	beq.n	80060d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fd fb90 	bl	80037cc <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b0:	f7fd fb8c 	bl	80037cc <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b64      	cmp	r3, #100	; 0x64
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e2a6      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060c2:	4b6a      	ldr	r3, [pc, #424]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f0      	beq.n	80060b0 <HAL_RCC_OscConfig+0xc0>
 80060ce:	e014      	b.n	80060fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fd fb7c 	bl	80037cc <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d8:	f7fd fb78 	bl	80037cc <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b64      	cmp	r3, #100	; 0x64
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e292      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060ea:	4b60      	ldr	r3, [pc, #384]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0xe8>
 80060f6:	e000      	b.n	80060fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d075      	beq.n	80061f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006106:	4b59      	ldr	r3, [pc, #356]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006110:	4b56      	ldr	r3, [pc, #344]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b0c      	cmp	r3, #12
 800611e:	d102      	bne.n	8006126 <HAL_RCC_OscConfig+0x136>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d002      	beq.n	800612c <HAL_RCC_OscConfig+0x13c>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b04      	cmp	r3, #4
 800612a:	d11f      	bne.n	800616c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800612c:	4b4f      	ldr	r3, [pc, #316]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <HAL_RCC_OscConfig+0x154>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e265      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006144:	4b49      	ldr	r3, [pc, #292]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	4946      	ldr	r1, [pc, #280]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006158:	4b45      	ldr	r3, [pc, #276]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4618      	mov	r0, r3
 800615e:	f7fd fae9 	bl	8003734 <HAL_InitTick>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d043      	beq.n	80061f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e251      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d023      	beq.n	80061bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006174:	4b3d      	ldr	r3, [pc, #244]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a3c      	ldr	r2, [pc, #240]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800617a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fd fb24 	bl	80037cc <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006188:	f7fd fb20 	bl	80037cc <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e23a      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800619a:	4b34      	ldr	r3, [pc, #208]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a6:	4b31      	ldr	r3, [pc, #196]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	061b      	lsls	r3, r3, #24
 80061b4:	492d      	ldr	r1, [pc, #180]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	604b      	str	r3, [r1, #4]
 80061ba:	e01a      	b.n	80061f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061bc:	4b2b      	ldr	r3, [pc, #172]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a2a      	ldr	r2, [pc, #168]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 80061c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c8:	f7fd fb00 	bl	80037cc <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d0:	f7fd fafc 	bl	80037cc <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e216      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061e2:	4b22      	ldr	r3, [pc, #136]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f0      	bne.n	80061d0 <HAL_RCC_OscConfig+0x1e0>
 80061ee:	e000      	b.n	80061f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d041      	beq.n	8006282 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01c      	beq.n	8006240 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800620c:	4a17      	ldr	r2, [pc, #92]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006216:	f7fd fad9 	bl	80037cc <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800621e:	f7fd fad5 	bl	80037cc <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e1ef      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006230:	4b0e      	ldr	r3, [pc, #56]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0ef      	beq.n	800621e <HAL_RCC_OscConfig+0x22e>
 800623e:	e020      	b.n	8006282 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006246:	4a09      	ldr	r2, [pc, #36]	; (800626c <HAL_RCC_OscConfig+0x27c>)
 8006248:	f023 0301 	bic.w	r3, r3, #1
 800624c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006250:	f7fd fabc 	bl	80037cc <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006256:	e00d      	b.n	8006274 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006258:	f7fd fab8 	bl	80037cc <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d906      	bls.n	8006274 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e1d2      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
 800626a:	bf00      	nop
 800626c:	40021000 	.word	0x40021000
 8006270:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006274:	4b8c      	ldr	r3, [pc, #560]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1ea      	bne.n	8006258 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80a6 	beq.w	80063dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006290:	2300      	movs	r3, #0
 8006292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006294:	4b84      	ldr	r3, [pc, #528]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_RCC_OscConfig+0x2b4>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <HAL_RCC_OscConfig+0x2b6>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062aa:	4b7f      	ldr	r3, [pc, #508]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 80062ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ae:	4a7e      	ldr	r2, [pc, #504]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 80062b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b4:	6593      	str	r3, [r2, #88]	; 0x58
 80062b6:	4b7c      	ldr	r3, [pc, #496]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 80062b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062c2:	2301      	movs	r3, #1
 80062c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062c6:	4b79      	ldr	r3, [pc, #484]	; (80064ac <HAL_RCC_OscConfig+0x4bc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d118      	bne.n	8006304 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062d2:	4b76      	ldr	r3, [pc, #472]	; (80064ac <HAL_RCC_OscConfig+0x4bc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a75      	ldr	r2, [pc, #468]	; (80064ac <HAL_RCC_OscConfig+0x4bc>)
 80062d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062de:	f7fd fa75 	bl	80037cc <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e6:	f7fd fa71 	bl	80037cc <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e18b      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f8:	4b6c      	ldr	r3, [pc, #432]	; (80064ac <HAL_RCC_OscConfig+0x4bc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0f0      	beq.n	80062e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d108      	bne.n	800631e <HAL_RCC_OscConfig+0x32e>
 800630c:	4b66      	ldr	r3, [pc, #408]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006312:	4a65      	ldr	r2, [pc, #404]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800631c:	e024      	b.n	8006368 <HAL_RCC_OscConfig+0x378>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b05      	cmp	r3, #5
 8006324:	d110      	bne.n	8006348 <HAL_RCC_OscConfig+0x358>
 8006326:	4b60      	ldr	r3, [pc, #384]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	4a5e      	ldr	r2, [pc, #376]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 800632e:	f043 0304 	orr.w	r3, r3, #4
 8006332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006336:	4b5c      	ldr	r3, [pc, #368]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633c:	4a5a      	ldr	r2, [pc, #360]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006346:	e00f      	b.n	8006368 <HAL_RCC_OscConfig+0x378>
 8006348:	4b57      	ldr	r3, [pc, #348]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	4a56      	ldr	r2, [pc, #344]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006358:	4b53      	ldr	r3, [pc, #332]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635e:	4a52      	ldr	r2, [pc, #328]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006360:	f023 0304 	bic.w	r3, r3, #4
 8006364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d016      	beq.n	800639e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006370:	f7fd fa2c 	bl	80037cc <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006376:	e00a      	b.n	800638e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006378:	f7fd fa28 	bl	80037cc <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f241 3288 	movw	r2, #5000	; 0x1388
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e140      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800638e:	4b46      	ldr	r3, [pc, #280]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0ed      	beq.n	8006378 <HAL_RCC_OscConfig+0x388>
 800639c:	e015      	b.n	80063ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639e:	f7fd fa15 	bl	80037cc <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063a4:	e00a      	b.n	80063bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a6:	f7fd fa11 	bl	80037cc <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e129      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063bc:	4b3a      	ldr	r3, [pc, #232]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1ed      	bne.n	80063a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063ca:	7ffb      	ldrb	r3, [r7, #31]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d105      	bne.n	80063dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063d0:	4b35      	ldr	r3, [pc, #212]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 80063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d4:	4a34      	ldr	r2, [pc, #208]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 80063d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d03c      	beq.n	8006462 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01c      	beq.n	800642a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063f0:	4b2d      	ldr	r3, [pc, #180]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 80063f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063f6:	4a2c      	ldr	r2, [pc, #176]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006400:	f7fd f9e4 	bl	80037cc <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006408:	f7fd f9e0 	bl	80037cc <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e0fa      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800641a:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 800641c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0ef      	beq.n	8006408 <HAL_RCC_OscConfig+0x418>
 8006428:	e01b      	b.n	8006462 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800642a:	4b1f      	ldr	r3, [pc, #124]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 800642c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006430:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800643a:	f7fd f9c7 	bl	80037cc <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006442:	f7fd f9c3 	bl	80037cc <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e0dd      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006454:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1ef      	bne.n	8006442 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80d1 	beq.w	800660e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800646c:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 030c 	and.w	r3, r3, #12
 8006474:	2b0c      	cmp	r3, #12
 8006476:	f000 808b 	beq.w	8006590 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d15e      	bne.n	8006540 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <HAL_RCC_OscConfig+0x4b8>)
 8006488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800648c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fd f99d 	bl	80037cc <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006494:	e00c      	b.n	80064b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006496:	f7fd f999 	bl	80037cc <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d905      	bls.n	80064b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e0b3      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
 80064a8:	40021000 	.word	0x40021000
 80064ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064b0:	4b59      	ldr	r3, [pc, #356]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1ec      	bne.n	8006496 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064bc:	4b56      	ldr	r3, [pc, #344]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	4b56      	ldr	r3, [pc, #344]	; (800661c <HAL_RCC_OscConfig+0x62c>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6a11      	ldr	r1, [r2, #32]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064cc:	3a01      	subs	r2, #1
 80064ce:	0112      	lsls	r2, r2, #4
 80064d0:	4311      	orrs	r1, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80064d6:	0212      	lsls	r2, r2, #8
 80064d8:	4311      	orrs	r1, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80064de:	0852      	lsrs	r2, r2, #1
 80064e0:	3a01      	subs	r2, #1
 80064e2:	0552      	lsls	r2, r2, #21
 80064e4:	4311      	orrs	r1, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064ea:	0852      	lsrs	r2, r2, #1
 80064ec:	3a01      	subs	r2, #1
 80064ee:	0652      	lsls	r2, r2, #25
 80064f0:	4311      	orrs	r1, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064f6:	06d2      	lsls	r2, r2, #27
 80064f8:	430a      	orrs	r2, r1
 80064fa:	4947      	ldr	r1, [pc, #284]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006500:	4b45      	ldr	r3, [pc, #276]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a44      	ldr	r2, [pc, #272]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 8006506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800650a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800650c:	4b42      	ldr	r3, [pc, #264]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4a41      	ldr	r2, [pc, #260]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 8006512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006516:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006518:	f7fd f958 	bl	80037cc <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006520:	f7fd f954 	bl	80037cc <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e06e      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006532:	4b39      	ldr	r3, [pc, #228]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0f0      	beq.n	8006520 <HAL_RCC_OscConfig+0x530>
 800653e:	e066      	b.n	800660e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006540:	4b35      	ldr	r3, [pc, #212]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a34      	ldr	r2, [pc, #208]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 8006546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800654a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800654c:	4b32      	ldr	r3, [pc, #200]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	4a31      	ldr	r2, [pc, #196]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006558:	4b2f      	ldr	r3, [pc, #188]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4a2e      	ldr	r2, [pc, #184]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 800655e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006566:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fd f930 	bl	80037cc <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006570:	f7fd f92c 	bl	80037cc <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e046      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006582:	4b25      	ldr	r3, [pc, #148]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f0      	bne.n	8006570 <HAL_RCC_OscConfig+0x580>
 800658e:	e03e      	b.n	800660e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e039      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800659c:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <HAL_RCC_OscConfig+0x628>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f003 0203 	and.w	r2, r3, #3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d12c      	bne.n	800660a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	3b01      	subs	r3, #1
 80065bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065be:	429a      	cmp	r2, r3
 80065c0:	d123      	bne.n	800660a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d11b      	bne.n	800660a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d113      	bne.n	800660a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	3b01      	subs	r3, #1
 80065f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d109      	bne.n	800660a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	3b01      	subs	r3, #1
 8006604:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d001      	beq.n	800660e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40021000 	.word	0x40021000
 800661c:	019f800c 	.word	0x019f800c

08006620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e11e      	b.n	8006876 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006638:	4b91      	ldr	r3, [pc, #580]	; (8006880 <HAL_RCC_ClockConfig+0x260>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d910      	bls.n	8006668 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006646:	4b8e      	ldr	r3, [pc, #568]	; (8006880 <HAL_RCC_ClockConfig+0x260>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f023 020f 	bic.w	r2, r3, #15
 800664e:	498c      	ldr	r1, [pc, #560]	; (8006880 <HAL_RCC_ClockConfig+0x260>)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	4313      	orrs	r3, r2
 8006654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006656:	4b8a      	ldr	r3, [pc, #552]	; (8006880 <HAL_RCC_ClockConfig+0x260>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	429a      	cmp	r2, r3
 8006662:	d001      	beq.n	8006668 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e106      	b.n	8006876 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d073      	beq.n	800675c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d129      	bne.n	80066d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800667c:	4b81      	ldr	r3, [pc, #516]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e0f4      	b.n	8006876 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800668c:	f000 f966 	bl	800695c <RCC_GetSysClockFreqFromPLLSource>
 8006690:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4a7c      	ldr	r2, [pc, #496]	; (8006888 <HAL_RCC_ClockConfig+0x268>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d93f      	bls.n	800671a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800669a:	4b7a      	ldr	r3, [pc, #488]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d009      	beq.n	80066ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d033      	beq.n	800671a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d12f      	bne.n	800671a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066ba:	4b72      	ldr	r3, [pc, #456]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c2:	4a70      	ldr	r2, [pc, #448]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80066ca:	2380      	movs	r3, #128	; 0x80
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	e024      	b.n	800671a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d107      	bne.n	80066e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066d8:	4b6a      	ldr	r3, [pc, #424]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0c6      	b.n	8006876 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066e8:	4b66      	ldr	r3, [pc, #408]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0be      	b.n	8006876 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80066f8:	f000 f8ce 	bl	8006898 <HAL_RCC_GetSysClockFreq>
 80066fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4a61      	ldr	r2, [pc, #388]	; (8006888 <HAL_RCC_ClockConfig+0x268>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d909      	bls.n	800671a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006706:	4b5f      	ldr	r3, [pc, #380]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800670e:	4a5d      	ldr	r2, [pc, #372]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 8006710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006714:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800671a:	4b5a      	ldr	r3, [pc, #360]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f023 0203 	bic.w	r2, r3, #3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	4957      	ldr	r1, [pc, #348]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 8006728:	4313      	orrs	r3, r2
 800672a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672c:	f7fd f84e 	bl	80037cc <HAL_GetTick>
 8006730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006732:	e00a      	b.n	800674a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006734:	f7fd f84a 	bl	80037cc <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006742:	4293      	cmp	r3, r2
 8006744:	d901      	bls.n	800674a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e095      	b.n	8006876 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674a:	4b4e      	ldr	r3, [pc, #312]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 020c 	and.w	r2, r3, #12
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	429a      	cmp	r2, r3
 800675a:	d1eb      	bne.n	8006734 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d023      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006774:	4b43      	ldr	r3, [pc, #268]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4a42      	ldr	r2, [pc, #264]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 800677a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800677e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800678c:	4b3d      	ldr	r3, [pc, #244]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006794:	4a3b      	ldr	r2, [pc, #236]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 8006796:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800679a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800679c:	4b39      	ldr	r3, [pc, #228]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4936      	ldr	r1, [pc, #216]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	608b      	str	r3, [r1, #8]
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d105      	bne.n	80067c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80067b6:	4b33      	ldr	r3, [pc, #204]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4a32      	ldr	r2, [pc, #200]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 80067bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067c2:	4b2f      	ldr	r3, [pc, #188]	; (8006880 <HAL_RCC_ClockConfig+0x260>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d21d      	bcs.n	800680c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067d0:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <HAL_RCC_ClockConfig+0x260>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f023 020f 	bic.w	r2, r3, #15
 80067d8:	4929      	ldr	r1, [pc, #164]	; (8006880 <HAL_RCC_ClockConfig+0x260>)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	4313      	orrs	r3, r2
 80067de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80067e0:	f7fc fff4 	bl	80037cc <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fc fff0 	bl	80037cc <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e03b      	b.n	8006876 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fe:	4b20      	ldr	r3, [pc, #128]	; (8006880 <HAL_RCC_ClockConfig+0x260>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d1ed      	bne.n	80067e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006818:	4b1a      	ldr	r3, [pc, #104]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	4917      	ldr	r1, [pc, #92]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 8006826:	4313      	orrs	r3, r2
 8006828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006836:	4b13      	ldr	r3, [pc, #76]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	490f      	ldr	r1, [pc, #60]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 8006846:	4313      	orrs	r3, r2
 8006848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800684a:	f000 f825 	bl	8006898 <HAL_RCC_GetSysClockFreq>
 800684e:	4602      	mov	r2, r0
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <HAL_RCC_ClockConfig+0x264>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	091b      	lsrs	r3, r3, #4
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	490c      	ldr	r1, [pc, #48]	; (800688c <HAL_RCC_ClockConfig+0x26c>)
 800685c:	5ccb      	ldrb	r3, [r1, r3]
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	fa22 f303 	lsr.w	r3, r2, r3
 8006866:	4a0a      	ldr	r2, [pc, #40]	; (8006890 <HAL_RCC_ClockConfig+0x270>)
 8006868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800686a:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <HAL_RCC_ClockConfig+0x274>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f7fc ff60 	bl	8003734 <HAL_InitTick>
 8006874:	4603      	mov	r3, r0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40022000 	.word	0x40022000
 8006884:	40021000 	.word	0x40021000
 8006888:	04c4b400 	.word	0x04c4b400
 800688c:	08009f8c 	.word	0x08009f8c
 8006890:	20000000 	.word	0x20000000
 8006894:	20000004 	.word	0x20000004

08006898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800689e:	4b2c      	ldr	r3, [pc, #176]	; (8006950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 030c 	and.w	r3, r3, #12
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d102      	bne.n	80068b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80068aa:	4b2a      	ldr	r3, [pc, #168]	; (8006954 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	e047      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80068b0:	4b27      	ldr	r3, [pc, #156]	; (8006950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d102      	bne.n	80068c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068bc:	4b26      	ldr	r3, [pc, #152]	; (8006958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	e03e      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80068c2:	4b23      	ldr	r3, [pc, #140]	; (8006950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 030c 	and.w	r3, r3, #12
 80068ca:	2b0c      	cmp	r3, #12
 80068cc:	d136      	bne.n	800693c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068ce:	4b20      	ldr	r3, [pc, #128]	; (8006950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068d8:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	091b      	lsrs	r3, r3, #4
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	3301      	adds	r3, #1
 80068e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d10c      	bne.n	8006906 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068ec:	4a1a      	ldr	r2, [pc, #104]	; (8006958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f4:	4a16      	ldr	r2, [pc, #88]	; (8006950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f6:	68d2      	ldr	r2, [r2, #12]
 80068f8:	0a12      	lsrs	r2, r2, #8
 80068fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	617b      	str	r3, [r7, #20]
      break;
 8006904:	e00c      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006906:	4a13      	ldr	r2, [pc, #76]	; (8006954 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	fbb2 f3f3 	udiv	r3, r2, r3
 800690e:	4a10      	ldr	r2, [pc, #64]	; (8006950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006910:	68d2      	ldr	r2, [r2, #12]
 8006912:	0a12      	lsrs	r2, r2, #8
 8006914:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006918:	fb02 f303 	mul.w	r3, r2, r3
 800691c:	617b      	str	r3, [r7, #20]
      break;
 800691e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	0e5b      	lsrs	r3, r3, #25
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	3301      	adds	r3, #1
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	fbb2 f3f3 	udiv	r3, r2, r3
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	e001      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006940:	693b      	ldr	r3, [r7, #16]
}
 8006942:	4618      	mov	r0, r3
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40021000 	.word	0x40021000
 8006954:	00f42400 	.word	0x00f42400
 8006958:	007a1200 	.word	0x007a1200

0800695c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006962:	4b1e      	ldr	r3, [pc, #120]	; (80069dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800696c:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	091b      	lsrs	r3, r3, #4
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	3301      	adds	r3, #1
 8006978:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b03      	cmp	r3, #3
 800697e:	d10c      	bne.n	800699a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006980:	4a17      	ldr	r2, [pc, #92]	; (80069e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	fbb2 f3f3 	udiv	r3, r2, r3
 8006988:	4a14      	ldr	r2, [pc, #80]	; (80069dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800698a:	68d2      	ldr	r2, [r2, #12]
 800698c:	0a12      	lsrs	r2, r2, #8
 800698e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006992:	fb02 f303 	mul.w	r3, r2, r3
 8006996:	617b      	str	r3, [r7, #20]
    break;
 8006998:	e00c      	b.n	80069b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800699a:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a2:	4a0e      	ldr	r2, [pc, #56]	; (80069dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069a4:	68d2      	ldr	r2, [r2, #12]
 80069a6:	0a12      	lsrs	r2, r2, #8
 80069a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069ac:	fb02 f303 	mul.w	r3, r2, r3
 80069b0:	617b      	str	r3, [r7, #20]
    break;
 80069b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069b4:	4b09      	ldr	r3, [pc, #36]	; (80069dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	0e5b      	lsrs	r3, r3, #25
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	3301      	adds	r3, #1
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80069ce:	687b      	ldr	r3, [r7, #4]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40021000 	.word	0x40021000
 80069e0:	007a1200 	.word	0x007a1200
 80069e4:	00f42400 	.word	0x00f42400

080069e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069f0:	2300      	movs	r3, #0
 80069f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069f4:	2300      	movs	r3, #0
 80069f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8098 	beq.w	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a06:	2300      	movs	r3, #0
 8006a08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a0a:	4b43      	ldr	r3, [pc, #268]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10d      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a16:	4b40      	ldr	r3, [pc, #256]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1a:	4a3f      	ldr	r2, [pc, #252]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a20:	6593      	str	r3, [r2, #88]	; 0x58
 8006a22:	4b3d      	ldr	r3, [pc, #244]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	60bb      	str	r3, [r7, #8]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a32:	4b3a      	ldr	r3, [pc, #232]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a39      	ldr	r2, [pc, #228]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a3e:	f7fc fec5 	bl	80037cc <HAL_GetTick>
 8006a42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a44:	e009      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a46:	f7fc fec1 	bl	80037cc <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d902      	bls.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	74fb      	strb	r3, [r7, #19]
        break;
 8006a58:	e005      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a5a:	4b30      	ldr	r3, [pc, #192]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0ef      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a66:	7cfb      	ldrb	r3, [r7, #19]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d159      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a6c:	4b2a      	ldr	r3, [pc, #168]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01e      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d019      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a88:	4b23      	ldr	r3, [pc, #140]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a94:	4b20      	ldr	r3, [pc, #128]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9a:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006aa4:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aaa:	4a1b      	ldr	r2, [pc, #108]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ab4:	4a18      	ldr	r2, [pc, #96]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d016      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac6:	f7fc fe81 	bl	80037cc <HAL_GetTick>
 8006aca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006acc:	e00b      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fc fe7d 	bl	80037cc <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d902      	bls.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	74fb      	strb	r3, [r7, #19]
            break;
 8006ae4:	e006      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ae6:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0ec      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006af4:	7cfb      	ldrb	r3, [r7, #19]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006afa:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b08:	4903      	ldr	r1, [pc, #12]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006b10:	e008      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b12:	7cfb      	ldrb	r3, [r7, #19]
 8006b14:	74bb      	strb	r3, [r7, #18]
 8006b16:	e005      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	7cfb      	ldrb	r3, [r7, #19]
 8006b22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b24:	7c7b      	ldrb	r3, [r7, #17]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d105      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b2a:	4ba7      	ldr	r3, [pc, #668]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2e:	4aa6      	ldr	r2, [pc, #664]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b42:	4ba1      	ldr	r3, [pc, #644]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b48:	f023 0203 	bic.w	r2, r3, #3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	499d      	ldr	r1, [pc, #628]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b64:	4b98      	ldr	r3, [pc, #608]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6a:	f023 020c 	bic.w	r2, r3, #12
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	4995      	ldr	r1, [pc, #596]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b86:	4b90      	ldr	r3, [pc, #576]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	498c      	ldr	r1, [pc, #560]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ba8:	4b87      	ldr	r3, [pc, #540]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	4984      	ldr	r1, [pc, #528]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bca:	4b7f      	ldr	r3, [pc, #508]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	497b      	ldr	r1, [pc, #492]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bec:	4b76      	ldr	r3, [pc, #472]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	4973      	ldr	r1, [pc, #460]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c0e:	4b6e      	ldr	r3, [pc, #440]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	496a      	ldr	r1, [pc, #424]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c30:	4b65      	ldr	r3, [pc, #404]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	4962      	ldr	r1, [pc, #392]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c52:	4b5d      	ldr	r3, [pc, #372]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	4959      	ldr	r1, [pc, #356]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c74:	4b54      	ldr	r3, [pc, #336]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c7a:	f023 0203 	bic.w	r2, r3, #3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	4951      	ldr	r1, [pc, #324]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c96:	4b4c      	ldr	r3, [pc, #304]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	4948      	ldr	r1, [pc, #288]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d015      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cb8:	4b43      	ldr	r3, [pc, #268]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	4940      	ldr	r1, [pc, #256]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd6:	d105      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cd8:	4b3b      	ldr	r3, [pc, #236]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	4a3a      	ldr	r2, [pc, #232]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ce2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d015      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cf0:	4b35      	ldr	r3, [pc, #212]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfe:	4932      	ldr	r1, [pc, #200]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d0e:	d105      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d10:	4b2d      	ldr	r3, [pc, #180]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	4a2c      	ldr	r2, [pc, #176]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d015      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d28:	4b27      	ldr	r3, [pc, #156]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	4924      	ldr	r1, [pc, #144]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d46:	d105      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d48:	4b1f      	ldr	r3, [pc, #124]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4a1e      	ldr	r2, [pc, #120]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d015      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d60:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6e:	4916      	ldr	r1, [pc, #88]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d7e:	d105      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d80:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4a10      	ldr	r2, [pc, #64]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d019      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	4908      	ldr	r1, [pc, #32]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006db6:	d109      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	4a02      	ldr	r2, [pc, #8]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dc2:	60d3      	str	r3, [r2, #12]
 8006dc4:	e002      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006dc6:	bf00      	nop
 8006dc8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d015      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006dd8:	4b29      	ldr	r3, [pc, #164]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	4926      	ldr	r1, [pc, #152]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006df6:	d105      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006df8:	4b21      	ldr	r3, [pc, #132]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d015      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006e10:	4b1b      	ldr	r3, [pc, #108]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1e:	4918      	ldr	r1, [pc, #96]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2e:	d105      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e30:	4b13      	ldr	r3, [pc, #76]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	4a12      	ldr	r2, [pc, #72]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d015      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e48:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e56:	490a      	ldr	r1, [pc, #40]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e66:	d105      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4a04      	ldr	r2, [pc, #16]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e74:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40021000 	.word	0x40021000

08006e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e09d      	b.n	8006fd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d108      	bne.n	8006eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ea6:	d009      	beq.n	8006ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	61da      	str	r2, [r3, #28]
 8006eae:	e005      	b.n	8006ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fc fa8e 	bl	80033f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ef2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006efc:	d902      	bls.n	8006f04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	e002      	b.n	8006f0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f12:	d007      	beq.n	8006f24 <HAL_SPI_Init+0xa0>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f1c:	d002      	beq.n	8006f24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f66:	ea42 0103 	orr.w	r1, r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	0c1b      	lsrs	r3, r3, #16
 8006f80:	f003 0204 	and.w	r2, r3, #4
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006fa0:	ea42 0103 	orr.w	r1, r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	69da      	ldr	r2, [r3, #28]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e049      	b.n	8007080 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fc fa3d 	bl	8003480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f000 fe7f 	bl	8007d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b01      	cmp	r3, #1
 800709a:	d001      	beq.n	80070a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e054      	b.n	800714a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a26      	ldr	r2, [pc, #152]	; (8007158 <HAL_TIM_Base_Start_IT+0xd0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d022      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x80>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ca:	d01d      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x80>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a22      	ldr	r2, [pc, #136]	; (800715c <HAL_TIM_Base_Start_IT+0xd4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d018      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x80>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a21      	ldr	r2, [pc, #132]	; (8007160 <HAL_TIM_Base_Start_IT+0xd8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d013      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x80>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1f      	ldr	r2, [pc, #124]	; (8007164 <HAL_TIM_Base_Start_IT+0xdc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00e      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x80>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a1e      	ldr	r2, [pc, #120]	; (8007168 <HAL_TIM_Base_Start_IT+0xe0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d009      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x80>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1c      	ldr	r2, [pc, #112]	; (800716c <HAL_TIM_Base_Start_IT+0xe4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d004      	beq.n	8007108 <HAL_TIM_Base_Start_IT+0x80>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a1b      	ldr	r2, [pc, #108]	; (8007170 <HAL_TIM_Base_Start_IT+0xe8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d115      	bne.n	8007134 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689a      	ldr	r2, [r3, #8]
 800710e:	4b19      	ldr	r3, [pc, #100]	; (8007174 <HAL_TIM_Base_Start_IT+0xec>)
 8007110:	4013      	ands	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b06      	cmp	r3, #6
 8007118:	d015      	beq.n	8007146 <HAL_TIM_Base_Start_IT+0xbe>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007120:	d011      	beq.n	8007146 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0201 	orr.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007132:	e008      	b.n	8007146 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	e000      	b.n	8007148 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007146:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40012c00 	.word	0x40012c00
 800715c:	40000400 	.word	0x40000400
 8007160:	40000800 	.word	0x40000800
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40013400 	.word	0x40013400
 800716c:	40014000 	.word	0x40014000
 8007170:	40015000 	.word	0x40015000
 8007174:	00010007 	.word	0x00010007

08007178 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e049      	b.n	800721e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f841 	bl	8007226 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f000 fdb0 	bl	8007d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e049      	b.n	80072e0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f841 	bl	80072e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2202      	movs	r2, #2
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3304      	adds	r3, #4
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f000 fd4f 	bl	8007d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <HAL_TIM_IC_Start_IT+0x1e>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007316:	b2db      	uxtb	r3, r3
 8007318:	e023      	b.n	8007362 <HAL_TIM_IC_Start_IT+0x66>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b04      	cmp	r3, #4
 800731e:	d104      	bne.n	800732a <HAL_TIM_IC_Start_IT+0x2e>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007326:	b2db      	uxtb	r3, r3
 8007328:	e01b      	b.n	8007362 <HAL_TIM_IC_Start_IT+0x66>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b08      	cmp	r3, #8
 800732e:	d104      	bne.n	800733a <HAL_TIM_IC_Start_IT+0x3e>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007336:	b2db      	uxtb	r3, r3
 8007338:	e013      	b.n	8007362 <HAL_TIM_IC_Start_IT+0x66>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b0c      	cmp	r3, #12
 800733e:	d104      	bne.n	800734a <HAL_TIM_IC_Start_IT+0x4e>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007346:	b2db      	uxtb	r3, r3
 8007348:	e00b      	b.n	8007362 <HAL_TIM_IC_Start_IT+0x66>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b10      	cmp	r3, #16
 800734e:	d104      	bne.n	800735a <HAL_TIM_IC_Start_IT+0x5e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007356:	b2db      	uxtb	r3, r3
 8007358:	e003      	b.n	8007362 <HAL_TIM_IC_Start_IT+0x66>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007360:	b2db      	uxtb	r3, r3
 8007362:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d104      	bne.n	8007374 <HAL_TIM_IC_Start_IT+0x78>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007370:	b2db      	uxtb	r3, r3
 8007372:	e013      	b.n	800739c <HAL_TIM_IC_Start_IT+0xa0>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b04      	cmp	r3, #4
 8007378:	d104      	bne.n	8007384 <HAL_TIM_IC_Start_IT+0x88>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007380:	b2db      	uxtb	r3, r3
 8007382:	e00b      	b.n	800739c <HAL_TIM_IC_Start_IT+0xa0>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b08      	cmp	r3, #8
 8007388:	d104      	bne.n	8007394 <HAL_TIM_IC_Start_IT+0x98>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007390:	b2db      	uxtb	r3, r3
 8007392:	e003      	b.n	800739c <HAL_TIM_IC_Start_IT+0xa0>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800739a:	b2db      	uxtb	r3, r3
 800739c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d102      	bne.n	80073aa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80073a4:	7b7b      	ldrb	r3, [r7, #13]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d001      	beq.n	80073ae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e0e2      	b.n	8007574 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <HAL_TIM_IC_Start_IT+0xc2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073bc:	e023      	b.n	8007406 <HAL_TIM_IC_Start_IT+0x10a>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d104      	bne.n	80073ce <HAL_TIM_IC_Start_IT+0xd2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073cc:	e01b      	b.n	8007406 <HAL_TIM_IC_Start_IT+0x10a>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d104      	bne.n	80073de <HAL_TIM_IC_Start_IT+0xe2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073dc:	e013      	b.n	8007406 <HAL_TIM_IC_Start_IT+0x10a>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b0c      	cmp	r3, #12
 80073e2:	d104      	bne.n	80073ee <HAL_TIM_IC_Start_IT+0xf2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073ec:	e00b      	b.n	8007406 <HAL_TIM_IC_Start_IT+0x10a>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d104      	bne.n	80073fe <HAL_TIM_IC_Start_IT+0x102>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073fc:	e003      	b.n	8007406 <HAL_TIM_IC_Start_IT+0x10a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2202      	movs	r2, #2
 8007402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <HAL_TIM_IC_Start_IT+0x11a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007414:	e013      	b.n	800743e <HAL_TIM_IC_Start_IT+0x142>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b04      	cmp	r3, #4
 800741a:	d104      	bne.n	8007426 <HAL_TIM_IC_Start_IT+0x12a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007424:	e00b      	b.n	800743e <HAL_TIM_IC_Start_IT+0x142>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d104      	bne.n	8007436 <HAL_TIM_IC_Start_IT+0x13a>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007434:	e003      	b.n	800743e <HAL_TIM_IC_Start_IT+0x142>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b0c      	cmp	r3, #12
 8007442:	d841      	bhi.n	80074c8 <HAL_TIM_IC_Start_IT+0x1cc>
 8007444:	a201      	add	r2, pc, #4	; (adr r2, 800744c <HAL_TIM_IC_Start_IT+0x150>)
 8007446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744a:	bf00      	nop
 800744c:	08007481 	.word	0x08007481
 8007450:	080074c9 	.word	0x080074c9
 8007454:	080074c9 	.word	0x080074c9
 8007458:	080074c9 	.word	0x080074c9
 800745c:	08007493 	.word	0x08007493
 8007460:	080074c9 	.word	0x080074c9
 8007464:	080074c9 	.word	0x080074c9
 8007468:	080074c9 	.word	0x080074c9
 800746c:	080074a5 	.word	0x080074a5
 8007470:	080074c9 	.word	0x080074c9
 8007474:	080074c9 	.word	0x080074c9
 8007478:	080074c9 	.word	0x080074c9
 800747c:	080074b7 	.word	0x080074b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0202 	orr.w	r2, r2, #2
 800748e:	60da      	str	r2, [r3, #12]
      break;
 8007490:	e01d      	b.n	80074ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0204 	orr.w	r2, r2, #4
 80074a0:	60da      	str	r2, [r3, #12]
      break;
 80074a2:	e014      	b.n	80074ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0208 	orr.w	r2, r2, #8
 80074b2:	60da      	str	r2, [r3, #12]
      break;
 80074b4:	e00b      	b.n	80074ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68da      	ldr	r2, [r3, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f042 0210 	orr.w	r2, r2, #16
 80074c4:	60da      	str	r2, [r3, #12]
      break;
 80074c6:	e002      	b.n	80074ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]
      break;
 80074cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d14e      	bne.n	8007572 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2201      	movs	r2, #1
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 f9b5 	bl	800884c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a25      	ldr	r2, [pc, #148]	; (800757c <HAL_TIM_IC_Start_IT+0x280>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d022      	beq.n	8007532 <HAL_TIM_IC_Start_IT+0x236>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f4:	d01d      	beq.n	8007532 <HAL_TIM_IC_Start_IT+0x236>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a21      	ldr	r2, [pc, #132]	; (8007580 <HAL_TIM_IC_Start_IT+0x284>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d018      	beq.n	8007532 <HAL_TIM_IC_Start_IT+0x236>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1f      	ldr	r2, [pc, #124]	; (8007584 <HAL_TIM_IC_Start_IT+0x288>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <HAL_TIM_IC_Start_IT+0x236>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1e      	ldr	r2, [pc, #120]	; (8007588 <HAL_TIM_IC_Start_IT+0x28c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00e      	beq.n	8007532 <HAL_TIM_IC_Start_IT+0x236>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a1c      	ldr	r2, [pc, #112]	; (800758c <HAL_TIM_IC_Start_IT+0x290>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_TIM_IC_Start_IT+0x236>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1b      	ldr	r2, [pc, #108]	; (8007590 <HAL_TIM_IC_Start_IT+0x294>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <HAL_TIM_IC_Start_IT+0x236>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a19      	ldr	r2, [pc, #100]	; (8007594 <HAL_TIM_IC_Start_IT+0x298>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d115      	bne.n	800755e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	4b17      	ldr	r3, [pc, #92]	; (8007598 <HAL_TIM_IC_Start_IT+0x29c>)
 800753a:	4013      	ands	r3, r2
 800753c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b06      	cmp	r3, #6
 8007542:	d015      	beq.n	8007570 <HAL_TIM_IC_Start_IT+0x274>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754a:	d011      	beq.n	8007570 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0201 	orr.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755c:	e008      	b.n	8007570 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0201 	orr.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	e000      	b.n	8007572 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007570:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40012c00 	.word	0x40012c00
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40013400 	.word	0x40013400
 8007590:	40014000 	.word	0x40014000
 8007594:	40015000 	.word	0x40015000
 8007598:	00010007 	.word	0x00010007

0800759c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d122      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d11b      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0202 	mvn.w	r2, #2
 80075c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7f9 fcbc 	bl	8000f5c <HAL_TIM_IC_CaptureCallback>
 80075e4:	e005      	b.n	80075f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fb7a 	bl	8007ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fb81 	bl	8007cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b04      	cmp	r3, #4
 8007604:	d122      	bne.n	800764c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b04      	cmp	r3, #4
 8007612:	d11b      	bne.n	800764c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f06f 0204 	mvn.w	r2, #4
 800761c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2202      	movs	r2, #2
 8007622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7f9 fc92 	bl	8000f5c <HAL_TIM_IC_CaptureCallback>
 8007638:	e005      	b.n	8007646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fb50 	bl	8007ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fb57 	bl	8007cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0308 	and.w	r3, r3, #8
 8007656:	2b08      	cmp	r3, #8
 8007658:	d122      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b08      	cmp	r3, #8
 8007666:	d11b      	bne.n	80076a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f06f 0208 	mvn.w	r2, #8
 8007670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2204      	movs	r2, #4
 8007676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7f9 fc68 	bl	8000f5c <HAL_TIM_IC_CaptureCallback>
 800768c:	e005      	b.n	800769a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fb26 	bl	8007ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fb2d 	bl	8007cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f003 0310 	and.w	r3, r3, #16
 80076aa:	2b10      	cmp	r3, #16
 80076ac:	d122      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f003 0310 	and.w	r3, r3, #16
 80076b8:	2b10      	cmp	r3, #16
 80076ba:	d11b      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f06f 0210 	mvn.w	r2, #16
 80076c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2208      	movs	r2, #8
 80076ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7f9 fc3e 	bl	8000f5c <HAL_TIM_IC_CaptureCallback>
 80076e0:	e005      	b.n	80076ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fafc 	bl	8007ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fb03 	bl	8007cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d10e      	bne.n	8007720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b01      	cmp	r3, #1
 800770e:	d107      	bne.n	8007720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0201 	mvn.w	r2, #1
 8007718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7f9 fbd0 	bl	8000ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772a:	2b80      	cmp	r3, #128	; 0x80
 800772c:	d10e      	bne.n	800774c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007738:	2b80      	cmp	r3, #128	; 0x80
 800773a:	d107      	bne.n	800774c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 f946 	bl	80089d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800775a:	d10e      	bne.n	800777a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d107      	bne.n	800777a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f939 	bl	80089ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007784:	2b40      	cmp	r3, #64	; 0x40
 8007786:	d10e      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007792:	2b40      	cmp	r3, #64	; 0x40
 8007794:	d107      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800779e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fab1 	bl	8007d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d10e      	bne.n	80077d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d107      	bne.n	80077d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f06f 0220 	mvn.w	r2, #32
 80077ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 f8f9 	bl	80089c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e0:	d10f      	bne.n	8007802 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f0:	d107      	bne.n	8007802 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80077fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 f8ff 	bl	8008a00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800780c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007810:	d10f      	bne.n	8007832 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800781c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007820:	d107      	bne.n	8007832 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800782a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 f8f1 	bl	8008a14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800783c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007840:	d10f      	bne.n	8007862 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800784c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007850:	d107      	bne.n	8007862 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800785a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f8e3 	bl	8008a28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800786c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007870:	d10f      	bne.n	8007892 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800787c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007880:	d107      	bne.n	8007892 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800788a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 f8d5 	bl	8008a3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d101      	bne.n	80078ba <HAL_TIM_OC_ConfigChannel+0x1e>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e066      	b.n	8007988 <HAL_TIM_OC_ConfigChannel+0xec>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b14      	cmp	r3, #20
 80078c6:	d857      	bhi.n	8007978 <HAL_TIM_OC_ConfigChannel+0xdc>
 80078c8:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80078ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ce:	bf00      	nop
 80078d0:	08007925 	.word	0x08007925
 80078d4:	08007979 	.word	0x08007979
 80078d8:	08007979 	.word	0x08007979
 80078dc:	08007979 	.word	0x08007979
 80078e0:	08007933 	.word	0x08007933
 80078e4:	08007979 	.word	0x08007979
 80078e8:	08007979 	.word	0x08007979
 80078ec:	08007979 	.word	0x08007979
 80078f0:	08007941 	.word	0x08007941
 80078f4:	08007979 	.word	0x08007979
 80078f8:	08007979 	.word	0x08007979
 80078fc:	08007979 	.word	0x08007979
 8007900:	0800794f 	.word	0x0800794f
 8007904:	08007979 	.word	0x08007979
 8007908:	08007979 	.word	0x08007979
 800790c:	08007979 	.word	0x08007979
 8007910:	0800795d 	.word	0x0800795d
 8007914:	08007979 	.word	0x08007979
 8007918:	08007979 	.word	0x08007979
 800791c:	08007979 	.word	0x08007979
 8007920:	0800796b 	.word	0x0800796b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fa9e 	bl	8007e6c <TIM_OC1_SetConfig>
      break;
 8007930:	e025      	b.n	800797e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fb31 	bl	8007fa0 <TIM_OC2_SetConfig>
      break;
 800793e:	e01e      	b.n	800797e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fbbe 	bl	80080c8 <TIM_OC3_SetConfig>
      break;
 800794c:	e017      	b.n	800797e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68b9      	ldr	r1, [r7, #8]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 fc49 	bl	80081ec <TIM_OC4_SetConfig>
      break;
 800795a:	e010      	b.n	800797e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fcd6 	bl	8008314 <TIM_OC5_SetConfig>
      break;
 8007968:	e009      	b.n	800797e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fd39 	bl	80083e8 <TIM_OC6_SetConfig>
      break;
 8007976:	e002      	b.n	800797e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]
      break;
 800797c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d101      	bne.n	80079ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80079aa:	2302      	movs	r3, #2
 80079ac:	e088      	b.n	8007ac0 <HAL_TIM_IC_ConfigChannel+0x130>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d11b      	bne.n	80079f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f000 fd78 	bl	80084c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 020c 	bic.w	r2, r2, #12
 80079de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6999      	ldr	r1, [r3, #24]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	619a      	str	r2, [r3, #24]
 80079f2:	e060      	b.n	8007ab6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d11c      	bne.n	8007a34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6819      	ldr	r1, [r3, #0]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f000 fdfc 	bl	8008606 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	699a      	ldr	r2, [r3, #24]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6999      	ldr	r1, [r3, #24]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	021a      	lsls	r2, r3, #8
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	619a      	str	r2, [r3, #24]
 8007a32:	e040      	b.n	8007ab6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d11b      	bne.n	8007a72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	6819      	ldr	r1, [r3, #0]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f000 fe49 	bl	80086e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 020c 	bic.w	r2, r2, #12
 8007a5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69d9      	ldr	r1, [r3, #28]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	61da      	str	r2, [r3, #28]
 8007a70:	e021      	b.n	8007ab6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b0c      	cmp	r3, #12
 8007a76:	d11c      	bne.n	8007ab2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	6819      	ldr	r1, [r3, #0]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f000 fe66 	bl	8008758 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69da      	ldr	r2, [r3, #28]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69d9      	ldr	r1, [r3, #28]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	021a      	lsls	r2, r3, #8
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	61da      	str	r2, [r3, #28]
 8007ab0:	e001      	b.n	8007ab6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e0ee      	b.n	8007cc2 <HAL_TIM_ConfigClockSource+0x1fa>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a6b      	ldr	r2, [pc, #428]	; (8007ccc <HAL_TIM_ConfigClockSource+0x204>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	f000 80b9 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007b24:	4a69      	ldr	r2, [pc, #420]	; (8007ccc <HAL_TIM_ConfigClockSource+0x204>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	f200 80be 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007b2c:	4a68      	ldr	r2, [pc, #416]	; (8007cd0 <HAL_TIM_ConfigClockSource+0x208>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	f000 80b1 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007b34:	4a66      	ldr	r2, [pc, #408]	; (8007cd0 <HAL_TIM_ConfigClockSource+0x208>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	f200 80b6 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007b3c:	4a65      	ldr	r2, [pc, #404]	; (8007cd4 <HAL_TIM_ConfigClockSource+0x20c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	f000 80a9 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007b44:	4a63      	ldr	r2, [pc, #396]	; (8007cd4 <HAL_TIM_ConfigClockSource+0x20c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	f200 80ae 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007b4c:	4a62      	ldr	r2, [pc, #392]	; (8007cd8 <HAL_TIM_ConfigClockSource+0x210>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	f000 80a1 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007b54:	4a60      	ldr	r2, [pc, #384]	; (8007cd8 <HAL_TIM_ConfigClockSource+0x210>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	f200 80a6 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007b5c:	4a5f      	ldr	r2, [pc, #380]	; (8007cdc <HAL_TIM_ConfigClockSource+0x214>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	f000 8099 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007b64:	4a5d      	ldr	r2, [pc, #372]	; (8007cdc <HAL_TIM_ConfigClockSource+0x214>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	f200 809e 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007b6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b70:	f000 8091 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007b74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b78:	f200 8096 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b80:	f000 8089 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b88:	f200 808e 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b90:	d03e      	beq.n	8007c10 <HAL_TIM_ConfigClockSource+0x148>
 8007b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b96:	f200 8087 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9e:	f000 8086 	beq.w	8007cae <HAL_TIM_ConfigClockSource+0x1e6>
 8007ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba6:	d87f      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007ba8:	2b70      	cmp	r3, #112	; 0x70
 8007baa:	d01a      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x11a>
 8007bac:	2b70      	cmp	r3, #112	; 0x70
 8007bae:	d87b      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007bb0:	2b60      	cmp	r3, #96	; 0x60
 8007bb2:	d050      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x18e>
 8007bb4:	2b60      	cmp	r3, #96	; 0x60
 8007bb6:	d877      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007bb8:	2b50      	cmp	r3, #80	; 0x50
 8007bba:	d03c      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x16e>
 8007bbc:	2b50      	cmp	r3, #80	; 0x50
 8007bbe:	d873      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007bc0:	2b40      	cmp	r3, #64	; 0x40
 8007bc2:	d058      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x1ae>
 8007bc4:	2b40      	cmp	r3, #64	; 0x40
 8007bc6:	d86f      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007bc8:	2b30      	cmp	r3, #48	; 0x30
 8007bca:	d064      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007bcc:	2b30      	cmp	r3, #48	; 0x30
 8007bce:	d86b      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d060      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007bd4:	2b20      	cmp	r3, #32
 8007bd6:	d867      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d05c      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d05a      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x1ce>
 8007be0:	e062      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	6899      	ldr	r1, [r3, #8]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f000 fe0b 	bl	800880c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	609a      	str	r2, [r3, #8]
      break;
 8007c0e:	e04f      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	6899      	ldr	r1, [r3, #8]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f000 fdf4 	bl	800880c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c32:	609a      	str	r2, [r3, #8]
      break;
 8007c34:	e03c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6859      	ldr	r1, [r3, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f000 fcb0 	bl	80085a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2150      	movs	r1, #80	; 0x50
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fdbf 	bl	80087d2 <TIM_ITRx_SetConfig>
      break;
 8007c54:	e02c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	6859      	ldr	r1, [r3, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f000 fd0c 	bl	8008680 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2160      	movs	r1, #96	; 0x60
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fdaf 	bl	80087d2 <TIM_ITRx_SetConfig>
      break;
 8007c74:	e01c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6859      	ldr	r1, [r3, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f000 fc90 	bl	80085a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2140      	movs	r1, #64	; 0x40
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fd9f 	bl	80087d2 <TIM_ITRx_SetConfig>
      break;
 8007c94:	e00c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	f000 fd96 	bl	80087d2 <TIM_ITRx_SetConfig>
      break;
 8007ca6:	e003      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cac:	e000      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8007cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	00100070 	.word	0x00100070
 8007cd0:	00100050 	.word	0x00100050
 8007cd4:	00100040 	.word	0x00100040
 8007cd8:	00100030 	.word	0x00100030
 8007cdc:	00100020 	.word	0x00100020

08007ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a46      	ldr	r2, [pc, #280]	; (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d017      	beq.n	8007d64 <TIM_Base_SetConfig+0x48>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3a:	d013      	beq.n	8007d64 <TIM_Base_SetConfig+0x48>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a43      	ldr	r2, [pc, #268]	; (8007e4c <TIM_Base_SetConfig+0x130>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00f      	beq.n	8007d64 <TIM_Base_SetConfig+0x48>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a42      	ldr	r2, [pc, #264]	; (8007e50 <TIM_Base_SetConfig+0x134>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00b      	beq.n	8007d64 <TIM_Base_SetConfig+0x48>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a41      	ldr	r2, [pc, #260]	; (8007e54 <TIM_Base_SetConfig+0x138>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d007      	beq.n	8007d64 <TIM_Base_SetConfig+0x48>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a40      	ldr	r2, [pc, #256]	; (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d003      	beq.n	8007d64 <TIM_Base_SetConfig+0x48>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a3f      	ldr	r2, [pc, #252]	; (8007e5c <TIM_Base_SetConfig+0x140>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d108      	bne.n	8007d76 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a33      	ldr	r2, [pc, #204]	; (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d023      	beq.n	8007dc6 <TIM_Base_SetConfig+0xaa>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d84:	d01f      	beq.n	8007dc6 <TIM_Base_SetConfig+0xaa>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a30      	ldr	r2, [pc, #192]	; (8007e4c <TIM_Base_SetConfig+0x130>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d01b      	beq.n	8007dc6 <TIM_Base_SetConfig+0xaa>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2f      	ldr	r2, [pc, #188]	; (8007e50 <TIM_Base_SetConfig+0x134>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d017      	beq.n	8007dc6 <TIM_Base_SetConfig+0xaa>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a2e      	ldr	r2, [pc, #184]	; (8007e54 <TIM_Base_SetConfig+0x138>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d013      	beq.n	8007dc6 <TIM_Base_SetConfig+0xaa>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a2d      	ldr	r2, [pc, #180]	; (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00f      	beq.n	8007dc6 <TIM_Base_SetConfig+0xaa>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a2d      	ldr	r2, [pc, #180]	; (8007e60 <TIM_Base_SetConfig+0x144>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00b      	beq.n	8007dc6 <TIM_Base_SetConfig+0xaa>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a2c      	ldr	r2, [pc, #176]	; (8007e64 <TIM_Base_SetConfig+0x148>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d007      	beq.n	8007dc6 <TIM_Base_SetConfig+0xaa>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a2b      	ldr	r2, [pc, #172]	; (8007e68 <TIM_Base_SetConfig+0x14c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d003      	beq.n	8007dc6 <TIM_Base_SetConfig+0xaa>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a26      	ldr	r2, [pc, #152]	; (8007e5c <TIM_Base_SetConfig+0x140>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d108      	bne.n	8007dd8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a12      	ldr	r2, [pc, #72]	; (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d013      	beq.n	8007e2c <TIM_Base_SetConfig+0x110>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a14      	ldr	r2, [pc, #80]	; (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00f      	beq.n	8007e2c <TIM_Base_SetConfig+0x110>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a14      	ldr	r2, [pc, #80]	; (8007e60 <TIM_Base_SetConfig+0x144>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00b      	beq.n	8007e2c <TIM_Base_SetConfig+0x110>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a13      	ldr	r2, [pc, #76]	; (8007e64 <TIM_Base_SetConfig+0x148>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d007      	beq.n	8007e2c <TIM_Base_SetConfig+0x110>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a12      	ldr	r2, [pc, #72]	; (8007e68 <TIM_Base_SetConfig+0x14c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d003      	beq.n	8007e2c <TIM_Base_SetConfig+0x110>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a0d      	ldr	r2, [pc, #52]	; (8007e5c <TIM_Base_SetConfig+0x140>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d103      	bne.n	8007e34 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	615a      	str	r2, [r3, #20]
}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	40012c00 	.word	0x40012c00
 8007e4c:	40000400 	.word	0x40000400
 8007e50:	40000800 	.word	0x40000800
 8007e54:	40000c00 	.word	0x40000c00
 8007e58:	40013400 	.word	0x40013400
 8007e5c:	40015000 	.word	0x40015000
 8007e60:	40014000 	.word	0x40014000
 8007e64:	40014400 	.word	0x40014400
 8007e68:	40014800 	.word	0x40014800

08007e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	f023 0201 	bic.w	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f023 0302 	bic.w	r3, r3, #2
 8007eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a30      	ldr	r2, [pc, #192]	; (8007f88 <TIM_OC1_SetConfig+0x11c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d013      	beq.n	8007ef4 <TIM_OC1_SetConfig+0x88>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a2f      	ldr	r2, [pc, #188]	; (8007f8c <TIM_OC1_SetConfig+0x120>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00f      	beq.n	8007ef4 <TIM_OC1_SetConfig+0x88>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a2e      	ldr	r2, [pc, #184]	; (8007f90 <TIM_OC1_SetConfig+0x124>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00b      	beq.n	8007ef4 <TIM_OC1_SetConfig+0x88>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a2d      	ldr	r2, [pc, #180]	; (8007f94 <TIM_OC1_SetConfig+0x128>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d007      	beq.n	8007ef4 <TIM_OC1_SetConfig+0x88>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a2c      	ldr	r2, [pc, #176]	; (8007f98 <TIM_OC1_SetConfig+0x12c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <TIM_OC1_SetConfig+0x88>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a2b      	ldr	r2, [pc, #172]	; (8007f9c <TIM_OC1_SetConfig+0x130>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d10c      	bne.n	8007f0e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f023 0308 	bic.w	r3, r3, #8
 8007efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f023 0304 	bic.w	r3, r3, #4
 8007f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a1d      	ldr	r2, [pc, #116]	; (8007f88 <TIM_OC1_SetConfig+0x11c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <TIM_OC1_SetConfig+0xd2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a1c      	ldr	r2, [pc, #112]	; (8007f8c <TIM_OC1_SetConfig+0x120>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00f      	beq.n	8007f3e <TIM_OC1_SetConfig+0xd2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a1b      	ldr	r2, [pc, #108]	; (8007f90 <TIM_OC1_SetConfig+0x124>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00b      	beq.n	8007f3e <TIM_OC1_SetConfig+0xd2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a1a      	ldr	r2, [pc, #104]	; (8007f94 <TIM_OC1_SetConfig+0x128>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d007      	beq.n	8007f3e <TIM_OC1_SetConfig+0xd2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a19      	ldr	r2, [pc, #100]	; (8007f98 <TIM_OC1_SetConfig+0x12c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d003      	beq.n	8007f3e <TIM_OC1_SetConfig+0xd2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a18      	ldr	r2, [pc, #96]	; (8007f9c <TIM_OC1_SetConfig+0x130>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d111      	bne.n	8007f62 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	621a      	str	r2, [r3, #32]
}
 8007f7c:	bf00      	nop
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	40012c00 	.word	0x40012c00
 8007f8c:	40013400 	.word	0x40013400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40014400 	.word	0x40014400
 8007f98:	40014800 	.word	0x40014800
 8007f9c:	40015000 	.word	0x40015000

08007fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	f023 0210 	bic.w	r2, r3, #16
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f023 0320 	bic.w	r3, r3, #32
 8007fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a2c      	ldr	r2, [pc, #176]	; (80080b0 <TIM_OC2_SetConfig+0x110>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d007      	beq.n	8008014 <TIM_OC2_SetConfig+0x74>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a2b      	ldr	r2, [pc, #172]	; (80080b4 <TIM_OC2_SetConfig+0x114>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d003      	beq.n	8008014 <TIM_OC2_SetConfig+0x74>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a2a      	ldr	r2, [pc, #168]	; (80080b8 <TIM_OC2_SetConfig+0x118>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d10d      	bne.n	8008030 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800801a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a1f      	ldr	r2, [pc, #124]	; (80080b0 <TIM_OC2_SetConfig+0x110>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d013      	beq.n	8008060 <TIM_OC2_SetConfig+0xc0>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a1e      	ldr	r2, [pc, #120]	; (80080b4 <TIM_OC2_SetConfig+0x114>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d00f      	beq.n	8008060 <TIM_OC2_SetConfig+0xc0>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a1e      	ldr	r2, [pc, #120]	; (80080bc <TIM_OC2_SetConfig+0x11c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00b      	beq.n	8008060 <TIM_OC2_SetConfig+0xc0>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <TIM_OC2_SetConfig+0x120>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d007      	beq.n	8008060 <TIM_OC2_SetConfig+0xc0>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1c      	ldr	r2, [pc, #112]	; (80080c4 <TIM_OC2_SetConfig+0x124>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d003      	beq.n	8008060 <TIM_OC2_SetConfig+0xc0>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a17      	ldr	r2, [pc, #92]	; (80080b8 <TIM_OC2_SetConfig+0x118>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d113      	bne.n	8008088 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008066:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800806e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	621a      	str	r2, [r3, #32]
}
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	40012c00 	.word	0x40012c00
 80080b4:	40013400 	.word	0x40013400
 80080b8:	40015000 	.word	0x40015000
 80080bc:	40014000 	.word	0x40014000
 80080c0:	40014400 	.word	0x40014400
 80080c4:	40014800 	.word	0x40014800

080080c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	021b      	lsls	r3, r3, #8
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2b      	ldr	r2, [pc, #172]	; (80081d4 <TIM_OC3_SetConfig+0x10c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d007      	beq.n	800813a <TIM_OC3_SetConfig+0x72>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a2a      	ldr	r2, [pc, #168]	; (80081d8 <TIM_OC3_SetConfig+0x110>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d003      	beq.n	800813a <TIM_OC3_SetConfig+0x72>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a29      	ldr	r2, [pc, #164]	; (80081dc <TIM_OC3_SetConfig+0x114>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d10d      	bne.n	8008156 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	021b      	lsls	r3, r3, #8
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	4313      	orrs	r3, r2
 800814c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a1e      	ldr	r2, [pc, #120]	; (80081d4 <TIM_OC3_SetConfig+0x10c>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d013      	beq.n	8008186 <TIM_OC3_SetConfig+0xbe>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a1d      	ldr	r2, [pc, #116]	; (80081d8 <TIM_OC3_SetConfig+0x110>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00f      	beq.n	8008186 <TIM_OC3_SetConfig+0xbe>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a1d      	ldr	r2, [pc, #116]	; (80081e0 <TIM_OC3_SetConfig+0x118>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00b      	beq.n	8008186 <TIM_OC3_SetConfig+0xbe>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a1c      	ldr	r2, [pc, #112]	; (80081e4 <TIM_OC3_SetConfig+0x11c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d007      	beq.n	8008186 <TIM_OC3_SetConfig+0xbe>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a1b      	ldr	r2, [pc, #108]	; (80081e8 <TIM_OC3_SetConfig+0x120>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d003      	beq.n	8008186 <TIM_OC3_SetConfig+0xbe>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a16      	ldr	r2, [pc, #88]	; (80081dc <TIM_OC3_SetConfig+0x114>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d113      	bne.n	80081ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800818c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	621a      	str	r2, [r3, #32]
}
 80081c8:	bf00      	nop
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	40012c00 	.word	0x40012c00
 80081d8:	40013400 	.word	0x40013400
 80081dc:	40015000 	.word	0x40015000
 80081e0:	40014000 	.word	0x40014000
 80081e4:	40014400 	.word	0x40014400
 80081e8:	40014800 	.word	0x40014800

080081ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800821a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800821e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800823a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	031b      	lsls	r3, r3, #12
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a2c      	ldr	r2, [pc, #176]	; (80082fc <TIM_OC4_SetConfig+0x110>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d007      	beq.n	8008260 <TIM_OC4_SetConfig+0x74>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a2b      	ldr	r2, [pc, #172]	; (8008300 <TIM_OC4_SetConfig+0x114>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d003      	beq.n	8008260 <TIM_OC4_SetConfig+0x74>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a2a      	ldr	r2, [pc, #168]	; (8008304 <TIM_OC4_SetConfig+0x118>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d10d      	bne.n	800827c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	031b      	lsls	r3, r3, #12
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	4313      	orrs	r3, r2
 8008272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800827a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a1f      	ldr	r2, [pc, #124]	; (80082fc <TIM_OC4_SetConfig+0x110>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d013      	beq.n	80082ac <TIM_OC4_SetConfig+0xc0>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a1e      	ldr	r2, [pc, #120]	; (8008300 <TIM_OC4_SetConfig+0x114>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00f      	beq.n	80082ac <TIM_OC4_SetConfig+0xc0>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a1e      	ldr	r2, [pc, #120]	; (8008308 <TIM_OC4_SetConfig+0x11c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00b      	beq.n	80082ac <TIM_OC4_SetConfig+0xc0>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a1d      	ldr	r2, [pc, #116]	; (800830c <TIM_OC4_SetConfig+0x120>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d007      	beq.n	80082ac <TIM_OC4_SetConfig+0xc0>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a1c      	ldr	r2, [pc, #112]	; (8008310 <TIM_OC4_SetConfig+0x124>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d003      	beq.n	80082ac <TIM_OC4_SetConfig+0xc0>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a17      	ldr	r2, [pc, #92]	; (8008304 <TIM_OC4_SetConfig+0x118>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d113      	bne.n	80082d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	019b      	lsls	r3, r3, #6
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	019b      	lsls	r3, r3, #6
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	621a      	str	r2, [r3, #32]
}
 80082ee:	bf00      	nop
 80082f0:	371c      	adds	r7, #28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40012c00 	.word	0x40012c00
 8008300:	40013400 	.word	0x40013400
 8008304:	40015000 	.word	0x40015000
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800

08008314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008358:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	041b      	lsls	r3, r3, #16
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a19      	ldr	r2, [pc, #100]	; (80083d0 <TIM_OC5_SetConfig+0xbc>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d013      	beq.n	8008396 <TIM_OC5_SetConfig+0x82>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a18      	ldr	r2, [pc, #96]	; (80083d4 <TIM_OC5_SetConfig+0xc0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d00f      	beq.n	8008396 <TIM_OC5_SetConfig+0x82>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <TIM_OC5_SetConfig+0xc4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00b      	beq.n	8008396 <TIM_OC5_SetConfig+0x82>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a16      	ldr	r2, [pc, #88]	; (80083dc <TIM_OC5_SetConfig+0xc8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d007      	beq.n	8008396 <TIM_OC5_SetConfig+0x82>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a15      	ldr	r2, [pc, #84]	; (80083e0 <TIM_OC5_SetConfig+0xcc>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d003      	beq.n	8008396 <TIM_OC5_SetConfig+0x82>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a14      	ldr	r2, [pc, #80]	; (80083e4 <TIM_OC5_SetConfig+0xd0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d109      	bne.n	80083aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800839c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	621a      	str	r2, [r3, #32]
}
 80083c4:	bf00      	nop
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40013400 	.word	0x40013400
 80083d8:	40014000 	.word	0x40014000
 80083dc:	40014400 	.word	0x40014400
 80083e0:	40014800 	.word	0x40014800
 80083e4:	40015000 	.word	0x40015000

080083e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800841a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800842e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	051b      	lsls	r3, r3, #20
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a1a      	ldr	r2, [pc, #104]	; (80084a8 <TIM_OC6_SetConfig+0xc0>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d013      	beq.n	800846c <TIM_OC6_SetConfig+0x84>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a19      	ldr	r2, [pc, #100]	; (80084ac <TIM_OC6_SetConfig+0xc4>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00f      	beq.n	800846c <TIM_OC6_SetConfig+0x84>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a18      	ldr	r2, [pc, #96]	; (80084b0 <TIM_OC6_SetConfig+0xc8>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00b      	beq.n	800846c <TIM_OC6_SetConfig+0x84>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a17      	ldr	r2, [pc, #92]	; (80084b4 <TIM_OC6_SetConfig+0xcc>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d007      	beq.n	800846c <TIM_OC6_SetConfig+0x84>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a16      	ldr	r2, [pc, #88]	; (80084b8 <TIM_OC6_SetConfig+0xd0>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d003      	beq.n	800846c <TIM_OC6_SetConfig+0x84>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a15      	ldr	r2, [pc, #84]	; (80084bc <TIM_OC6_SetConfig+0xd4>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d109      	bne.n	8008480 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	029b      	lsls	r3, r3, #10
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	4313      	orrs	r3, r2
 800847e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	621a      	str	r2, [r3, #32]
}
 800849a:	bf00      	nop
 800849c:	371c      	adds	r7, #28
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	40012c00 	.word	0x40012c00
 80084ac:	40013400 	.word	0x40013400
 80084b0:	40014000 	.word	0x40014000
 80084b4:	40014400 	.word	0x40014400
 80084b8:	40014800 	.word	0x40014800
 80084bc:	40015000 	.word	0x40015000

080084c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f023 0201 	bic.w	r2, r3, #1
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4a28      	ldr	r2, [pc, #160]	; (800858c <TIM_TI1_SetConfig+0xcc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d01b      	beq.n	8008526 <TIM_TI1_SetConfig+0x66>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f4:	d017      	beq.n	8008526 <TIM_TI1_SetConfig+0x66>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4a25      	ldr	r2, [pc, #148]	; (8008590 <TIM_TI1_SetConfig+0xd0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d013      	beq.n	8008526 <TIM_TI1_SetConfig+0x66>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a24      	ldr	r2, [pc, #144]	; (8008594 <TIM_TI1_SetConfig+0xd4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00f      	beq.n	8008526 <TIM_TI1_SetConfig+0x66>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4a23      	ldr	r2, [pc, #140]	; (8008598 <TIM_TI1_SetConfig+0xd8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00b      	beq.n	8008526 <TIM_TI1_SetConfig+0x66>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	4a22      	ldr	r2, [pc, #136]	; (800859c <TIM_TI1_SetConfig+0xdc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d007      	beq.n	8008526 <TIM_TI1_SetConfig+0x66>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4a21      	ldr	r2, [pc, #132]	; (80085a0 <TIM_TI1_SetConfig+0xe0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d003      	beq.n	8008526 <TIM_TI1_SetConfig+0x66>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4a20      	ldr	r2, [pc, #128]	; (80085a4 <TIM_TI1_SetConfig+0xe4>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d101      	bne.n	800852a <TIM_TI1_SetConfig+0x6a>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <TIM_TI1_SetConfig+0x6c>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e003      	b.n	800854a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f043 0301 	orr.w	r3, r3, #1
 8008548:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	b2db      	uxtb	r3, r3
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f023 030a 	bic.w	r3, r3, #10
 8008564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f003 030a 	and.w	r3, r3, #10
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	40012c00 	.word	0x40012c00
 8008590:	40000400 	.word	0x40000400
 8008594:	40000800 	.word	0x40000800
 8008598:	40000c00 	.word	0x40000c00
 800859c:	40013400 	.word	0x40013400
 80085a0:	40014000 	.word	0x40014000
 80085a4:	40015000 	.word	0x40015000

080085a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	f023 0201 	bic.w	r2, r3, #1
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4313      	orrs	r3, r2
 80085dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f023 030a 	bic.w	r3, r3, #10
 80085e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008606:	b480      	push	{r7}
 8008608:	b087      	sub	sp, #28
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	f023 0210 	bic.w	r2, r3, #16
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008632:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	021b      	lsls	r3, r3, #8
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4313      	orrs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	031b      	lsls	r3, r3, #12
 800864a:	b29b      	uxth	r3, r3
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008658:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	621a      	str	r2, [r3, #32]
}
 8008674:	bf00      	nop
 8008676:	371c      	adds	r7, #28
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	f023 0210 	bic.w	r2, r3, #16
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	031b      	lsls	r3, r3, #12
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	011b      	lsls	r3, r3, #4
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	621a      	str	r2, [r3, #32]
}
 80086d4:	bf00      	nop
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f023 0303 	bic.w	r3, r3, #3
 800870c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4313      	orrs	r3, r2
 8008714:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800871c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	b2db      	uxtb	r3, r3
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008730:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	021b      	lsls	r3, r3, #8
 8008736:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	621a      	str	r2, [r3, #32]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008784:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	021b      	lsls	r3, r3, #8
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	4313      	orrs	r3, r2
 800878e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008796:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	031b      	lsls	r3, r3, #12
 800879c:	b29b      	uxth	r3, r3
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	031b      	lsls	r3, r3, #12
 80087b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	621a      	str	r2, [r3, #32]
}
 80087c6:	bf00      	nop
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80087e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	f043 0307 	orr.w	r3, r3, #7
 80087f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	609a      	str	r2, [r3, #8]
}
 8008800:	bf00      	nop
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	021a      	lsls	r2, r3, #8
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	431a      	orrs	r2, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4313      	orrs	r3, r2
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	609a      	str	r2, [r3, #8]
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f003 031f 	and.w	r3, r3, #31
 800885e:	2201      	movs	r2, #1
 8008860:	fa02 f303 	lsl.w	r3, r2, r3
 8008864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a1a      	ldr	r2, [r3, #32]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	43db      	mvns	r3, r3
 800886e:	401a      	ands	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a1a      	ldr	r2, [r3, #32]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f003 031f 	and.w	r3, r3, #31
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	fa01 f303 	lsl.w	r3, r1, r3
 8008884:	431a      	orrs	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	621a      	str	r2, [r3, #32]
}
 800888a:	bf00      	nop
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
	...

08008898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d101      	bne.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088ac:	2302      	movs	r3, #2
 80088ae:	e074      	b.n	800899a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a34      	ldr	r2, [pc, #208]	; (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a33      	ldr	r2, [pc, #204]	; (80089ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d004      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a31      	ldr	r2, [pc, #196]	; (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d108      	bne.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80088f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a21      	ldr	r2, [pc, #132]	; (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d022      	beq.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008930:	d01d      	beq.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a1f      	ldr	r2, [pc, #124]	; (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d018      	beq.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a1d      	ldr	r2, [pc, #116]	; (80089b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d013      	beq.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00e      	beq.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a15      	ldr	r2, [pc, #84]	; (80089ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d009      	beq.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a18      	ldr	r2, [pc, #96]	; (80089c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d004      	beq.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a11      	ldr	r2, [pc, #68]	; (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d10c      	bne.n	8008988 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	4313      	orrs	r3, r2
 800897e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	40012c00 	.word	0x40012c00
 80089ac:	40013400 	.word	0x40013400
 80089b0:	40015000 	.word	0x40015000
 80089b4:	40000400 	.word	0x40000400
 80089b8:	40000800 	.word	0x40000800
 80089bc:	40000c00 	.word	0x40000c00
 80089c0:	40014000 	.word	0x40014000

080089c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <_ZdlPvj>:
 8008a50:	f000 b81a 	b.w	8008a88 <_ZdlPv>

08008a54 <_Znwj>:
 8008a54:	2801      	cmp	r0, #1
 8008a56:	bf38      	it	cc
 8008a58:	2001      	movcc	r0, #1
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f001 f8ba 	bl	8009bd8 <malloc>
 8008a64:	b100      	cbz	r0, 8008a68 <_Znwj+0x14>
 8008a66:	bd10      	pop	{r4, pc}
 8008a68:	f000 f810 	bl	8008a8c <_ZSt15get_new_handlerv>
 8008a6c:	b908      	cbnz	r0, 8008a72 <_Znwj+0x1e>
 8008a6e:	f001 f8ab 	bl	8009bc8 <abort>
 8008a72:	4780      	blx	r0
 8008a74:	e7f3      	b.n	8008a5e <_Znwj+0xa>

08008a76 <_ZSt17__throw_bad_allocv>:
 8008a76:	b508      	push	{r3, lr}
 8008a78:	f001 f8a6 	bl	8009bc8 <abort>

08008a7c <_ZSt28__throw_bad_array_new_lengthv>:
 8008a7c:	b508      	push	{r3, lr}
 8008a7e:	f001 f8a3 	bl	8009bc8 <abort>

08008a82 <_ZSt20__throw_length_errorPKc>:
 8008a82:	b508      	push	{r3, lr}
 8008a84:	f001 f8a0 	bl	8009bc8 <abort>

08008a88 <_ZdlPv>:
 8008a88:	f001 b8ae 	b.w	8009be8 <free>

08008a8c <_ZSt15get_new_handlerv>:
 8008a8c:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <_ZSt15get_new_handlerv+0xc>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	f3bf 8f5b 	dmb	ish
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	2000039c 	.word	0x2000039c
 8008a9c:	00000000 	.word	0x00000000

08008aa0 <cos>:
 8008aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aa2:	ec53 2b10 	vmov	r2, r3, d0
 8008aa6:	4826      	ldr	r0, [pc, #152]	; (8008b40 <cos+0xa0>)
 8008aa8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008aac:	4281      	cmp	r1, r0
 8008aae:	dc06      	bgt.n	8008abe <cos+0x1e>
 8008ab0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008b38 <cos+0x98>
 8008ab4:	b005      	add	sp, #20
 8008ab6:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aba:	f000 b89d 	b.w	8008bf8 <__kernel_cos>
 8008abe:	4821      	ldr	r0, [pc, #132]	; (8008b44 <cos+0xa4>)
 8008ac0:	4281      	cmp	r1, r0
 8008ac2:	dd09      	ble.n	8008ad8 <cos+0x38>
 8008ac4:	ee10 0a10 	vmov	r0, s0
 8008ac8:	4619      	mov	r1, r3
 8008aca:	f7f7 fba9 	bl	8000220 <__aeabi_dsub>
 8008ace:	ec41 0b10 	vmov	d0, r0, r1
 8008ad2:	b005      	add	sp, #20
 8008ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ad8:	4668      	mov	r0, sp
 8008ada:	f000 fa15 	bl	8008f08 <__ieee754_rem_pio2>
 8008ade:	f000 0003 	and.w	r0, r0, #3
 8008ae2:	2801      	cmp	r0, #1
 8008ae4:	d00b      	beq.n	8008afe <cos+0x5e>
 8008ae6:	2802      	cmp	r0, #2
 8008ae8:	d016      	beq.n	8008b18 <cos+0x78>
 8008aea:	b9e0      	cbnz	r0, 8008b26 <cos+0x86>
 8008aec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008af0:	ed9d 0b00 	vldr	d0, [sp]
 8008af4:	f000 f880 	bl	8008bf8 <__kernel_cos>
 8008af8:	ec51 0b10 	vmov	r0, r1, d0
 8008afc:	e7e7      	b.n	8008ace <cos+0x2e>
 8008afe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b02:	ed9d 0b00 	vldr	d0, [sp]
 8008b06:	f000 f93f 	bl	8008d88 <__kernel_sin>
 8008b0a:	ec53 2b10 	vmov	r2, r3, d0
 8008b0e:	ee10 0a10 	vmov	r0, s0
 8008b12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008b16:	e7da      	b.n	8008ace <cos+0x2e>
 8008b18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b1c:	ed9d 0b00 	vldr	d0, [sp]
 8008b20:	f000 f86a 	bl	8008bf8 <__kernel_cos>
 8008b24:	e7f1      	b.n	8008b0a <cos+0x6a>
 8008b26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b2a:	ed9d 0b00 	vldr	d0, [sp]
 8008b2e:	2001      	movs	r0, #1
 8008b30:	f000 f92a 	bl	8008d88 <__kernel_sin>
 8008b34:	e7e0      	b.n	8008af8 <cos+0x58>
 8008b36:	bf00      	nop
	...
 8008b40:	3fe921fb 	.word	0x3fe921fb
 8008b44:	7fefffff 	.word	0x7fefffff

08008b48 <sin>:
 8008b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b4a:	ec53 2b10 	vmov	r2, r3, d0
 8008b4e:	4828      	ldr	r0, [pc, #160]	; (8008bf0 <sin+0xa8>)
 8008b50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b54:	4281      	cmp	r1, r0
 8008b56:	dc07      	bgt.n	8008b68 <sin+0x20>
 8008b58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008be8 <sin+0xa0>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	b005      	add	sp, #20
 8008b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b64:	f000 b910 	b.w	8008d88 <__kernel_sin>
 8008b68:	4822      	ldr	r0, [pc, #136]	; (8008bf4 <sin+0xac>)
 8008b6a:	4281      	cmp	r1, r0
 8008b6c:	dd09      	ble.n	8008b82 <sin+0x3a>
 8008b6e:	ee10 0a10 	vmov	r0, s0
 8008b72:	4619      	mov	r1, r3
 8008b74:	f7f7 fb54 	bl	8000220 <__aeabi_dsub>
 8008b78:	ec41 0b10 	vmov	d0, r0, r1
 8008b7c:	b005      	add	sp, #20
 8008b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b82:	4668      	mov	r0, sp
 8008b84:	f000 f9c0 	bl	8008f08 <__ieee754_rem_pio2>
 8008b88:	f000 0003 	and.w	r0, r0, #3
 8008b8c:	2801      	cmp	r0, #1
 8008b8e:	d00c      	beq.n	8008baa <sin+0x62>
 8008b90:	2802      	cmp	r0, #2
 8008b92:	d011      	beq.n	8008bb8 <sin+0x70>
 8008b94:	b9f0      	cbnz	r0, 8008bd4 <sin+0x8c>
 8008b96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b9a:	ed9d 0b00 	vldr	d0, [sp]
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	f000 f8f2 	bl	8008d88 <__kernel_sin>
 8008ba4:	ec51 0b10 	vmov	r0, r1, d0
 8008ba8:	e7e6      	b.n	8008b78 <sin+0x30>
 8008baa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bae:	ed9d 0b00 	vldr	d0, [sp]
 8008bb2:	f000 f821 	bl	8008bf8 <__kernel_cos>
 8008bb6:	e7f5      	b.n	8008ba4 <sin+0x5c>
 8008bb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bbc:	ed9d 0b00 	vldr	d0, [sp]
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	f000 f8e1 	bl	8008d88 <__kernel_sin>
 8008bc6:	ec53 2b10 	vmov	r2, r3, d0
 8008bca:	ee10 0a10 	vmov	r0, s0
 8008bce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008bd2:	e7d1      	b.n	8008b78 <sin+0x30>
 8008bd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bd8:	ed9d 0b00 	vldr	d0, [sp]
 8008bdc:	f000 f80c 	bl	8008bf8 <__kernel_cos>
 8008be0:	e7f1      	b.n	8008bc6 <sin+0x7e>
 8008be2:	bf00      	nop
 8008be4:	f3af 8000 	nop.w
	...
 8008bf0:	3fe921fb 	.word	0x3fe921fb
 8008bf4:	7fefffff 	.word	0x7fefffff

08008bf8 <__kernel_cos>:
 8008bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	ec57 6b10 	vmov	r6, r7, d0
 8008c00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008c04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008c08:	ed8d 1b00 	vstr	d1, [sp]
 8008c0c:	da07      	bge.n	8008c1e <__kernel_cos+0x26>
 8008c0e:	ee10 0a10 	vmov	r0, s0
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 ff56 	bl	8000ac4 <__aeabi_d2iz>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	f000 8088 	beq.w	8008d2e <__kernel_cos+0x136>
 8008c1e:	4632      	mov	r2, r6
 8008c20:	463b      	mov	r3, r7
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f7 fcb3 	bl	8000590 <__aeabi_dmul>
 8008c2a:	4b51      	ldr	r3, [pc, #324]	; (8008d70 <__kernel_cos+0x178>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	460d      	mov	r5, r1
 8008c32:	f7f7 fcad 	bl	8000590 <__aeabi_dmul>
 8008c36:	a340      	add	r3, pc, #256	; (adr r3, 8008d38 <__kernel_cos+0x140>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	4682      	mov	sl, r0
 8008c3e:	468b      	mov	fp, r1
 8008c40:	4620      	mov	r0, r4
 8008c42:	4629      	mov	r1, r5
 8008c44:	f7f7 fca4 	bl	8000590 <__aeabi_dmul>
 8008c48:	a33d      	add	r3, pc, #244	; (adr r3, 8008d40 <__kernel_cos+0x148>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fae9 	bl	8000224 <__adddf3>
 8008c52:	4622      	mov	r2, r4
 8008c54:	462b      	mov	r3, r5
 8008c56:	f7f7 fc9b 	bl	8000590 <__aeabi_dmul>
 8008c5a:	a33b      	add	r3, pc, #236	; (adr r3, 8008d48 <__kernel_cos+0x150>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fade 	bl	8000220 <__aeabi_dsub>
 8008c64:	4622      	mov	r2, r4
 8008c66:	462b      	mov	r3, r5
 8008c68:	f7f7 fc92 	bl	8000590 <__aeabi_dmul>
 8008c6c:	a338      	add	r3, pc, #224	; (adr r3, 8008d50 <__kernel_cos+0x158>)
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	f7f7 fad7 	bl	8000224 <__adddf3>
 8008c76:	4622      	mov	r2, r4
 8008c78:	462b      	mov	r3, r5
 8008c7a:	f7f7 fc89 	bl	8000590 <__aeabi_dmul>
 8008c7e:	a336      	add	r3, pc, #216	; (adr r3, 8008d58 <__kernel_cos+0x160>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f7f7 facc 	bl	8000220 <__aeabi_dsub>
 8008c88:	4622      	mov	r2, r4
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	f7f7 fc80 	bl	8000590 <__aeabi_dmul>
 8008c90:	a333      	add	r3, pc, #204	; (adr r3, 8008d60 <__kernel_cos+0x168>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fac5 	bl	8000224 <__adddf3>
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	462b      	mov	r3, r5
 8008c9e:	f7f7 fc77 	bl	8000590 <__aeabi_dmul>
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	462b      	mov	r3, r5
 8008ca6:	f7f7 fc73 	bl	8000590 <__aeabi_dmul>
 8008caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cae:	4604      	mov	r4, r0
 8008cb0:	460d      	mov	r5, r1
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	f7f7 fc6b 	bl	8000590 <__aeabi_dmul>
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f7f7 faad 	bl	8000220 <__aeabi_dsub>
 8008cc6:	4b2b      	ldr	r3, [pc, #172]	; (8008d74 <__kernel_cos+0x17c>)
 8008cc8:	4598      	cmp	r8, r3
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460f      	mov	r7, r1
 8008cce:	dc10      	bgt.n	8008cf2 <__kernel_cos+0xfa>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	4659      	mov	r1, fp
 8008cd8:	f7f7 faa2 	bl	8000220 <__aeabi_dsub>
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4926      	ldr	r1, [pc, #152]	; (8008d78 <__kernel_cos+0x180>)
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	f7f7 fa9c 	bl	8000220 <__aeabi_dsub>
 8008ce8:	ec41 0b10 	vmov	d0, r0, r1
 8008cec:	b003      	add	sp, #12
 8008cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf2:	4b22      	ldr	r3, [pc, #136]	; (8008d7c <__kernel_cos+0x184>)
 8008cf4:	4920      	ldr	r1, [pc, #128]	; (8008d78 <__kernel_cos+0x180>)
 8008cf6:	4598      	cmp	r8, r3
 8008cf8:	bfcc      	ite	gt
 8008cfa:	4d21      	ldrgt	r5, [pc, #132]	; (8008d80 <__kernel_cos+0x188>)
 8008cfc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008d00:	2400      	movs	r4, #0
 8008d02:	4622      	mov	r2, r4
 8008d04:	462b      	mov	r3, r5
 8008d06:	2000      	movs	r0, #0
 8008d08:	f7f7 fa8a 	bl	8000220 <__aeabi_dsub>
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	4680      	mov	r8, r0
 8008d10:	4689      	mov	r9, r1
 8008d12:	462b      	mov	r3, r5
 8008d14:	4650      	mov	r0, sl
 8008d16:	4659      	mov	r1, fp
 8008d18:	f7f7 fa82 	bl	8000220 <__aeabi_dsub>
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	463b      	mov	r3, r7
 8008d20:	f7f7 fa7e 	bl	8000220 <__aeabi_dsub>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4640      	mov	r0, r8
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	e7da      	b.n	8008ce4 <__kernel_cos+0xec>
 8008d2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008d68 <__kernel_cos+0x170>
 8008d32:	e7db      	b.n	8008cec <__kernel_cos+0xf4>
 8008d34:	f3af 8000 	nop.w
 8008d38:	be8838d4 	.word	0xbe8838d4
 8008d3c:	bda8fae9 	.word	0xbda8fae9
 8008d40:	bdb4b1c4 	.word	0xbdb4b1c4
 8008d44:	3e21ee9e 	.word	0x3e21ee9e
 8008d48:	809c52ad 	.word	0x809c52ad
 8008d4c:	3e927e4f 	.word	0x3e927e4f
 8008d50:	19cb1590 	.word	0x19cb1590
 8008d54:	3efa01a0 	.word	0x3efa01a0
 8008d58:	16c15177 	.word	0x16c15177
 8008d5c:	3f56c16c 	.word	0x3f56c16c
 8008d60:	5555554c 	.word	0x5555554c
 8008d64:	3fa55555 	.word	0x3fa55555
 8008d68:	00000000 	.word	0x00000000
 8008d6c:	3ff00000 	.word	0x3ff00000
 8008d70:	3fe00000 	.word	0x3fe00000
 8008d74:	3fd33332 	.word	0x3fd33332
 8008d78:	3ff00000 	.word	0x3ff00000
 8008d7c:	3fe90000 	.word	0x3fe90000
 8008d80:	3fd20000 	.word	0x3fd20000
 8008d84:	00000000 	.word	0x00000000

08008d88 <__kernel_sin>:
 8008d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	ed2d 8b04 	vpush	{d8-d9}
 8008d90:	eeb0 8a41 	vmov.f32	s16, s2
 8008d94:	eef0 8a61 	vmov.f32	s17, s3
 8008d98:	ec55 4b10 	vmov	r4, r5, d0
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008da2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008da6:	9001      	str	r0, [sp, #4]
 8008da8:	da06      	bge.n	8008db8 <__kernel_sin+0x30>
 8008daa:	ee10 0a10 	vmov	r0, s0
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 fe88 	bl	8000ac4 <__aeabi_d2iz>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d051      	beq.n	8008e5c <__kernel_sin+0xd4>
 8008db8:	4622      	mov	r2, r4
 8008dba:	462b      	mov	r3, r5
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	f7f7 fbe6 	bl	8000590 <__aeabi_dmul>
 8008dc4:	4682      	mov	sl, r0
 8008dc6:	468b      	mov	fp, r1
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4620      	mov	r0, r4
 8008dce:	4629      	mov	r1, r5
 8008dd0:	f7f7 fbde 	bl	8000590 <__aeabi_dmul>
 8008dd4:	a341      	add	r3, pc, #260	; (adr r3, 8008edc <__kernel_sin+0x154>)
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	4680      	mov	r8, r0
 8008ddc:	4689      	mov	r9, r1
 8008dde:	4650      	mov	r0, sl
 8008de0:	4659      	mov	r1, fp
 8008de2:	f7f7 fbd5 	bl	8000590 <__aeabi_dmul>
 8008de6:	a33f      	add	r3, pc, #252	; (adr r3, 8008ee4 <__kernel_sin+0x15c>)
 8008de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dec:	f7f7 fa18 	bl	8000220 <__aeabi_dsub>
 8008df0:	4652      	mov	r2, sl
 8008df2:	465b      	mov	r3, fp
 8008df4:	f7f7 fbcc 	bl	8000590 <__aeabi_dmul>
 8008df8:	a33c      	add	r3, pc, #240	; (adr r3, 8008eec <__kernel_sin+0x164>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 fa11 	bl	8000224 <__adddf3>
 8008e02:	4652      	mov	r2, sl
 8008e04:	465b      	mov	r3, fp
 8008e06:	f7f7 fbc3 	bl	8000590 <__aeabi_dmul>
 8008e0a:	a33a      	add	r3, pc, #232	; (adr r3, 8008ef4 <__kernel_sin+0x16c>)
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	f7f7 fa06 	bl	8000220 <__aeabi_dsub>
 8008e14:	4652      	mov	r2, sl
 8008e16:	465b      	mov	r3, fp
 8008e18:	f7f7 fbba 	bl	8000590 <__aeabi_dmul>
 8008e1c:	a337      	add	r3, pc, #220	; (adr r3, 8008efc <__kernel_sin+0x174>)
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f7f7 f9ff 	bl	8000224 <__adddf3>
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	b9eb      	cbnz	r3, 8008e6a <__kernel_sin+0xe2>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4650      	mov	r0, sl
 8008e34:	4659      	mov	r1, fp
 8008e36:	f7f7 fbab 	bl	8000590 <__aeabi_dmul>
 8008e3a:	a325      	add	r3, pc, #148	; (adr r3, 8008ed0 <__kernel_sin+0x148>)
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f7f7 f9ee 	bl	8000220 <__aeabi_dsub>
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	f7f7 fba2 	bl	8000590 <__aeabi_dmul>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 f9e6 	bl	8000224 <__adddf3>
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	ec45 4b10 	vmov	d0, r4, r5
 8008e60:	b003      	add	sp, #12
 8008e62:	ecbd 8b04 	vpop	{d8-d9}
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <__kernel_sin+0x150>)
 8008e6c:	ec51 0b18 	vmov	r0, r1, d8
 8008e70:	2200      	movs	r2, #0
 8008e72:	f7f7 fb8d 	bl	8000590 <__aeabi_dmul>
 8008e76:	4632      	mov	r2, r6
 8008e78:	ec41 0b19 	vmov	d9, r0, r1
 8008e7c:	463b      	mov	r3, r7
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4649      	mov	r1, r9
 8008e82:	f7f7 fb85 	bl	8000590 <__aeabi_dmul>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	ec51 0b19 	vmov	r0, r1, d9
 8008e8e:	f7f7 f9c7 	bl	8000220 <__aeabi_dsub>
 8008e92:	4652      	mov	r2, sl
 8008e94:	465b      	mov	r3, fp
 8008e96:	f7f7 fb7b 	bl	8000590 <__aeabi_dmul>
 8008e9a:	ec53 2b18 	vmov	r2, r3, d8
 8008e9e:	f7f7 f9bf 	bl	8000220 <__aeabi_dsub>
 8008ea2:	a30b      	add	r3, pc, #44	; (adr r3, 8008ed0 <__kernel_sin+0x148>)
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	460f      	mov	r7, r1
 8008eac:	4640      	mov	r0, r8
 8008eae:	4649      	mov	r1, r9
 8008eb0:	f7f7 fb6e 	bl	8000590 <__aeabi_dmul>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 f9b2 	bl	8000224 <__adddf3>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f7f7 f9aa 	bl	8000220 <__aeabi_dsub>
 8008ecc:	e7c4      	b.n	8008e58 <__kernel_sin+0xd0>
 8008ece:	bf00      	nop
 8008ed0:	55555549 	.word	0x55555549
 8008ed4:	3fc55555 	.word	0x3fc55555
 8008ed8:	3fe00000 	.word	0x3fe00000
 8008edc:	5acfd57c 	.word	0x5acfd57c
 8008ee0:	3de5d93a 	.word	0x3de5d93a
 8008ee4:	8a2b9ceb 	.word	0x8a2b9ceb
 8008ee8:	3e5ae5e6 	.word	0x3e5ae5e6
 8008eec:	57b1fe7d 	.word	0x57b1fe7d
 8008ef0:	3ec71de3 	.word	0x3ec71de3
 8008ef4:	19c161d5 	.word	0x19c161d5
 8008ef8:	3f2a01a0 	.word	0x3f2a01a0
 8008efc:	1110f8a6 	.word	0x1110f8a6
 8008f00:	3f811111 	.word	0x3f811111
 8008f04:	00000000 	.word	0x00000000

08008f08 <__ieee754_rem_pio2>:
 8008f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	ed2d 8b02 	vpush	{d8}
 8008f10:	ec55 4b10 	vmov	r4, r5, d0
 8008f14:	4bca      	ldr	r3, [pc, #808]	; (8009240 <__ieee754_rem_pio2+0x338>)
 8008f16:	b08b      	sub	sp, #44	; 0x2c
 8008f18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008f1c:	4598      	cmp	r8, r3
 8008f1e:	4682      	mov	sl, r0
 8008f20:	9502      	str	r5, [sp, #8]
 8008f22:	dc08      	bgt.n	8008f36 <__ieee754_rem_pio2+0x2e>
 8008f24:	2200      	movs	r2, #0
 8008f26:	2300      	movs	r3, #0
 8008f28:	ed80 0b00 	vstr	d0, [r0]
 8008f2c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008f30:	f04f 0b00 	mov.w	fp, #0
 8008f34:	e028      	b.n	8008f88 <__ieee754_rem_pio2+0x80>
 8008f36:	4bc3      	ldr	r3, [pc, #780]	; (8009244 <__ieee754_rem_pio2+0x33c>)
 8008f38:	4598      	cmp	r8, r3
 8008f3a:	dc78      	bgt.n	800902e <__ieee754_rem_pio2+0x126>
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	4ec2      	ldr	r6, [pc, #776]	; (8009248 <__ieee754_rem_pio2+0x340>)
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	ee10 0a10 	vmov	r0, s0
 8008f46:	a3b0      	add	r3, pc, #704	; (adr r3, 8009208 <__ieee754_rem_pio2+0x300>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	dd39      	ble.n	8008fc4 <__ieee754_rem_pio2+0xbc>
 8008f50:	f7f7 f966 	bl	8000220 <__aeabi_dsub>
 8008f54:	45b0      	cmp	r8, r6
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	d01b      	beq.n	8008f94 <__ieee754_rem_pio2+0x8c>
 8008f5c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009210 <__ieee754_rem_pio2+0x308>)
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f7f7 f95d 	bl	8000220 <__aeabi_dsub>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	e9ca 2300 	strd	r2, r3, [sl]
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 f955 	bl	8000220 <__aeabi_dsub>
 8008f76:	a3a6      	add	r3, pc, #664	; (adr r3, 8009210 <__ieee754_rem_pio2+0x308>)
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f7f7 f950 	bl	8000220 <__aeabi_dsub>
 8008f80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f84:	f04f 0b01 	mov.w	fp, #1
 8008f88:	4658      	mov	r0, fp
 8008f8a:	b00b      	add	sp, #44	; 0x2c
 8008f8c:	ecbd 8b02 	vpop	{d8}
 8008f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f94:	a3a0      	add	r3, pc, #640	; (adr r3, 8009218 <__ieee754_rem_pio2+0x310>)
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	f7f7 f941 	bl	8000220 <__aeabi_dsub>
 8008f9e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009220 <__ieee754_rem_pio2+0x318>)
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	f7f7 f93a 	bl	8000220 <__aeabi_dsub>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	e9ca 2300 	strd	r2, r3, [sl]
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	f7f7 f932 	bl	8000220 <__aeabi_dsub>
 8008fbc:	a398      	add	r3, pc, #608	; (adr r3, 8009220 <__ieee754_rem_pio2+0x318>)
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	e7db      	b.n	8008f7c <__ieee754_rem_pio2+0x74>
 8008fc4:	f7f7 f92e 	bl	8000224 <__adddf3>
 8008fc8:	45b0      	cmp	r8, r6
 8008fca:	4604      	mov	r4, r0
 8008fcc:	460d      	mov	r5, r1
 8008fce:	d016      	beq.n	8008ffe <__ieee754_rem_pio2+0xf6>
 8008fd0:	a38f      	add	r3, pc, #572	; (adr r3, 8009210 <__ieee754_rem_pio2+0x308>)
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f7f7 f925 	bl	8000224 <__adddf3>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	e9ca 2300 	strd	r2, r3, [sl]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	f7f7 f91b 	bl	8000220 <__aeabi_dsub>
 8008fea:	a389      	add	r3, pc, #548	; (adr r3, 8009210 <__ieee754_rem_pio2+0x308>)
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f7f7 f918 	bl	8000224 <__adddf3>
 8008ff4:	f04f 3bff 	mov.w	fp, #4294967295
 8008ff8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ffc:	e7c4      	b.n	8008f88 <__ieee754_rem_pio2+0x80>
 8008ffe:	a386      	add	r3, pc, #536	; (adr r3, 8009218 <__ieee754_rem_pio2+0x310>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f7f7 f90e 	bl	8000224 <__adddf3>
 8009008:	a385      	add	r3, pc, #532	; (adr r3, 8009220 <__ieee754_rem_pio2+0x318>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	4604      	mov	r4, r0
 8009010:	460d      	mov	r5, r1
 8009012:	f7f7 f907 	bl	8000224 <__adddf3>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	e9ca 2300 	strd	r2, r3, [sl]
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 f8fd 	bl	8000220 <__aeabi_dsub>
 8009026:	a37e      	add	r3, pc, #504	; (adr r3, 8009220 <__ieee754_rem_pio2+0x318>)
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	e7e0      	b.n	8008ff0 <__ieee754_rem_pio2+0xe8>
 800902e:	4b87      	ldr	r3, [pc, #540]	; (800924c <__ieee754_rem_pio2+0x344>)
 8009030:	4598      	cmp	r8, r3
 8009032:	f300 80d8 	bgt.w	80091e6 <__ieee754_rem_pio2+0x2de>
 8009036:	f000 f96d 	bl	8009314 <fabs>
 800903a:	ec55 4b10 	vmov	r4, r5, d0
 800903e:	ee10 0a10 	vmov	r0, s0
 8009042:	a379      	add	r3, pc, #484	; (adr r3, 8009228 <__ieee754_rem_pio2+0x320>)
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	4629      	mov	r1, r5
 800904a:	f7f7 faa1 	bl	8000590 <__aeabi_dmul>
 800904e:	4b80      	ldr	r3, [pc, #512]	; (8009250 <__ieee754_rem_pio2+0x348>)
 8009050:	2200      	movs	r2, #0
 8009052:	f7f7 f8e7 	bl	8000224 <__adddf3>
 8009056:	f7f7 fd35 	bl	8000ac4 <__aeabi_d2iz>
 800905a:	4683      	mov	fp, r0
 800905c:	f7f7 fa2e 	bl	80004bc <__aeabi_i2d>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	ec43 2b18 	vmov	d8, r2, r3
 8009068:	a367      	add	r3, pc, #412	; (adr r3, 8009208 <__ieee754_rem_pio2+0x300>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f7f7 fa8f 	bl	8000590 <__aeabi_dmul>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4620      	mov	r0, r4
 8009078:	4629      	mov	r1, r5
 800907a:	f7f7 f8d1 	bl	8000220 <__aeabi_dsub>
 800907e:	a364      	add	r3, pc, #400	; (adr r3, 8009210 <__ieee754_rem_pio2+0x308>)
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	4606      	mov	r6, r0
 8009086:	460f      	mov	r7, r1
 8009088:	ec51 0b18 	vmov	r0, r1, d8
 800908c:	f7f7 fa80 	bl	8000590 <__aeabi_dmul>
 8009090:	f1bb 0f1f 	cmp.w	fp, #31
 8009094:	4604      	mov	r4, r0
 8009096:	460d      	mov	r5, r1
 8009098:	dc0d      	bgt.n	80090b6 <__ieee754_rem_pio2+0x1ae>
 800909a:	4b6e      	ldr	r3, [pc, #440]	; (8009254 <__ieee754_rem_pio2+0x34c>)
 800909c:	f10b 32ff 	add.w	r2, fp, #4294967295
 80090a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a4:	4543      	cmp	r3, r8
 80090a6:	d006      	beq.n	80090b6 <__ieee754_rem_pio2+0x1ae>
 80090a8:	4622      	mov	r2, r4
 80090aa:	462b      	mov	r3, r5
 80090ac:	4630      	mov	r0, r6
 80090ae:	4639      	mov	r1, r7
 80090b0:	f7f7 f8b6 	bl	8000220 <__aeabi_dsub>
 80090b4:	e00e      	b.n	80090d4 <__ieee754_rem_pio2+0x1cc>
 80090b6:	462b      	mov	r3, r5
 80090b8:	4622      	mov	r2, r4
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 f8af 	bl	8000220 <__aeabi_dsub>
 80090c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80090c6:	9303      	str	r3, [sp, #12]
 80090c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80090cc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80090d0:	2b10      	cmp	r3, #16
 80090d2:	dc02      	bgt.n	80090da <__ieee754_rem_pio2+0x1d2>
 80090d4:	e9ca 0100 	strd	r0, r1, [sl]
 80090d8:	e039      	b.n	800914e <__ieee754_rem_pio2+0x246>
 80090da:	a34f      	add	r3, pc, #316	; (adr r3, 8009218 <__ieee754_rem_pio2+0x310>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	ec51 0b18 	vmov	r0, r1, d8
 80090e4:	f7f7 fa54 	bl	8000590 <__aeabi_dmul>
 80090e8:	4604      	mov	r4, r0
 80090ea:	460d      	mov	r5, r1
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4630      	mov	r0, r6
 80090f2:	4639      	mov	r1, r7
 80090f4:	f7f7 f894 	bl	8000220 <__aeabi_dsub>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4680      	mov	r8, r0
 80090fe:	4689      	mov	r9, r1
 8009100:	4630      	mov	r0, r6
 8009102:	4639      	mov	r1, r7
 8009104:	f7f7 f88c 	bl	8000220 <__aeabi_dsub>
 8009108:	4622      	mov	r2, r4
 800910a:	462b      	mov	r3, r5
 800910c:	f7f7 f888 	bl	8000220 <__aeabi_dsub>
 8009110:	a343      	add	r3, pc, #268	; (adr r3, 8009220 <__ieee754_rem_pio2+0x318>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	4604      	mov	r4, r0
 8009118:	460d      	mov	r5, r1
 800911a:	ec51 0b18 	vmov	r0, r1, d8
 800911e:	f7f7 fa37 	bl	8000590 <__aeabi_dmul>
 8009122:	4622      	mov	r2, r4
 8009124:	462b      	mov	r3, r5
 8009126:	f7f7 f87b 	bl	8000220 <__aeabi_dsub>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4604      	mov	r4, r0
 8009130:	460d      	mov	r5, r1
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	f7f7 f873 	bl	8000220 <__aeabi_dsub>
 800913a:	9a03      	ldr	r2, [sp, #12]
 800913c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b31      	cmp	r3, #49	; 0x31
 8009144:	dc24      	bgt.n	8009190 <__ieee754_rem_pio2+0x288>
 8009146:	e9ca 0100 	strd	r0, r1, [sl]
 800914a:	4646      	mov	r6, r8
 800914c:	464f      	mov	r7, r9
 800914e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009152:	4630      	mov	r0, r6
 8009154:	4642      	mov	r2, r8
 8009156:	464b      	mov	r3, r9
 8009158:	4639      	mov	r1, r7
 800915a:	f7f7 f861 	bl	8000220 <__aeabi_dsub>
 800915e:	462b      	mov	r3, r5
 8009160:	4622      	mov	r2, r4
 8009162:	f7f7 f85d 	bl	8000220 <__aeabi_dsub>
 8009166:	9b02      	ldr	r3, [sp, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800916e:	f6bf af0b 	bge.w	8008f88 <__ieee754_rem_pio2+0x80>
 8009172:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009176:	f8ca 3004 	str.w	r3, [sl, #4]
 800917a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800917e:	f8ca 8000 	str.w	r8, [sl]
 8009182:	f8ca 0008 	str.w	r0, [sl, #8]
 8009186:	f8ca 300c 	str.w	r3, [sl, #12]
 800918a:	f1cb 0b00 	rsb	fp, fp, #0
 800918e:	e6fb      	b.n	8008f88 <__ieee754_rem_pio2+0x80>
 8009190:	a327      	add	r3, pc, #156	; (adr r3, 8009230 <__ieee754_rem_pio2+0x328>)
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	ec51 0b18 	vmov	r0, r1, d8
 800919a:	f7f7 f9f9 	bl	8000590 <__aeabi_dmul>
 800919e:	4604      	mov	r4, r0
 80091a0:	460d      	mov	r5, r1
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4640      	mov	r0, r8
 80091a8:	4649      	mov	r1, r9
 80091aa:	f7f7 f839 	bl	8000220 <__aeabi_dsub>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4606      	mov	r6, r0
 80091b4:	460f      	mov	r7, r1
 80091b6:	4640      	mov	r0, r8
 80091b8:	4649      	mov	r1, r9
 80091ba:	f7f7 f831 	bl	8000220 <__aeabi_dsub>
 80091be:	4622      	mov	r2, r4
 80091c0:	462b      	mov	r3, r5
 80091c2:	f7f7 f82d 	bl	8000220 <__aeabi_dsub>
 80091c6:	a31c      	add	r3, pc, #112	; (adr r3, 8009238 <__ieee754_rem_pio2+0x330>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	4604      	mov	r4, r0
 80091ce:	460d      	mov	r5, r1
 80091d0:	ec51 0b18 	vmov	r0, r1, d8
 80091d4:	f7f7 f9dc 	bl	8000590 <__aeabi_dmul>
 80091d8:	4622      	mov	r2, r4
 80091da:	462b      	mov	r3, r5
 80091dc:	f7f7 f820 	bl	8000220 <__aeabi_dsub>
 80091e0:	4604      	mov	r4, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	e760      	b.n	80090a8 <__ieee754_rem_pio2+0x1a0>
 80091e6:	4b1c      	ldr	r3, [pc, #112]	; (8009258 <__ieee754_rem_pio2+0x350>)
 80091e8:	4598      	cmp	r8, r3
 80091ea:	dd37      	ble.n	800925c <__ieee754_rem_pio2+0x354>
 80091ec:	ee10 2a10 	vmov	r2, s0
 80091f0:	462b      	mov	r3, r5
 80091f2:	4620      	mov	r0, r4
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7f7 f813 	bl	8000220 <__aeabi_dsub>
 80091fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80091fe:	e9ca 0100 	strd	r0, r1, [sl]
 8009202:	e695      	b.n	8008f30 <__ieee754_rem_pio2+0x28>
 8009204:	f3af 8000 	nop.w
 8009208:	54400000 	.word	0x54400000
 800920c:	3ff921fb 	.word	0x3ff921fb
 8009210:	1a626331 	.word	0x1a626331
 8009214:	3dd0b461 	.word	0x3dd0b461
 8009218:	1a600000 	.word	0x1a600000
 800921c:	3dd0b461 	.word	0x3dd0b461
 8009220:	2e037073 	.word	0x2e037073
 8009224:	3ba3198a 	.word	0x3ba3198a
 8009228:	6dc9c883 	.word	0x6dc9c883
 800922c:	3fe45f30 	.word	0x3fe45f30
 8009230:	2e000000 	.word	0x2e000000
 8009234:	3ba3198a 	.word	0x3ba3198a
 8009238:	252049c1 	.word	0x252049c1
 800923c:	397b839a 	.word	0x397b839a
 8009240:	3fe921fb 	.word	0x3fe921fb
 8009244:	4002d97b 	.word	0x4002d97b
 8009248:	3ff921fb 	.word	0x3ff921fb
 800924c:	413921fb 	.word	0x413921fb
 8009250:	3fe00000 	.word	0x3fe00000
 8009254:	08009f9c 	.word	0x08009f9c
 8009258:	7fefffff 	.word	0x7fefffff
 800925c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8009260:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8009264:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8009268:	4620      	mov	r0, r4
 800926a:	460d      	mov	r5, r1
 800926c:	f7f7 fc2a 	bl	8000ac4 <__aeabi_d2iz>
 8009270:	f7f7 f924 	bl	80004bc <__aeabi_i2d>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4620      	mov	r0, r4
 800927a:	4629      	mov	r1, r5
 800927c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009280:	f7f6 ffce 	bl	8000220 <__aeabi_dsub>
 8009284:	4b21      	ldr	r3, [pc, #132]	; (800930c <__ieee754_rem_pio2+0x404>)
 8009286:	2200      	movs	r2, #0
 8009288:	f7f7 f982 	bl	8000590 <__aeabi_dmul>
 800928c:	460d      	mov	r5, r1
 800928e:	4604      	mov	r4, r0
 8009290:	f7f7 fc18 	bl	8000ac4 <__aeabi_d2iz>
 8009294:	f7f7 f912 	bl	80004bc <__aeabi_i2d>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4620      	mov	r0, r4
 800929e:	4629      	mov	r1, r5
 80092a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80092a4:	f7f6 ffbc 	bl	8000220 <__aeabi_dsub>
 80092a8:	4b18      	ldr	r3, [pc, #96]	; (800930c <__ieee754_rem_pio2+0x404>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	f7f7 f970 	bl	8000590 <__aeabi_dmul>
 80092b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80092b8:	2703      	movs	r7, #3
 80092ba:	2400      	movs	r4, #0
 80092bc:	2500      	movs	r5, #0
 80092be:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80092c2:	4622      	mov	r2, r4
 80092c4:	462b      	mov	r3, r5
 80092c6:	46b9      	mov	r9, r7
 80092c8:	3f01      	subs	r7, #1
 80092ca:	f7f7 fbc9 	bl	8000a60 <__aeabi_dcmpeq>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d1f5      	bne.n	80092be <__ieee754_rem_pio2+0x3b6>
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <__ieee754_rem_pio2+0x408>)
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	2302      	movs	r3, #2
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	4632      	mov	r2, r6
 80092dc:	464b      	mov	r3, r9
 80092de:	4651      	mov	r1, sl
 80092e0:	a804      	add	r0, sp, #16
 80092e2:	f000 f821 	bl	8009328 <__kernel_rem_pio2>
 80092e6:	9b02      	ldr	r3, [sp, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	4683      	mov	fp, r0
 80092ec:	f6bf ae4c 	bge.w	8008f88 <__ieee754_rem_pio2+0x80>
 80092f0:	e9da 2100 	ldrd	r2, r1, [sl]
 80092f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092f8:	e9ca 2300 	strd	r2, r3, [sl]
 80092fc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009304:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009308:	e73f      	b.n	800918a <__ieee754_rem_pio2+0x282>
 800930a:	bf00      	nop
 800930c:	41700000 	.word	0x41700000
 8009310:	0800a01c 	.word	0x0800a01c

08009314 <fabs>:
 8009314:	ec51 0b10 	vmov	r0, r1, d0
 8009318:	ee10 2a10 	vmov	r2, s0
 800931c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009320:	ec43 2b10 	vmov	d0, r2, r3
 8009324:	4770      	bx	lr
	...

08009328 <__kernel_rem_pio2>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	ed2d 8b02 	vpush	{d8}
 8009330:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009334:	f112 0f14 	cmn.w	r2, #20
 8009338:	9306      	str	r3, [sp, #24]
 800933a:	9104      	str	r1, [sp, #16]
 800933c:	4bc2      	ldr	r3, [pc, #776]	; (8009648 <__kernel_rem_pio2+0x320>)
 800933e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009340:	9009      	str	r0, [sp, #36]	; 0x24
 8009342:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	9b06      	ldr	r3, [sp, #24]
 800934a:	f103 33ff 	add.w	r3, r3, #4294967295
 800934e:	bfa8      	it	ge
 8009350:	1ed4      	subge	r4, r2, #3
 8009352:	9305      	str	r3, [sp, #20]
 8009354:	bfb2      	itee	lt
 8009356:	2400      	movlt	r4, #0
 8009358:	2318      	movge	r3, #24
 800935a:	fb94 f4f3 	sdivge	r4, r4, r3
 800935e:	f06f 0317 	mvn.w	r3, #23
 8009362:	fb04 3303 	mla	r3, r4, r3, r3
 8009366:	eb03 0a02 	add.w	sl, r3, r2
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	9a05      	ldr	r2, [sp, #20]
 800936e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8009638 <__kernel_rem_pio2+0x310>
 8009372:	eb03 0802 	add.w	r8, r3, r2
 8009376:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009378:	1aa7      	subs	r7, r4, r2
 800937a:	ae20      	add	r6, sp, #128	; 0x80
 800937c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009380:	2500      	movs	r5, #0
 8009382:	4545      	cmp	r5, r8
 8009384:	dd13      	ble.n	80093ae <__kernel_rem_pio2+0x86>
 8009386:	9b06      	ldr	r3, [sp, #24]
 8009388:	aa20      	add	r2, sp, #128	; 0x80
 800938a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800938e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009392:	f04f 0800 	mov.w	r8, #0
 8009396:	9b00      	ldr	r3, [sp, #0]
 8009398:	4598      	cmp	r8, r3
 800939a:	dc31      	bgt.n	8009400 <__kernel_rem_pio2+0xd8>
 800939c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8009638 <__kernel_rem_pio2+0x310>
 80093a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80093a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093a8:	462f      	mov	r7, r5
 80093aa:	2600      	movs	r6, #0
 80093ac:	e01b      	b.n	80093e6 <__kernel_rem_pio2+0xbe>
 80093ae:	42ef      	cmn	r7, r5
 80093b0:	d407      	bmi.n	80093c2 <__kernel_rem_pio2+0x9a>
 80093b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80093b6:	f7f7 f881 	bl	80004bc <__aeabi_i2d>
 80093ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80093be:	3501      	adds	r5, #1
 80093c0:	e7df      	b.n	8009382 <__kernel_rem_pio2+0x5a>
 80093c2:	ec51 0b18 	vmov	r0, r1, d8
 80093c6:	e7f8      	b.n	80093ba <__kernel_rem_pio2+0x92>
 80093c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80093d0:	f7f7 f8de 	bl	8000590 <__aeabi_dmul>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093dc:	f7f6 ff22 	bl	8000224 <__adddf3>
 80093e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e4:	3601      	adds	r6, #1
 80093e6:	9b05      	ldr	r3, [sp, #20]
 80093e8:	429e      	cmp	r6, r3
 80093ea:	f1a7 0708 	sub.w	r7, r7, #8
 80093ee:	ddeb      	ble.n	80093c8 <__kernel_rem_pio2+0xa0>
 80093f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093f4:	f108 0801 	add.w	r8, r8, #1
 80093f8:	ecab 7b02 	vstmia	fp!, {d7}
 80093fc:	3508      	adds	r5, #8
 80093fe:	e7ca      	b.n	8009396 <__kernel_rem_pio2+0x6e>
 8009400:	9b00      	ldr	r3, [sp, #0]
 8009402:	aa0c      	add	r2, sp, #48	; 0x30
 8009404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009408:	930b      	str	r3, [sp, #44]	; 0x2c
 800940a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800940c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009410:	9c00      	ldr	r4, [sp, #0]
 8009412:	930a      	str	r3, [sp, #40]	; 0x28
 8009414:	00e3      	lsls	r3, r4, #3
 8009416:	9308      	str	r3, [sp, #32]
 8009418:	ab98      	add	r3, sp, #608	; 0x260
 800941a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800941e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009422:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8009426:	ab70      	add	r3, sp, #448	; 0x1c0
 8009428:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800942c:	46c3      	mov	fp, r8
 800942e:	46a1      	mov	r9, r4
 8009430:	f1b9 0f00 	cmp.w	r9, #0
 8009434:	f1a5 0508 	sub.w	r5, r5, #8
 8009438:	dc77      	bgt.n	800952a <__kernel_rem_pio2+0x202>
 800943a:	ec47 6b10 	vmov	d0, r6, r7
 800943e:	4650      	mov	r0, sl
 8009440:	f000 fac2 	bl	80099c8 <scalbn>
 8009444:	ec57 6b10 	vmov	r6, r7, d0
 8009448:	2200      	movs	r2, #0
 800944a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800944e:	ee10 0a10 	vmov	r0, s0
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 f89c 	bl	8000590 <__aeabi_dmul>
 8009458:	ec41 0b10 	vmov	d0, r0, r1
 800945c:	f000 fb34 	bl	8009ac8 <floor>
 8009460:	4b7a      	ldr	r3, [pc, #488]	; (800964c <__kernel_rem_pio2+0x324>)
 8009462:	ec51 0b10 	vmov	r0, r1, d0
 8009466:	2200      	movs	r2, #0
 8009468:	f7f7 f892 	bl	8000590 <__aeabi_dmul>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4630      	mov	r0, r6
 8009472:	4639      	mov	r1, r7
 8009474:	f7f6 fed4 	bl	8000220 <__aeabi_dsub>
 8009478:	460f      	mov	r7, r1
 800947a:	4606      	mov	r6, r0
 800947c:	f7f7 fb22 	bl	8000ac4 <__aeabi_d2iz>
 8009480:	9002      	str	r0, [sp, #8]
 8009482:	f7f7 f81b 	bl	80004bc <__aeabi_i2d>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4630      	mov	r0, r6
 800948c:	4639      	mov	r1, r7
 800948e:	f7f6 fec7 	bl	8000220 <__aeabi_dsub>
 8009492:	f1ba 0f00 	cmp.w	sl, #0
 8009496:	4606      	mov	r6, r0
 8009498:	460f      	mov	r7, r1
 800949a:	dd6d      	ble.n	8009578 <__kernel_rem_pio2+0x250>
 800949c:	1e61      	subs	r1, r4, #1
 800949e:	ab0c      	add	r3, sp, #48	; 0x30
 80094a0:	9d02      	ldr	r5, [sp, #8]
 80094a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094a6:	f1ca 0018 	rsb	r0, sl, #24
 80094aa:	fa43 f200 	asr.w	r2, r3, r0
 80094ae:	4415      	add	r5, r2
 80094b0:	4082      	lsls	r2, r0
 80094b2:	1a9b      	subs	r3, r3, r2
 80094b4:	aa0c      	add	r2, sp, #48	; 0x30
 80094b6:	9502      	str	r5, [sp, #8]
 80094b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80094bc:	f1ca 0217 	rsb	r2, sl, #23
 80094c0:	fa43 fb02 	asr.w	fp, r3, r2
 80094c4:	f1bb 0f00 	cmp.w	fp, #0
 80094c8:	dd65      	ble.n	8009596 <__kernel_rem_pio2+0x26e>
 80094ca:	9b02      	ldr	r3, [sp, #8]
 80094cc:	2200      	movs	r2, #0
 80094ce:	3301      	adds	r3, #1
 80094d0:	9302      	str	r3, [sp, #8]
 80094d2:	4615      	mov	r5, r2
 80094d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80094d8:	4294      	cmp	r4, r2
 80094da:	f300 809f 	bgt.w	800961c <__kernel_rem_pio2+0x2f4>
 80094de:	f1ba 0f00 	cmp.w	sl, #0
 80094e2:	dd07      	ble.n	80094f4 <__kernel_rem_pio2+0x1cc>
 80094e4:	f1ba 0f01 	cmp.w	sl, #1
 80094e8:	f000 80c1 	beq.w	800966e <__kernel_rem_pio2+0x346>
 80094ec:	f1ba 0f02 	cmp.w	sl, #2
 80094f0:	f000 80c7 	beq.w	8009682 <__kernel_rem_pio2+0x35a>
 80094f4:	f1bb 0f02 	cmp.w	fp, #2
 80094f8:	d14d      	bne.n	8009596 <__kernel_rem_pio2+0x26e>
 80094fa:	4632      	mov	r2, r6
 80094fc:	463b      	mov	r3, r7
 80094fe:	4954      	ldr	r1, [pc, #336]	; (8009650 <__kernel_rem_pio2+0x328>)
 8009500:	2000      	movs	r0, #0
 8009502:	f7f6 fe8d 	bl	8000220 <__aeabi_dsub>
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
 800950a:	2d00      	cmp	r5, #0
 800950c:	d043      	beq.n	8009596 <__kernel_rem_pio2+0x26e>
 800950e:	4650      	mov	r0, sl
 8009510:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8009640 <__kernel_rem_pio2+0x318>
 8009514:	f000 fa58 	bl	80099c8 <scalbn>
 8009518:	4630      	mov	r0, r6
 800951a:	4639      	mov	r1, r7
 800951c:	ec53 2b10 	vmov	r2, r3, d0
 8009520:	f7f6 fe7e 	bl	8000220 <__aeabi_dsub>
 8009524:	4606      	mov	r6, r0
 8009526:	460f      	mov	r7, r1
 8009528:	e035      	b.n	8009596 <__kernel_rem_pio2+0x26e>
 800952a:	4b4a      	ldr	r3, [pc, #296]	; (8009654 <__kernel_rem_pio2+0x32c>)
 800952c:	2200      	movs	r2, #0
 800952e:	4630      	mov	r0, r6
 8009530:	4639      	mov	r1, r7
 8009532:	f7f7 f82d 	bl	8000590 <__aeabi_dmul>
 8009536:	f7f7 fac5 	bl	8000ac4 <__aeabi_d2iz>
 800953a:	f7f6 ffbf 	bl	80004bc <__aeabi_i2d>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	ec43 2b18 	vmov	d8, r2, r3
 8009546:	4b44      	ldr	r3, [pc, #272]	; (8009658 <__kernel_rem_pio2+0x330>)
 8009548:	2200      	movs	r2, #0
 800954a:	f7f7 f821 	bl	8000590 <__aeabi_dmul>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4630      	mov	r0, r6
 8009554:	4639      	mov	r1, r7
 8009556:	f7f6 fe63 	bl	8000220 <__aeabi_dsub>
 800955a:	f7f7 fab3 	bl	8000ac4 <__aeabi_d2iz>
 800955e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009562:	f84b 0b04 	str.w	r0, [fp], #4
 8009566:	ec51 0b18 	vmov	r0, r1, d8
 800956a:	f7f6 fe5b 	bl	8000224 <__adddf3>
 800956e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	e75b      	b.n	8009430 <__kernel_rem_pio2+0x108>
 8009578:	d106      	bne.n	8009588 <__kernel_rem_pio2+0x260>
 800957a:	1e63      	subs	r3, r4, #1
 800957c:	aa0c      	add	r2, sp, #48	; 0x30
 800957e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009582:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8009586:	e79d      	b.n	80094c4 <__kernel_rem_pio2+0x19c>
 8009588:	4b34      	ldr	r3, [pc, #208]	; (800965c <__kernel_rem_pio2+0x334>)
 800958a:	2200      	movs	r2, #0
 800958c:	f7f7 fa86 	bl	8000a9c <__aeabi_dcmpge>
 8009590:	2800      	cmp	r0, #0
 8009592:	d140      	bne.n	8009616 <__kernel_rem_pio2+0x2ee>
 8009594:	4683      	mov	fp, r0
 8009596:	2200      	movs	r2, #0
 8009598:	2300      	movs	r3, #0
 800959a:	4630      	mov	r0, r6
 800959c:	4639      	mov	r1, r7
 800959e:	f7f7 fa5f 	bl	8000a60 <__aeabi_dcmpeq>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	f000 80c1 	beq.w	800972a <__kernel_rem_pio2+0x402>
 80095a8:	1e65      	subs	r5, r4, #1
 80095aa:	462b      	mov	r3, r5
 80095ac:	2200      	movs	r2, #0
 80095ae:	9900      	ldr	r1, [sp, #0]
 80095b0:	428b      	cmp	r3, r1
 80095b2:	da6d      	bge.n	8009690 <__kernel_rem_pio2+0x368>
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	f000 808a 	beq.w	80096ce <__kernel_rem_pio2+0x3a6>
 80095ba:	ab0c      	add	r3, sp, #48	; 0x30
 80095bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80095c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 80ae 	beq.w	8009726 <__kernel_rem_pio2+0x3fe>
 80095ca:	4650      	mov	r0, sl
 80095cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009640 <__kernel_rem_pio2+0x318>
 80095d0:	f000 f9fa 	bl	80099c8 <scalbn>
 80095d4:	1c6b      	adds	r3, r5, #1
 80095d6:	00da      	lsls	r2, r3, #3
 80095d8:	9205      	str	r2, [sp, #20]
 80095da:	ec57 6b10 	vmov	r6, r7, d0
 80095de:	aa70      	add	r2, sp, #448	; 0x1c0
 80095e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8009654 <__kernel_rem_pio2+0x32c>
 80095e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80095e8:	462c      	mov	r4, r5
 80095ea:	f04f 0800 	mov.w	r8, #0
 80095ee:	2c00      	cmp	r4, #0
 80095f0:	f280 80d4 	bge.w	800979c <__kernel_rem_pio2+0x474>
 80095f4:	462c      	mov	r4, r5
 80095f6:	2c00      	cmp	r4, #0
 80095f8:	f2c0 8102 	blt.w	8009800 <__kernel_rem_pio2+0x4d8>
 80095fc:	4b18      	ldr	r3, [pc, #96]	; (8009660 <__kernel_rem_pio2+0x338>)
 80095fe:	461e      	mov	r6, r3
 8009600:	ab70      	add	r3, sp, #448	; 0x1c0
 8009602:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8009606:	1b2b      	subs	r3, r5, r4
 8009608:	f04f 0900 	mov.w	r9, #0
 800960c:	f04f 0a00 	mov.w	sl, #0
 8009610:	2700      	movs	r7, #0
 8009612:	9306      	str	r3, [sp, #24]
 8009614:	e0e6      	b.n	80097e4 <__kernel_rem_pio2+0x4bc>
 8009616:	f04f 0b02 	mov.w	fp, #2
 800961a:	e756      	b.n	80094ca <__kernel_rem_pio2+0x1a2>
 800961c:	f8d8 3000 	ldr.w	r3, [r8]
 8009620:	bb05      	cbnz	r5, 8009664 <__kernel_rem_pio2+0x33c>
 8009622:	b123      	cbz	r3, 800962e <__kernel_rem_pio2+0x306>
 8009624:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009628:	f8c8 3000 	str.w	r3, [r8]
 800962c:	2301      	movs	r3, #1
 800962e:	3201      	adds	r2, #1
 8009630:	f108 0804 	add.w	r8, r8, #4
 8009634:	461d      	mov	r5, r3
 8009636:	e74f      	b.n	80094d8 <__kernel_rem_pio2+0x1b0>
	...
 8009644:	3ff00000 	.word	0x3ff00000
 8009648:	0800a168 	.word	0x0800a168
 800964c:	40200000 	.word	0x40200000
 8009650:	3ff00000 	.word	0x3ff00000
 8009654:	3e700000 	.word	0x3e700000
 8009658:	41700000 	.word	0x41700000
 800965c:	3fe00000 	.word	0x3fe00000
 8009660:	0800a128 	.word	0x0800a128
 8009664:	1acb      	subs	r3, r1, r3
 8009666:	f8c8 3000 	str.w	r3, [r8]
 800966a:	462b      	mov	r3, r5
 800966c:	e7df      	b.n	800962e <__kernel_rem_pio2+0x306>
 800966e:	1e62      	subs	r2, r4, #1
 8009670:	ab0c      	add	r3, sp, #48	; 0x30
 8009672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009676:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800967a:	a90c      	add	r1, sp, #48	; 0x30
 800967c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009680:	e738      	b.n	80094f4 <__kernel_rem_pio2+0x1cc>
 8009682:	1e62      	subs	r2, r4, #1
 8009684:	ab0c      	add	r3, sp, #48	; 0x30
 8009686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800968e:	e7f4      	b.n	800967a <__kernel_rem_pio2+0x352>
 8009690:	a90c      	add	r1, sp, #48	; 0x30
 8009692:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009696:	3b01      	subs	r3, #1
 8009698:	430a      	orrs	r2, r1
 800969a:	e788      	b.n	80095ae <__kernel_rem_pio2+0x286>
 800969c:	3301      	adds	r3, #1
 800969e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80096a2:	2900      	cmp	r1, #0
 80096a4:	d0fa      	beq.n	800969c <__kernel_rem_pio2+0x374>
 80096a6:	9a08      	ldr	r2, [sp, #32]
 80096a8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80096ac:	446a      	add	r2, sp
 80096ae:	3a98      	subs	r2, #152	; 0x98
 80096b0:	9208      	str	r2, [sp, #32]
 80096b2:	9a06      	ldr	r2, [sp, #24]
 80096b4:	a920      	add	r1, sp, #128	; 0x80
 80096b6:	18a2      	adds	r2, r4, r2
 80096b8:	18e3      	adds	r3, r4, r3
 80096ba:	f104 0801 	add.w	r8, r4, #1
 80096be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80096c2:	9302      	str	r3, [sp, #8]
 80096c4:	9b02      	ldr	r3, [sp, #8]
 80096c6:	4543      	cmp	r3, r8
 80096c8:	da04      	bge.n	80096d4 <__kernel_rem_pio2+0x3ac>
 80096ca:	461c      	mov	r4, r3
 80096cc:	e6a2      	b.n	8009414 <__kernel_rem_pio2+0xec>
 80096ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096d0:	2301      	movs	r3, #1
 80096d2:	e7e4      	b.n	800969e <__kernel_rem_pio2+0x376>
 80096d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80096da:	f7f6 feef 	bl	80004bc <__aeabi_i2d>
 80096de:	e8e5 0102 	strd	r0, r1, [r5], #8
 80096e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e4:	46ab      	mov	fp, r5
 80096e6:	461c      	mov	r4, r3
 80096e8:	f04f 0900 	mov.w	r9, #0
 80096ec:	2600      	movs	r6, #0
 80096ee:	2700      	movs	r7, #0
 80096f0:	9b05      	ldr	r3, [sp, #20]
 80096f2:	4599      	cmp	r9, r3
 80096f4:	dd06      	ble.n	8009704 <__kernel_rem_pio2+0x3dc>
 80096f6:	9b08      	ldr	r3, [sp, #32]
 80096f8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80096fc:	f108 0801 	add.w	r8, r8, #1
 8009700:	9308      	str	r3, [sp, #32]
 8009702:	e7df      	b.n	80096c4 <__kernel_rem_pio2+0x39c>
 8009704:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009708:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800970c:	f7f6 ff40 	bl	8000590 <__aeabi_dmul>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4630      	mov	r0, r6
 8009716:	4639      	mov	r1, r7
 8009718:	f7f6 fd84 	bl	8000224 <__adddf3>
 800971c:	f109 0901 	add.w	r9, r9, #1
 8009720:	4606      	mov	r6, r0
 8009722:	460f      	mov	r7, r1
 8009724:	e7e4      	b.n	80096f0 <__kernel_rem_pio2+0x3c8>
 8009726:	3d01      	subs	r5, #1
 8009728:	e747      	b.n	80095ba <__kernel_rem_pio2+0x292>
 800972a:	ec47 6b10 	vmov	d0, r6, r7
 800972e:	f1ca 0000 	rsb	r0, sl, #0
 8009732:	f000 f949 	bl	80099c8 <scalbn>
 8009736:	ec57 6b10 	vmov	r6, r7, d0
 800973a:	4ba0      	ldr	r3, [pc, #640]	; (80099bc <__kernel_rem_pio2+0x694>)
 800973c:	ee10 0a10 	vmov	r0, s0
 8009740:	2200      	movs	r2, #0
 8009742:	4639      	mov	r1, r7
 8009744:	f7f7 f9aa 	bl	8000a9c <__aeabi_dcmpge>
 8009748:	b1f8      	cbz	r0, 800978a <__kernel_rem_pio2+0x462>
 800974a:	4b9d      	ldr	r3, [pc, #628]	; (80099c0 <__kernel_rem_pio2+0x698>)
 800974c:	2200      	movs	r2, #0
 800974e:	4630      	mov	r0, r6
 8009750:	4639      	mov	r1, r7
 8009752:	f7f6 ff1d 	bl	8000590 <__aeabi_dmul>
 8009756:	f7f7 f9b5 	bl	8000ac4 <__aeabi_d2iz>
 800975a:	4680      	mov	r8, r0
 800975c:	f7f6 feae 	bl	80004bc <__aeabi_i2d>
 8009760:	4b96      	ldr	r3, [pc, #600]	; (80099bc <__kernel_rem_pio2+0x694>)
 8009762:	2200      	movs	r2, #0
 8009764:	f7f6 ff14 	bl	8000590 <__aeabi_dmul>
 8009768:	460b      	mov	r3, r1
 800976a:	4602      	mov	r2, r0
 800976c:	4639      	mov	r1, r7
 800976e:	4630      	mov	r0, r6
 8009770:	f7f6 fd56 	bl	8000220 <__aeabi_dsub>
 8009774:	f7f7 f9a6 	bl	8000ac4 <__aeabi_d2iz>
 8009778:	1c65      	adds	r5, r4, #1
 800977a:	ab0c      	add	r3, sp, #48	; 0x30
 800977c:	f10a 0a18 	add.w	sl, sl, #24
 8009780:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009784:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009788:	e71f      	b.n	80095ca <__kernel_rem_pio2+0x2a2>
 800978a:	4630      	mov	r0, r6
 800978c:	4639      	mov	r1, r7
 800978e:	f7f7 f999 	bl	8000ac4 <__aeabi_d2iz>
 8009792:	ab0c      	add	r3, sp, #48	; 0x30
 8009794:	4625      	mov	r5, r4
 8009796:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800979a:	e716      	b.n	80095ca <__kernel_rem_pio2+0x2a2>
 800979c:	ab0c      	add	r3, sp, #48	; 0x30
 800979e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80097a2:	f7f6 fe8b 	bl	80004bc <__aeabi_i2d>
 80097a6:	4632      	mov	r2, r6
 80097a8:	463b      	mov	r3, r7
 80097aa:	f7f6 fef1 	bl	8000590 <__aeabi_dmul>
 80097ae:	4642      	mov	r2, r8
 80097b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80097b4:	464b      	mov	r3, r9
 80097b6:	4630      	mov	r0, r6
 80097b8:	4639      	mov	r1, r7
 80097ba:	f7f6 fee9 	bl	8000590 <__aeabi_dmul>
 80097be:	3c01      	subs	r4, #1
 80097c0:	4606      	mov	r6, r0
 80097c2:	460f      	mov	r7, r1
 80097c4:	e713      	b.n	80095ee <__kernel_rem_pio2+0x2c6>
 80097c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80097ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80097ce:	f7f6 fedf 	bl	8000590 <__aeabi_dmul>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4648      	mov	r0, r9
 80097d8:	4651      	mov	r1, sl
 80097da:	f7f6 fd23 	bl	8000224 <__adddf3>
 80097de:	3701      	adds	r7, #1
 80097e0:	4681      	mov	r9, r0
 80097e2:	468a      	mov	sl, r1
 80097e4:	9b00      	ldr	r3, [sp, #0]
 80097e6:	429f      	cmp	r7, r3
 80097e8:	dc02      	bgt.n	80097f0 <__kernel_rem_pio2+0x4c8>
 80097ea:	9b06      	ldr	r3, [sp, #24]
 80097ec:	429f      	cmp	r7, r3
 80097ee:	ddea      	ble.n	80097c6 <__kernel_rem_pio2+0x49e>
 80097f0:	9a06      	ldr	r2, [sp, #24]
 80097f2:	ab48      	add	r3, sp, #288	; 0x120
 80097f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80097f8:	e9c6 9a00 	strd	r9, sl, [r6]
 80097fc:	3c01      	subs	r4, #1
 80097fe:	e6fa      	b.n	80095f6 <__kernel_rem_pio2+0x2ce>
 8009800:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009802:	2b02      	cmp	r3, #2
 8009804:	dc0b      	bgt.n	800981e <__kernel_rem_pio2+0x4f6>
 8009806:	2b00      	cmp	r3, #0
 8009808:	dc39      	bgt.n	800987e <__kernel_rem_pio2+0x556>
 800980a:	d05d      	beq.n	80098c8 <__kernel_rem_pio2+0x5a0>
 800980c:	9b02      	ldr	r3, [sp, #8]
 800980e:	f003 0007 	and.w	r0, r3, #7
 8009812:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009816:	ecbd 8b02 	vpop	{d8}
 800981a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009820:	2b03      	cmp	r3, #3
 8009822:	d1f3      	bne.n	800980c <__kernel_rem_pio2+0x4e4>
 8009824:	9b05      	ldr	r3, [sp, #20]
 8009826:	9500      	str	r5, [sp, #0]
 8009828:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800982c:	eb0d 0403 	add.w	r4, sp, r3
 8009830:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009834:	46a2      	mov	sl, r4
 8009836:	9b00      	ldr	r3, [sp, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	f1aa 0a08 	sub.w	sl, sl, #8
 800983e:	dc69      	bgt.n	8009914 <__kernel_rem_pio2+0x5ec>
 8009840:	46aa      	mov	sl, r5
 8009842:	f1ba 0f01 	cmp.w	sl, #1
 8009846:	f1a4 0408 	sub.w	r4, r4, #8
 800984a:	f300 8083 	bgt.w	8009954 <__kernel_rem_pio2+0x62c>
 800984e:	9c05      	ldr	r4, [sp, #20]
 8009850:	ab48      	add	r3, sp, #288	; 0x120
 8009852:	441c      	add	r4, r3
 8009854:	2000      	movs	r0, #0
 8009856:	2100      	movs	r1, #0
 8009858:	2d01      	cmp	r5, #1
 800985a:	f300 809a 	bgt.w	8009992 <__kernel_rem_pio2+0x66a>
 800985e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009862:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009866:	f1bb 0f00 	cmp.w	fp, #0
 800986a:	f040 8098 	bne.w	800999e <__kernel_rem_pio2+0x676>
 800986e:	9b04      	ldr	r3, [sp, #16]
 8009870:	e9c3 7800 	strd	r7, r8, [r3]
 8009874:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009878:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800987c:	e7c6      	b.n	800980c <__kernel_rem_pio2+0x4e4>
 800987e:	9e05      	ldr	r6, [sp, #20]
 8009880:	ab48      	add	r3, sp, #288	; 0x120
 8009882:	441e      	add	r6, r3
 8009884:	462c      	mov	r4, r5
 8009886:	2000      	movs	r0, #0
 8009888:	2100      	movs	r1, #0
 800988a:	2c00      	cmp	r4, #0
 800988c:	da33      	bge.n	80098f6 <__kernel_rem_pio2+0x5ce>
 800988e:	f1bb 0f00 	cmp.w	fp, #0
 8009892:	d036      	beq.n	8009902 <__kernel_rem_pio2+0x5da>
 8009894:	4602      	mov	r2, r0
 8009896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800989a:	9c04      	ldr	r4, [sp, #16]
 800989c:	e9c4 2300 	strd	r2, r3, [r4]
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80098a8:	f7f6 fcba 	bl	8000220 <__aeabi_dsub>
 80098ac:	ae4a      	add	r6, sp, #296	; 0x128
 80098ae:	2401      	movs	r4, #1
 80098b0:	42a5      	cmp	r5, r4
 80098b2:	da29      	bge.n	8009908 <__kernel_rem_pio2+0x5e0>
 80098b4:	f1bb 0f00 	cmp.w	fp, #0
 80098b8:	d002      	beq.n	80098c0 <__kernel_rem_pio2+0x598>
 80098ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098be:	4619      	mov	r1, r3
 80098c0:	9b04      	ldr	r3, [sp, #16]
 80098c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80098c6:	e7a1      	b.n	800980c <__kernel_rem_pio2+0x4e4>
 80098c8:	9c05      	ldr	r4, [sp, #20]
 80098ca:	ab48      	add	r3, sp, #288	; 0x120
 80098cc:	441c      	add	r4, r3
 80098ce:	2000      	movs	r0, #0
 80098d0:	2100      	movs	r1, #0
 80098d2:	2d00      	cmp	r5, #0
 80098d4:	da09      	bge.n	80098ea <__kernel_rem_pio2+0x5c2>
 80098d6:	f1bb 0f00 	cmp.w	fp, #0
 80098da:	d002      	beq.n	80098e2 <__kernel_rem_pio2+0x5ba>
 80098dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098e0:	4619      	mov	r1, r3
 80098e2:	9b04      	ldr	r3, [sp, #16]
 80098e4:	e9c3 0100 	strd	r0, r1, [r3]
 80098e8:	e790      	b.n	800980c <__kernel_rem_pio2+0x4e4>
 80098ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80098ee:	f7f6 fc99 	bl	8000224 <__adddf3>
 80098f2:	3d01      	subs	r5, #1
 80098f4:	e7ed      	b.n	80098d2 <__kernel_rem_pio2+0x5aa>
 80098f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80098fa:	f7f6 fc93 	bl	8000224 <__adddf3>
 80098fe:	3c01      	subs	r4, #1
 8009900:	e7c3      	b.n	800988a <__kernel_rem_pio2+0x562>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	e7c8      	b.n	800989a <__kernel_rem_pio2+0x572>
 8009908:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800990c:	f7f6 fc8a 	bl	8000224 <__adddf3>
 8009910:	3401      	adds	r4, #1
 8009912:	e7cd      	b.n	80098b0 <__kernel_rem_pio2+0x588>
 8009914:	e9da 8900 	ldrd	r8, r9, [sl]
 8009918:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800991c:	9b00      	ldr	r3, [sp, #0]
 800991e:	3b01      	subs	r3, #1
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	4632      	mov	r2, r6
 8009924:	463b      	mov	r3, r7
 8009926:	4640      	mov	r0, r8
 8009928:	4649      	mov	r1, r9
 800992a:	f7f6 fc7b 	bl	8000224 <__adddf3>
 800992e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4640      	mov	r0, r8
 8009938:	4649      	mov	r1, r9
 800993a:	f7f6 fc71 	bl	8000220 <__aeabi_dsub>
 800993e:	4632      	mov	r2, r6
 8009940:	463b      	mov	r3, r7
 8009942:	f7f6 fc6f 	bl	8000224 <__adddf3>
 8009946:	ed9d 7b06 	vldr	d7, [sp, #24]
 800994a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800994e:	ed8a 7b00 	vstr	d7, [sl]
 8009952:	e770      	b.n	8009836 <__kernel_rem_pio2+0x50e>
 8009954:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009958:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800995c:	4640      	mov	r0, r8
 800995e:	4632      	mov	r2, r6
 8009960:	463b      	mov	r3, r7
 8009962:	4649      	mov	r1, r9
 8009964:	f7f6 fc5e 	bl	8000224 <__adddf3>
 8009968:	e9cd 0100 	strd	r0, r1, [sp]
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4640      	mov	r0, r8
 8009972:	4649      	mov	r1, r9
 8009974:	f7f6 fc54 	bl	8000220 <__aeabi_dsub>
 8009978:	4632      	mov	r2, r6
 800997a:	463b      	mov	r3, r7
 800997c:	f7f6 fc52 	bl	8000224 <__adddf3>
 8009980:	ed9d 7b00 	vldr	d7, [sp]
 8009984:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009988:	ed84 7b00 	vstr	d7, [r4]
 800998c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009990:	e757      	b.n	8009842 <__kernel_rem_pio2+0x51a>
 8009992:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009996:	f7f6 fc45 	bl	8000224 <__adddf3>
 800999a:	3d01      	subs	r5, #1
 800999c:	e75c      	b.n	8009858 <__kernel_rem_pio2+0x530>
 800999e:	9b04      	ldr	r3, [sp, #16]
 80099a0:	9a04      	ldr	r2, [sp, #16]
 80099a2:	601f      	str	r7, [r3, #0]
 80099a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80099a8:	605c      	str	r4, [r3, #4]
 80099aa:	609d      	str	r5, [r3, #8]
 80099ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80099b0:	60d3      	str	r3, [r2, #12]
 80099b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099b6:	6110      	str	r0, [r2, #16]
 80099b8:	6153      	str	r3, [r2, #20]
 80099ba:	e727      	b.n	800980c <__kernel_rem_pio2+0x4e4>
 80099bc:	41700000 	.word	0x41700000
 80099c0:	3e700000 	.word	0x3e700000
 80099c4:	00000000 	.word	0x00000000

080099c8 <scalbn>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	ec55 4b10 	vmov	r4, r5, d0
 80099ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80099d2:	4606      	mov	r6, r0
 80099d4:	462b      	mov	r3, r5
 80099d6:	b999      	cbnz	r1, 8009a00 <scalbn+0x38>
 80099d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80099dc:	4323      	orrs	r3, r4
 80099de:	d03f      	beq.n	8009a60 <scalbn+0x98>
 80099e0:	4b35      	ldr	r3, [pc, #212]	; (8009ab8 <scalbn+0xf0>)
 80099e2:	4629      	mov	r1, r5
 80099e4:	ee10 0a10 	vmov	r0, s0
 80099e8:	2200      	movs	r2, #0
 80099ea:	f7f6 fdd1 	bl	8000590 <__aeabi_dmul>
 80099ee:	4b33      	ldr	r3, [pc, #204]	; (8009abc <scalbn+0xf4>)
 80099f0:	429e      	cmp	r6, r3
 80099f2:	4604      	mov	r4, r0
 80099f4:	460d      	mov	r5, r1
 80099f6:	da10      	bge.n	8009a1a <scalbn+0x52>
 80099f8:	a327      	add	r3, pc, #156	; (adr r3, 8009a98 <scalbn+0xd0>)
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	e01f      	b.n	8009a40 <scalbn+0x78>
 8009a00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009a04:	4291      	cmp	r1, r2
 8009a06:	d10c      	bne.n	8009a22 <scalbn+0x5a>
 8009a08:	ee10 2a10 	vmov	r2, s0
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	4629      	mov	r1, r5
 8009a10:	f7f6 fc08 	bl	8000224 <__adddf3>
 8009a14:	4604      	mov	r4, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	e022      	b.n	8009a60 <scalbn+0x98>
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009a20:	3936      	subs	r1, #54	; 0x36
 8009a22:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009a26:	4296      	cmp	r6, r2
 8009a28:	dd0d      	ble.n	8009a46 <scalbn+0x7e>
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	a11c      	add	r1, pc, #112	; (adr r1, 8009aa0 <scalbn+0xd8>)
 8009a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a32:	da02      	bge.n	8009a3a <scalbn+0x72>
 8009a34:	a11c      	add	r1, pc, #112	; (adr r1, 8009aa8 <scalbn+0xe0>)
 8009a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a3a:	a319      	add	r3, pc, #100	; (adr r3, 8009aa0 <scalbn+0xd8>)
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f7f6 fda6 	bl	8000590 <__aeabi_dmul>
 8009a44:	e7e6      	b.n	8009a14 <scalbn+0x4c>
 8009a46:	1872      	adds	r2, r6, r1
 8009a48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009a4c:	428a      	cmp	r2, r1
 8009a4e:	dcec      	bgt.n	8009a2a <scalbn+0x62>
 8009a50:	2a00      	cmp	r2, #0
 8009a52:	dd08      	ble.n	8009a66 <scalbn+0x9e>
 8009a54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a60:	ec45 4b10 	vmov	d0, r4, r5
 8009a64:	bd70      	pop	{r4, r5, r6, pc}
 8009a66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009a6a:	da08      	bge.n	8009a7e <scalbn+0xb6>
 8009a6c:	2d00      	cmp	r5, #0
 8009a6e:	a10a      	add	r1, pc, #40	; (adr r1, 8009a98 <scalbn+0xd0>)
 8009a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a74:	dac0      	bge.n	80099f8 <scalbn+0x30>
 8009a76:	a10e      	add	r1, pc, #56	; (adr r1, 8009ab0 <scalbn+0xe8>)
 8009a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a7c:	e7bc      	b.n	80099f8 <scalbn+0x30>
 8009a7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a82:	3236      	adds	r2, #54	; 0x36
 8009a84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4b0c      	ldr	r3, [pc, #48]	; (8009ac0 <scalbn+0xf8>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	e7d5      	b.n	8009a40 <scalbn+0x78>
 8009a94:	f3af 8000 	nop.w
 8009a98:	c2f8f359 	.word	0xc2f8f359
 8009a9c:	01a56e1f 	.word	0x01a56e1f
 8009aa0:	8800759c 	.word	0x8800759c
 8009aa4:	7e37e43c 	.word	0x7e37e43c
 8009aa8:	8800759c 	.word	0x8800759c
 8009aac:	fe37e43c 	.word	0xfe37e43c
 8009ab0:	c2f8f359 	.word	0xc2f8f359
 8009ab4:	81a56e1f 	.word	0x81a56e1f
 8009ab8:	43500000 	.word	0x43500000
 8009abc:	ffff3cb0 	.word	0xffff3cb0
 8009ac0:	3c900000 	.word	0x3c900000
 8009ac4:	00000000 	.word	0x00000000

08009ac8 <floor>:
 8009ac8:	ec51 0b10 	vmov	r0, r1, d0
 8009acc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009ad8:	2e13      	cmp	r6, #19
 8009ada:	ee10 5a10 	vmov	r5, s0
 8009ade:	ee10 8a10 	vmov	r8, s0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	dc31      	bgt.n	8009b4a <floor+0x82>
 8009ae6:	2e00      	cmp	r6, #0
 8009ae8:	da14      	bge.n	8009b14 <floor+0x4c>
 8009aea:	a333      	add	r3, pc, #204	; (adr r3, 8009bb8 <floor+0xf0>)
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f7f6 fb98 	bl	8000224 <__adddf3>
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	f7f6 ffda 	bl	8000ab0 <__aeabi_dcmpgt>
 8009afc:	b138      	cbz	r0, 8009b0e <floor+0x46>
 8009afe:	2c00      	cmp	r4, #0
 8009b00:	da53      	bge.n	8009baa <floor+0xe2>
 8009b02:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009b06:	4325      	orrs	r5, r4
 8009b08:	d052      	beq.n	8009bb0 <floor+0xe8>
 8009b0a:	4c2d      	ldr	r4, [pc, #180]	; (8009bc0 <floor+0xf8>)
 8009b0c:	2500      	movs	r5, #0
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4628      	mov	r0, r5
 8009b12:	e024      	b.n	8009b5e <floor+0x96>
 8009b14:	4f2b      	ldr	r7, [pc, #172]	; (8009bc4 <floor+0xfc>)
 8009b16:	4137      	asrs	r7, r6
 8009b18:	ea01 0307 	and.w	r3, r1, r7
 8009b1c:	4303      	orrs	r3, r0
 8009b1e:	d01e      	beq.n	8009b5e <floor+0x96>
 8009b20:	a325      	add	r3, pc, #148	; (adr r3, 8009bb8 <floor+0xf0>)
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	f7f6 fb7d 	bl	8000224 <__adddf3>
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f7f6 ffbf 	bl	8000ab0 <__aeabi_dcmpgt>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d0eb      	beq.n	8009b0e <floor+0x46>
 8009b36:	2c00      	cmp	r4, #0
 8009b38:	bfbe      	ittt	lt
 8009b3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009b3e:	4133      	asrlt	r3, r6
 8009b40:	18e4      	addlt	r4, r4, r3
 8009b42:	ea24 0407 	bic.w	r4, r4, r7
 8009b46:	2500      	movs	r5, #0
 8009b48:	e7e1      	b.n	8009b0e <floor+0x46>
 8009b4a:	2e33      	cmp	r6, #51	; 0x33
 8009b4c:	dd0b      	ble.n	8009b66 <floor+0x9e>
 8009b4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009b52:	d104      	bne.n	8009b5e <floor+0x96>
 8009b54:	ee10 2a10 	vmov	r2, s0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	f7f6 fb63 	bl	8000224 <__adddf3>
 8009b5e:	ec41 0b10 	vmov	d0, r0, r1
 8009b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b66:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009b6a:	f04f 37ff 	mov.w	r7, #4294967295
 8009b6e:	40df      	lsrs	r7, r3
 8009b70:	4238      	tst	r0, r7
 8009b72:	d0f4      	beq.n	8009b5e <floor+0x96>
 8009b74:	a310      	add	r3, pc, #64	; (adr r3, 8009bb8 <floor+0xf0>)
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fb53 	bl	8000224 <__adddf3>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2300      	movs	r3, #0
 8009b82:	f7f6 ff95 	bl	8000ab0 <__aeabi_dcmpgt>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0c1      	beq.n	8009b0e <floor+0x46>
 8009b8a:	2c00      	cmp	r4, #0
 8009b8c:	da0a      	bge.n	8009ba4 <floor+0xdc>
 8009b8e:	2e14      	cmp	r6, #20
 8009b90:	d101      	bne.n	8009b96 <floor+0xce>
 8009b92:	3401      	adds	r4, #1
 8009b94:	e006      	b.n	8009ba4 <floor+0xdc>
 8009b96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	40b3      	lsls	r3, r6
 8009b9e:	441d      	add	r5, r3
 8009ba0:	45a8      	cmp	r8, r5
 8009ba2:	d8f6      	bhi.n	8009b92 <floor+0xca>
 8009ba4:	ea25 0507 	bic.w	r5, r5, r7
 8009ba8:	e7b1      	b.n	8009b0e <floor+0x46>
 8009baa:	2500      	movs	r5, #0
 8009bac:	462c      	mov	r4, r5
 8009bae:	e7ae      	b.n	8009b0e <floor+0x46>
 8009bb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009bb4:	e7ab      	b.n	8009b0e <floor+0x46>
 8009bb6:	bf00      	nop
 8009bb8:	8800759c 	.word	0x8800759c
 8009bbc:	7e37e43c 	.word	0x7e37e43c
 8009bc0:	bff00000 	.word	0xbff00000
 8009bc4:	000fffff 	.word	0x000fffff

08009bc8 <abort>:
 8009bc8:	b508      	push	{r3, lr}
 8009bca:	2006      	movs	r0, #6
 8009bcc:	f000 f90a 	bl	8009de4 <raise>
 8009bd0:	2001      	movs	r0, #1
 8009bd2:	f7f9 fd1b 	bl	800360c <_exit>
	...

08009bd8 <malloc>:
 8009bd8:	4b02      	ldr	r3, [pc, #8]	; (8009be4 <malloc+0xc>)
 8009bda:	4601      	mov	r1, r0
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	f000 b82b 	b.w	8009c38 <_malloc_r>
 8009be2:	bf00      	nop
 8009be4:	20000058 	.word	0x20000058

08009be8 <free>:
 8009be8:	4b02      	ldr	r3, [pc, #8]	; (8009bf4 <free+0xc>)
 8009bea:	4601      	mov	r1, r0
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	f000 b951 	b.w	8009e94 <_free_r>
 8009bf2:	bf00      	nop
 8009bf4:	20000058 	.word	0x20000058

08009bf8 <sbrk_aligned>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	4e0e      	ldr	r6, [pc, #56]	; (8009c34 <sbrk_aligned+0x3c>)
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	6831      	ldr	r1, [r6, #0]
 8009c00:	4605      	mov	r5, r0
 8009c02:	b911      	cbnz	r1, 8009c0a <sbrk_aligned+0x12>
 8009c04:	f000 f90a 	bl	8009e1c <_sbrk_r>
 8009c08:	6030      	str	r0, [r6, #0]
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f000 f905 	bl	8009e1c <_sbrk_r>
 8009c12:	1c43      	adds	r3, r0, #1
 8009c14:	d00a      	beq.n	8009c2c <sbrk_aligned+0x34>
 8009c16:	1cc4      	adds	r4, r0, #3
 8009c18:	f024 0403 	bic.w	r4, r4, #3
 8009c1c:	42a0      	cmp	r0, r4
 8009c1e:	d007      	beq.n	8009c30 <sbrk_aligned+0x38>
 8009c20:	1a21      	subs	r1, r4, r0
 8009c22:	4628      	mov	r0, r5
 8009c24:	f000 f8fa 	bl	8009e1c <_sbrk_r>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d101      	bne.n	8009c30 <sbrk_aligned+0x38>
 8009c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8009c30:	4620      	mov	r0, r4
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	200003a4 	.word	0x200003a4

08009c38 <_malloc_r>:
 8009c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c3c:	1ccd      	adds	r5, r1, #3
 8009c3e:	f025 0503 	bic.w	r5, r5, #3
 8009c42:	3508      	adds	r5, #8
 8009c44:	2d0c      	cmp	r5, #12
 8009c46:	bf38      	it	cc
 8009c48:	250c      	movcc	r5, #12
 8009c4a:	2d00      	cmp	r5, #0
 8009c4c:	4607      	mov	r7, r0
 8009c4e:	db01      	blt.n	8009c54 <_malloc_r+0x1c>
 8009c50:	42a9      	cmp	r1, r5
 8009c52:	d905      	bls.n	8009c60 <_malloc_r+0x28>
 8009c54:	230c      	movs	r3, #12
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	2600      	movs	r6, #0
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d34 <_malloc_r+0xfc>
 8009c64:	f000 f868 	bl	8009d38 <__malloc_lock>
 8009c68:	f8d8 3000 	ldr.w	r3, [r8]
 8009c6c:	461c      	mov	r4, r3
 8009c6e:	bb5c      	cbnz	r4, 8009cc8 <_malloc_r+0x90>
 8009c70:	4629      	mov	r1, r5
 8009c72:	4638      	mov	r0, r7
 8009c74:	f7ff ffc0 	bl	8009bf8 <sbrk_aligned>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	d155      	bne.n	8009d2a <_malloc_r+0xf2>
 8009c7e:	f8d8 4000 	ldr.w	r4, [r8]
 8009c82:	4626      	mov	r6, r4
 8009c84:	2e00      	cmp	r6, #0
 8009c86:	d145      	bne.n	8009d14 <_malloc_r+0xdc>
 8009c88:	2c00      	cmp	r4, #0
 8009c8a:	d048      	beq.n	8009d1e <_malloc_r+0xe6>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4638      	mov	r0, r7
 8009c92:	eb04 0903 	add.w	r9, r4, r3
 8009c96:	f000 f8c1 	bl	8009e1c <_sbrk_r>
 8009c9a:	4581      	cmp	r9, r0
 8009c9c:	d13f      	bne.n	8009d1e <_malloc_r+0xe6>
 8009c9e:	6821      	ldr	r1, [r4, #0]
 8009ca0:	1a6d      	subs	r5, r5, r1
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	f7ff ffa7 	bl	8009bf8 <sbrk_aligned>
 8009caa:	3001      	adds	r0, #1
 8009cac:	d037      	beq.n	8009d1e <_malloc_r+0xe6>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	442b      	add	r3, r5
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d038      	beq.n	8009d2e <_malloc_r+0xf6>
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	42a2      	cmp	r2, r4
 8009cc0:	d12b      	bne.n	8009d1a <_malloc_r+0xe2>
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	e00f      	b.n	8009ce8 <_malloc_r+0xb0>
 8009cc8:	6822      	ldr	r2, [r4, #0]
 8009cca:	1b52      	subs	r2, r2, r5
 8009ccc:	d41f      	bmi.n	8009d0e <_malloc_r+0xd6>
 8009cce:	2a0b      	cmp	r2, #11
 8009cd0:	d917      	bls.n	8009d02 <_malloc_r+0xca>
 8009cd2:	1961      	adds	r1, r4, r5
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	6025      	str	r5, [r4, #0]
 8009cd8:	bf18      	it	ne
 8009cda:	6059      	strne	r1, [r3, #4]
 8009cdc:	6863      	ldr	r3, [r4, #4]
 8009cde:	bf08      	it	eq
 8009ce0:	f8c8 1000 	streq.w	r1, [r8]
 8009ce4:	5162      	str	r2, [r4, r5]
 8009ce6:	604b      	str	r3, [r1, #4]
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f104 060b 	add.w	r6, r4, #11
 8009cee:	f000 f829 	bl	8009d44 <__malloc_unlock>
 8009cf2:	f026 0607 	bic.w	r6, r6, #7
 8009cf6:	1d23      	adds	r3, r4, #4
 8009cf8:	1af2      	subs	r2, r6, r3
 8009cfa:	d0ae      	beq.n	8009c5a <_malloc_r+0x22>
 8009cfc:	1b9b      	subs	r3, r3, r6
 8009cfe:	50a3      	str	r3, [r4, r2]
 8009d00:	e7ab      	b.n	8009c5a <_malloc_r+0x22>
 8009d02:	42a3      	cmp	r3, r4
 8009d04:	6862      	ldr	r2, [r4, #4]
 8009d06:	d1dd      	bne.n	8009cc4 <_malloc_r+0x8c>
 8009d08:	f8c8 2000 	str.w	r2, [r8]
 8009d0c:	e7ec      	b.n	8009ce8 <_malloc_r+0xb0>
 8009d0e:	4623      	mov	r3, r4
 8009d10:	6864      	ldr	r4, [r4, #4]
 8009d12:	e7ac      	b.n	8009c6e <_malloc_r+0x36>
 8009d14:	4634      	mov	r4, r6
 8009d16:	6876      	ldr	r6, [r6, #4]
 8009d18:	e7b4      	b.n	8009c84 <_malloc_r+0x4c>
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	e7cc      	b.n	8009cb8 <_malloc_r+0x80>
 8009d1e:	230c      	movs	r3, #12
 8009d20:	603b      	str	r3, [r7, #0]
 8009d22:	4638      	mov	r0, r7
 8009d24:	f000 f80e 	bl	8009d44 <__malloc_unlock>
 8009d28:	e797      	b.n	8009c5a <_malloc_r+0x22>
 8009d2a:	6025      	str	r5, [r4, #0]
 8009d2c:	e7dc      	b.n	8009ce8 <_malloc_r+0xb0>
 8009d2e:	605b      	str	r3, [r3, #4]
 8009d30:	deff      	udf	#255	; 0xff
 8009d32:	bf00      	nop
 8009d34:	200003a0 	.word	0x200003a0

08009d38 <__malloc_lock>:
 8009d38:	4801      	ldr	r0, [pc, #4]	; (8009d40 <__malloc_lock+0x8>)
 8009d3a:	f000 b8a9 	b.w	8009e90 <__retarget_lock_acquire_recursive>
 8009d3e:	bf00      	nop
 8009d40:	200004e4 	.word	0x200004e4

08009d44 <__malloc_unlock>:
 8009d44:	4801      	ldr	r0, [pc, #4]	; (8009d4c <__malloc_unlock+0x8>)
 8009d46:	f000 b8a4 	b.w	8009e92 <__retarget_lock_release_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	200004e4 	.word	0x200004e4

08009d50 <memmove>:
 8009d50:	4288      	cmp	r0, r1
 8009d52:	b510      	push	{r4, lr}
 8009d54:	eb01 0402 	add.w	r4, r1, r2
 8009d58:	d902      	bls.n	8009d60 <memmove+0x10>
 8009d5a:	4284      	cmp	r4, r0
 8009d5c:	4623      	mov	r3, r4
 8009d5e:	d807      	bhi.n	8009d70 <memmove+0x20>
 8009d60:	1e43      	subs	r3, r0, #1
 8009d62:	42a1      	cmp	r1, r4
 8009d64:	d008      	beq.n	8009d78 <memmove+0x28>
 8009d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6e:	e7f8      	b.n	8009d62 <memmove+0x12>
 8009d70:	4402      	add	r2, r0
 8009d72:	4601      	mov	r1, r0
 8009d74:	428a      	cmp	r2, r1
 8009d76:	d100      	bne.n	8009d7a <memmove+0x2a>
 8009d78:	bd10      	pop	{r4, pc}
 8009d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d82:	e7f7      	b.n	8009d74 <memmove+0x24>

08009d84 <memset>:
 8009d84:	4402      	add	r2, r0
 8009d86:	4603      	mov	r3, r0
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d100      	bne.n	8009d8e <memset+0xa>
 8009d8c:	4770      	bx	lr
 8009d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d92:	e7f9      	b.n	8009d88 <memset+0x4>

08009d94 <_raise_r>:
 8009d94:	291f      	cmp	r1, #31
 8009d96:	b538      	push	{r3, r4, r5, lr}
 8009d98:	4604      	mov	r4, r0
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	d904      	bls.n	8009da8 <_raise_r+0x14>
 8009d9e:	2316      	movs	r3, #22
 8009da0:	6003      	str	r3, [r0, #0]
 8009da2:	f04f 30ff 	mov.w	r0, #4294967295
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009daa:	b112      	cbz	r2, 8009db2 <_raise_r+0x1e>
 8009dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009db0:	b94b      	cbnz	r3, 8009dc6 <_raise_r+0x32>
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 f830 	bl	8009e18 <_getpid_r>
 8009db8:	462a      	mov	r2, r5
 8009dba:	4601      	mov	r1, r0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dc2:	f000 b817 	b.w	8009df4 <_kill_r>
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d00a      	beq.n	8009de0 <_raise_r+0x4c>
 8009dca:	1c59      	adds	r1, r3, #1
 8009dcc:	d103      	bne.n	8009dd6 <_raise_r+0x42>
 8009dce:	2316      	movs	r3, #22
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	e7e7      	b.n	8009da6 <_raise_r+0x12>
 8009dd6:	2400      	movs	r4, #0
 8009dd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ddc:	4628      	mov	r0, r5
 8009dde:	4798      	blx	r3
 8009de0:	2000      	movs	r0, #0
 8009de2:	e7e0      	b.n	8009da6 <_raise_r+0x12>

08009de4 <raise>:
 8009de4:	4b02      	ldr	r3, [pc, #8]	; (8009df0 <raise+0xc>)
 8009de6:	4601      	mov	r1, r0
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	f7ff bfd3 	b.w	8009d94 <_raise_r>
 8009dee:	bf00      	nop
 8009df0:	20000058 	.word	0x20000058

08009df4 <_kill_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d07      	ldr	r5, [pc, #28]	; (8009e14 <_kill_r+0x20>)
 8009df8:	2300      	movs	r3, #0
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	4608      	mov	r0, r1
 8009dfe:	4611      	mov	r1, r2
 8009e00:	602b      	str	r3, [r5, #0]
 8009e02:	f7f9 fbf3 	bl	80035ec <_kill>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	d102      	bne.n	8009e10 <_kill_r+0x1c>
 8009e0a:	682b      	ldr	r3, [r5, #0]
 8009e0c:	b103      	cbz	r3, 8009e10 <_kill_r+0x1c>
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	bd38      	pop	{r3, r4, r5, pc}
 8009e12:	bf00      	nop
 8009e14:	200004e0 	.word	0x200004e0

08009e18 <_getpid_r>:
 8009e18:	f7f9 bbe0 	b.w	80035dc <_getpid>

08009e1c <_sbrk_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d06      	ldr	r5, [pc, #24]	; (8009e38 <_sbrk_r+0x1c>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	602b      	str	r3, [r5, #0]
 8009e28:	f7f9 fbfa 	bl	8003620 <_sbrk>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_sbrk_r+0x1a>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_sbrk_r+0x1a>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	200004e0 	.word	0x200004e0

08009e3c <__errno>:
 8009e3c:	4b01      	ldr	r3, [pc, #4]	; (8009e44 <__errno+0x8>)
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	20000058 	.word	0x20000058

08009e48 <__libc_init_array>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	4d0d      	ldr	r5, [pc, #52]	; (8009e80 <__libc_init_array+0x38>)
 8009e4c:	4c0d      	ldr	r4, [pc, #52]	; (8009e84 <__libc_init_array+0x3c>)
 8009e4e:	1b64      	subs	r4, r4, r5
 8009e50:	10a4      	asrs	r4, r4, #2
 8009e52:	2600      	movs	r6, #0
 8009e54:	42a6      	cmp	r6, r4
 8009e56:	d109      	bne.n	8009e6c <__libc_init_array+0x24>
 8009e58:	4d0b      	ldr	r5, [pc, #44]	; (8009e88 <__libc_init_array+0x40>)
 8009e5a:	4c0c      	ldr	r4, [pc, #48]	; (8009e8c <__libc_init_array+0x44>)
 8009e5c:	f000 f866 	bl	8009f2c <_init>
 8009e60:	1b64      	subs	r4, r4, r5
 8009e62:	10a4      	asrs	r4, r4, #2
 8009e64:	2600      	movs	r6, #0
 8009e66:	42a6      	cmp	r6, r4
 8009e68:	d105      	bne.n	8009e76 <__libc_init_array+0x2e>
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}
 8009e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e70:	4798      	blx	r3
 8009e72:	3601      	adds	r6, #1
 8009e74:	e7ee      	b.n	8009e54 <__libc_init_array+0xc>
 8009e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e7a:	4798      	blx	r3
 8009e7c:	3601      	adds	r6, #1
 8009e7e:	e7f2      	b.n	8009e66 <__libc_init_array+0x1e>
 8009e80:	0800a178 	.word	0x0800a178
 8009e84:	0800a178 	.word	0x0800a178
 8009e88:	0800a178 	.word	0x0800a178
 8009e8c:	0800a180 	.word	0x0800a180

08009e90 <__retarget_lock_acquire_recursive>:
 8009e90:	4770      	bx	lr

08009e92 <__retarget_lock_release_recursive>:
 8009e92:	4770      	bx	lr

08009e94 <_free_r>:
 8009e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e96:	2900      	cmp	r1, #0
 8009e98:	d044      	beq.n	8009f24 <_free_r+0x90>
 8009e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e9e:	9001      	str	r0, [sp, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ea6:	bfb8      	it	lt
 8009ea8:	18e4      	addlt	r4, r4, r3
 8009eaa:	f7ff ff45 	bl	8009d38 <__malloc_lock>
 8009eae:	4a1e      	ldr	r2, [pc, #120]	; (8009f28 <_free_r+0x94>)
 8009eb0:	9801      	ldr	r0, [sp, #4]
 8009eb2:	6813      	ldr	r3, [r2, #0]
 8009eb4:	b933      	cbnz	r3, 8009ec4 <_free_r+0x30>
 8009eb6:	6063      	str	r3, [r4, #4]
 8009eb8:	6014      	str	r4, [r2, #0]
 8009eba:	b003      	add	sp, #12
 8009ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ec0:	f7ff bf40 	b.w	8009d44 <__malloc_unlock>
 8009ec4:	42a3      	cmp	r3, r4
 8009ec6:	d908      	bls.n	8009eda <_free_r+0x46>
 8009ec8:	6825      	ldr	r5, [r4, #0]
 8009eca:	1961      	adds	r1, r4, r5
 8009ecc:	428b      	cmp	r3, r1
 8009ece:	bf01      	itttt	eq
 8009ed0:	6819      	ldreq	r1, [r3, #0]
 8009ed2:	685b      	ldreq	r3, [r3, #4]
 8009ed4:	1949      	addeq	r1, r1, r5
 8009ed6:	6021      	streq	r1, [r4, #0]
 8009ed8:	e7ed      	b.n	8009eb6 <_free_r+0x22>
 8009eda:	461a      	mov	r2, r3
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	b10b      	cbz	r3, 8009ee4 <_free_r+0x50>
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	d9fa      	bls.n	8009eda <_free_r+0x46>
 8009ee4:	6811      	ldr	r1, [r2, #0]
 8009ee6:	1855      	adds	r5, r2, r1
 8009ee8:	42a5      	cmp	r5, r4
 8009eea:	d10b      	bne.n	8009f04 <_free_r+0x70>
 8009eec:	6824      	ldr	r4, [r4, #0]
 8009eee:	4421      	add	r1, r4
 8009ef0:	1854      	adds	r4, r2, r1
 8009ef2:	42a3      	cmp	r3, r4
 8009ef4:	6011      	str	r1, [r2, #0]
 8009ef6:	d1e0      	bne.n	8009eba <_free_r+0x26>
 8009ef8:	681c      	ldr	r4, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	6053      	str	r3, [r2, #4]
 8009efe:	440c      	add	r4, r1
 8009f00:	6014      	str	r4, [r2, #0]
 8009f02:	e7da      	b.n	8009eba <_free_r+0x26>
 8009f04:	d902      	bls.n	8009f0c <_free_r+0x78>
 8009f06:	230c      	movs	r3, #12
 8009f08:	6003      	str	r3, [r0, #0]
 8009f0a:	e7d6      	b.n	8009eba <_free_r+0x26>
 8009f0c:	6825      	ldr	r5, [r4, #0]
 8009f0e:	1961      	adds	r1, r4, r5
 8009f10:	428b      	cmp	r3, r1
 8009f12:	bf04      	itt	eq
 8009f14:	6819      	ldreq	r1, [r3, #0]
 8009f16:	685b      	ldreq	r3, [r3, #4]
 8009f18:	6063      	str	r3, [r4, #4]
 8009f1a:	bf04      	itt	eq
 8009f1c:	1949      	addeq	r1, r1, r5
 8009f1e:	6021      	streq	r1, [r4, #0]
 8009f20:	6054      	str	r4, [r2, #4]
 8009f22:	e7ca      	b.n	8009eba <_free_r+0x26>
 8009f24:	b003      	add	sp, #12
 8009f26:	bd30      	pop	{r4, r5, pc}
 8009f28:	200003a0 	.word	0x200003a0

08009f2c <_init>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	bf00      	nop
 8009f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f32:	bc08      	pop	{r3}
 8009f34:	469e      	mov	lr, r3
 8009f36:	4770      	bx	lr

08009f38 <_fini>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr

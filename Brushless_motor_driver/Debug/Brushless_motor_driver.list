
Brushless_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007390  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08007568  08007568  00017568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007750  08007750  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007750  08007750  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007750  08007750  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000000c  08007764  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08007764  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c22b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bc7  00000000  00000000  0003c2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000110a  00000000  00000000  000414a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026428  00000000  00000000  000425aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fb3  00000000  00000000  000689d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5bc0  00000000  00000000  00082985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000630c  00000000  00000000  00178548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0017e854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007550 	.word	0x08007550

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007550 	.word	0x08007550

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>:
	double current = scaled_voltage/SHUNT_RESISTANCE;
	return current;
}


void CurrSensDriver::get_current_Amp(PhaseCurrents& currents){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
//	currents.iA = counts_to_amps(ADC_cummulative_val[0]/5);
//	currents.iB = counts_to_amps(ADC_cummulative_val[1]/5);
//	currents.iC = counts_to_amps(ADC_cummulative_val[2]/5);
	;

}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_TIM_PeriodElapsedCallback>:
#include "hall_encoder.h"
#include "math_utils.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b092      	sub	sp, #72	; 0x48
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	// check if it gets here
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 8000b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ffed 	bl	8000b14 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>

	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8000b3a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000b3e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8000b42:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8000b46:	eeb0 2a45 	vmov.f32	s4, s10
 8000b4a:	eef0 2a65 	vmov.f32	s5, s11
 8000b4e:	eeb0 1a46 	vmov.f32	s2, s12
 8000b52:	eef0 1a66 	vmov.f32	s3, s13
 8000b56:	eeb0 0a47 	vmov.f32	s0, s14
 8000b5a:	eef0 0a67 	vmov.f32	s1, s15
 8000b5e:	f000 fc67 	bl	8001430 <_Z9tf_clarkeddd>
 8000b62:	eeb0 6a40 	vmov.f32	s12, s0
 8000b66:	eef0 6a60 	vmov.f32	s13, s1
 8000b6a:	eeb0 7a41 	vmov.f32	s14, s2
 8000b6e:	eef0 7a61 	vmov.f32	s15, s3
 8000b72:	ed87 6b06 	vstr	d6, [r7, #24]
 8000b76:	ed87 7b08 	vstr	d7, [r7, #32]

	double theta_d =  HallEncoderDriver::get_thetad();
 8000b7a:	f000 f822 	bl	8000bc2 <_ZN17HallEncoderDriver10get_thetadEv>
 8000b7e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8000b82:	ed97 7b06 	vldr	d7, [r7, #24]
 8000b86:	ed97 6b08 	vldr	d6, [r7, #32]
	auto [curr_d, curr_q] = tf_park(curr_alpha, curr_beta, theta_d);
 8000b8a:	ed97 2b10 	vldr	d2, [r7, #64]	; 0x40
 8000b8e:	eeb0 1a46 	vmov.f32	s2, s12
 8000b92:	eef0 1a66 	vmov.f32	s3, s13
 8000b96:	eeb0 0a47 	vmov.f32	s0, s14
 8000b9a:	eef0 0a67 	vmov.f32	s1, s15
 8000b9e:	f000 fbda 	bl	8001356 <_Z7tf_parkddd>
 8000ba2:	eeb0 6a40 	vmov.f32	s12, s0
 8000ba6:	eef0 6a60 	vmov.f32	s13, s1
 8000baa:	eeb0 7a41 	vmov.f32	s14, s2
 8000bae:	eef0 7a61 	vmov.f32	s15, s3
 8000bb2:	ed87 6b02 	vstr	d6, [r7, #8]
 8000bb6:	ed87 7b04 	vstr	d7, [r7, #16]



	return;
 8000bba:	bf00      	nop

}
 8000bbc:	3748      	adds	r7, #72	; 0x48
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_ZN17HallEncoderDriver10get_thetadEv>:
 */
#include "hall_encoder.h"



double HallEncoderDriver::get_thetad(){
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
	return 0;
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	ec43 2b17 	vmov	d7, r2, r3
}
 8000bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8000bd6:	eef0 0a67 	vmov.f32	s1, s15
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TIM2->CCR1 = 17895697;
 8000be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <main+0x40>)
 8000bee:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 ff11 	bl	8001a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f818 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 fb0a 	bl	8001210 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bfc:	f000 fade 	bl	80011bc <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000c00:	f000 f95c 	bl	8000ebc <MX_FDCAN1_Init>
  MX_ADC1_Init();
 8000c04:	f000 f85c 	bl	8000cc0 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000c08:	f000 f99e 	bl	8000f48 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000c0c:	f000 fa4e 	bl	80010ac <MX_TIM3_Init>
  MX_ADC2_Init();
 8000c10:	f000 f8ee 	bl	8000df0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000c14:	f000 f9d6 	bl	8000fc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // write voltage for 2 secs

  setup();
 8000c18:	f000 fb6e 	bl	80012f8 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000c1c:	f000 fb8c 	bl	8001338 <loop>
 8000c20:	e7fc      	b.n	8000c1c <main+0x38>
 8000c22:	bf00      	nop
 8000c24:	01111111 	.word	0x01111111

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	; 0x50
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	2238      	movs	r2, #56	; 0x38
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f006 fc5e 	bl	80074f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c4e:	f002 ffbd 	bl	8003bcc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5c:	2340      	movs	r3, #64	; 0x40
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	2302      	movs	r3, #2
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 f857 	bl	8003d34 <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c8c:	f000 fb2e 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	230f      	movs	r3, #15
 8000c92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2303      	movs	r3, #3
 8000c96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 fb5b 	bl	8004364 <HAL_RCC_ClockConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cb4:	f000 fb1a 	bl	80012ec <Error_Handler>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3750      	adds	r7, #80	; 0x50
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2220      	movs	r2, #32
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f006 fc0d 	bl	80074f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cde:	4b40      	ldr	r3, [pc, #256]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000ce0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ce4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ce6:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000ce8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cee:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000cfa:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d00:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d08:	2208      	movs	r2, #8
 8000d0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d0c:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000d18:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d3a:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d48:	4825      	ldr	r0, [pc, #148]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d4a:	f001 f8f7 	bl	8001f3c <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d54:	f000 faca 	bl	80012ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	481f      	ldr	r0, [pc, #124]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d64:	f002 f800 	bl	8002d68 <HAL_ADCEx_MultiModeConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d6e:	f000 fabd 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_ADC1_Init+0x124>)
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d76:	2306      	movs	r3, #6
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7e:	237f      	movs	r3, #127	; 0x7f
 8000d80:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d82:	2304      	movs	r3, #4
 8000d84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4814      	ldr	r0, [pc, #80]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000d90:	f001 fa96 	bl	80022c0 <HAL_ADC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d9a:	f000 faa7 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_ADC1_Init+0x128>)
 8000da0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000da2:	230c      	movs	r3, #12
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000dac:	f001 fa88 	bl	80022c0 <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000db6:	f000 fa99 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_ADC1_Init+0x12c>)
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_ADC1_Init+0x120>)
 8000dc8:	f001 fa7a 	bl	80022c0 <HAL_ADC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000dd2:	f000 fa8b 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3730      	adds	r7, #48	; 0x30
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000002c 	.word	0x2000002c
 8000de4:	19200040 	.word	0x19200040
 8000de8:	1d500080 	.word	0x1d500080
 8000dec:	21800100 	.word	0x21800100

08000df0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2220      	movs	r2, #32
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f006 fb7b 	bl	80074f8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e04:	4a2b      	ldr	r2, [pc, #172]	; (8000eb4 <MX_ADC2_Init+0xc4>)
 8000e06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e6c:	f001 f866 	bl	8001f3c <HAL_ADC_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000e76:	f000 fa39 	bl	80012ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_ADC2_Init+0xc8>)
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e7e:	2306      	movs	r3, #6
 8000e80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e86:	237f      	movs	r3, #127	; 0x7f
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e98:	f001 fa12 	bl	80022c0 <HAL_ADC_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ea2:	f000 fa23 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000098 	.word	0x20000098
 8000eb4:	50000100 	.word	0x50000100
 8000eb8:	2e300800 	.word	0x2e300800

08000ebc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000ec2:	4a20      	ldr	r2, [pc, #128]	; (8000f44 <MX_FDCAN1_Init+0x88>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000eec:	2210      	movs	r2, #16
 8000eee:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f2c:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_FDCAN1_Init+0x84>)
 8000f2e:	f002 faed 	bl	800350c <HAL_FDCAN_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000f38:	f000 f9d8 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000164 	.word	0x20000164
 8000f44:	40006400 	.word	0x40006400

08000f48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_SPI3_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_SPI3_Init+0x74>)
 8000fa8:	f003 fe0e 	bl	8004bc8 <HAL_SPI_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 f99b 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001c8 	.word	0x200001c8
 8000fc0:	40003c00 	.word	0x40003c00

08000fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
 8000ff2:	615a      	str	r2, [r3, #20]
 8000ff4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_TIM2_Init+0xe0>)
 8000ff8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_TIM2_Init+0xe0>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <MX_TIM2_Init+0xe0>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7.1582788E7;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_TIM2_Init+0xe0>)
 800100c:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <MX_TIM2_Init+0xe4>)
 800100e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_TIM2_Init+0xe0>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_TIM2_Init+0xe0>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101c:	4821      	ldr	r0, [pc, #132]	; (80010a4 <MX_TIM2_Init+0xe0>)
 800101e:	f003 fe7e 	bl	8004d1e <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001028:	f000 f960 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001036:	4619      	mov	r1, r3
 8001038:	481a      	ldr	r0, [pc, #104]	; (80010a4 <MX_TIM2_Init+0xe0>)
 800103a:	f004 fa1f 	bl	800547c <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001044:	f000 f952 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001048:	4816      	ldr	r0, [pc, #88]	; (80010a4 <MX_TIM2_Init+0xe0>)
 800104a:	f003 febf 	bl	8004dcc <HAL_TIM_OC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001054:	f000 f94a 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	480f      	ldr	r0, [pc, #60]	; (80010a4 <MX_TIM2_Init+0xe0>)
 8001068:	f005 f8d4 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001072:	f000 f93b 	bl	80012ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_TIM2_Init+0xe0>)
 800108e:	f004 f8df 	bl	8005250 <HAL_TIM_OC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001098:	f000 f928 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3738      	adds	r7, #56	; 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000022c 	.word	0x2000022c
 80010a8:	04444444 	.word	0x04444444

080010ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <MX_TIM3_Init+0x108>)
 80010da:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <MX_TIM3_Init+0x10c>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <MX_TIM3_Init+0x108>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <MX_TIM3_Init+0x108>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010ea:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <MX_TIM3_Init+0x108>)
 80010ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <MX_TIM3_Init+0x108>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <MX_TIM3_Init+0x108>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010fe:	482d      	ldr	r0, [pc, #180]	; (80011b4 <MX_TIM3_Init+0x108>)
 8001100:	f003 fe0d 	bl	8004d1e <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800110a:	f000 f8ef 	bl	80012ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	4619      	mov	r1, r3
 800111a:	4826      	ldr	r0, [pc, #152]	; (80011b4 <MX_TIM3_Init+0x108>)
 800111c:	f004 f9ae 	bl	800547c <HAL_TIM_ConfigClockSource>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001126:	f000 f8e1 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800112a:	4822      	ldr	r0, [pc, #136]	; (80011b4 <MX_TIM3_Init+0x108>)
 800112c:	f003 feaf 	bl	8004e8e <HAL_TIM_IC_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001136:	f000 f8d9 	bl	80012ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	481a      	ldr	r0, [pc, #104]	; (80011b4 <MX_TIM3_Init+0x108>)
 800114a:	f005 f863 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001154:	f000 f8ca 	bl	80012ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <MX_TIM3_Init+0x108>)
 8001170:	f004 f8e8 	bl	8005344 <HAL_TIM_IC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800117a:	f000 f8b7 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2204      	movs	r2, #4
 8001182:	4619      	mov	r1, r3
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_TIM3_Init+0x108>)
 8001186:	f004 f8dd 	bl	8005344 <HAL_TIM_IC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8001190:	f000 f8ac 	bl	80012ec <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2208      	movs	r2, #8
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_TIM3_Init+0x108>)
 800119c:	f004 f8d2 	bl	8005344 <HAL_TIM_IC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 80011a6:	f000 f8a1 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3730      	adds	r7, #48	; 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000278 	.word	0x20000278
 80011b8:	40000400 	.word	0x40000400

080011bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_DMA_Init+0x50>)
 80011c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <MX_DMA_Init+0x50>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6493      	str	r3, [r2, #72]	; 0x48
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_DMA_Init+0x50>)
 80011d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_DMA_Init+0x50>)
 80011dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <MX_DMA_Init+0x50>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6493      	str	r3, [r2, #72]	; 0x48
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_DMA_Init+0x50>)
 80011e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	200b      	movs	r0, #11
 80011f8:	f001 ff99 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011fc:	200b      	movs	r0, #11
 80011fe:	f001 ffb0 	bl	8003162 <HAL_NVIC_EnableIRQ>

}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <MX_GPIO_Init+0xd4>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_GPIO_Init+0xd4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <MX_GPIO_Init+0xd4>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_GPIO_Init+0xd4>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f002 fc84 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2147      	movs	r1, #71	; 0x47
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MX_GPIO_Init+0xd8>)
 800129a:	f002 fc7f 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 800129e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f002 faed 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_OUTPUT_Pin H2_OUTPUT_Pin H3_OUTPUT_Pin PD6 */
  GPIO_InitStruct.Pin = H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6;
 80012be:	2347      	movs	r3, #71	; 0x47
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_GPIO_Init+0xd8>)
 80012d6:	f002 fadf 	bl	8003898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48000c00 	.word	0x48000c00

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <setup>:
#include "stm32g4xx_hal.h"

extern ADC_HandleTypeDef hadc1;
uint64_t ADC_count = 0;

void setup() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

	CurrSensDriver::ADC_handle = &hadc1;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <setup+0x34>)
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <setup+0x38>)
 8001300:	601a      	str	r2, [r3, #0]
	HAL_ADCEx_Calibration_Start(CurrSensDriver::ADC_handle, ADC_SINGLE_ENDED);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <setup+0x34>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	217f      	movs	r1, #127	; 0x7f
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fccb 	bl	8002ca4 <HAL_ADCEx_Calibration_Start>

	// Enable the gate driver
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4808      	ldr	r0, [pc, #32]	; (8001334 <setup+0x3c>)
 8001314:	f002 fc42 	bl	8003b9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2104      	movs	r1, #4
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <setup+0x3c>)
 800131e:	f002 fc3d 	bl	8003b9c <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8001322:	200a      	movs	r0, #10
 8001324:	f000 fbe8 	bl	8001af8 <HAL_Delay>

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000028 	.word	0x20000028
 8001330:	2000002c 	.word	0x2000002c
 8001334:	48000c00 	.word	0x48000c00

08001338 <loop>:

void loop() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

//	HAL_ADC_Start_IT(CurrSensDriver::ADC_handle);
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 800133e:	463b      	mov	r3, r7
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fbe7 	bl	8000b14 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>
	HAL_Delay(1000);
 8001346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134a:	f000 fbd5 	bl	8001af8 <HAL_Delay>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_Z7tf_parkddd>:
 *      Author: Sashreek and Jonah
 */
#include "math_utils.h"
#include <cmath>

ParkOut tf_park (double ialpha, double ibeta, double theta_d){
 8001356:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800135a:	b092      	sub	sp, #72	; 0x48
 800135c:	af00      	add	r7, sp, #0
 800135e:	ed87 0b08 	vstr	d0, [r7, #32]
 8001362:	ed87 1b06 	vstr	d1, [r7, #24]
 8001366:	ed87 2b04 	vstr	d2, [r7, #16]
	ParkOut output;
	output.id = ialpha * cos(theta_d) + ibeta * sin(theta_d);
 800136a:	ed97 0b04 	vldr	d0, [r7, #16]
 800136e:	f005 f82f 	bl	80063d0 <cos>
 8001372:	ec51 0b10 	vmov	r0, r1, d0
 8001376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800137a:	f7ff f909 	bl	8000590 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4690      	mov	r8, r2
 8001384:	4699      	mov	r9, r3
 8001386:	ed97 0b04 	vldr	d0, [r7, #16]
 800138a:	f005 f875 	bl	8006478 <sin>
 800138e:	ec51 0b10 	vmov	r0, r1, d0
 8001392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001396:	f7ff f8fb 	bl	8000590 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4640      	mov	r0, r8
 80013a0:	4649      	mov	r1, r9
 80013a2:	f7fe ff3f 	bl	8000224 <__adddf3>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.iq = -ialpha * sin(theta_d) + ibeta * cos(theta_d);
 80013ae:	6a3c      	ldr	r4, [r7, #32]
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013b6:	ed97 0b04 	vldr	d0, [r7, #16]
 80013ba:	f005 f85d 	bl	8006478 <sin>
 80013be:	ec53 2b10 	vmov	r2, r3, d0
 80013c2:	4620      	mov	r0, r4
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7ff f8e3 	bl	8000590 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4614      	mov	r4, r2
 80013d0:	461d      	mov	r5, r3
 80013d2:	ed97 0b04 	vldr	d0, [r7, #16]
 80013d6:	f004 fffb 	bl	80063d0 <cos>
 80013da:	ec51 0b10 	vmov	r0, r1, d0
 80013de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013e2:	f7ff f8d5 	bl	8000590 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4620      	mov	r0, r4
 80013ec:	4629      	mov	r1, r5
 80013ee:	f7fe ff19 	bl	8000224 <__adddf3>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 80013fa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001408:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800140c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001410:	ec41 0b16 	vmov	d6, r0, r1
 8001414:	ec43 2b17 	vmov	d7, r2, r3

}
 8001418:	eeb0 0a46 	vmov.f32	s0, s12
 800141c:	eef0 0a66 	vmov.f32	s1, s13
 8001420:	eeb0 1a47 	vmov.f32	s2, s14
 8001424:	eef0 1a67 	vmov.f32	s3, s15
 8001428:	3748      	adds	r7, #72	; 0x48
 800142a:	46bd      	mov	sp, r7
 800142c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001430 <_Z9tf_clarkeddd>:
	output.vbeta = vd * sin(theta_d) + vq * cos(theta_d);
	return output;
}

//Clarke transform
ClarkeOut tf_clarke (double ia, double ib, double ic){
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b092      	sub	sp, #72	; 0x48
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0b08 	vstr	d0, [r7, #32]
 800143a:	ed87 1b06 	vstr	d1, [r7, #24]
 800143e:	ed87 2b04 	vstr	d2, [r7, #16]
	ClarkeOut output;
	output.ialpha = (3.0/2.0) * ia;
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <_Z9tf_clarkeddd+0xa0>)
 8001448:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800144c:	f7ff f8a0 	bl	8000590 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.ibeta = (sqrt(3)/2) * ib - (sqrt(3)/2) * ic;
 8001458:	a31b      	add	r3, pc, #108	; (adr r3, 80014c8 <_Z9tf_clarkeddd+0x98>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001462:	f7ff f895 	bl	8000590 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4614      	mov	r4, r2
 800146c:	461d      	mov	r5, r3
 800146e:	a316      	add	r3, pc, #88	; (adr r3, 80014c8 <_Z9tf_clarkeddd+0x98>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001478:	f7ff f88a 	bl	8000590 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4620      	mov	r0, r4
 8001482:	4629      	mov	r1, r5
 8001484:	f7fe fecc 	bl	8000220 <__aeabi_dsub>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 8001490:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800149e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80014a6:	ec41 0b16 	vmov	d6, r0, r1
 80014aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80014ae:	eeb0 0a46 	vmov.f32	s0, s12
 80014b2:	eef0 0a66 	vmov.f32	s1, s13
 80014b6:	eeb0 1a47 	vmov.f32	s2, s14
 80014ba:	eef0 1a67 	vmov.f32	s3, s15
 80014be:	3748      	adds	r7, #72	; 0x48
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bdb0      	pop	{r4, r5, r7, pc}
 80014c4:	f3af 8000 	nop.w
 80014c8:	e8584caa 	.word	0xe8584caa
 80014cc:	3febb67a 	.word	0x3febb67a
 80014d0:	3ff80000 	.word	0x3ff80000

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_MspInit+0x44>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_MspInit+0x44>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6613      	str	r3, [r2, #96]	; 0x60
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_MspInit+0x44>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_MspInit+0x44>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_MspInit+0x44>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6593      	str	r3, [r2, #88]	; 0x58
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_MspInit+0x44>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800150a:	f002 fc03 	bl	8003d14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0a2      	sub	sp, #136	; 0x88
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001534:	f107 0320 	add.w	r3, r7, #32
 8001538:	2254      	movs	r2, #84	; 0x54
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f005 ffdb 	bl	80074f8 <memset>
  if(hadc->Instance==ADC1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154a:	f040 8083 	bne.w	8001654 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800154e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001552:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001554:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001558:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	4618      	mov	r0, r3
 8001560:	f003 f8e4 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800156a:	f7ff febf 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800156e:	4b69      	ldr	r3, [pc, #420]	; (8001714 <HAL_ADC_MspInit+0x1f8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a67      	ldr	r2, [pc, #412]	; (8001714 <HAL_ADC_MspInit+0x1f8>)
 8001576:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001578:	4b66      	ldr	r3, [pc, #408]	; (8001714 <HAL_ADC_MspInit+0x1f8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d10b      	bne.n	8001598 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001580:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	4a64      	ldr	r2, [pc, #400]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 8001586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800158a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158c:	4b62      	ldr	r3, [pc, #392]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001598:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	4a5e      	ldr	r2, [pc, #376]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a4:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	4a58      	ldr	r2, [pc, #352]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015bc:	4b56      	ldr	r3, [pc, #344]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015c8:	230f      	movs	r3, #15
 80015ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015cc:	2303      	movs	r3, #3
 80015ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015d8:	4619      	mov	r1, r3
 80015da:	4850      	ldr	r0, [pc, #320]	; (800171c <HAL_ADC_MspInit+0x200>)
 80015dc:	f002 f95c 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e0:	230c      	movs	r3, #12
 80015e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e4:	2303      	movs	r3, #3
 80015e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015f0:	4619      	mov	r1, r3
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f002 f94f 	bl	8003898 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015fa:	4b49      	ldr	r3, [pc, #292]	; (8001720 <HAL_ADC_MspInit+0x204>)
 80015fc:	4a49      	ldr	r2, [pc, #292]	; (8001724 <HAL_ADC_MspInit+0x208>)
 80015fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001600:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_ADC_MspInit+0x204>)
 8001602:	2205      	movs	r2, #5
 8001604:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <HAL_ADC_MspInit+0x204>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_ADC_MspInit+0x204>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <HAL_ADC_MspInit+0x204>)
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_ADC_MspInit+0x204>)
 800161a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001620:	4b3f      	ldr	r3, [pc, #252]	; (8001720 <HAL_ADC_MspInit+0x204>)
 8001622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001626:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001628:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <HAL_ADC_MspInit+0x204>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800162e:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <HAL_ADC_MspInit+0x204>)
 8001630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001634:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001636:	483a      	ldr	r0, [pc, #232]	; (8001720 <HAL_ADC_MspInit+0x204>)
 8001638:	f001 fdae 	bl	8003198 <HAL_DMA_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8001642:	f7ff fe53 	bl	80012ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a35      	ldr	r2, [pc, #212]	; (8001720 <HAL_ADC_MspInit+0x204>)
 800164a:	655a      	str	r2, [r3, #84]	; 0x54
 800164c:	4a34      	ldr	r2, [pc, #208]	; (8001720 <HAL_ADC_MspInit+0x204>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001652:	e05a      	b.n	800170a <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a33      	ldr	r2, [pc, #204]	; (8001728 <HAL_ADC_MspInit+0x20c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d155      	bne.n	800170a <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800165e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001662:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001664:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001668:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4618      	mov	r0, r3
 8001670:	f003 f85c 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_ADC_MspInit+0x162>
      Error_Handler();
 800167a:	f7ff fe37 	bl	80012ec <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_ADC_MspInit+0x1f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a23      	ldr	r2, [pc, #140]	; (8001714 <HAL_ADC_MspInit+0x1f8>)
 8001686:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_ADC_MspInit+0x1f8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d10b      	bne.n	80016a8 <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 8001696:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800169a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_ADC_MspInit+0x1fc>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016d8:	2303      	movs	r3, #3
 80016da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016dc:	2303      	movs	r3, #3
 80016de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f002 f8d3 	bl	8003898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_TEMP_Pin;
 80016f2:	2320      	movs	r3, #32
 80016f4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(MOTOR_TEMP_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_ADC_MspInit+0x200>)
 8001706:	f002 f8c7 	bl	8003898 <HAL_GPIO_Init>
}
 800170a:	bf00      	nop
 800170c:	3788      	adds	r7, #136	; 0x88
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200002c4 	.word	0x200002c4
 8001718:	40021000 	.word	0x40021000
 800171c:	48000800 	.word	0x48000800
 8001720:	20000104 	.word	0x20000104
 8001724:	40020008 	.word	0x40020008
 8001728:	50000100 	.word	0x50000100

0800172c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b09e      	sub	sp, #120	; 0x78
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	2254      	movs	r2, #84	; 0x54
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f005 fed3 	bl	80074f8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <HAL_FDCAN_MspInit+0xac>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d139      	bne.n	80017d0 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001766:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4618      	mov	r0, r3
 800176e:	f002 ffdd 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001778:	f7ff fdb8 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_FDCAN_MspInit+0xb0>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	4a16      	ldr	r2, [pc, #88]	; (80017dc <HAL_FDCAN_MspInit+0xb0>)
 8001782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001786:	6593      	str	r3, [r2, #88]	; 0x58
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_FDCAN_MspInit+0xb0>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_FDCAN_MspInit+0xb0>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_FDCAN_MspInit+0xb0>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_FDCAN_MspInit+0xb0>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80017be:	2309      	movs	r3, #9
 80017c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f002 f864 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3778      	adds	r7, #120	; 0x78
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40006400 	.word	0x40006400
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_SPI_MspInit+0x7c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d128      	bne.n	8001854 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800180c:	6593      	str	r3, [r2, #88]	; 0x58
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_SPI_MspInit+0x80>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001832:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001844:	2306      	movs	r3, #6
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_SPI_MspInit+0x84>)
 8001850:	f002 f822 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40003c00 	.word	0x40003c00
 8001860:	40021000 	.word	0x40021000
 8001864:	48000800 	.word	0x48000800

08001868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001888:	d114      	bne.n	80018b4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_TIM_Base_MspInit+0xb0>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_TIM_Base_MspInit+0xb0>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6593      	str	r3, [r2, #88]	; 0x58
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_TIM_Base_MspInit+0xb0>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	201c      	movs	r0, #28
 80018a8:	f001 fc41 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ac:	201c      	movs	r0, #28
 80018ae:	f001 fc58 	bl	8003162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018b2:	e02d      	b.n	8001910 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_TIM_Base_MspInit+0xb4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d128      	bne.n	8001910 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_TIM_Base_MspInit+0xb0>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_TIM_Base_MspInit+0xb0>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_TIM_Base_MspInit+0xb0>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_TIM_Base_MspInit+0xb0>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_TIM_Base_MspInit+0xb0>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_TIM_Base_MspInit+0xb0>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL1_INPUT_Pin|HALL_2_INPUT_Pin|HALL_3_INPUT_Pin;
 80018ee:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001900:	2302      	movs	r3, #2
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 800190c:	f001 ffc4 	bl	8003898 <HAL_GPIO_Init>
}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	40000400 	.word	0x40000400
 8001920:	48000800 	.word	0x48000800

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f8a4 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <DMA1_Channel1_IRQHandler+0x10>)
 800197e:	f001 fcb3 	bl	80032e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000104 	.word	0x20000104

0800198c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <TIM2_IRQHandler+0x10>)
 8001992:	f003 fadd 	bl	8004f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000022c 	.word	0x2000022c

080019a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <LoopForever+0xe>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e0:	4c0b      	ldr	r4, [pc, #44]	; (8001a10 <LoopForever+0x16>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ee:	f7ff ffd7 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f005 fd89 	bl	8007508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f6:	f7ff f8f5 	bl	8000be4 <main>

080019fa <LoopForever>:

LoopForever:
    b LoopForever
 80019fa:	e7fe      	b.n	80019fa <LoopForever>
  ldr   r0, =_estack
 80019fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a08:	08007758 	.word	0x08007758
  ldr r2, =_sbss
 8001a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a10:	200002cc 	.word	0x200002cc

08001a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC1_2_IRQHandler>

08001a16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f001 fb79 	bl	8003118 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 f80e 	bl	8001a48 <HAL_InitTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	e001      	b.n	8001a3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a38:	f7ff fd4c 	bl	80014d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_InitTick+0x68>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d022      	beq.n	8001aa2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_InitTick+0x6c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_InitTick+0x68>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f001 fb84 	bl	800317e <HAL_SYSTICK_Config>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10f      	bne.n	8001a9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	d809      	bhi.n	8001a96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a82:	2200      	movs	r2, #0
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8a:	f001 fb50 	bl	800312e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_InitTick+0x70>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e007      	b.n	8001aa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	e004      	b.n	8001aa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e001      	b.n	8001aa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_IncTick+0x1c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_IncTick+0x20>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <HAL_IncTick+0x1c>)
 8001acc:	6013      	str	r3, [r2, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	200002c8 	.word	0x200002c8
 8001adc:	20000008 	.word	0x20000008

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	200002c8 	.word	0x200002c8

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff ffee 	bl	8001ae0 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d004      	beq.n	8001b1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_Delay+0x40>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1c:	bf00      	nop
 8001b1e:	f7ff ffdf 	bl	8001ae0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d8f7      	bhi.n	8001b1e <HAL_Delay+0x26>
  {
  }
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000008 	.word	0x20000008

08001b3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	609a      	str	r2, [r3, #8]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3360      	adds	r3, #96	; 0x60
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <LL_ADC_SetOffset+0x44>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bdc:	bf00      	nop
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	03fff000 	.word	0x03fff000

08001bec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3360      	adds	r3, #96	; 0x60
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3360      	adds	r3, #96	; 0x60
 8001c28:	461a      	mov	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b087      	sub	sp, #28
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3360      	adds	r3, #96	; 0x60
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c78:	bf00      	nop
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3360      	adds	r3, #96	; 0x60
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	615a      	str	r2, [r3, #20]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3330      	adds	r3, #48	; 0x30
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	4413      	add	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	211f      	movs	r1, #31
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	f003 011f 	and.w	r1, r3, #31
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	431a      	orrs	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3314      	adds	r3, #20
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	0e5b      	lsrs	r3, r3, #25
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	4413      	add	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	0d1b      	lsrs	r3, r3, #20
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	2107      	movs	r1, #7
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	0d1b      	lsrs	r3, r3, #20
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10a      	bne.n	8001dba <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	431a      	orrs	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	401a      	ands	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	407f0000 	.word	0x407f0000

08001de0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6093      	str	r3, [r2, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e18:	d101      	bne.n	8001e1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e68:	d101      	bne.n	8001e6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e90:	f043 0202 	orr.w	r2, r3, #2
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <LL_ADC_IsEnabled+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_ADC_IsEnabled+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d101      	bne.n	8001ee2 <LL_ADC_IsDisableOngoing+0x18>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_ADC_IsDisableOngoing+0x1a>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d101      	bne.n	8001f08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d101      	bne.n	8001f2e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1af      	b.n	80022b6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fad9 	bl	800151c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff41 	bl	8001e04 <LL_ADC_IsDeepPowerDownEnabled>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff27 	bl	8001de0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff5c 	bl	8001e54 <LL_ADC_IsInternalRegulatorEnabled>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d115      	bne.n	8001fce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff40 	bl	8001e2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fac:	4b9f      	ldr	r3, [pc, #636]	; (800222c <HAL_ADC_Init+0x2f0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	4a9f      	ldr	r2, [pc, #636]	; (8002230 <HAL_ADC_Init+0x2f4>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fc0:	e002      	b.n	8001fc8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f9      	bne.n	8001fc2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff3e 	bl	8001e54 <LL_ADC_IsInternalRegulatorEnabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	f043 0210 	orr.w	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff76 	bl	8001ef0 <LL_ADC_REG_IsConversionOngoing>
 8002004:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 8148 	bne.w	80022a4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8144 	bne.w	80022a4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002024:	f043 0202 	orr.w	r2, r3, #2
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff37 	bl	8001ea4 <LL_ADC_IsEnabled>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d141      	bne.n	80020c0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002044:	d004      	beq.n	8002050 <HAL_ADC_Init+0x114>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7a      	ldr	r2, [pc, #488]	; (8002234 <HAL_ADC_Init+0x2f8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d10f      	bne.n	8002070 <HAL_ADC_Init+0x134>
 8002050:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002054:	f7ff ff26 	bl	8001ea4 <LL_ADC_IsEnabled>
 8002058:	4604      	mov	r4, r0
 800205a:	4876      	ldr	r0, [pc, #472]	; (8002234 <HAL_ADC_Init+0x2f8>)
 800205c:	f7ff ff22 	bl	8001ea4 <LL_ADC_IsEnabled>
 8002060:	4603      	mov	r3, r0
 8002062:	4323      	orrs	r3, r4
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e012      	b.n	8002096 <HAL_ADC_Init+0x15a>
 8002070:	4871      	ldr	r0, [pc, #452]	; (8002238 <HAL_ADC_Init+0x2fc>)
 8002072:	f7ff ff17 	bl	8001ea4 <LL_ADC_IsEnabled>
 8002076:	4604      	mov	r4, r0
 8002078:	4870      	ldr	r0, [pc, #448]	; (800223c <HAL_ADC_Init+0x300>)
 800207a:	f7ff ff13 	bl	8001ea4 <LL_ADC_IsEnabled>
 800207e:	4603      	mov	r3, r0
 8002080:	431c      	orrs	r4, r3
 8002082:	486f      	ldr	r0, [pc, #444]	; (8002240 <HAL_ADC_Init+0x304>)
 8002084:	f7ff ff0e 	bl	8001ea4 <LL_ADC_IsEnabled>
 8002088:	4603      	mov	r3, r0
 800208a:	4323      	orrs	r3, r4
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a2:	d004      	beq.n	80020ae <HAL_ADC_Init+0x172>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a62      	ldr	r2, [pc, #392]	; (8002234 <HAL_ADC_Init+0x2f8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x176>
 80020ae:	4a65      	ldr	r2, [pc, #404]	; (8002244 <HAL_ADC_Init+0x308>)
 80020b0:	e000      	b.n	80020b4 <HAL_ADC_Init+0x178>
 80020b2:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_ADC_Init+0x30c>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7ff fd3e 	bl	8001b3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7f5b      	ldrb	r3, [r3, #29]
 80020c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	3b01      	subs	r3, #1
 80020f4:	045b      	lsls	r3, r3, #17
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b4b      	ldr	r3, [pc, #300]	; (800224c <HAL_ADC_Init+0x310>)
 8002120:	4013      	ands	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	430b      	orrs	r3, r1
 800212a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fed2 	bl	8001ef0 <LL_ADC_REG_IsConversionOngoing>
 800214c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fedf 	bl	8001f16 <LL_ADC_INJ_IsConversionOngoing>
 8002158:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d17f      	bne.n	8002260 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d17c      	bne.n	8002260 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800216a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002172:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002182:	f023 0302 	bic.w	r3, r3, #2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	69b9      	ldr	r1, [r7, #24]
 800218c:	430b      	orrs	r3, r1
 800218e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d017      	beq.n	80021c8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6911      	ldr	r1, [r2, #16]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80021c6:	e013      	b.n	80021f0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d12a      	bne.n	8002250 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800221c:	430a      	orrs	r2, r1
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	611a      	str	r2, [r3, #16]
 800222a:	e019      	b.n	8002260 <HAL_ADC_Init+0x324>
 800222c:	20000000 	.word	0x20000000
 8002230:	053e2d63 	.word	0x053e2d63
 8002234:	50000100 	.word	0x50000100
 8002238:	50000400 	.word	0x50000400
 800223c:	50000500 	.word	0x50000500
 8002240:	50000600 	.word	0x50000600
 8002244:	50000300 	.word	0x50000300
 8002248:	50000700 	.word	0x50000700
 800224c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10c      	bne.n	8002282 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f023 010f 	bic.w	r1, r3, #15
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	1e5a      	subs	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
 8002280:	e007      	b.n	8002292 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 020f 	bic.w	r2, r2, #15
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	f023 0303 	bic.w	r3, r3, #3
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80022a2:	e007      	b.n	80022b4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	f043 0210 	orr.w	r2, r3, #16
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd90      	pop	{r4, r7, pc}
 80022be:	bf00      	nop

080022c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0b6      	sub	sp, #216	; 0xd8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d102      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x24>
 80022de:	2302      	movs	r3, #2
 80022e0:	f000 bc13 	b.w	8002b0a <HAL_ADC_ConfigChannel+0x84a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fdfd 	bl	8001ef0 <LL_ADC_REG_IsConversionOngoing>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 83f3 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	f7ff fce8 	bl	8001ce0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fdeb 	bl	8001ef0 <LL_ADC_REG_IsConversionOngoing>
 800231a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fdf7 	bl	8001f16 <LL_ADC_INJ_IsConversionOngoing>
 8002328:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800232c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 81d9 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002336:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 81d4 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002348:	d10f      	bne.n	800236a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	4619      	mov	r1, r3
 8002356:	f7ff fcef 	bl	8001d38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fca9 	bl	8001cba <LL_ADC_SetSamplingTimeCommonConfig>
 8002368:	e00e      	b.n	8002388 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6819      	ldr	r1, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	461a      	mov	r2, r3
 8002378:	f7ff fcde 	bl	8001d38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fc99 	bl	8001cba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	08db      	lsrs	r3, r3, #3
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d022      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6919      	ldr	r1, [r3, #16]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023ba:	f7ff fbf3 	bl	8001ba4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6919      	ldr	r1, [r3, #16]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f7ff fc3f 	bl	8001c4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6919      	ldr	r1, [r3, #16]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	7f1b      	ldrb	r3, [r3, #28]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d102      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x126>
 80023e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e4:	e000      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x128>
 80023e6:	2300      	movs	r3, #0
 80023e8:	461a      	mov	r2, r3
 80023ea:	f7ff fc4b 	bl	8001c84 <LL_ADC_SetOffsetSaturation>
 80023ee:	e17b      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fbf8 	bl	8001bec <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_ADC_ConfigChannel+0x15c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fbed 	bl	8001bec <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	e01e      	b.n	800245a <HAL_ADC_ConfigChannel+0x19a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fbe2 	bl	8001bec <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800243a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800243e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800244e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x1b2>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e018      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x1e4>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800248a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800248e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800249a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fbb1 	bl	8001c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fb95 	bl	8001bec <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x222>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fb8a 	bl	8001bec <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	e01e      	b.n	8002520 <HAL_ADC_ConfigChannel+0x260>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fb7f 	bl	8001bec <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002500:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x278>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	e018      	b.n	800256a <HAL_ADC_ConfigChannel+0x2aa>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800254c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e004      	b.n	800256a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800256a:	429a      	cmp	r2, r3
 800256c:	d106      	bne.n	800257c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fb4e 	bl	8001c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2102      	movs	r1, #2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fb32 	bl	8001bec <LL_ADC_GetOffsetChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x2e8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fb27 	bl	8001bec <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 021f 	and.w	r2, r3, #31
 80025a6:	e01e      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x326>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fb1c 	bl	8001bec <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e004      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80025da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x33e>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	e016      	b.n	800262c <HAL_ADC_ConfigChannel+0x36c>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e004      	b.n	800262c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800262c:	429a      	cmp	r2, r3
 800262e:	d106      	bne.n	800263e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff faed 	bl	8001c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2103      	movs	r1, #3
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fad1 	bl	8001bec <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <HAL_ADC_ConfigChannel+0x3aa>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2103      	movs	r1, #3
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fac6 	bl	8001bec <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	e017      	b.n	800269a <HAL_ADC_ConfigChannel+0x3da>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2103      	movs	r1, #3
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fabb 	bl	8001bec <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002684:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x3f2>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	e011      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x416>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80026ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d106      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	2103      	movs	r1, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fa98 	bl	8001c18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fbd9 	bl	8001ea4 <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 813d 	bne.w	8002974 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f7ff fb42 	bl	8001d90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4aa2      	ldr	r2, [pc, #648]	; (800299c <HAL_ADC_ConfigChannel+0x6dc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	f040 812e 	bne.w	8002974 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x480>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	3301      	adds	r3, #1
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2b09      	cmp	r3, #9
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	e019      	b.n	8002774 <HAL_ADC_ConfigChannel+0x4b4>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800274e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002750:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800275c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b09      	cmp	r3, #9
 800276c:	bf94      	ite	ls
 800276e:	2301      	movls	r3, #1
 8002770:	2300      	movhi	r3, #0
 8002772:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002774:	2b00      	cmp	r3, #0
 8002776:	d079      	beq.n	800286c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d107      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x4d4>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	3301      	adds	r3, #1
 800278c:	069b      	lsls	r3, r3, #26
 800278e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002792:	e015      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x500>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e003      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	069b      	lsls	r3, r3, #26
 80027bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x520>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	e017      	b.n	8002810 <HAL_ADC_ConfigChannel+0x550>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80027fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	ea42 0103 	orr.w	r1, r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x576>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	3301      	adds	r3, #1
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	051b      	lsls	r3, r3, #20
 8002834:	e018      	b.n	8002868 <HAL_ADC_ConfigChannel+0x5a8>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002868:	430b      	orrs	r3, r1
 800286a:	e07e      	b.n	800296a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x5c8>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	3301      	adds	r3, #1
 8002880:	069b      	lsls	r3, r3, #26
 8002882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002886:	e015      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x5f4>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	069b      	lsls	r3, r3, #26
 80028b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x614>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	e017      	b.n	8002904 <HAL_ADC_ConfigChannel+0x644>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	61fb      	str	r3, [r7, #28]
  return result;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e003      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	ea42 0103 	orr.w	r1, r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x670>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	3301      	adds	r3, #1
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	3b1e      	subs	r3, #30
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800292e:	e01b      	b.n	8002968 <HAL_ADC_ConfigChannel+0x6a8>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	613b      	str	r3, [r7, #16]
  return result;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e003      	b.n	8002954 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	3301      	adds	r3, #1
 8002956:	f003 021f 	and.w	r2, r3, #31
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	3b1e      	subs	r3, #30
 8002962:	051b      	lsls	r3, r3, #20
 8002964:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002968:	430b      	orrs	r3, r1
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	6892      	ldr	r2, [r2, #8]
 800296e:	4619      	mov	r1, r3
 8002970:	f7ff f9e2 	bl	8001d38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_ADC_ConfigChannel+0x6e0>)
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80be 	beq.w	8002afe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800298a:	d004      	beq.n	8002996 <HAL_ADC_ConfigChannel+0x6d6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_ADC_ConfigChannel+0x6e4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10a      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x6ec>
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_ADC_ConfigChannel+0x6e8>)
 8002998:	e009      	b.n	80029ae <HAL_ADC_ConfigChannel+0x6ee>
 800299a:	bf00      	nop
 800299c:	407f0000 	.word	0x407f0000
 80029a0:	80080000 	.word	0x80080000
 80029a4:	50000100 	.word	0x50000100
 80029a8:	50000300 	.word	0x50000300
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_ADC_ConfigChannel+0x854>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f8ea 	bl	8001b88 <LL_ADC_GetCommonPathInternalCh>
 80029b4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <HAL_ADC_ConfigChannel+0x858>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x70c>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a55      	ldr	r2, [pc, #340]	; (8002b1c <HAL_ADC_ConfigChannel+0x85c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d13a      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d134      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e0:	d005      	beq.n	80029ee <HAL_ADC_ConfigChannel+0x72e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_ADC_ConfigChannel+0x860>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	f040 8085 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f6:	d004      	beq.n	8002a02 <HAL_ADC_ConfigChannel+0x742>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <HAL_ADC_ConfigChannel+0x864>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x746>
 8002a02:	4a49      	ldr	r2, [pc, #292]	; (8002b28 <HAL_ADC_ConfigChannel+0x868>)
 8002a04:	e000      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x748>
 8002a06:	4a43      	ldr	r2, [pc, #268]	; (8002b14 <HAL_ADC_ConfigChannel+0x854>)
 8002a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f7ff f8a5 	bl	8001b62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a18:	4b44      	ldr	r3, [pc, #272]	; (8002b2c <HAL_ADC_ConfigChannel+0x86c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	4a44      	ldr	r2, [pc, #272]	; (8002b30 <HAL_ADC_ConfigChannel+0x870>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a32:	e002      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f9      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a40:	e05a      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a3b      	ldr	r2, [pc, #236]	; (8002b34 <HAL_ADC_ConfigChannel+0x874>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d125      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x7d8>
 8002a4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11f      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a31      	ldr	r2, [pc, #196]	; (8002b24 <HAL_ADC_ConfigChannel+0x864>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d104      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x7ac>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a34      	ldr	r2, [pc, #208]	; (8002b38 <HAL_ADC_ConfigChannel+0x878>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d047      	beq.n	8002afc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a74:	d004      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x7c0>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2a      	ldr	r2, [pc, #168]	; (8002b24 <HAL_ADC_ConfigChannel+0x864>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x7c4>
 8002a80:	4a29      	ldr	r2, [pc, #164]	; (8002b28 <HAL_ADC_ConfigChannel+0x868>)
 8002a82:	e000      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x7c6>
 8002a84:	4a23      	ldr	r2, [pc, #140]	; (8002b14 <HAL_ADC_ConfigChannel+0x854>)
 8002a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f7ff f866 	bl	8001b62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a96:	e031      	b.n	8002afc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <HAL_ADC_ConfigChannel+0x87c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d12d      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002aa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d127      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <HAL_ADC_ConfigChannel+0x864>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d022      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac0:	d004      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x80c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <HAL_ADC_ConfigChannel+0x864>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x810>
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_ADC_ConfigChannel+0x868>)
 8002ace:	e000      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x812>
 8002ad0:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_ADC_ConfigChannel+0x854>)
 8002ad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ad6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ada:	4619      	mov	r1, r3
 8002adc:	4610      	mov	r0, r2
 8002ade:	f7ff f840 	bl	8001b62 <LL_ADC_SetCommonPathInternalCh>
 8002ae2:	e00c      	b.n	8002afe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002af6:	e002      	b.n	8002afe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af8:	bf00      	nop
 8002afa:	e000      	b.n	8002afe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002afc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b06:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	37d8      	adds	r7, #216	; 0xd8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	50000700 	.word	0x50000700
 8002b18:	c3210000 	.word	0xc3210000
 8002b1c:	90c00010 	.word	0x90c00010
 8002b20:	50000600 	.word	0x50000600
 8002b24:	50000100 	.word	0x50000100
 8002b28:	50000300 	.word	0x50000300
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	053e2d63 	.word	0x053e2d63
 8002b34:	c7520000 	.word	0xc7520000
 8002b38:	50000500 	.word	0x50000500
 8002b3c:	cb840000 	.word	0xcb840000

08002b40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff f9bc 	bl	8001eca <LL_ADC_IsDisableOngoing>
 8002b52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff f9a3 	bl	8001ea4 <LL_ADC_IsEnabled>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d047      	beq.n	8002bf4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d144      	bne.n	8002bf4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030d 	and.w	r3, r3, #13
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d10c      	bne.n	8002b92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f97d 	bl	8001e7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2203      	movs	r2, #3
 8002b88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b8a:	f7fe ffa9 	bl	8001ae0 <HAL_GetTick>
 8002b8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b90:	e029      	b.n	8002be6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e023      	b.n	8002bf6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bae:	f7fe ff97 	bl	8001ae0 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d914      	bls.n	8002be6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1dc      	bne.n	8002bae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <LL_ADC_IsEnabled>:
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <LL_ADC_IsEnabled+0x18>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <LL_ADC_IsEnabled+0x1a>
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_StartCalibration>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002c36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	609a      	str	r2, [r3, #8]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_IsCalibrationOnGoing>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c6a:	d101      	bne.n	8002c70 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_ADC_REG_IsConversionOngoing>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d101      	bne.n	8002c96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e04d      	b.n	8002d5c <HAL_ADCEx_Calibration_Start+0xb8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff39 	bl	8002b40 <ADC_Disable>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d136      	bne.n	8002d46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ce0:	f023 0302 	bic.w	r3, r3, #2
 8002ce4:	f043 0202 	orr.w	r2, r3, #2
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff96 	bl	8002c24 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002cf8:	e014      	b.n	8002d24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d90d      	bls.n	8002d24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	f023 0312 	bic.w	r3, r3, #18
 8002d10:	f043 0210 	orr.w	r2, r3, #16
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e01b      	b.n	8002d5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff94 	bl	8002c56 <LL_ADC_IsCalibrationOnGoing>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e2      	bne.n	8002cfa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	f023 0303 	bic.w	r3, r3, #3
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d44:	e005      	b.n	8002d52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	0004de01 	.word	0x0004de01

08002d68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b0a1      	sub	sp, #132	; 0x84
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e0e7      	b.n	8002f56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002d92:	2300      	movs	r3, #0
 8002d94:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9e:	d102      	bne.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002da0:	4b6f      	ldr	r3, [pc, #444]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	e009      	b.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d102      	bne.n	8002db6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002db0:	4b6d      	ldr	r3, [pc, #436]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	e001      	b.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0be      	b.n	8002f56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff4f 	bl	8002c7e <LL_ADC_REG_IsConversionOngoing>
 8002de0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff49 	bl	8002c7e <LL_ADC_REG_IsConversionOngoing>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 80a0 	bne.w	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 809c 	bne.w	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e04:	d004      	beq.n	8002e10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a55      	ldr	r2, [pc, #340]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e10:	4b56      	ldr	r3, [pc, #344]	; (8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002e12:	e000      	b.n	8002e16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e14:	4b56      	ldr	r3, [pc, #344]	; (8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002e16:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d04b      	beq.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e32:	035b      	lsls	r3, r3, #13
 8002e34:	430b      	orrs	r3, r1
 8002e36:	431a      	orrs	r2, r3
 8002e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e44:	d004      	beq.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a45      	ldr	r2, [pc, #276]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d10f      	bne.n	8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002e50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e54:	f7ff fed3 	bl	8002bfe <LL_ADC_IsEnabled>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	4841      	ldr	r0, [pc, #260]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e5c:	f7ff fecf 	bl	8002bfe <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4323      	orrs	r3, r4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e012      	b.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e70:	483c      	ldr	r0, [pc, #240]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e72:	f7ff fec4 	bl	8002bfe <LL_ADC_IsEnabled>
 8002e76:	4604      	mov	r4, r0
 8002e78:	483b      	ldr	r0, [pc, #236]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e7a:	f7ff fec0 	bl	8002bfe <LL_ADC_IsEnabled>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	431c      	orrs	r4, r3
 8002e82:	483c      	ldr	r0, [pc, #240]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e84:	f7ff febb 	bl	8002bfe <LL_ADC_IsEnabled>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4323      	orrs	r3, r4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d056      	beq.n	8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ea2:	f023 030f 	bic.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	6811      	ldr	r1, [r2, #0]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	6892      	ldr	r2, [r2, #8]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb6:	e047      	b.n	8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ecc:	d004      	beq.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10f      	bne.n	8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002ed8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002edc:	f7ff fe8f 	bl	8002bfe <LL_ADC_IsEnabled>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	481f      	ldr	r0, [pc, #124]	; (8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ee4:	f7ff fe8b 	bl	8002bfe <LL_ADC_IsEnabled>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	4323      	orrs	r3, r4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e012      	b.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ef8:	481a      	ldr	r0, [pc, #104]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002efa:	f7ff fe80 	bl	8002bfe <LL_ADC_IsEnabled>
 8002efe:	4604      	mov	r4, r0
 8002f00:	4819      	ldr	r0, [pc, #100]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f02:	f7ff fe7c 	bl	8002bfe <LL_ADC_IsEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	431c      	orrs	r4, r3
 8002f0a:	481a      	ldr	r0, [pc, #104]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002f0c:	f7ff fe77 	bl	8002bfe <LL_ADC_IsEnabled>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4323      	orrs	r3, r4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d012      	beq.n	8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f2a:	f023 030f 	bic.w	r3, r3, #15
 8002f2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f32:	e009      	b.n	8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f46:	e000      	b.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3784      	adds	r7, #132	; 0x84
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd90      	pop	{r4, r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	50000100 	.word	0x50000100
 8002f64:	50000400 	.word	0x50000400
 8002f68:	50000500 	.word	0x50000500
 8002f6c:	50000300 	.word	0x50000300
 8002f70:	50000700 	.word	0x50000700
 8002f74:	50000600 	.word	0x50000600

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60d3      	str	r3, [r2, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db0b      	blt.n	8003006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4907      	ldr	r1, [pc, #28]	; (8003014 <__NVIC_EnableIRQ+0x38>)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100

08003018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	; (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf28      	it	cs
 800308a:	2304      	movcs	r3, #4
 800308c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3304      	adds	r3, #4
 8003092:	2b06      	cmp	r3, #6
 8003094:	d902      	bls.n	800309c <NVIC_EncodePriority+0x30>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3b03      	subs	r3, #3
 800309a:	e000      	b.n	800309e <NVIC_EncodePriority+0x32>
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43d9      	mvns	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	4313      	orrs	r3, r2
         );
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e4:	d301      	bcc.n	80030ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00f      	b.n	800310a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <SysTick_Config+0x40>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f2:	210f      	movs	r1, #15
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f7ff ff8e 	bl	8003018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <SysTick_Config+0x40>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <SysTick_Config+0x40>)
 8003104:	2207      	movs	r2, #7
 8003106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000e010 	.word	0xe000e010

08003118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff29 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800313c:	f7ff ff40 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 8003140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff ff90 	bl	800306c <NVIC_EncodePriority>
 800314c:	4602      	mov	r2, r0
 800314e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff5f 	bl	8003018 <__NVIC_SetPriority>
}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff33 	bl	8002fdc <__NVIC_EnableIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffa4 	bl	80030d4 <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e08d      	b.n	80032c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_DMA_Init+0x138>)
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d80f      	bhi.n	80031d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b45      	ldr	r3, [pc, #276]	; (80032d4 <HAL_DMA_Init+0x13c>)
 80031be:	4413      	add	r3, r2
 80031c0:	4a45      	ldr	r2, [pc, #276]	; (80032d8 <HAL_DMA_Init+0x140>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	009a      	lsls	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a42      	ldr	r2, [pc, #264]	; (80032dc <HAL_DMA_Init+0x144>)
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
 80031d4:	e00e      	b.n	80031f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <HAL_DMA_Init+0x148>)
 80031de:	4413      	add	r3, r2
 80031e0:	4a3d      	ldr	r2, [pc, #244]	; (80032d8 <HAL_DMA_Init+0x140>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	009a      	lsls	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <HAL_DMA_Init+0x14c>)
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8fe 	bl	8003448 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003254:	d102      	bne.n	800325c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003270:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d010      	beq.n	800329c <HAL_DMA_Init+0x104>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b04      	cmp	r3, #4
 8003280:	d80c      	bhi.n	800329c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f91e 	bl	80034c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e008      	b.n	80032ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40020407 	.word	0x40020407
 80032d4:	bffdfff8 	.word	0xbffdfff8
 80032d8:	cccccccd 	.word	0xcccccccd
 80032dc:	40020000 	.word	0x40020000
 80032e0:	bffdfbf8 	.word	0xbffdfbf8
 80032e4:	40020400 	.word	0x40020400

080032e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2204      	movs	r2, #4
 800330a:	409a      	lsls	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d026      	beq.n	8003362 <HAL_DMA_IRQHandler+0x7a>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d021      	beq.n	8003362 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d107      	bne.n	800333c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0204 	bic.w	r2, r2, #4
 800333a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	f003 021f 	and.w	r2, r3, #31
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	2104      	movs	r1, #4
 800334a:	fa01 f202 	lsl.w	r2, r1, r2
 800334e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	2b00      	cmp	r3, #0
 8003356:	d071      	beq.n	800343c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003360:	e06c      	b.n	800343c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2202      	movs	r2, #2
 800336c:	409a      	lsls	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d02e      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d029      	beq.n	80033d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 020a 	bic.w	r2, r2, #10
 800339c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f003 021f 	and.w	r2, r3, #31
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	2102      	movs	r1, #2
 80033b4:	fa01 f202 	lsl.w	r2, r1, r2
 80033b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d038      	beq.n	800343c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033d2:	e033      	b.n	800343c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2208      	movs	r2, #8
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02a      	beq.n	800343e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d025      	beq.n	800343e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 020e 	bic.w	r2, r2, #14
 8003400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f003 021f 	and.w	r2, r3, #31
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f202 	lsl.w	r2, r1, r2
 8003414:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800343c:	bf00      	nop
 800343e:	bf00      	nop
}
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d802      	bhi.n	8003462 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800345c:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e001      	b.n	8003466 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003464:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3b08      	subs	r3, #8
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	009a      	lsls	r2, r3, #2
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	461a      	mov	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a0b      	ldr	r2, [pc, #44]	; (80034c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003492:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2201      	movs	r2, #1
 800349c:	409a      	lsls	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40020407 	.word	0x40020407
 80034b4:	40020800 	.word	0x40020800
 80034b8:	40020820 	.word	0x40020820
 80034bc:	cccccccd 	.word	0xcccccccd
 80034c0:	40020880 	.word	0x40020880

080034c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a08      	ldr	r2, [pc, #32]	; (8003508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034e6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2201      	movs	r2, #1
 80034f2:	409a      	lsls	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	1000823f 	.word	0x1000823f
 8003508:	40020940 	.word	0x40020940

0800350c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e147      	b.n	80037ae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe f8fa 	bl	800172c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0210 	bic.w	r2, r2, #16
 8003546:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003548:	f7fe faca 	bl	8001ae0 <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800354e:	e012      	b.n	8003576 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003550:	f7fe fac6 	bl	8001ae0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b0a      	cmp	r3, #10
 800355c:	d90b      	bls.n	8003576 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2203      	movs	r2, #3
 800356e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e11b      	b.n	80037ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d0e5      	beq.n	8003550 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003594:	f7fe faa4 	bl	8001ae0 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800359a:	e012      	b.n	80035c2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800359c:	f7fe faa0 	bl	8001ae0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b0a      	cmp	r3, #10
 80035a8:	d90b      	bls.n	80035c2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2203      	movs	r2, #3
 80035ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0f5      	b.n	80037ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0e5      	beq.n	800359c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0202 	orr.w	r2, r2, #2
 80035de:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a74      	ldr	r2, [pc, #464]	; (80037b8 <HAL_FDCAN_Init+0x2ac>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d103      	bne.n	80035f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80035ea:	4a74      	ldr	r2, [pc, #464]	; (80037bc <HAL_FDCAN_Init+0x2b0>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7c1b      	ldrb	r3, [r3, #16]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d108      	bne.n	800360c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003608:	619a      	str	r2, [r3, #24]
 800360a:	e007      	b.n	800361c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800361a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7c5b      	ldrb	r3, [r3, #17]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d108      	bne.n	8003636 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003632:	619a      	str	r2, [r3, #24]
 8003634:	e007      	b.n	8003646 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003644:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7c9b      	ldrb	r3, [r3, #18]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d108      	bne.n	8003660 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800365c:	619a      	str	r2, [r3, #24]
 800365e:	e007      	b.n	8003670 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800366e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003694:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0210 	bic.w	r2, r2, #16
 80036a4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d108      	bne.n	80036c0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0204 	orr.w	r2, r2, #4
 80036bc:	619a      	str	r2, [r3, #24]
 80036be:	e02c      	b.n	800371a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d028      	beq.n	800371a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d01c      	beq.n	800370a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036de:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0210 	orr.w	r2, r2, #16
 80036ee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d110      	bne.n	800371a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0220 	orr.w	r2, r2, #32
 8003706:	619a      	str	r2, [r3, #24]
 8003708:	e007      	b.n	800371a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0220 	orr.w	r2, r2, #32
 8003718:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	3b01      	subs	r3, #1
 8003720:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	3b01      	subs	r3, #1
 8003728:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800372a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003732:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	3b01      	subs	r3, #1
 800373c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003742:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003744:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800374e:	d115      	bne.n	800377c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	3b01      	subs	r3, #1
 800375c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800375e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	3b01      	subs	r3, #1
 8003766:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003768:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	3b01      	subs	r3, #1
 8003772:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003778:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800377a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f814 	bl	80037c0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40006400 	.word	0x40006400
 80037bc:	40006500 	.word	0x40006500

080037c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80037c8:	4b30      	ldr	r3, [pc, #192]	; (800388c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80037ca:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2f      	ldr	r2, [pc, #188]	; (8003890 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d103      	bne.n	80037de <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80037dc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2c      	ldr	r2, [pc, #176]	; (8003894 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d103      	bne.n	80037f0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80037ee:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037fe:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003806:	041a      	lsls	r2, r3, #16
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003824:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	061a      	lsls	r2, r3, #24
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e005      	b.n	8003872 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3304      	adds	r3, #4
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	429a      	cmp	r2, r3
 800387c:	d3f3      	bcc.n	8003866 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	4000a400 	.word	0x4000a400
 8003890:	40006800 	.word	0x40006800
 8003894:	40006c00 	.word	0x40006c00

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038a6:	e15a      	b.n	8003b5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	4013      	ands	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 814c 	beq.w	8003b58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d005      	beq.n	80038d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d130      	bne.n	800393a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800390e:	2201      	movs	r2, #1
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4013      	ands	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	f003 0201 	and.w	r2, r3, #1
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b03      	cmp	r3, #3
 8003944:	d017      	beq.n	8003976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	2203      	movs	r2, #3
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d123      	bne.n	80039ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	08da      	lsrs	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3208      	adds	r2, #8
 80039c4:	6939      	ldr	r1, [r7, #16]
 80039c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 0203 	and.w	r2, r3, #3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80a6 	beq.w	8003b58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0c:	4b5b      	ldr	r3, [pc, #364]	; (8003b7c <HAL_GPIO_Init+0x2e4>)
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a10:	4a5a      	ldr	r2, [pc, #360]	; (8003b7c <HAL_GPIO_Init+0x2e4>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6613      	str	r3, [r2, #96]	; 0x60
 8003a18:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <HAL_GPIO_Init+0x2e4>)
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a24:	4a56      	ldr	r2, [pc, #344]	; (8003b80 <HAL_GPIO_Init+0x2e8>)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a4e:	d01f      	beq.n	8003a90 <HAL_GPIO_Init+0x1f8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a4c      	ldr	r2, [pc, #304]	; (8003b84 <HAL_GPIO_Init+0x2ec>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d019      	beq.n	8003a8c <HAL_GPIO_Init+0x1f4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <HAL_GPIO_Init+0x2f0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <HAL_GPIO_Init+0x1f0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <HAL_GPIO_Init+0x2f4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00d      	beq.n	8003a84 <HAL_GPIO_Init+0x1ec>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a49      	ldr	r2, [pc, #292]	; (8003b90 <HAL_GPIO_Init+0x2f8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <HAL_GPIO_Init+0x1e8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a48      	ldr	r2, [pc, #288]	; (8003b94 <HAL_GPIO_Init+0x2fc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <HAL_GPIO_Init+0x1e4>
 8003a78:	2305      	movs	r3, #5
 8003a7a:	e00a      	b.n	8003a92 <HAL_GPIO_Init+0x1fa>
 8003a7c:	2306      	movs	r3, #6
 8003a7e:	e008      	b.n	8003a92 <HAL_GPIO_Init+0x1fa>
 8003a80:	2304      	movs	r3, #4
 8003a82:	e006      	b.n	8003a92 <HAL_GPIO_Init+0x1fa>
 8003a84:	2303      	movs	r3, #3
 8003a86:	e004      	b.n	8003a92 <HAL_GPIO_Init+0x1fa>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e002      	b.n	8003a92 <HAL_GPIO_Init+0x1fa>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_GPIO_Init+0x1fa>
 8003a90:	2300      	movs	r3, #0
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	f002 0203 	and.w	r2, r2, #3
 8003a98:	0092      	lsls	r2, r2, #2
 8003a9a:	4093      	lsls	r3, r2
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa2:	4937      	ldr	r1, [pc, #220]	; (8003b80 <HAL_GPIO_Init+0x2e8>)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab0:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ad4:	4a30      	ldr	r2, [pc, #192]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ada:	4b2f      	ldr	r3, [pc, #188]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003afe:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b04:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f47f ae9d 	bne.w	80038a8 <HAL_GPIO_Init+0x10>
  }
}
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40010000 	.word	0x40010000
 8003b84:	48000400 	.word	0x48000400
 8003b88:	48000800 	.word	0x48000800
 8003b8c:	48000c00 	.word	0x48000c00
 8003b90:	48001000 	.word	0x48001000
 8003b94:	48001400 	.word	0x48001400
 8003b98:	40010400 	.word	0x40010400

08003b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bac:	787b      	ldrb	r3, [r7, #1]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb8:	e002      	b.n	8003bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d141      	bne.n	8003c5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bda:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be6:	d131      	bne.n	8003c4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003be8:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bee:	4a46      	ldr	r2, [pc, #280]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bf8:	4b43      	ldr	r3, [pc, #268]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c00:	4a41      	ldr	r2, [pc, #260]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c08:	4b40      	ldr	r3, [pc, #256]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2232      	movs	r2, #50	; 0x32
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	4a3f      	ldr	r2, [pc, #252]	; (8003d10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	0c9b      	lsrs	r3, r3, #18
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c1e:	e002      	b.n	8003c26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c26:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c32:	d102      	bne.n	8003c3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f2      	bne.n	8003c20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c3a:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c46:	d158      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e057      	b.n	8003cfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c4c:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c52:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c5c:	e04d      	b.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c64:	d141      	bne.n	8003cea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c66:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c72:	d131      	bne.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c74:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7a:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c8c:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2232      	movs	r2, #50	; 0x32
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	0c9b      	lsrs	r3, r3, #18
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003caa:	e002      	b.n	8003cb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d102      	bne.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f2      	bne.n	8003cac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	d112      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e011      	b.n	8003cfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cde:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ce8:	e007      	b.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cea:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cf2:	4a05      	ldr	r2, [pc, #20]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cf8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	431bde83 	.word	0x431bde83

08003d14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d22:	6093      	str	r3, [r2, #8]
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40007000 	.word	0x40007000

08003d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e306      	b.n	8004354 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d075      	beq.n	8003e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d52:	4b97      	ldr	r3, [pc, #604]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d5c:	4b94      	ldr	r3, [pc, #592]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d102      	bne.n	8003d72 <HAL_RCC_OscConfig+0x3e>
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d002      	beq.n	8003d78 <HAL_RCC_OscConfig+0x44>
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d10b      	bne.n	8003d90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	4b8d      	ldr	r3, [pc, #564]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d05b      	beq.n	8003e3c <HAL_RCC_OscConfig+0x108>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d157      	bne.n	8003e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e2e1      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d98:	d106      	bne.n	8003da8 <HAL_RCC_OscConfig+0x74>
 8003d9a:	4b85      	ldr	r3, [pc, #532]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a84      	ldr	r2, [pc, #528]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e01d      	b.n	8003de4 <HAL_RCC_OscConfig+0xb0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x98>
 8003db2:	4b7f      	ldr	r3, [pc, #508]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7e      	ldr	r2, [pc, #504]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4b7c      	ldr	r3, [pc, #496]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7b      	ldr	r2, [pc, #492]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e00b      	b.n	8003de4 <HAL_RCC_OscConfig+0xb0>
 8003dcc:	4b78      	ldr	r3, [pc, #480]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a77      	ldr	r2, [pc, #476]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b75      	ldr	r3, [pc, #468]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a74      	ldr	r2, [pc, #464]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d013      	beq.n	8003e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd fe78 	bl	8001ae0 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fd fe74 	bl	8001ae0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e2a6      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e06:	4b6a      	ldr	r3, [pc, #424]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0xc0>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fd fe64 	bl	8001ae0 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fd fe60 	bl	8001ae0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e292      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e2e:	4b60      	ldr	r3, [pc, #384]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0xe8>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d075      	beq.n	8003f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e4a:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e54:	4b56      	ldr	r3, [pc, #344]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d102      	bne.n	8003e6a <HAL_RCC_OscConfig+0x136>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d002      	beq.n	8003e70 <HAL_RCC_OscConfig+0x13c>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d11f      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e70:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_OscConfig+0x154>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e265      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e88:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	4946      	ldr	r1, [pc, #280]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e9c:	4b45      	ldr	r3, [pc, #276]	; (8003fb4 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fd fdd1 	bl	8001a48 <HAL_InitTick>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d043      	beq.n	8003f34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e251      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d023      	beq.n	8003f00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb8:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a3c      	ldr	r2, [pc, #240]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fe0c 	bl	8001ae0 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fd fe08 	bl	8001ae0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e23a      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ede:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	492d      	ldr	r1, [pc, #180]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]
 8003efe:	e01a      	b.n	8003f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f00:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd fde8 	bl	8001ae0 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fd fde4 	bl	8001ae0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e216      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f26:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1e0>
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d041      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fd fdc1 	bl	8001ae0 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f62:	f7fd fdbd 	bl	8001ae0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e1ef      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ef      	beq.n	8003f62 <HAL_RCC_OscConfig+0x22e>
 8003f82:	e020      	b.n	8003fc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8a:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <HAL_RCC_OscConfig+0x27c>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fd fda4 	bl	8001ae0 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f9a:	e00d      	b.n	8003fb8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fd fda0 	bl	8001ae0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d906      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e1d2      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb8:	4b8c      	ldr	r3, [pc, #560]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1ea      	bne.n	8003f9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80a6 	beq.w	8004120 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fd8:	4b84      	ldr	r3, [pc, #528]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x2b4>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x2b6>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4b7f      	ldr	r3, [pc, #508]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	4a7e      	ldr	r2, [pc, #504]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8003ffa:	4b7c      	ldr	r3, [pc, #496]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004006:	2301      	movs	r3, #1
 8004008:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400a:	4b79      	ldr	r3, [pc, #484]	; (80041f0 <HAL_RCC_OscConfig+0x4bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d118      	bne.n	8004048 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004016:	4b76      	ldr	r3, [pc, #472]	; (80041f0 <HAL_RCC_OscConfig+0x4bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a75      	ldr	r2, [pc, #468]	; (80041f0 <HAL_RCC_OscConfig+0x4bc>)
 800401c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004022:	f7fd fd5d 	bl	8001ae0 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402a:	f7fd fd59 	bl	8001ae0 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e18b      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403c:	4b6c      	ldr	r3, [pc, #432]	; (80041f0 <HAL_RCC_OscConfig+0x4bc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d108      	bne.n	8004062 <HAL_RCC_OscConfig+0x32e>
 8004050:	4b66      	ldr	r3, [pc, #408]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	4a65      	ldr	r2, [pc, #404]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004060:	e024      	b.n	80040ac <HAL_RCC_OscConfig+0x378>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b05      	cmp	r3, #5
 8004068:	d110      	bne.n	800408c <HAL_RCC_OscConfig+0x358>
 800406a:	4b60      	ldr	r3, [pc, #384]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	4a5e      	ldr	r2, [pc, #376]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407a:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	4a5a      	ldr	r2, [pc, #360]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800408a:	e00f      	b.n	80040ac <HAL_RCC_OscConfig+0x378>
 800408c:	4b57      	ldr	r3, [pc, #348]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	4a56      	ldr	r2, [pc, #344]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800409c:	4b53      	ldr	r3, [pc, #332]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	4a52      	ldr	r2, [pc, #328]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d016      	beq.n	80040e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fd fd14 	bl	8001ae0 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040bc:	f7fd fd10 	bl	8001ae0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e140      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d2:	4b46      	ldr	r3, [pc, #280]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0ed      	beq.n	80040bc <HAL_RCC_OscConfig+0x388>
 80040e0:	e015      	b.n	800410e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fd fcfd 	bl	8001ae0 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fd fcf9 	bl	8001ae0 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e129      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004100:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ed      	bne.n	80040ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800410e:	7ffb      	ldrb	r3, [r7, #31]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004114:	4b35      	ldr	r3, [pc, #212]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	4a34      	ldr	r2, [pc, #208]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 800411a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d03c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01c      	beq.n	800416e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004134:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800413a:	4a2c      	ldr	r2, [pc, #176]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd fccc 	bl	8001ae0 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800414c:	f7fd fcc8 	bl	8001ae0 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0fa      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800415e:	4b23      	ldr	r3, [pc, #140]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ef      	beq.n	800414c <HAL_RCC_OscConfig+0x418>
 800416c:	e01b      	b.n	80041a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800416e:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004174:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fd fcaf 	bl	8001ae0 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004186:	f7fd fcab 	bl	8001ae0 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0dd      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004198:	4b14      	ldr	r3, [pc, #80]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 800419a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ef      	bne.n	8004186 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80d1 	beq.w	8004352 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	f000 808b 	beq.w	80042d4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d15e      	bne.n	8004284 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c6:	4b09      	ldr	r3, [pc, #36]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a08      	ldr	r2, [pc, #32]	; (80041ec <HAL_RCC_OscConfig+0x4b8>)
 80041cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fd fc85 	bl	8001ae0 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d8:	e00c      	b.n	80041f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041da:	f7fd fc81 	bl	8001ae0 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d905      	bls.n	80041f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e0b3      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_OscConfig+0x628>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ec      	bne.n	80041da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004200:	4b56      	ldr	r3, [pc, #344]	; (800435c <HAL_RCC_OscConfig+0x628>)
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	4b56      	ldr	r3, [pc, #344]	; (8004360 <HAL_RCC_OscConfig+0x62c>)
 8004206:	4013      	ands	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6a11      	ldr	r1, [r2, #32]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004210:	3a01      	subs	r2, #1
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	4311      	orrs	r1, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800421a:	0212      	lsls	r2, r2, #8
 800421c:	4311      	orrs	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004222:	0852      	lsrs	r2, r2, #1
 8004224:	3a01      	subs	r2, #1
 8004226:	0552      	lsls	r2, r2, #21
 8004228:	4311      	orrs	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800422e:	0852      	lsrs	r2, r2, #1
 8004230:	3a01      	subs	r2, #1
 8004232:	0652      	lsls	r2, r2, #25
 8004234:	4311      	orrs	r1, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800423a:	06d2      	lsls	r2, r2, #27
 800423c:	430a      	orrs	r2, r1
 800423e:	4947      	ldr	r1, [pc, #284]	; (800435c <HAL_RCC_OscConfig+0x628>)
 8004240:	4313      	orrs	r3, r2
 8004242:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004244:	4b45      	ldr	r3, [pc, #276]	; (800435c <HAL_RCC_OscConfig+0x628>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a44      	ldr	r2, [pc, #272]	; (800435c <HAL_RCC_OscConfig+0x628>)
 800424a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004250:	4b42      	ldr	r3, [pc, #264]	; (800435c <HAL_RCC_OscConfig+0x628>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4a41      	ldr	r2, [pc, #260]	; (800435c <HAL_RCC_OscConfig+0x628>)
 8004256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800425a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fd fc40 	bl	8001ae0 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fd fc3c 	bl	8001ae0 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e06e      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004276:	4b39      	ldr	r3, [pc, #228]	; (800435c <HAL_RCC_OscConfig+0x628>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0x530>
 8004282:	e066      	b.n	8004352 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <HAL_RCC_OscConfig+0x628>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a34      	ldr	r2, [pc, #208]	; (800435c <HAL_RCC_OscConfig+0x628>)
 800428a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800428e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004290:	4b32      	ldr	r3, [pc, #200]	; (800435c <HAL_RCC_OscConfig+0x628>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a31      	ldr	r2, [pc, #196]	; (800435c <HAL_RCC_OscConfig+0x628>)
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800429c:	4b2f      	ldr	r3, [pc, #188]	; (800435c <HAL_RCC_OscConfig+0x628>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a2e      	ldr	r2, [pc, #184]	; (800435c <HAL_RCC_OscConfig+0x628>)
 80042a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fc18 	bl	8001ae0 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fd fc14 	bl	8001ae0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e046      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c6:	4b25      	ldr	r3, [pc, #148]	; (800435c <HAL_RCC_OscConfig+0x628>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x580>
 80042d2:	e03e      	b.n	8004352 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e039      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042e0:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCC_OscConfig+0x628>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0203 	and.w	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d12c      	bne.n	800434e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	3b01      	subs	r3, #1
 8004300:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d123      	bne.n	800434e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d11b      	bne.n	800434e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004322:	429a      	cmp	r2, r3
 8004324:	d113      	bne.n	800434e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	085b      	lsrs	r3, r3, #1
 8004332:	3b01      	subs	r3, #1
 8004334:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d109      	bne.n	800434e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434a:	429a      	cmp	r2, r3
 800434c:	d001      	beq.n	8004352 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021000 	.word	0x40021000
 8004360:	019f800c 	.word	0x019f800c

08004364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e11e      	b.n	80045ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800437c:	4b91      	ldr	r3, [pc, #580]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d910      	bls.n	80043ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b8e      	ldr	r3, [pc, #568]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 020f 	bic.w	r2, r3, #15
 8004392:	498c      	ldr	r1, [pc, #560]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b8a      	ldr	r3, [pc, #552]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e106      	b.n	80045ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d073      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d129      	bne.n	8004414 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c0:	4b81      	ldr	r3, [pc, #516]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0f4      	b.n	80045ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043d0:	f000 f966 	bl	80046a0 <RCC_GetSysClockFreqFromPLLSource>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4a7c      	ldr	r2, [pc, #496]	; (80045cc <HAL_RCC_ClockConfig+0x268>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d93f      	bls.n	800445e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043de:	4b7a      	ldr	r3, [pc, #488]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d033      	beq.n	800445e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d12f      	bne.n	800445e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043fe:	4b72      	ldr	r3, [pc, #456]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004406:	4a70      	ldr	r2, [pc, #448]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 8004408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e024      	b.n	800445e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d107      	bne.n	800442c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800441c:	4b6a      	ldr	r3, [pc, #424]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0c6      	b.n	80045ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800442c:	4b66      	ldr	r3, [pc, #408]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0be      	b.n	80045ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800443c:	f000 f8ce 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 8004440:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4a61      	ldr	r2, [pc, #388]	; (80045cc <HAL_RCC_ClockConfig+0x268>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d909      	bls.n	800445e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800444a:	4b5f      	ldr	r3, [pc, #380]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004452:	4a5d      	ldr	r2, [pc, #372]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 8004454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004458:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800445e:	4b5a      	ldr	r3, [pc, #360]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f023 0203 	bic.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4957      	ldr	r1, [pc, #348]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 800446c:	4313      	orrs	r3, r2
 800446e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004470:	f7fd fb36 	bl	8001ae0 <HAL_GetTick>
 8004474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	e00a      	b.n	800448e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004478:	f7fd fb32 	bl	8001ae0 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e095      	b.n	80045ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448e:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 020c 	and.w	r2, r3, #12
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	429a      	cmp	r2, r3
 800449e:	d1eb      	bne.n	8004478 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d023      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b8:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a42      	ldr	r2, [pc, #264]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 80044be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044d0:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044d8:	4a3b      	ldr	r2, [pc, #236]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 80044da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e0:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4936      	ldr	r1, [pc, #216]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]
 80044f2:	e008      	b.n	8004506 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b80      	cmp	r3, #128	; 0x80
 80044f8:	d105      	bne.n	8004506 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044fa:	4b33      	ldr	r3, [pc, #204]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	4a32      	ldr	r2, [pc, #200]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 8004500:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004504:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004506:	4b2f      	ldr	r3, [pc, #188]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d21d      	bcs.n	8004550 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004514:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 020f 	bic.w	r2, r3, #15
 800451c:	4929      	ldr	r1, [pc, #164]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004524:	f7fd fadc 	bl	8001ae0 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452c:	f7fd fad8 	bl	8001ae0 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e03b      	b.n	80045ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <HAL_RCC_ClockConfig+0x260>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d1ed      	bne.n	800452c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800455c:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4917      	ldr	r1, [pc, #92]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	490f      	ldr	r1, [pc, #60]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800458e:	f000 f825 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 8004592:	4602      	mov	r2, r0
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <HAL_RCC_ClockConfig+0x264>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	490c      	ldr	r1, [pc, #48]	; (80045d0 <HAL_RCC_ClockConfig+0x26c>)
 80045a0:	5ccb      	ldrb	r3, [r1, r3]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	fa22 f303 	lsr.w	r3, r2, r3
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <HAL_RCC_ClockConfig+0x270>)
 80045ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045ae:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <HAL_RCC_ClockConfig+0x274>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fd fa48 	bl	8001a48 <HAL_InitTick>
 80045b8:	4603      	mov	r3, r0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40022000 	.word	0x40022000
 80045c8:	40021000 	.word	0x40021000
 80045cc:	04c4b400 	.word	0x04c4b400
 80045d0:	08007568 	.word	0x08007568
 80045d4:	20000000 	.word	0x20000000
 80045d8:	20000004 	.word	0x20000004

080045dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045e2:	4b2c      	ldr	r3, [pc, #176]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d102      	bne.n	80045f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045ee:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	e047      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045f4:	4b27      	ldr	r3, [pc, #156]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d102      	bne.n	8004606 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004600:	4b26      	ldr	r3, [pc, #152]	; (800469c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e03e      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004606:	4b23      	ldr	r3, [pc, #140]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d136      	bne.n	8004680 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800461c:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	3301      	adds	r3, #1
 8004628:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d10c      	bne.n	800464a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004630:	4a1a      	ldr	r2, [pc, #104]	; (800469c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 800463a:	68d2      	ldr	r2, [r2, #12]
 800463c:	0a12      	lsrs	r2, r2, #8
 800463e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	617b      	str	r3, [r7, #20]
      break;
 8004648:	e00c      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800464a:	4a13      	ldr	r2, [pc, #76]	; (8004698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	4a10      	ldr	r2, [pc, #64]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004654:	68d2      	ldr	r2, [r2, #12]
 8004656:	0a12      	lsrs	r2, r2, #8
 8004658:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]
      break;
 8004662:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	0e5b      	lsrs	r3, r3, #25
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	3301      	adds	r3, #1
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	e001      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004684:	693b      	ldr	r3, [r7, #16]
}
 8004686:	4618      	mov	r0, r3
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	00f42400 	.word	0x00f42400
 800469c:	007a1200 	.word	0x007a1200

080046a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046a6:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d10c      	bne.n	80046de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c4:	4a17      	ldr	r2, [pc, #92]	; (8004724 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	4a14      	ldr	r2, [pc, #80]	; (8004720 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046ce:	68d2      	ldr	r2, [r2, #12]
 80046d0:	0a12      	lsrs	r2, r2, #8
 80046d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	617b      	str	r3, [r7, #20]
    break;
 80046dc:	e00c      	b.n	80046f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046de:	4a12      	ldr	r2, [pc, #72]	; (8004728 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	4a0e      	ldr	r2, [pc, #56]	; (8004720 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046e8:	68d2      	ldr	r2, [r2, #12]
 80046ea:	0a12      	lsrs	r2, r2, #8
 80046ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]
    break;
 80046f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	0e5b      	lsrs	r3, r3, #25
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	3301      	adds	r3, #1
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004712:	687b      	ldr	r3, [r7, #4]
}
 8004714:	4618      	mov	r0, r3
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40021000 	.word	0x40021000
 8004724:	007a1200 	.word	0x007a1200
 8004728:	00f42400 	.word	0x00f42400

0800472c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004734:	2300      	movs	r3, #0
 8004736:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004738:	2300      	movs	r3, #0
 800473a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8098 	beq.w	800487a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474e:	4b43      	ldr	r3, [pc, #268]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10d      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4b40      	ldr	r3, [pc, #256]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	4a3f      	ldr	r2, [pc, #252]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004764:	6593      	str	r3, [r2, #88]	; 0x58
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004772:	2301      	movs	r3, #1
 8004774:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004776:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a39      	ldr	r2, [pc, #228]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004782:	f7fd f9ad 	bl	8001ae0 <HAL_GetTick>
 8004786:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004788:	e009      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fd f9a9 	bl	8001ae0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d902      	bls.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	74fb      	strb	r3, [r7, #19]
        break;
 800479c:	e005      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800479e:	4b30      	ldr	r3, [pc, #192]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ef      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d159      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047b0:	4b2a      	ldr	r3, [pc, #168]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01e      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d019      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047cc:	4b23      	ldr	r3, [pc, #140]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047d8:	4b20      	ldr	r3, [pc, #128]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	4a1f      	ldr	r2, [pc, #124]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047e8:	4b1c      	ldr	r3, [pc, #112]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	4a1b      	ldr	r2, [pc, #108]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047f8:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d016      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fd f969 	bl	8001ae0 <HAL_GetTick>
 800480e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004810:	e00b      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fd f965 	bl	8001ae0 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d902      	bls.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	74fb      	strb	r3, [r7, #19]
            break;
 8004828:	e006      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ec      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004854:	e008      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004856:	7cfb      	ldrb	r3, [r7, #19]
 8004858:	74bb      	strb	r3, [r7, #18]
 800485a:	e005      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800485c:	40021000 	.word	0x40021000
 8004860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004868:	7c7b      	ldrb	r3, [r7, #17]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d105      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486e:	4ba7      	ldr	r3, [pc, #668]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	4aa6      	ldr	r2, [pc, #664]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004878:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004886:	4ba1      	ldr	r3, [pc, #644]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f023 0203 	bic.w	r2, r3, #3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	499d      	ldr	r1, [pc, #628]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048a8:	4b98      	ldr	r3, [pc, #608]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ae:	f023 020c 	bic.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	4995      	ldr	r1, [pc, #596]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048ca:	4b90      	ldr	r3, [pc, #576]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	498c      	ldr	r1, [pc, #560]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048ec:	4b87      	ldr	r3, [pc, #540]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	4984      	ldr	r1, [pc, #528]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800490e:	4b7f      	ldr	r3, [pc, #508]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	497b      	ldr	r1, [pc, #492]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004930:	4b76      	ldr	r3, [pc, #472]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	4973      	ldr	r1, [pc, #460]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004952:	4b6e      	ldr	r3, [pc, #440]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	496a      	ldr	r1, [pc, #424]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004974:	4b65      	ldr	r3, [pc, #404]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	4962      	ldr	r1, [pc, #392]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004996:	4b5d      	ldr	r3, [pc, #372]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	4959      	ldr	r1, [pc, #356]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049b8:	4b54      	ldr	r3, [pc, #336]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049be:	f023 0203 	bic.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	4951      	ldr	r1, [pc, #324]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049da:	4b4c      	ldr	r3, [pc, #304]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	4948      	ldr	r1, [pc, #288]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049fc:	4b43      	ldr	r3, [pc, #268]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	4940      	ldr	r1, [pc, #256]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1a:	d105      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a3a      	ldr	r2, [pc, #232]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d015      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a34:	4b35      	ldr	r3, [pc, #212]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a42:	4932      	ldr	r1, [pc, #200]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a52:	d105      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a54:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d015      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	4924      	ldr	r1, [pc, #144]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8c:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d015      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aa4:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	4916      	ldr	r1, [pc, #88]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ac2:	d105      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ace:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d019      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	4908      	ldr	r1, [pc, #32]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004afa:	d109      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4a02      	ldr	r2, [pc, #8]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b06:	60d3      	str	r3, [r2, #12]
 8004b08:	e002      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d015      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b1c:	4b29      	ldr	r3, [pc, #164]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	4926      	ldr	r1, [pc, #152]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b3c:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b46:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d015      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b62:	4918      	ldr	r1, [pc, #96]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b72:	d105      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4a12      	ldr	r2, [pc, #72]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d015      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a04      	ldr	r2, [pc, #16]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004bb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e09d      	b.n	8004d16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d108      	bne.n	8004bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bea:	d009      	beq.n	8004c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	61da      	str	r2, [r3, #28]
 8004bf2:	e005      	b.n	8004c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fde0 	bl	80017e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c40:	d902      	bls.n	8004c48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e002      	b.n	8004c4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c56:	d007      	beq.n	8004c68 <HAL_SPI_Init+0xa0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c60:	d002      	beq.n	8004c68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	ea42 0103 	orr.w	r1, r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	f003 0204 	and.w	r2, r3, #4
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ce4:	ea42 0103 	orr.w	r1, r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e049      	b.n	8004dc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7fc fd8f 	bl	8001868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f000 fcc1 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e049      	b.n	8004e72 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f841 	bl	8004e7a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f000 fc6a 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e049      	b.n	8004f34 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f841 	bl	8004f3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f000 fc09 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d122      	bne.n	8004fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d11b      	bne.n	8004fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0202 	mvn.w	r2, #2
 8004f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fb88 	bl	80056a8 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fb7a 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fb8b 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0204 	mvn.w	r2, #4
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fb5e 	bl	80056a8 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fb50 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fb61 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b08      	cmp	r3, #8
 800500c:	d122      	bne.n	8005054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b08      	cmp	r3, #8
 800501a:	d11b      	bne.n	8005054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0208 	mvn.w	r2, #8
 8005024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2204      	movs	r2, #4
 800502a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fb34 	bl	80056a8 <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fb26 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fb37 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b10      	cmp	r3, #16
 8005060:	d122      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b10      	cmp	r3, #16
 800506e:	d11b      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0210 	mvn.w	r2, #16
 8005078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2208      	movs	r2, #8
 800507e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fb0a 	bl	80056a8 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fafc 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fb0d 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d10e      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d107      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0201 	mvn.w	r2, #1
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fb fd2a 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d10e      	bne.n	8005100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d107      	bne.n	8005100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 f92a 	bl	8006354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800510e:	d10e      	bne.n	800512e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	2b80      	cmp	r3, #128	; 0x80
 800511c:	d107      	bne.n	800512e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f001 f91d 	bl	8006368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d10e      	bne.n	800515a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d107      	bne.n	800515a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fabb 	bl	80056d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b20      	cmp	r3, #32
 8005166:	d10e      	bne.n	8005186 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	d107      	bne.n	8005186 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0220 	mvn.w	r2, #32
 800517e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 f8dd 	bl	8006340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005194:	d10f      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a4:	d107      	bne.n	80051b6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80051ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 f8e3 	bl	800637c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c4:	d10f      	bne.n	80051e6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051d4:	d107      	bne.n	80051e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80051de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 f8d5 	bl	8006390 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f4:	d10f      	bne.n	8005216 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005204:	d107      	bne.n	8005216 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800520e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f001 f8c7 	bl	80063a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005224:	d10f      	bne.n	8005246 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005234:	d107      	bne.n	8005246 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800523e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f001 f8b9 	bl	80063b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_TIM_OC_ConfigChannel+0x1e>
 800526a:	2302      	movs	r3, #2
 800526c:	e066      	b.n	800533c <HAL_TIM_OC_ConfigChannel+0xec>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b14      	cmp	r3, #20
 800527a:	d857      	bhi.n	800532c <HAL_TIM_OC_ConfigChannel+0xdc>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <HAL_TIM_OC_ConfigChannel+0x34>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052d9 	.word	0x080052d9
 8005288:	0800532d 	.word	0x0800532d
 800528c:	0800532d 	.word	0x0800532d
 8005290:	0800532d 	.word	0x0800532d
 8005294:	080052e7 	.word	0x080052e7
 8005298:	0800532d 	.word	0x0800532d
 800529c:	0800532d 	.word	0x0800532d
 80052a0:	0800532d 	.word	0x0800532d
 80052a4:	080052f5 	.word	0x080052f5
 80052a8:	0800532d 	.word	0x0800532d
 80052ac:	0800532d 	.word	0x0800532d
 80052b0:	0800532d 	.word	0x0800532d
 80052b4:	08005303 	.word	0x08005303
 80052b8:	0800532d 	.word	0x0800532d
 80052bc:	0800532d 	.word	0x0800532d
 80052c0:	0800532d 	.word	0x0800532d
 80052c4:	08005311 	.word	0x08005311
 80052c8:	0800532d 	.word	0x0800532d
 80052cc:	0800532d 	.word	0x0800532d
 80052d0:	0800532d 	.word	0x0800532d
 80052d4:	0800531f 	.word	0x0800531f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 faa8 	bl	8005834 <TIM_OC1_SetConfig>
      break;
 80052e4:	e025      	b.n	8005332 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fb3b 	bl	8005968 <TIM_OC2_SetConfig>
      break;
 80052f2:	e01e      	b.n	8005332 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fbc8 	bl	8005a90 <TIM_OC3_SetConfig>
      break;
 8005300:	e017      	b.n	8005332 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fc53 	bl	8005bb4 <TIM_OC4_SetConfig>
      break;
 800530e:	e010      	b.n	8005332 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fce0 	bl	8005cdc <TIM_OC5_SetConfig>
      break;
 800531c:	e009      	b.n	8005332 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fd43 	bl	8005db0 <TIM_OC6_SetConfig>
      break;
 800532a:	e002      	b.n	8005332 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	75fb      	strb	r3, [r7, #23]
      break;
 8005330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800533a:	7dfb      	ldrb	r3, [r7, #23]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_TIM_IC_ConfigChannel+0x1e>
 800535e:	2302      	movs	r3, #2
 8005360:	e088      	b.n	8005474 <HAL_TIM_IC_ConfigChannel+0x130>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6819      	ldr	r1, [r3, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f000 fd82 	bl	8005e88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 020c 	bic.w	r2, r2, #12
 8005392:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6999      	ldr	r1, [r3, #24]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	619a      	str	r2, [r3, #24]
 80053a6:	e060      	b.n	800546a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d11c      	bne.n	80053e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f000 fe06 	bl	8005fce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6999      	ldr	r1, [r3, #24]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	021a      	lsls	r2, r3, #8
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	619a      	str	r2, [r3, #24]
 80053e6:	e040      	b.n	800546a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d11b      	bne.n	8005426 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6819      	ldr	r1, [r3, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f000 fe53 	bl	80060a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 020c 	bic.w	r2, r2, #12
 8005410:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	61da      	str	r2, [r3, #28]
 8005424:	e021      	b.n	800546a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b0c      	cmp	r3, #12
 800542a:	d11c      	bne.n	8005466 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f000 fe70 	bl	8006120 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800544e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69d9      	ldr	r1, [r3, #28]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	021a      	lsls	r2, r3, #8
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	61da      	str	r2, [r3, #28]
 8005464:	e001      	b.n	800546a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_TIM_ConfigClockSource+0x1c>
 8005494:	2302      	movs	r3, #2
 8005496:	e0ee      	b.n	8005676 <HAL_TIM_ConfigClockSource+0x1fa>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80054b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a6b      	ldr	r2, [pc, #428]	; (8005680 <HAL_TIM_ConfigClockSource+0x204>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	f000 80b9 	beq.w	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 80054d8:	4a69      	ldr	r2, [pc, #420]	; (8005680 <HAL_TIM_ConfigClockSource+0x204>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	f200 80be 	bhi.w	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 80054e0:	4a68      	ldr	r2, [pc, #416]	; (8005684 <HAL_TIM_ConfigClockSource+0x208>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	f000 80b1 	beq.w	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 80054e8:	4a66      	ldr	r2, [pc, #408]	; (8005684 <HAL_TIM_ConfigClockSource+0x208>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	f200 80b6 	bhi.w	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 80054f0:	4a65      	ldr	r2, [pc, #404]	; (8005688 <HAL_TIM_ConfigClockSource+0x20c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	f000 80a9 	beq.w	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 80054f8:	4a63      	ldr	r2, [pc, #396]	; (8005688 <HAL_TIM_ConfigClockSource+0x20c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	f200 80ae 	bhi.w	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 8005500:	4a62      	ldr	r2, [pc, #392]	; (800568c <HAL_TIM_ConfigClockSource+0x210>)
 8005502:	4293      	cmp	r3, r2
 8005504:	f000 80a1 	beq.w	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 8005508:	4a60      	ldr	r2, [pc, #384]	; (800568c <HAL_TIM_ConfigClockSource+0x210>)
 800550a:	4293      	cmp	r3, r2
 800550c:	f200 80a6 	bhi.w	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 8005510:	4a5f      	ldr	r2, [pc, #380]	; (8005690 <HAL_TIM_ConfigClockSource+0x214>)
 8005512:	4293      	cmp	r3, r2
 8005514:	f000 8099 	beq.w	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 8005518:	4a5d      	ldr	r2, [pc, #372]	; (8005690 <HAL_TIM_ConfigClockSource+0x214>)
 800551a:	4293      	cmp	r3, r2
 800551c:	f200 809e 	bhi.w	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 8005520:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005524:	f000 8091 	beq.w	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 8005528:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800552c:	f200 8096 	bhi.w	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 8005530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005534:	f000 8089 	beq.w	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 8005538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553c:	f200 808e 	bhi.w	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005544:	d03e      	beq.n	80055c4 <HAL_TIM_ConfigClockSource+0x148>
 8005546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554a:	f200 8087 	bhi.w	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 800554e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005552:	f000 8086 	beq.w	8005662 <HAL_TIM_ConfigClockSource+0x1e6>
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	d87f      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 800555c:	2b70      	cmp	r3, #112	; 0x70
 800555e:	d01a      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x11a>
 8005560:	2b70      	cmp	r3, #112	; 0x70
 8005562:	d87b      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 8005564:	2b60      	cmp	r3, #96	; 0x60
 8005566:	d050      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x18e>
 8005568:	2b60      	cmp	r3, #96	; 0x60
 800556a:	d877      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 800556c:	2b50      	cmp	r3, #80	; 0x50
 800556e:	d03c      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x16e>
 8005570:	2b50      	cmp	r3, #80	; 0x50
 8005572:	d873      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d058      	beq.n	800562a <HAL_TIM_ConfigClockSource+0x1ae>
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d86f      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 800557c:	2b30      	cmp	r3, #48	; 0x30
 800557e:	d064      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 8005580:	2b30      	cmp	r3, #48	; 0x30
 8005582:	d86b      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 8005584:	2b20      	cmp	r3, #32
 8005586:	d060      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 8005588:	2b20      	cmp	r3, #32
 800558a:	d867      	bhi.n	800565c <HAL_TIM_ConfigClockSource+0x1e0>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d05c      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 8005590:	2b10      	cmp	r3, #16
 8005592:	d05a      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x1ce>
 8005594:	e062      	b.n	800565c <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6899      	ldr	r1, [r3, #8]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f000 fe15 	bl	80061d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	609a      	str	r2, [r3, #8]
      break;
 80055c2:	e04f      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	6899      	ldr	r1, [r3, #8]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f000 fdfe 	bl	80061d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055e6:	609a      	str	r2, [r3, #8]
      break;
 80055e8:	e03c      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6859      	ldr	r1, [r3, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f000 fcba 	bl	8005f70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2150      	movs	r1, #80	; 0x50
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fdc9 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005608:	e02c      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6859      	ldr	r1, [r3, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	461a      	mov	r2, r3
 8005618:	f000 fd16 	bl	8006048 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2160      	movs	r1, #96	; 0x60
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fdb9 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005628:	e01c      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6859      	ldr	r1, [r3, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	461a      	mov	r2, r3
 8005638:	f000 fc9a 	bl	8005f70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2140      	movs	r1, #64	; 0x40
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fda9 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005648:	e00c      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f000 fda0 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 800565a:	e003      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
      break;
 8005660:	e000      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8005662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	00100070 	.word	0x00100070
 8005684:	00100050 	.word	0x00100050
 8005688:	00100040 	.word	0x00100040
 800568c:	00100030 	.word	0x00100030
 8005690:	00100020 	.word	0x00100020

08005694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a46      	ldr	r2, [pc, #280]	; (8005810 <TIM_Base_SetConfig+0x12c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d017      	beq.n	800572c <TIM_Base_SetConfig+0x48>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005702:	d013      	beq.n	800572c <TIM_Base_SetConfig+0x48>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a43      	ldr	r2, [pc, #268]	; (8005814 <TIM_Base_SetConfig+0x130>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00f      	beq.n	800572c <TIM_Base_SetConfig+0x48>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a42      	ldr	r2, [pc, #264]	; (8005818 <TIM_Base_SetConfig+0x134>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00b      	beq.n	800572c <TIM_Base_SetConfig+0x48>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a41      	ldr	r2, [pc, #260]	; (800581c <TIM_Base_SetConfig+0x138>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_Base_SetConfig+0x48>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a40      	ldr	r2, [pc, #256]	; (8005820 <TIM_Base_SetConfig+0x13c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_Base_SetConfig+0x48>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3f      	ldr	r2, [pc, #252]	; (8005824 <TIM_Base_SetConfig+0x140>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d108      	bne.n	800573e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a33      	ldr	r2, [pc, #204]	; (8005810 <TIM_Base_SetConfig+0x12c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d023      	beq.n	800578e <TIM_Base_SetConfig+0xaa>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574c:	d01f      	beq.n	800578e <TIM_Base_SetConfig+0xaa>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a30      	ldr	r2, [pc, #192]	; (8005814 <TIM_Base_SetConfig+0x130>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01b      	beq.n	800578e <TIM_Base_SetConfig+0xaa>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <TIM_Base_SetConfig+0x134>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d017      	beq.n	800578e <TIM_Base_SetConfig+0xaa>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2e      	ldr	r2, [pc, #184]	; (800581c <TIM_Base_SetConfig+0x138>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <TIM_Base_SetConfig+0xaa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2d      	ldr	r2, [pc, #180]	; (8005820 <TIM_Base_SetConfig+0x13c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00f      	beq.n	800578e <TIM_Base_SetConfig+0xaa>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2d      	ldr	r2, [pc, #180]	; (8005828 <TIM_Base_SetConfig+0x144>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00b      	beq.n	800578e <TIM_Base_SetConfig+0xaa>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2c      	ldr	r2, [pc, #176]	; (800582c <TIM_Base_SetConfig+0x148>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <TIM_Base_SetConfig+0xaa>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2b      	ldr	r2, [pc, #172]	; (8005830 <TIM_Base_SetConfig+0x14c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_Base_SetConfig+0xaa>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a26      	ldr	r2, [pc, #152]	; (8005824 <TIM_Base_SetConfig+0x140>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d108      	bne.n	80057a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a12      	ldr	r2, [pc, #72]	; (8005810 <TIM_Base_SetConfig+0x12c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <TIM_Base_SetConfig+0x110>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a14      	ldr	r2, [pc, #80]	; (8005820 <TIM_Base_SetConfig+0x13c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00f      	beq.n	80057f4 <TIM_Base_SetConfig+0x110>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a14      	ldr	r2, [pc, #80]	; (8005828 <TIM_Base_SetConfig+0x144>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_Base_SetConfig+0x110>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a13      	ldr	r2, [pc, #76]	; (800582c <TIM_Base_SetConfig+0x148>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_Base_SetConfig+0x110>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a12      	ldr	r2, [pc, #72]	; (8005830 <TIM_Base_SetConfig+0x14c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_Base_SetConfig+0x110>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <TIM_Base_SetConfig+0x140>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d103      	bne.n	80057fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	615a      	str	r2, [r3, #20]
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40012c00 	.word	0x40012c00
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40013400 	.word	0x40013400
 8005824:	40015000 	.word	0x40015000
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800

08005834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0201 	bic.w	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 0302 	bic.w	r3, r3, #2
 8005880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a30      	ldr	r2, [pc, #192]	; (8005950 <TIM_OC1_SetConfig+0x11c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <TIM_OC1_SetConfig+0x88>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a2f      	ldr	r2, [pc, #188]	; (8005954 <TIM_OC1_SetConfig+0x120>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00f      	beq.n	80058bc <TIM_OC1_SetConfig+0x88>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a2e      	ldr	r2, [pc, #184]	; (8005958 <TIM_OC1_SetConfig+0x124>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00b      	beq.n	80058bc <TIM_OC1_SetConfig+0x88>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a2d      	ldr	r2, [pc, #180]	; (800595c <TIM_OC1_SetConfig+0x128>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d007      	beq.n	80058bc <TIM_OC1_SetConfig+0x88>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a2c      	ldr	r2, [pc, #176]	; (8005960 <TIM_OC1_SetConfig+0x12c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_OC1_SetConfig+0x88>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a2b      	ldr	r2, [pc, #172]	; (8005964 <TIM_OC1_SetConfig+0x130>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d10c      	bne.n	80058d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 0308 	bic.w	r3, r3, #8
 80058c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 0304 	bic.w	r3, r3, #4
 80058d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1d      	ldr	r2, [pc, #116]	; (8005950 <TIM_OC1_SetConfig+0x11c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <TIM_OC1_SetConfig+0xd2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <TIM_OC1_SetConfig+0x120>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_OC1_SetConfig+0xd2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <TIM_OC1_SetConfig+0x124>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_OC1_SetConfig+0xd2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1a      	ldr	r2, [pc, #104]	; (800595c <TIM_OC1_SetConfig+0x128>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_OC1_SetConfig+0xd2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a19      	ldr	r2, [pc, #100]	; (8005960 <TIM_OC1_SetConfig+0x12c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC1_SetConfig+0xd2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a18      	ldr	r2, [pc, #96]	; (8005964 <TIM_OC1_SetConfig+0x130>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d111      	bne.n	800592a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	621a      	str	r2, [r3, #32]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40013400 	.word	0x40013400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800
 8005964:	40015000 	.word	0x40015000

08005968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0210 	bic.w	r2, r3, #16
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0320 	bic.w	r3, r3, #32
 80059b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <TIM_OC2_SetConfig+0x110>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d007      	beq.n	80059dc <TIM_OC2_SetConfig+0x74>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <TIM_OC2_SetConfig+0x114>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_OC2_SetConfig+0x74>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a2a      	ldr	r2, [pc, #168]	; (8005a80 <TIM_OC2_SetConfig+0x118>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d10d      	bne.n	80059f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a1f      	ldr	r2, [pc, #124]	; (8005a78 <TIM_OC2_SetConfig+0x110>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d013      	beq.n	8005a28 <TIM_OC2_SetConfig+0xc0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a1e      	ldr	r2, [pc, #120]	; (8005a7c <TIM_OC2_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00f      	beq.n	8005a28 <TIM_OC2_SetConfig+0xc0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <TIM_OC2_SetConfig+0x11c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_OC2_SetConfig+0xc0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <TIM_OC2_SetConfig+0x120>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_OC2_SetConfig+0xc0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <TIM_OC2_SetConfig+0x124>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_OC2_SetConfig+0xc0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a17      	ldr	r2, [pc, #92]	; (8005a80 <TIM_OC2_SetConfig+0x118>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d113      	bne.n	8005a50 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40013400 	.word	0x40013400
 8005a80:	40015000 	.word	0x40015000
 8005a84:	40014000 	.word	0x40014000
 8005a88:	40014400 	.word	0x40014400
 8005a8c:	40014800 	.word	0x40014800

08005a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2b      	ldr	r2, [pc, #172]	; (8005b9c <TIM_OC3_SetConfig+0x10c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d007      	beq.n	8005b02 <TIM_OC3_SetConfig+0x72>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2a      	ldr	r2, [pc, #168]	; (8005ba0 <TIM_OC3_SetConfig+0x110>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_OC3_SetConfig+0x72>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <TIM_OC3_SetConfig+0x114>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10d      	bne.n	8005b1e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1e      	ldr	r2, [pc, #120]	; (8005b9c <TIM_OC3_SetConfig+0x10c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <TIM_OC3_SetConfig+0xbe>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <TIM_OC3_SetConfig+0x110>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00f      	beq.n	8005b4e <TIM_OC3_SetConfig+0xbe>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <TIM_OC3_SetConfig+0x118>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <TIM_OC3_SetConfig+0xbe>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <TIM_OC3_SetConfig+0x11c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <TIM_OC3_SetConfig+0xbe>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <TIM_OC3_SetConfig+0x120>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_OC3_SetConfig+0xbe>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a16      	ldr	r2, [pc, #88]	; (8005ba4 <TIM_OC3_SetConfig+0x114>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d113      	bne.n	8005b76 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40013400 	.word	0x40013400
 8005ba4:	40015000 	.word	0x40015000
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800

08005bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <TIM_OC4_SetConfig+0x110>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_OC4_SetConfig+0x74>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2b      	ldr	r2, [pc, #172]	; (8005cc8 <TIM_OC4_SetConfig+0x114>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC4_SetConfig+0x74>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a2a      	ldr	r2, [pc, #168]	; (8005ccc <TIM_OC4_SetConfig+0x118>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d10d      	bne.n	8005c44 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	031b      	lsls	r3, r3, #12
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <TIM_OC4_SetConfig+0x110>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d013      	beq.n	8005c74 <TIM_OC4_SetConfig+0xc0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <TIM_OC4_SetConfig+0x114>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00f      	beq.n	8005c74 <TIM_OC4_SetConfig+0xc0>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1e      	ldr	r2, [pc, #120]	; (8005cd0 <TIM_OC4_SetConfig+0x11c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <TIM_OC4_SetConfig+0xc0>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <TIM_OC4_SetConfig+0x120>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <TIM_OC4_SetConfig+0xc0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <TIM_OC4_SetConfig+0x124>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_OC4_SetConfig+0xc0>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <TIM_OC4_SetConfig+0x118>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d113      	bne.n	8005c9c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	019b      	lsls	r3, r3, #6
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	019b      	lsls	r3, r3, #6
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40013400 	.word	0x40013400
 8005ccc:	40015000 	.word	0x40015000
 8005cd0:	40014000 	.word	0x40014000
 8005cd4:	40014400 	.word	0x40014400
 8005cd8:	40014800 	.word	0x40014800

08005cdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <TIM_OC5_SetConfig+0xbc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <TIM_OC5_SetConfig+0x82>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a18      	ldr	r2, [pc, #96]	; (8005d9c <TIM_OC5_SetConfig+0xc0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00f      	beq.n	8005d5e <TIM_OC5_SetConfig+0x82>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a17      	ldr	r2, [pc, #92]	; (8005da0 <TIM_OC5_SetConfig+0xc4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00b      	beq.n	8005d5e <TIM_OC5_SetConfig+0x82>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a16      	ldr	r2, [pc, #88]	; (8005da4 <TIM_OC5_SetConfig+0xc8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d007      	beq.n	8005d5e <TIM_OC5_SetConfig+0x82>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <TIM_OC5_SetConfig+0xcc>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_OC5_SetConfig+0x82>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a14      	ldr	r2, [pc, #80]	; (8005dac <TIM_OC5_SetConfig+0xd0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d109      	bne.n	8005d72 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	40013400 	.word	0x40013400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800
 8005dac:	40015000 	.word	0x40015000

08005db0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	051b      	lsls	r3, r3, #20
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a1a      	ldr	r2, [pc, #104]	; (8005e70 <TIM_OC6_SetConfig+0xc0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <TIM_OC6_SetConfig+0x84>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <TIM_OC6_SetConfig+0xc4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00f      	beq.n	8005e34 <TIM_OC6_SetConfig+0x84>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <TIM_OC6_SetConfig+0xc8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00b      	beq.n	8005e34 <TIM_OC6_SetConfig+0x84>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a17      	ldr	r2, [pc, #92]	; (8005e7c <TIM_OC6_SetConfig+0xcc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_OC6_SetConfig+0x84>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a16      	ldr	r2, [pc, #88]	; (8005e80 <TIM_OC6_SetConfig+0xd0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_OC6_SetConfig+0x84>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <TIM_OC6_SetConfig+0xd4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d109      	bne.n	8005e48 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	029b      	lsls	r3, r3, #10
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40013400 	.word	0x40013400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800
 8005e84:	40015000 	.word	0x40015000

08005e88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4a28      	ldr	r2, [pc, #160]	; (8005f54 <TIM_TI1_SetConfig+0xcc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01b      	beq.n	8005eee <TIM_TI1_SetConfig+0x66>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebc:	d017      	beq.n	8005eee <TIM_TI1_SetConfig+0x66>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a25      	ldr	r2, [pc, #148]	; (8005f58 <TIM_TI1_SetConfig+0xd0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <TIM_TI1_SetConfig+0x66>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <TIM_TI1_SetConfig+0xd4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_TI1_SetConfig+0x66>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4a23      	ldr	r2, [pc, #140]	; (8005f60 <TIM_TI1_SetConfig+0xd8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_TI1_SetConfig+0x66>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <TIM_TI1_SetConfig+0xdc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_TI1_SetConfig+0x66>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <TIM_TI1_SetConfig+0xe0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_TI1_SetConfig+0x66>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <TIM_TI1_SetConfig+0xe4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d101      	bne.n	8005ef2 <TIM_TI1_SetConfig+0x6a>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <TIM_TI1_SetConfig+0x6c>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d008      	beq.n	8005f0a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e003      	b.n	8005f12 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f023 030a 	bic.w	r3, r3, #10
 8005f2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f003 030a 	and.w	r3, r3, #10
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40012c00 	.word	0x40012c00
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40013400 	.word	0x40013400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40015000 	.word	0x40015000

08005f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f023 0201 	bic.w	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 030a 	bic.w	r3, r3, #10
 8005fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b087      	sub	sp, #28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	607a      	str	r2, [r7, #4]
 8005fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f023 0210 	bic.w	r2, r3, #16
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800600c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	031b      	lsls	r3, r3, #12
 8006012:	b29b      	uxth	r3, r3
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006020:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	621a      	str	r2, [r3, #32]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f023 0210 	bic.w	r2, r3, #16
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006072:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	031b      	lsls	r3, r3, #12
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006084:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	621a      	str	r2, [r3, #32]
}
 800609c:	bf00      	nop
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f023 0303 	bic.w	r3, r3, #3
 80060d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80060f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800615e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	031b      	lsls	r3, r3, #12
 8006164:	b29b      	uxth	r3, r3
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006172:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	031b      	lsls	r3, r3, #12
 8006178:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f043 0307 	orr.w	r3, r3, #7
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e074      	b.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a34      	ldr	r2, [pc, #208]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d009      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a33      	ldr	r2, [pc, #204]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d004      	beq.n	800626a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a31      	ldr	r2, [pc, #196]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d108      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006270:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a21      	ldr	r2, [pc, #132]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ac:	d01d      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1f      	ldr	r2, [pc, #124]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1d      	ldr	r2, [pc, #116]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1c      	ldr	r2, [pc, #112]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a15      	ldr	r2, [pc, #84]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a18      	ldr	r2, [pc, #96]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a11      	ldr	r2, [pc, #68]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10c      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40013400 	.word	0x40013400
 800632c:	40015000 	.word	0x40015000
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40014000 	.word	0x40014000

08006340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	0000      	movs	r0, r0
	...

080063d0 <cos>:
 80063d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063d2:	ec53 2b10 	vmov	r2, r3, d0
 80063d6:	4826      	ldr	r0, [pc, #152]	; (8006470 <cos+0xa0>)
 80063d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80063dc:	4281      	cmp	r1, r0
 80063de:	dc06      	bgt.n	80063ee <cos+0x1e>
 80063e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006468 <cos+0x98>
 80063e4:	b005      	add	sp, #20
 80063e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ea:	f000 b89d 	b.w	8006528 <__kernel_cos>
 80063ee:	4821      	ldr	r0, [pc, #132]	; (8006474 <cos+0xa4>)
 80063f0:	4281      	cmp	r1, r0
 80063f2:	dd09      	ble.n	8006408 <cos+0x38>
 80063f4:	ee10 0a10 	vmov	r0, s0
 80063f8:	4619      	mov	r1, r3
 80063fa:	f7f9 ff11 	bl	8000220 <__aeabi_dsub>
 80063fe:	ec41 0b10 	vmov	d0, r0, r1
 8006402:	b005      	add	sp, #20
 8006404:	f85d fb04 	ldr.w	pc, [sp], #4
 8006408:	4668      	mov	r0, sp
 800640a:	f000 fa15 	bl	8006838 <__ieee754_rem_pio2>
 800640e:	f000 0003 	and.w	r0, r0, #3
 8006412:	2801      	cmp	r0, #1
 8006414:	d00b      	beq.n	800642e <cos+0x5e>
 8006416:	2802      	cmp	r0, #2
 8006418:	d016      	beq.n	8006448 <cos+0x78>
 800641a:	b9e0      	cbnz	r0, 8006456 <cos+0x86>
 800641c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006420:	ed9d 0b00 	vldr	d0, [sp]
 8006424:	f000 f880 	bl	8006528 <__kernel_cos>
 8006428:	ec51 0b10 	vmov	r0, r1, d0
 800642c:	e7e7      	b.n	80063fe <cos+0x2e>
 800642e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006432:	ed9d 0b00 	vldr	d0, [sp]
 8006436:	f000 f93f 	bl	80066b8 <__kernel_sin>
 800643a:	ec53 2b10 	vmov	r2, r3, d0
 800643e:	ee10 0a10 	vmov	r0, s0
 8006442:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006446:	e7da      	b.n	80063fe <cos+0x2e>
 8006448:	ed9d 1b02 	vldr	d1, [sp, #8]
 800644c:	ed9d 0b00 	vldr	d0, [sp]
 8006450:	f000 f86a 	bl	8006528 <__kernel_cos>
 8006454:	e7f1      	b.n	800643a <cos+0x6a>
 8006456:	ed9d 1b02 	vldr	d1, [sp, #8]
 800645a:	ed9d 0b00 	vldr	d0, [sp]
 800645e:	2001      	movs	r0, #1
 8006460:	f000 f92a 	bl	80066b8 <__kernel_sin>
 8006464:	e7e0      	b.n	8006428 <cos+0x58>
 8006466:	bf00      	nop
	...
 8006470:	3fe921fb 	.word	0x3fe921fb
 8006474:	7fefffff 	.word	0x7fefffff

08006478 <sin>:
 8006478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800647a:	ec53 2b10 	vmov	r2, r3, d0
 800647e:	4828      	ldr	r0, [pc, #160]	; (8006520 <sin+0xa8>)
 8006480:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006484:	4281      	cmp	r1, r0
 8006486:	dc07      	bgt.n	8006498 <sin+0x20>
 8006488:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006518 <sin+0xa0>
 800648c:	2000      	movs	r0, #0
 800648e:	b005      	add	sp, #20
 8006490:	f85d eb04 	ldr.w	lr, [sp], #4
 8006494:	f000 b910 	b.w	80066b8 <__kernel_sin>
 8006498:	4822      	ldr	r0, [pc, #136]	; (8006524 <sin+0xac>)
 800649a:	4281      	cmp	r1, r0
 800649c:	dd09      	ble.n	80064b2 <sin+0x3a>
 800649e:	ee10 0a10 	vmov	r0, s0
 80064a2:	4619      	mov	r1, r3
 80064a4:	f7f9 febc 	bl	8000220 <__aeabi_dsub>
 80064a8:	ec41 0b10 	vmov	d0, r0, r1
 80064ac:	b005      	add	sp, #20
 80064ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80064b2:	4668      	mov	r0, sp
 80064b4:	f000 f9c0 	bl	8006838 <__ieee754_rem_pio2>
 80064b8:	f000 0003 	and.w	r0, r0, #3
 80064bc:	2801      	cmp	r0, #1
 80064be:	d00c      	beq.n	80064da <sin+0x62>
 80064c0:	2802      	cmp	r0, #2
 80064c2:	d011      	beq.n	80064e8 <sin+0x70>
 80064c4:	b9f0      	cbnz	r0, 8006504 <sin+0x8c>
 80064c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064ca:	ed9d 0b00 	vldr	d0, [sp]
 80064ce:	2001      	movs	r0, #1
 80064d0:	f000 f8f2 	bl	80066b8 <__kernel_sin>
 80064d4:	ec51 0b10 	vmov	r0, r1, d0
 80064d8:	e7e6      	b.n	80064a8 <sin+0x30>
 80064da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064de:	ed9d 0b00 	vldr	d0, [sp]
 80064e2:	f000 f821 	bl	8006528 <__kernel_cos>
 80064e6:	e7f5      	b.n	80064d4 <sin+0x5c>
 80064e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064ec:	ed9d 0b00 	vldr	d0, [sp]
 80064f0:	2001      	movs	r0, #1
 80064f2:	f000 f8e1 	bl	80066b8 <__kernel_sin>
 80064f6:	ec53 2b10 	vmov	r2, r3, d0
 80064fa:	ee10 0a10 	vmov	r0, s0
 80064fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006502:	e7d1      	b.n	80064a8 <sin+0x30>
 8006504:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006508:	ed9d 0b00 	vldr	d0, [sp]
 800650c:	f000 f80c 	bl	8006528 <__kernel_cos>
 8006510:	e7f1      	b.n	80064f6 <sin+0x7e>
 8006512:	bf00      	nop
 8006514:	f3af 8000 	nop.w
	...
 8006520:	3fe921fb 	.word	0x3fe921fb
 8006524:	7fefffff 	.word	0x7fefffff

08006528 <__kernel_cos>:
 8006528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	ec57 6b10 	vmov	r6, r7, d0
 8006530:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006534:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006538:	ed8d 1b00 	vstr	d1, [sp]
 800653c:	da07      	bge.n	800654e <__kernel_cos+0x26>
 800653e:	ee10 0a10 	vmov	r0, s0
 8006542:	4639      	mov	r1, r7
 8006544:	f7fa fabe 	bl	8000ac4 <__aeabi_d2iz>
 8006548:	2800      	cmp	r0, #0
 800654a:	f000 8088 	beq.w	800665e <__kernel_cos+0x136>
 800654e:	4632      	mov	r2, r6
 8006550:	463b      	mov	r3, r7
 8006552:	4630      	mov	r0, r6
 8006554:	4639      	mov	r1, r7
 8006556:	f7fa f81b 	bl	8000590 <__aeabi_dmul>
 800655a:	4b51      	ldr	r3, [pc, #324]	; (80066a0 <__kernel_cos+0x178>)
 800655c:	2200      	movs	r2, #0
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	f7fa f815 	bl	8000590 <__aeabi_dmul>
 8006566:	a340      	add	r3, pc, #256	; (adr r3, 8006668 <__kernel_cos+0x140>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	4682      	mov	sl, r0
 800656e:	468b      	mov	fp, r1
 8006570:	4620      	mov	r0, r4
 8006572:	4629      	mov	r1, r5
 8006574:	f7fa f80c 	bl	8000590 <__aeabi_dmul>
 8006578:	a33d      	add	r3, pc, #244	; (adr r3, 8006670 <__kernel_cos+0x148>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7f9 fe51 	bl	8000224 <__adddf3>
 8006582:	4622      	mov	r2, r4
 8006584:	462b      	mov	r3, r5
 8006586:	f7fa f803 	bl	8000590 <__aeabi_dmul>
 800658a:	a33b      	add	r3, pc, #236	; (adr r3, 8006678 <__kernel_cos+0x150>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f7f9 fe46 	bl	8000220 <__aeabi_dsub>
 8006594:	4622      	mov	r2, r4
 8006596:	462b      	mov	r3, r5
 8006598:	f7f9 fffa 	bl	8000590 <__aeabi_dmul>
 800659c:	a338      	add	r3, pc, #224	; (adr r3, 8006680 <__kernel_cos+0x158>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fe3f 	bl	8000224 <__adddf3>
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	f7f9 fff1 	bl	8000590 <__aeabi_dmul>
 80065ae:	a336      	add	r3, pc, #216	; (adr r3, 8006688 <__kernel_cos+0x160>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7f9 fe34 	bl	8000220 <__aeabi_dsub>
 80065b8:	4622      	mov	r2, r4
 80065ba:	462b      	mov	r3, r5
 80065bc:	f7f9 ffe8 	bl	8000590 <__aeabi_dmul>
 80065c0:	a333      	add	r3, pc, #204	; (adr r3, 8006690 <__kernel_cos+0x168>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7f9 fe2d 	bl	8000224 <__adddf3>
 80065ca:	4622      	mov	r2, r4
 80065cc:	462b      	mov	r3, r5
 80065ce:	f7f9 ffdf 	bl	8000590 <__aeabi_dmul>
 80065d2:	4622      	mov	r2, r4
 80065d4:	462b      	mov	r3, r5
 80065d6:	f7f9 ffdb 	bl	8000590 <__aeabi_dmul>
 80065da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065de:	4604      	mov	r4, r0
 80065e0:	460d      	mov	r5, r1
 80065e2:	4630      	mov	r0, r6
 80065e4:	4639      	mov	r1, r7
 80065e6:	f7f9 ffd3 	bl	8000590 <__aeabi_dmul>
 80065ea:	460b      	mov	r3, r1
 80065ec:	4602      	mov	r2, r0
 80065ee:	4629      	mov	r1, r5
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7f9 fe15 	bl	8000220 <__aeabi_dsub>
 80065f6:	4b2b      	ldr	r3, [pc, #172]	; (80066a4 <__kernel_cos+0x17c>)
 80065f8:	4598      	cmp	r8, r3
 80065fa:	4606      	mov	r6, r0
 80065fc:	460f      	mov	r7, r1
 80065fe:	dc10      	bgt.n	8006622 <__kernel_cos+0xfa>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4650      	mov	r0, sl
 8006606:	4659      	mov	r1, fp
 8006608:	f7f9 fe0a 	bl	8000220 <__aeabi_dsub>
 800660c:	460b      	mov	r3, r1
 800660e:	4926      	ldr	r1, [pc, #152]	; (80066a8 <__kernel_cos+0x180>)
 8006610:	4602      	mov	r2, r0
 8006612:	2000      	movs	r0, #0
 8006614:	f7f9 fe04 	bl	8000220 <__aeabi_dsub>
 8006618:	ec41 0b10 	vmov	d0, r0, r1
 800661c:	b003      	add	sp, #12
 800661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006622:	4b22      	ldr	r3, [pc, #136]	; (80066ac <__kernel_cos+0x184>)
 8006624:	4920      	ldr	r1, [pc, #128]	; (80066a8 <__kernel_cos+0x180>)
 8006626:	4598      	cmp	r8, r3
 8006628:	bfcc      	ite	gt
 800662a:	4d21      	ldrgt	r5, [pc, #132]	; (80066b0 <__kernel_cos+0x188>)
 800662c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006630:	2400      	movs	r4, #0
 8006632:	4622      	mov	r2, r4
 8006634:	462b      	mov	r3, r5
 8006636:	2000      	movs	r0, #0
 8006638:	f7f9 fdf2 	bl	8000220 <__aeabi_dsub>
 800663c:	4622      	mov	r2, r4
 800663e:	4680      	mov	r8, r0
 8006640:	4689      	mov	r9, r1
 8006642:	462b      	mov	r3, r5
 8006644:	4650      	mov	r0, sl
 8006646:	4659      	mov	r1, fp
 8006648:	f7f9 fdea 	bl	8000220 <__aeabi_dsub>
 800664c:	4632      	mov	r2, r6
 800664e:	463b      	mov	r3, r7
 8006650:	f7f9 fde6 	bl	8000220 <__aeabi_dsub>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4640      	mov	r0, r8
 800665a:	4649      	mov	r1, r9
 800665c:	e7da      	b.n	8006614 <__kernel_cos+0xec>
 800665e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006698 <__kernel_cos+0x170>
 8006662:	e7db      	b.n	800661c <__kernel_cos+0xf4>
 8006664:	f3af 8000 	nop.w
 8006668:	be8838d4 	.word	0xbe8838d4
 800666c:	bda8fae9 	.word	0xbda8fae9
 8006670:	bdb4b1c4 	.word	0xbdb4b1c4
 8006674:	3e21ee9e 	.word	0x3e21ee9e
 8006678:	809c52ad 	.word	0x809c52ad
 800667c:	3e927e4f 	.word	0x3e927e4f
 8006680:	19cb1590 	.word	0x19cb1590
 8006684:	3efa01a0 	.word	0x3efa01a0
 8006688:	16c15177 	.word	0x16c15177
 800668c:	3f56c16c 	.word	0x3f56c16c
 8006690:	5555554c 	.word	0x5555554c
 8006694:	3fa55555 	.word	0x3fa55555
 8006698:	00000000 	.word	0x00000000
 800669c:	3ff00000 	.word	0x3ff00000
 80066a0:	3fe00000 	.word	0x3fe00000
 80066a4:	3fd33332 	.word	0x3fd33332
 80066a8:	3ff00000 	.word	0x3ff00000
 80066ac:	3fe90000 	.word	0x3fe90000
 80066b0:	3fd20000 	.word	0x3fd20000
 80066b4:	00000000 	.word	0x00000000

080066b8 <__kernel_sin>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	ed2d 8b04 	vpush	{d8-d9}
 80066c0:	eeb0 8a41 	vmov.f32	s16, s2
 80066c4:	eef0 8a61 	vmov.f32	s17, s3
 80066c8:	ec55 4b10 	vmov	r4, r5, d0
 80066cc:	b083      	sub	sp, #12
 80066ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80066d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80066d6:	9001      	str	r0, [sp, #4]
 80066d8:	da06      	bge.n	80066e8 <__kernel_sin+0x30>
 80066da:	ee10 0a10 	vmov	r0, s0
 80066de:	4629      	mov	r1, r5
 80066e0:	f7fa f9f0 	bl	8000ac4 <__aeabi_d2iz>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d051      	beq.n	800678c <__kernel_sin+0xd4>
 80066e8:	4622      	mov	r2, r4
 80066ea:	462b      	mov	r3, r5
 80066ec:	4620      	mov	r0, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	f7f9 ff4e 	bl	8000590 <__aeabi_dmul>
 80066f4:	4682      	mov	sl, r0
 80066f6:	468b      	mov	fp, r1
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4620      	mov	r0, r4
 80066fe:	4629      	mov	r1, r5
 8006700:	f7f9 ff46 	bl	8000590 <__aeabi_dmul>
 8006704:	a341      	add	r3, pc, #260	; (adr r3, 800680c <__kernel_sin+0x154>)
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	4680      	mov	r8, r0
 800670c:	4689      	mov	r9, r1
 800670e:	4650      	mov	r0, sl
 8006710:	4659      	mov	r1, fp
 8006712:	f7f9 ff3d 	bl	8000590 <__aeabi_dmul>
 8006716:	a33f      	add	r3, pc, #252	; (adr r3, 8006814 <__kernel_sin+0x15c>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f7f9 fd80 	bl	8000220 <__aeabi_dsub>
 8006720:	4652      	mov	r2, sl
 8006722:	465b      	mov	r3, fp
 8006724:	f7f9 ff34 	bl	8000590 <__aeabi_dmul>
 8006728:	a33c      	add	r3, pc, #240	; (adr r3, 800681c <__kernel_sin+0x164>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7f9 fd79 	bl	8000224 <__adddf3>
 8006732:	4652      	mov	r2, sl
 8006734:	465b      	mov	r3, fp
 8006736:	f7f9 ff2b 	bl	8000590 <__aeabi_dmul>
 800673a:	a33a      	add	r3, pc, #232	; (adr r3, 8006824 <__kernel_sin+0x16c>)
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f7f9 fd6e 	bl	8000220 <__aeabi_dsub>
 8006744:	4652      	mov	r2, sl
 8006746:	465b      	mov	r3, fp
 8006748:	f7f9 ff22 	bl	8000590 <__aeabi_dmul>
 800674c:	a337      	add	r3, pc, #220	; (adr r3, 800682c <__kernel_sin+0x174>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 fd67 	bl	8000224 <__adddf3>
 8006756:	9b01      	ldr	r3, [sp, #4]
 8006758:	4606      	mov	r6, r0
 800675a:	460f      	mov	r7, r1
 800675c:	b9eb      	cbnz	r3, 800679a <__kernel_sin+0xe2>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4650      	mov	r0, sl
 8006764:	4659      	mov	r1, fp
 8006766:	f7f9 ff13 	bl	8000590 <__aeabi_dmul>
 800676a:	a325      	add	r3, pc, #148	; (adr r3, 8006800 <__kernel_sin+0x148>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fd56 	bl	8000220 <__aeabi_dsub>
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	f7f9 ff0a 	bl	8000590 <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4620      	mov	r0, r4
 8006782:	4629      	mov	r1, r5
 8006784:	f7f9 fd4e 	bl	8000224 <__adddf3>
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	ec45 4b10 	vmov	d0, r4, r5
 8006790:	b003      	add	sp, #12
 8006792:	ecbd 8b04 	vpop	{d8-d9}
 8006796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679a:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <__kernel_sin+0x150>)
 800679c:	ec51 0b18 	vmov	r0, r1, d8
 80067a0:	2200      	movs	r2, #0
 80067a2:	f7f9 fef5 	bl	8000590 <__aeabi_dmul>
 80067a6:	4632      	mov	r2, r6
 80067a8:	ec41 0b19 	vmov	d9, r0, r1
 80067ac:	463b      	mov	r3, r7
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7f9 feed 	bl	8000590 <__aeabi_dmul>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	ec51 0b19 	vmov	r0, r1, d9
 80067be:	f7f9 fd2f 	bl	8000220 <__aeabi_dsub>
 80067c2:	4652      	mov	r2, sl
 80067c4:	465b      	mov	r3, fp
 80067c6:	f7f9 fee3 	bl	8000590 <__aeabi_dmul>
 80067ca:	ec53 2b18 	vmov	r2, r3, d8
 80067ce:	f7f9 fd27 	bl	8000220 <__aeabi_dsub>
 80067d2:	a30b      	add	r3, pc, #44	; (adr r3, 8006800 <__kernel_sin+0x148>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	4606      	mov	r6, r0
 80067da:	460f      	mov	r7, r1
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7f9 fed6 	bl	8000590 <__aeabi_dmul>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4630      	mov	r0, r6
 80067ea:	4639      	mov	r1, r7
 80067ec:	f7f9 fd1a 	bl	8000224 <__adddf3>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4620      	mov	r0, r4
 80067f6:	4629      	mov	r1, r5
 80067f8:	f7f9 fd12 	bl	8000220 <__aeabi_dsub>
 80067fc:	e7c4      	b.n	8006788 <__kernel_sin+0xd0>
 80067fe:	bf00      	nop
 8006800:	55555549 	.word	0x55555549
 8006804:	3fc55555 	.word	0x3fc55555
 8006808:	3fe00000 	.word	0x3fe00000
 800680c:	5acfd57c 	.word	0x5acfd57c
 8006810:	3de5d93a 	.word	0x3de5d93a
 8006814:	8a2b9ceb 	.word	0x8a2b9ceb
 8006818:	3e5ae5e6 	.word	0x3e5ae5e6
 800681c:	57b1fe7d 	.word	0x57b1fe7d
 8006820:	3ec71de3 	.word	0x3ec71de3
 8006824:	19c161d5 	.word	0x19c161d5
 8006828:	3f2a01a0 	.word	0x3f2a01a0
 800682c:	1110f8a6 	.word	0x1110f8a6
 8006830:	3f811111 	.word	0x3f811111
 8006834:	00000000 	.word	0x00000000

08006838 <__ieee754_rem_pio2>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	ed2d 8b02 	vpush	{d8}
 8006840:	ec55 4b10 	vmov	r4, r5, d0
 8006844:	4bca      	ldr	r3, [pc, #808]	; (8006b70 <__ieee754_rem_pio2+0x338>)
 8006846:	b08b      	sub	sp, #44	; 0x2c
 8006848:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800684c:	4598      	cmp	r8, r3
 800684e:	4682      	mov	sl, r0
 8006850:	9502      	str	r5, [sp, #8]
 8006852:	dc08      	bgt.n	8006866 <__ieee754_rem_pio2+0x2e>
 8006854:	2200      	movs	r2, #0
 8006856:	2300      	movs	r3, #0
 8006858:	ed80 0b00 	vstr	d0, [r0]
 800685c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006860:	f04f 0b00 	mov.w	fp, #0
 8006864:	e028      	b.n	80068b8 <__ieee754_rem_pio2+0x80>
 8006866:	4bc3      	ldr	r3, [pc, #780]	; (8006b74 <__ieee754_rem_pio2+0x33c>)
 8006868:	4598      	cmp	r8, r3
 800686a:	dc78      	bgt.n	800695e <__ieee754_rem_pio2+0x126>
 800686c:	9b02      	ldr	r3, [sp, #8]
 800686e:	4ec2      	ldr	r6, [pc, #776]	; (8006b78 <__ieee754_rem_pio2+0x340>)
 8006870:	2b00      	cmp	r3, #0
 8006872:	ee10 0a10 	vmov	r0, s0
 8006876:	a3b0      	add	r3, pc, #704	; (adr r3, 8006b38 <__ieee754_rem_pio2+0x300>)
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	4629      	mov	r1, r5
 800687e:	dd39      	ble.n	80068f4 <__ieee754_rem_pio2+0xbc>
 8006880:	f7f9 fcce 	bl	8000220 <__aeabi_dsub>
 8006884:	45b0      	cmp	r8, r6
 8006886:	4604      	mov	r4, r0
 8006888:	460d      	mov	r5, r1
 800688a:	d01b      	beq.n	80068c4 <__ieee754_rem_pio2+0x8c>
 800688c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006b40 <__ieee754_rem_pio2+0x308>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	f7f9 fcc5 	bl	8000220 <__aeabi_dsub>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	e9ca 2300 	strd	r2, r3, [sl]
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7f9 fcbd 	bl	8000220 <__aeabi_dsub>
 80068a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006b40 <__ieee754_rem_pio2+0x308>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fcb8 	bl	8000220 <__aeabi_dsub>
 80068b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80068b4:	f04f 0b01 	mov.w	fp, #1
 80068b8:	4658      	mov	r0, fp
 80068ba:	b00b      	add	sp, #44	; 0x2c
 80068bc:	ecbd 8b02 	vpop	{d8}
 80068c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006b48 <__ieee754_rem_pio2+0x310>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f7f9 fca9 	bl	8000220 <__aeabi_dsub>
 80068ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8006b50 <__ieee754_rem_pio2+0x318>)
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	4604      	mov	r4, r0
 80068d6:	460d      	mov	r5, r1
 80068d8:	f7f9 fca2 	bl	8000220 <__aeabi_dsub>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	e9ca 2300 	strd	r2, r3, [sl]
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7f9 fc9a 	bl	8000220 <__aeabi_dsub>
 80068ec:	a398      	add	r3, pc, #608	; (adr r3, 8006b50 <__ieee754_rem_pio2+0x318>)
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	e7db      	b.n	80068ac <__ieee754_rem_pio2+0x74>
 80068f4:	f7f9 fc96 	bl	8000224 <__adddf3>
 80068f8:	45b0      	cmp	r8, r6
 80068fa:	4604      	mov	r4, r0
 80068fc:	460d      	mov	r5, r1
 80068fe:	d016      	beq.n	800692e <__ieee754_rem_pio2+0xf6>
 8006900:	a38f      	add	r3, pc, #572	; (adr r3, 8006b40 <__ieee754_rem_pio2+0x308>)
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f7f9 fc8d 	bl	8000224 <__adddf3>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	e9ca 2300 	strd	r2, r3, [sl]
 8006912:	4620      	mov	r0, r4
 8006914:	4629      	mov	r1, r5
 8006916:	f7f9 fc83 	bl	8000220 <__aeabi_dsub>
 800691a:	a389      	add	r3, pc, #548	; (adr r3, 8006b40 <__ieee754_rem_pio2+0x308>)
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f7f9 fc80 	bl	8000224 <__adddf3>
 8006924:	f04f 3bff 	mov.w	fp, #4294967295
 8006928:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800692c:	e7c4      	b.n	80068b8 <__ieee754_rem_pio2+0x80>
 800692e:	a386      	add	r3, pc, #536	; (adr r3, 8006b48 <__ieee754_rem_pio2+0x310>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fc76 	bl	8000224 <__adddf3>
 8006938:	a385      	add	r3, pc, #532	; (adr r3, 8006b50 <__ieee754_rem_pio2+0x318>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	4604      	mov	r4, r0
 8006940:	460d      	mov	r5, r1
 8006942:	f7f9 fc6f 	bl	8000224 <__adddf3>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	e9ca 2300 	strd	r2, r3, [sl]
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7f9 fc65 	bl	8000220 <__aeabi_dsub>
 8006956:	a37e      	add	r3, pc, #504	; (adr r3, 8006b50 <__ieee754_rem_pio2+0x318>)
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	e7e0      	b.n	8006920 <__ieee754_rem_pio2+0xe8>
 800695e:	4b87      	ldr	r3, [pc, #540]	; (8006b7c <__ieee754_rem_pio2+0x344>)
 8006960:	4598      	cmp	r8, r3
 8006962:	f300 80d8 	bgt.w	8006b16 <__ieee754_rem_pio2+0x2de>
 8006966:	f000 f96d 	bl	8006c44 <fabs>
 800696a:	ec55 4b10 	vmov	r4, r5, d0
 800696e:	ee10 0a10 	vmov	r0, s0
 8006972:	a379      	add	r3, pc, #484	; (adr r3, 8006b58 <__ieee754_rem_pio2+0x320>)
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	4629      	mov	r1, r5
 800697a:	f7f9 fe09 	bl	8000590 <__aeabi_dmul>
 800697e:	4b80      	ldr	r3, [pc, #512]	; (8006b80 <__ieee754_rem_pio2+0x348>)
 8006980:	2200      	movs	r2, #0
 8006982:	f7f9 fc4f 	bl	8000224 <__adddf3>
 8006986:	f7fa f89d 	bl	8000ac4 <__aeabi_d2iz>
 800698a:	4683      	mov	fp, r0
 800698c:	f7f9 fd96 	bl	80004bc <__aeabi_i2d>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	ec43 2b18 	vmov	d8, r2, r3
 8006998:	a367      	add	r3, pc, #412	; (adr r3, 8006b38 <__ieee754_rem_pio2+0x300>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f7f9 fdf7 	bl	8000590 <__aeabi_dmul>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4620      	mov	r0, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	f7f9 fc39 	bl	8000220 <__aeabi_dsub>
 80069ae:	a364      	add	r3, pc, #400	; (adr r3, 8006b40 <__ieee754_rem_pio2+0x308>)
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	4606      	mov	r6, r0
 80069b6:	460f      	mov	r7, r1
 80069b8:	ec51 0b18 	vmov	r0, r1, d8
 80069bc:	f7f9 fde8 	bl	8000590 <__aeabi_dmul>
 80069c0:	f1bb 0f1f 	cmp.w	fp, #31
 80069c4:	4604      	mov	r4, r0
 80069c6:	460d      	mov	r5, r1
 80069c8:	dc0d      	bgt.n	80069e6 <__ieee754_rem_pio2+0x1ae>
 80069ca:	4b6e      	ldr	r3, [pc, #440]	; (8006b84 <__ieee754_rem_pio2+0x34c>)
 80069cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80069d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d4:	4543      	cmp	r3, r8
 80069d6:	d006      	beq.n	80069e6 <__ieee754_rem_pio2+0x1ae>
 80069d8:	4622      	mov	r2, r4
 80069da:	462b      	mov	r3, r5
 80069dc:	4630      	mov	r0, r6
 80069de:	4639      	mov	r1, r7
 80069e0:	f7f9 fc1e 	bl	8000220 <__aeabi_dsub>
 80069e4:	e00e      	b.n	8006a04 <__ieee754_rem_pio2+0x1cc>
 80069e6:	462b      	mov	r3, r5
 80069e8:	4622      	mov	r2, r4
 80069ea:	4630      	mov	r0, r6
 80069ec:	4639      	mov	r1, r7
 80069ee:	f7f9 fc17 	bl	8000220 <__aeabi_dsub>
 80069f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80069f6:	9303      	str	r3, [sp, #12]
 80069f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069fc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	dc02      	bgt.n	8006a0a <__ieee754_rem_pio2+0x1d2>
 8006a04:	e9ca 0100 	strd	r0, r1, [sl]
 8006a08:	e039      	b.n	8006a7e <__ieee754_rem_pio2+0x246>
 8006a0a:	a34f      	add	r3, pc, #316	; (adr r3, 8006b48 <__ieee754_rem_pio2+0x310>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	ec51 0b18 	vmov	r0, r1, d8
 8006a14:	f7f9 fdbc 	bl	8000590 <__aeabi_dmul>
 8006a18:	4604      	mov	r4, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4630      	mov	r0, r6
 8006a22:	4639      	mov	r1, r7
 8006a24:	f7f9 fbfc 	bl	8000220 <__aeabi_dsub>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	4689      	mov	r9, r1
 8006a30:	4630      	mov	r0, r6
 8006a32:	4639      	mov	r1, r7
 8006a34:	f7f9 fbf4 	bl	8000220 <__aeabi_dsub>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	462b      	mov	r3, r5
 8006a3c:	f7f9 fbf0 	bl	8000220 <__aeabi_dsub>
 8006a40:	a343      	add	r3, pc, #268	; (adr r3, 8006b50 <__ieee754_rem_pio2+0x318>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	4604      	mov	r4, r0
 8006a48:	460d      	mov	r5, r1
 8006a4a:	ec51 0b18 	vmov	r0, r1, d8
 8006a4e:	f7f9 fd9f 	bl	8000590 <__aeabi_dmul>
 8006a52:	4622      	mov	r2, r4
 8006a54:	462b      	mov	r3, r5
 8006a56:	f7f9 fbe3 	bl	8000220 <__aeabi_dsub>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4604      	mov	r4, r0
 8006a60:	460d      	mov	r5, r1
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 fbdb 	bl	8000220 <__aeabi_dsub>
 8006a6a:	9a03      	ldr	r2, [sp, #12]
 8006a6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b31      	cmp	r3, #49	; 0x31
 8006a74:	dc24      	bgt.n	8006ac0 <__ieee754_rem_pio2+0x288>
 8006a76:	e9ca 0100 	strd	r0, r1, [sl]
 8006a7a:	4646      	mov	r6, r8
 8006a7c:	464f      	mov	r7, r9
 8006a7e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a82:	4630      	mov	r0, r6
 8006a84:	4642      	mov	r2, r8
 8006a86:	464b      	mov	r3, r9
 8006a88:	4639      	mov	r1, r7
 8006a8a:	f7f9 fbc9 	bl	8000220 <__aeabi_dsub>
 8006a8e:	462b      	mov	r3, r5
 8006a90:	4622      	mov	r2, r4
 8006a92:	f7f9 fbc5 	bl	8000220 <__aeabi_dsub>
 8006a96:	9b02      	ldr	r3, [sp, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a9e:	f6bf af0b 	bge.w	80068b8 <__ieee754_rem_pio2+0x80>
 8006aa2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006aa6:	f8ca 3004 	str.w	r3, [sl, #4]
 8006aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006aae:	f8ca 8000 	str.w	r8, [sl]
 8006ab2:	f8ca 0008 	str.w	r0, [sl, #8]
 8006ab6:	f8ca 300c 	str.w	r3, [sl, #12]
 8006aba:	f1cb 0b00 	rsb	fp, fp, #0
 8006abe:	e6fb      	b.n	80068b8 <__ieee754_rem_pio2+0x80>
 8006ac0:	a327      	add	r3, pc, #156	; (adr r3, 8006b60 <__ieee754_rem_pio2+0x328>)
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	ec51 0b18 	vmov	r0, r1, d8
 8006aca:	f7f9 fd61 	bl	8000590 <__aeabi_dmul>
 8006ace:	4604      	mov	r4, r0
 8006ad0:	460d      	mov	r5, r1
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4649      	mov	r1, r9
 8006ada:	f7f9 fba1 	bl	8000220 <__aeabi_dsub>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	4649      	mov	r1, r9
 8006aea:	f7f9 fb99 	bl	8000220 <__aeabi_dsub>
 8006aee:	4622      	mov	r2, r4
 8006af0:	462b      	mov	r3, r5
 8006af2:	f7f9 fb95 	bl	8000220 <__aeabi_dsub>
 8006af6:	a31c      	add	r3, pc, #112	; (adr r3, 8006b68 <__ieee754_rem_pio2+0x330>)
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	4604      	mov	r4, r0
 8006afe:	460d      	mov	r5, r1
 8006b00:	ec51 0b18 	vmov	r0, r1, d8
 8006b04:	f7f9 fd44 	bl	8000590 <__aeabi_dmul>
 8006b08:	4622      	mov	r2, r4
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	f7f9 fb88 	bl	8000220 <__aeabi_dsub>
 8006b10:	4604      	mov	r4, r0
 8006b12:	460d      	mov	r5, r1
 8006b14:	e760      	b.n	80069d8 <__ieee754_rem_pio2+0x1a0>
 8006b16:	4b1c      	ldr	r3, [pc, #112]	; (8006b88 <__ieee754_rem_pio2+0x350>)
 8006b18:	4598      	cmp	r8, r3
 8006b1a:	dd37      	ble.n	8006b8c <__ieee754_rem_pio2+0x354>
 8006b1c:	ee10 2a10 	vmov	r2, s0
 8006b20:	462b      	mov	r3, r5
 8006b22:	4620      	mov	r0, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	f7f9 fb7b 	bl	8000220 <__aeabi_dsub>
 8006b2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b2e:	e9ca 0100 	strd	r0, r1, [sl]
 8006b32:	e695      	b.n	8006860 <__ieee754_rem_pio2+0x28>
 8006b34:	f3af 8000 	nop.w
 8006b38:	54400000 	.word	0x54400000
 8006b3c:	3ff921fb 	.word	0x3ff921fb
 8006b40:	1a626331 	.word	0x1a626331
 8006b44:	3dd0b461 	.word	0x3dd0b461
 8006b48:	1a600000 	.word	0x1a600000
 8006b4c:	3dd0b461 	.word	0x3dd0b461
 8006b50:	2e037073 	.word	0x2e037073
 8006b54:	3ba3198a 	.word	0x3ba3198a
 8006b58:	6dc9c883 	.word	0x6dc9c883
 8006b5c:	3fe45f30 	.word	0x3fe45f30
 8006b60:	2e000000 	.word	0x2e000000
 8006b64:	3ba3198a 	.word	0x3ba3198a
 8006b68:	252049c1 	.word	0x252049c1
 8006b6c:	397b839a 	.word	0x397b839a
 8006b70:	3fe921fb 	.word	0x3fe921fb
 8006b74:	4002d97b 	.word	0x4002d97b
 8006b78:	3ff921fb 	.word	0x3ff921fb
 8006b7c:	413921fb 	.word	0x413921fb
 8006b80:	3fe00000 	.word	0x3fe00000
 8006b84:	08007578 	.word	0x08007578
 8006b88:	7fefffff 	.word	0x7fefffff
 8006b8c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006b90:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006b94:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006b98:	4620      	mov	r0, r4
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	f7f9 ff92 	bl	8000ac4 <__aeabi_d2iz>
 8006ba0:	f7f9 fc8c 	bl	80004bc <__aeabi_i2d>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4620      	mov	r0, r4
 8006baa:	4629      	mov	r1, r5
 8006bac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bb0:	f7f9 fb36 	bl	8000220 <__aeabi_dsub>
 8006bb4:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <__ieee754_rem_pio2+0x404>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f7f9 fcea 	bl	8000590 <__aeabi_dmul>
 8006bbc:	460d      	mov	r5, r1
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	f7f9 ff80 	bl	8000ac4 <__aeabi_d2iz>
 8006bc4:	f7f9 fc7a 	bl	80004bc <__aeabi_i2d>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006bd4:	f7f9 fb24 	bl	8000220 <__aeabi_dsub>
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <__ieee754_rem_pio2+0x404>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f7f9 fcd8 	bl	8000590 <__aeabi_dmul>
 8006be0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006be4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006be8:	2703      	movs	r7, #3
 8006bea:	2400      	movs	r4, #0
 8006bec:	2500      	movs	r5, #0
 8006bee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	462b      	mov	r3, r5
 8006bf6:	46b9      	mov	r9, r7
 8006bf8:	3f01      	subs	r7, #1
 8006bfa:	f7f9 ff31 	bl	8000a60 <__aeabi_dcmpeq>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d1f5      	bne.n	8006bee <__ieee754_rem_pio2+0x3b6>
 8006c02:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <__ieee754_rem_pio2+0x408>)
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	2302      	movs	r3, #2
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	4632      	mov	r2, r6
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	4651      	mov	r1, sl
 8006c10:	a804      	add	r0, sp, #16
 8006c12:	f000 f821 	bl	8006c58 <__kernel_rem_pio2>
 8006c16:	9b02      	ldr	r3, [sp, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	4683      	mov	fp, r0
 8006c1c:	f6bf ae4c 	bge.w	80068b8 <__ieee754_rem_pio2+0x80>
 8006c20:	e9da 2100 	ldrd	r2, r1, [sl]
 8006c24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c28:	e9ca 2300 	strd	r2, r3, [sl]
 8006c2c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c34:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006c38:	e73f      	b.n	8006aba <__ieee754_rem_pio2+0x282>
 8006c3a:	bf00      	nop
 8006c3c:	41700000 	.word	0x41700000
 8006c40:	080075f8 	.word	0x080075f8

08006c44 <fabs>:
 8006c44:	ec51 0b10 	vmov	r0, r1, d0
 8006c48:	ee10 2a10 	vmov	r2, s0
 8006c4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c50:	ec43 2b10 	vmov	d0, r2, r3
 8006c54:	4770      	bx	lr
	...

08006c58 <__kernel_rem_pio2>:
 8006c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	ed2d 8b02 	vpush	{d8}
 8006c60:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006c64:	f112 0f14 	cmn.w	r2, #20
 8006c68:	9306      	str	r3, [sp, #24]
 8006c6a:	9104      	str	r1, [sp, #16]
 8006c6c:	4bc2      	ldr	r3, [pc, #776]	; (8006f78 <__kernel_rem_pio2+0x320>)
 8006c6e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006c70:	9009      	str	r0, [sp, #36]	; 0x24
 8006c72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	9b06      	ldr	r3, [sp, #24]
 8006c7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c7e:	bfa8      	it	ge
 8006c80:	1ed4      	subge	r4, r2, #3
 8006c82:	9305      	str	r3, [sp, #20]
 8006c84:	bfb2      	itee	lt
 8006c86:	2400      	movlt	r4, #0
 8006c88:	2318      	movge	r3, #24
 8006c8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006c8e:	f06f 0317 	mvn.w	r3, #23
 8006c92:	fb04 3303 	mla	r3, r4, r3, r3
 8006c96:	eb03 0a02 	add.w	sl, r3, r2
 8006c9a:	9b00      	ldr	r3, [sp, #0]
 8006c9c:	9a05      	ldr	r2, [sp, #20]
 8006c9e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006f68 <__kernel_rem_pio2+0x310>
 8006ca2:	eb03 0802 	add.w	r8, r3, r2
 8006ca6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006ca8:	1aa7      	subs	r7, r4, r2
 8006caa:	ae20      	add	r6, sp, #128	; 0x80
 8006cac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006cb0:	2500      	movs	r5, #0
 8006cb2:	4545      	cmp	r5, r8
 8006cb4:	dd13      	ble.n	8006cde <__kernel_rem_pio2+0x86>
 8006cb6:	9b06      	ldr	r3, [sp, #24]
 8006cb8:	aa20      	add	r2, sp, #128	; 0x80
 8006cba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006cbe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006cc2:	f04f 0800 	mov.w	r8, #0
 8006cc6:	9b00      	ldr	r3, [sp, #0]
 8006cc8:	4598      	cmp	r8, r3
 8006cca:	dc31      	bgt.n	8006d30 <__kernel_rem_pio2+0xd8>
 8006ccc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006f68 <__kernel_rem_pio2+0x310>
 8006cd0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006cd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006cd8:	462f      	mov	r7, r5
 8006cda:	2600      	movs	r6, #0
 8006cdc:	e01b      	b.n	8006d16 <__kernel_rem_pio2+0xbe>
 8006cde:	42ef      	cmn	r7, r5
 8006ce0:	d407      	bmi.n	8006cf2 <__kernel_rem_pio2+0x9a>
 8006ce2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006ce6:	f7f9 fbe9 	bl	80004bc <__aeabi_i2d>
 8006cea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006cee:	3501      	adds	r5, #1
 8006cf0:	e7df      	b.n	8006cb2 <__kernel_rem_pio2+0x5a>
 8006cf2:	ec51 0b18 	vmov	r0, r1, d8
 8006cf6:	e7f8      	b.n	8006cea <__kernel_rem_pio2+0x92>
 8006cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006d00:	f7f9 fc46 	bl	8000590 <__aeabi_dmul>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d0c:	f7f9 fa8a 	bl	8000224 <__adddf3>
 8006d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d14:	3601      	adds	r6, #1
 8006d16:	9b05      	ldr	r3, [sp, #20]
 8006d18:	429e      	cmp	r6, r3
 8006d1a:	f1a7 0708 	sub.w	r7, r7, #8
 8006d1e:	ddeb      	ble.n	8006cf8 <__kernel_rem_pio2+0xa0>
 8006d20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d24:	f108 0801 	add.w	r8, r8, #1
 8006d28:	ecab 7b02 	vstmia	fp!, {d7}
 8006d2c:	3508      	adds	r5, #8
 8006d2e:	e7ca      	b.n	8006cc6 <__kernel_rem_pio2+0x6e>
 8006d30:	9b00      	ldr	r3, [sp, #0]
 8006d32:	aa0c      	add	r2, sp, #48	; 0x30
 8006d34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d3a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006d3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006d40:	9c00      	ldr	r4, [sp, #0]
 8006d42:	930a      	str	r3, [sp, #40]	; 0x28
 8006d44:	00e3      	lsls	r3, r4, #3
 8006d46:	9308      	str	r3, [sp, #32]
 8006d48:	ab98      	add	r3, sp, #608	; 0x260
 8006d4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d4e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006d52:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006d56:	ab70      	add	r3, sp, #448	; 0x1c0
 8006d58:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006d5c:	46c3      	mov	fp, r8
 8006d5e:	46a1      	mov	r9, r4
 8006d60:	f1b9 0f00 	cmp.w	r9, #0
 8006d64:	f1a5 0508 	sub.w	r5, r5, #8
 8006d68:	dc77      	bgt.n	8006e5a <__kernel_rem_pio2+0x202>
 8006d6a:	ec47 6b10 	vmov	d0, r6, r7
 8006d6e:	4650      	mov	r0, sl
 8006d70:	f000 fac2 	bl	80072f8 <scalbn>
 8006d74:	ec57 6b10 	vmov	r6, r7, d0
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006d7e:	ee10 0a10 	vmov	r0, s0
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 fc04 	bl	8000590 <__aeabi_dmul>
 8006d88:	ec41 0b10 	vmov	d0, r0, r1
 8006d8c:	f000 fb34 	bl	80073f8 <floor>
 8006d90:	4b7a      	ldr	r3, [pc, #488]	; (8006f7c <__kernel_rem_pio2+0x324>)
 8006d92:	ec51 0b10 	vmov	r0, r1, d0
 8006d96:	2200      	movs	r2, #0
 8006d98:	f7f9 fbfa 	bl	8000590 <__aeabi_dmul>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4630      	mov	r0, r6
 8006da2:	4639      	mov	r1, r7
 8006da4:	f7f9 fa3c 	bl	8000220 <__aeabi_dsub>
 8006da8:	460f      	mov	r7, r1
 8006daa:	4606      	mov	r6, r0
 8006dac:	f7f9 fe8a 	bl	8000ac4 <__aeabi_d2iz>
 8006db0:	9002      	str	r0, [sp, #8]
 8006db2:	f7f9 fb83 	bl	80004bc <__aeabi_i2d>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4630      	mov	r0, r6
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	f7f9 fa2f 	bl	8000220 <__aeabi_dsub>
 8006dc2:	f1ba 0f00 	cmp.w	sl, #0
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	dd6d      	ble.n	8006ea8 <__kernel_rem_pio2+0x250>
 8006dcc:	1e61      	subs	r1, r4, #1
 8006dce:	ab0c      	add	r3, sp, #48	; 0x30
 8006dd0:	9d02      	ldr	r5, [sp, #8]
 8006dd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dd6:	f1ca 0018 	rsb	r0, sl, #24
 8006dda:	fa43 f200 	asr.w	r2, r3, r0
 8006dde:	4415      	add	r5, r2
 8006de0:	4082      	lsls	r2, r0
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	aa0c      	add	r2, sp, #48	; 0x30
 8006de6:	9502      	str	r5, [sp, #8]
 8006de8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006dec:	f1ca 0217 	rsb	r2, sl, #23
 8006df0:	fa43 fb02 	asr.w	fp, r3, r2
 8006df4:	f1bb 0f00 	cmp.w	fp, #0
 8006df8:	dd65      	ble.n	8006ec6 <__kernel_rem_pio2+0x26e>
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	3301      	adds	r3, #1
 8006e00:	9302      	str	r3, [sp, #8]
 8006e02:	4615      	mov	r5, r2
 8006e04:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006e08:	4294      	cmp	r4, r2
 8006e0a:	f300 809f 	bgt.w	8006f4c <__kernel_rem_pio2+0x2f4>
 8006e0e:	f1ba 0f00 	cmp.w	sl, #0
 8006e12:	dd07      	ble.n	8006e24 <__kernel_rem_pio2+0x1cc>
 8006e14:	f1ba 0f01 	cmp.w	sl, #1
 8006e18:	f000 80c1 	beq.w	8006f9e <__kernel_rem_pio2+0x346>
 8006e1c:	f1ba 0f02 	cmp.w	sl, #2
 8006e20:	f000 80c7 	beq.w	8006fb2 <__kernel_rem_pio2+0x35a>
 8006e24:	f1bb 0f02 	cmp.w	fp, #2
 8006e28:	d14d      	bne.n	8006ec6 <__kernel_rem_pio2+0x26e>
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	4954      	ldr	r1, [pc, #336]	; (8006f80 <__kernel_rem_pio2+0x328>)
 8006e30:	2000      	movs	r0, #0
 8006e32:	f7f9 f9f5 	bl	8000220 <__aeabi_dsub>
 8006e36:	4606      	mov	r6, r0
 8006e38:	460f      	mov	r7, r1
 8006e3a:	2d00      	cmp	r5, #0
 8006e3c:	d043      	beq.n	8006ec6 <__kernel_rem_pio2+0x26e>
 8006e3e:	4650      	mov	r0, sl
 8006e40:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006f70 <__kernel_rem_pio2+0x318>
 8006e44:	f000 fa58 	bl	80072f8 <scalbn>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	ec53 2b10 	vmov	r2, r3, d0
 8006e50:	f7f9 f9e6 	bl	8000220 <__aeabi_dsub>
 8006e54:	4606      	mov	r6, r0
 8006e56:	460f      	mov	r7, r1
 8006e58:	e035      	b.n	8006ec6 <__kernel_rem_pio2+0x26e>
 8006e5a:	4b4a      	ldr	r3, [pc, #296]	; (8006f84 <__kernel_rem_pio2+0x32c>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4639      	mov	r1, r7
 8006e62:	f7f9 fb95 	bl	8000590 <__aeabi_dmul>
 8006e66:	f7f9 fe2d 	bl	8000ac4 <__aeabi_d2iz>
 8006e6a:	f7f9 fb27 	bl	80004bc <__aeabi_i2d>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	ec43 2b18 	vmov	d8, r2, r3
 8006e76:	4b44      	ldr	r3, [pc, #272]	; (8006f88 <__kernel_rem_pio2+0x330>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f7f9 fb89 	bl	8000590 <__aeabi_dmul>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 f9cb 	bl	8000220 <__aeabi_dsub>
 8006e8a:	f7f9 fe1b 	bl	8000ac4 <__aeabi_d2iz>
 8006e8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e92:	f84b 0b04 	str.w	r0, [fp], #4
 8006e96:	ec51 0b18 	vmov	r0, r1, d8
 8006e9a:	f7f9 f9c3 	bl	8000224 <__adddf3>
 8006e9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	460f      	mov	r7, r1
 8006ea6:	e75b      	b.n	8006d60 <__kernel_rem_pio2+0x108>
 8006ea8:	d106      	bne.n	8006eb8 <__kernel_rem_pio2+0x260>
 8006eaa:	1e63      	subs	r3, r4, #1
 8006eac:	aa0c      	add	r2, sp, #48	; 0x30
 8006eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006eb6:	e79d      	b.n	8006df4 <__kernel_rem_pio2+0x19c>
 8006eb8:	4b34      	ldr	r3, [pc, #208]	; (8006f8c <__kernel_rem_pio2+0x334>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f7f9 fdee 	bl	8000a9c <__aeabi_dcmpge>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d140      	bne.n	8006f46 <__kernel_rem_pio2+0x2ee>
 8006ec4:	4683      	mov	fp, r0
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4630      	mov	r0, r6
 8006ecc:	4639      	mov	r1, r7
 8006ece:	f7f9 fdc7 	bl	8000a60 <__aeabi_dcmpeq>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	f000 80c1 	beq.w	800705a <__kernel_rem_pio2+0x402>
 8006ed8:	1e65      	subs	r5, r4, #1
 8006eda:	462b      	mov	r3, r5
 8006edc:	2200      	movs	r2, #0
 8006ede:	9900      	ldr	r1, [sp, #0]
 8006ee0:	428b      	cmp	r3, r1
 8006ee2:	da6d      	bge.n	8006fc0 <__kernel_rem_pio2+0x368>
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	f000 808a 	beq.w	8006ffe <__kernel_rem_pio2+0x3a6>
 8006eea:	ab0c      	add	r3, sp, #48	; 0x30
 8006eec:	f1aa 0a18 	sub.w	sl, sl, #24
 8006ef0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80ae 	beq.w	8007056 <__kernel_rem_pio2+0x3fe>
 8006efa:	4650      	mov	r0, sl
 8006efc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006f70 <__kernel_rem_pio2+0x318>
 8006f00:	f000 f9fa 	bl	80072f8 <scalbn>
 8006f04:	1c6b      	adds	r3, r5, #1
 8006f06:	00da      	lsls	r2, r3, #3
 8006f08:	9205      	str	r2, [sp, #20]
 8006f0a:	ec57 6b10 	vmov	r6, r7, d0
 8006f0e:	aa70      	add	r2, sp, #448	; 0x1c0
 8006f10:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006f84 <__kernel_rem_pio2+0x32c>
 8006f14:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006f18:	462c      	mov	r4, r5
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	2c00      	cmp	r4, #0
 8006f20:	f280 80d4 	bge.w	80070cc <__kernel_rem_pio2+0x474>
 8006f24:	462c      	mov	r4, r5
 8006f26:	2c00      	cmp	r4, #0
 8006f28:	f2c0 8102 	blt.w	8007130 <__kernel_rem_pio2+0x4d8>
 8006f2c:	4b18      	ldr	r3, [pc, #96]	; (8006f90 <__kernel_rem_pio2+0x338>)
 8006f2e:	461e      	mov	r6, r3
 8006f30:	ab70      	add	r3, sp, #448	; 0x1c0
 8006f32:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006f36:	1b2b      	subs	r3, r5, r4
 8006f38:	f04f 0900 	mov.w	r9, #0
 8006f3c:	f04f 0a00 	mov.w	sl, #0
 8006f40:	2700      	movs	r7, #0
 8006f42:	9306      	str	r3, [sp, #24]
 8006f44:	e0e6      	b.n	8007114 <__kernel_rem_pio2+0x4bc>
 8006f46:	f04f 0b02 	mov.w	fp, #2
 8006f4a:	e756      	b.n	8006dfa <__kernel_rem_pio2+0x1a2>
 8006f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f50:	bb05      	cbnz	r5, 8006f94 <__kernel_rem_pio2+0x33c>
 8006f52:	b123      	cbz	r3, 8006f5e <__kernel_rem_pio2+0x306>
 8006f54:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006f58:	f8c8 3000 	str.w	r3, [r8]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	3201      	adds	r2, #1
 8006f60:	f108 0804 	add.w	r8, r8, #4
 8006f64:	461d      	mov	r5, r3
 8006f66:	e74f      	b.n	8006e08 <__kernel_rem_pio2+0x1b0>
	...
 8006f74:	3ff00000 	.word	0x3ff00000
 8006f78:	08007740 	.word	0x08007740
 8006f7c:	40200000 	.word	0x40200000
 8006f80:	3ff00000 	.word	0x3ff00000
 8006f84:	3e700000 	.word	0x3e700000
 8006f88:	41700000 	.word	0x41700000
 8006f8c:	3fe00000 	.word	0x3fe00000
 8006f90:	08007700 	.word	0x08007700
 8006f94:	1acb      	subs	r3, r1, r3
 8006f96:	f8c8 3000 	str.w	r3, [r8]
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	e7df      	b.n	8006f5e <__kernel_rem_pio2+0x306>
 8006f9e:	1e62      	subs	r2, r4, #1
 8006fa0:	ab0c      	add	r3, sp, #48	; 0x30
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006faa:	a90c      	add	r1, sp, #48	; 0x30
 8006fac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006fb0:	e738      	b.n	8006e24 <__kernel_rem_pio2+0x1cc>
 8006fb2:	1e62      	subs	r2, r4, #1
 8006fb4:	ab0c      	add	r3, sp, #48	; 0x30
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006fbe:	e7f4      	b.n	8006faa <__kernel_rem_pio2+0x352>
 8006fc0:	a90c      	add	r1, sp, #48	; 0x30
 8006fc2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	e788      	b.n	8006ede <__kernel_rem_pio2+0x286>
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006fd2:	2900      	cmp	r1, #0
 8006fd4:	d0fa      	beq.n	8006fcc <__kernel_rem_pio2+0x374>
 8006fd6:	9a08      	ldr	r2, [sp, #32]
 8006fd8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006fdc:	446a      	add	r2, sp
 8006fde:	3a98      	subs	r2, #152	; 0x98
 8006fe0:	9208      	str	r2, [sp, #32]
 8006fe2:	9a06      	ldr	r2, [sp, #24]
 8006fe4:	a920      	add	r1, sp, #128	; 0x80
 8006fe6:	18a2      	adds	r2, r4, r2
 8006fe8:	18e3      	adds	r3, r4, r3
 8006fea:	f104 0801 	add.w	r8, r4, #1
 8006fee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006ff2:	9302      	str	r3, [sp, #8]
 8006ff4:	9b02      	ldr	r3, [sp, #8]
 8006ff6:	4543      	cmp	r3, r8
 8006ff8:	da04      	bge.n	8007004 <__kernel_rem_pio2+0x3ac>
 8006ffa:	461c      	mov	r4, r3
 8006ffc:	e6a2      	b.n	8006d44 <__kernel_rem_pio2+0xec>
 8006ffe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007000:	2301      	movs	r3, #1
 8007002:	e7e4      	b.n	8006fce <__kernel_rem_pio2+0x376>
 8007004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007006:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800700a:	f7f9 fa57 	bl	80004bc <__aeabi_i2d>
 800700e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	46ab      	mov	fp, r5
 8007016:	461c      	mov	r4, r3
 8007018:	f04f 0900 	mov.w	r9, #0
 800701c:	2600      	movs	r6, #0
 800701e:	2700      	movs	r7, #0
 8007020:	9b05      	ldr	r3, [sp, #20]
 8007022:	4599      	cmp	r9, r3
 8007024:	dd06      	ble.n	8007034 <__kernel_rem_pio2+0x3dc>
 8007026:	9b08      	ldr	r3, [sp, #32]
 8007028:	e8e3 6702 	strd	r6, r7, [r3], #8
 800702c:	f108 0801 	add.w	r8, r8, #1
 8007030:	9308      	str	r3, [sp, #32]
 8007032:	e7df      	b.n	8006ff4 <__kernel_rem_pio2+0x39c>
 8007034:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007038:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800703c:	f7f9 faa8 	bl	8000590 <__aeabi_dmul>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4630      	mov	r0, r6
 8007046:	4639      	mov	r1, r7
 8007048:	f7f9 f8ec 	bl	8000224 <__adddf3>
 800704c:	f109 0901 	add.w	r9, r9, #1
 8007050:	4606      	mov	r6, r0
 8007052:	460f      	mov	r7, r1
 8007054:	e7e4      	b.n	8007020 <__kernel_rem_pio2+0x3c8>
 8007056:	3d01      	subs	r5, #1
 8007058:	e747      	b.n	8006eea <__kernel_rem_pio2+0x292>
 800705a:	ec47 6b10 	vmov	d0, r6, r7
 800705e:	f1ca 0000 	rsb	r0, sl, #0
 8007062:	f000 f949 	bl	80072f8 <scalbn>
 8007066:	ec57 6b10 	vmov	r6, r7, d0
 800706a:	4ba0      	ldr	r3, [pc, #640]	; (80072ec <__kernel_rem_pio2+0x694>)
 800706c:	ee10 0a10 	vmov	r0, s0
 8007070:	2200      	movs	r2, #0
 8007072:	4639      	mov	r1, r7
 8007074:	f7f9 fd12 	bl	8000a9c <__aeabi_dcmpge>
 8007078:	b1f8      	cbz	r0, 80070ba <__kernel_rem_pio2+0x462>
 800707a:	4b9d      	ldr	r3, [pc, #628]	; (80072f0 <__kernel_rem_pio2+0x698>)
 800707c:	2200      	movs	r2, #0
 800707e:	4630      	mov	r0, r6
 8007080:	4639      	mov	r1, r7
 8007082:	f7f9 fa85 	bl	8000590 <__aeabi_dmul>
 8007086:	f7f9 fd1d 	bl	8000ac4 <__aeabi_d2iz>
 800708a:	4680      	mov	r8, r0
 800708c:	f7f9 fa16 	bl	80004bc <__aeabi_i2d>
 8007090:	4b96      	ldr	r3, [pc, #600]	; (80072ec <__kernel_rem_pio2+0x694>)
 8007092:	2200      	movs	r2, #0
 8007094:	f7f9 fa7c 	bl	8000590 <__aeabi_dmul>
 8007098:	460b      	mov	r3, r1
 800709a:	4602      	mov	r2, r0
 800709c:	4639      	mov	r1, r7
 800709e:	4630      	mov	r0, r6
 80070a0:	f7f9 f8be 	bl	8000220 <__aeabi_dsub>
 80070a4:	f7f9 fd0e 	bl	8000ac4 <__aeabi_d2iz>
 80070a8:	1c65      	adds	r5, r4, #1
 80070aa:	ab0c      	add	r3, sp, #48	; 0x30
 80070ac:	f10a 0a18 	add.w	sl, sl, #24
 80070b0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070b4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80070b8:	e71f      	b.n	8006efa <__kernel_rem_pio2+0x2a2>
 80070ba:	4630      	mov	r0, r6
 80070bc:	4639      	mov	r1, r7
 80070be:	f7f9 fd01 	bl	8000ac4 <__aeabi_d2iz>
 80070c2:	ab0c      	add	r3, sp, #48	; 0x30
 80070c4:	4625      	mov	r5, r4
 80070c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80070ca:	e716      	b.n	8006efa <__kernel_rem_pio2+0x2a2>
 80070cc:	ab0c      	add	r3, sp, #48	; 0x30
 80070ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80070d2:	f7f9 f9f3 	bl	80004bc <__aeabi_i2d>
 80070d6:	4632      	mov	r2, r6
 80070d8:	463b      	mov	r3, r7
 80070da:	f7f9 fa59 	bl	8000590 <__aeabi_dmul>
 80070de:	4642      	mov	r2, r8
 80070e0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80070e4:	464b      	mov	r3, r9
 80070e6:	4630      	mov	r0, r6
 80070e8:	4639      	mov	r1, r7
 80070ea:	f7f9 fa51 	bl	8000590 <__aeabi_dmul>
 80070ee:	3c01      	subs	r4, #1
 80070f0:	4606      	mov	r6, r0
 80070f2:	460f      	mov	r7, r1
 80070f4:	e713      	b.n	8006f1e <__kernel_rem_pio2+0x2c6>
 80070f6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80070fa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80070fe:	f7f9 fa47 	bl	8000590 <__aeabi_dmul>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4648      	mov	r0, r9
 8007108:	4651      	mov	r1, sl
 800710a:	f7f9 f88b 	bl	8000224 <__adddf3>
 800710e:	3701      	adds	r7, #1
 8007110:	4681      	mov	r9, r0
 8007112:	468a      	mov	sl, r1
 8007114:	9b00      	ldr	r3, [sp, #0]
 8007116:	429f      	cmp	r7, r3
 8007118:	dc02      	bgt.n	8007120 <__kernel_rem_pio2+0x4c8>
 800711a:	9b06      	ldr	r3, [sp, #24]
 800711c:	429f      	cmp	r7, r3
 800711e:	ddea      	ble.n	80070f6 <__kernel_rem_pio2+0x49e>
 8007120:	9a06      	ldr	r2, [sp, #24]
 8007122:	ab48      	add	r3, sp, #288	; 0x120
 8007124:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007128:	e9c6 9a00 	strd	r9, sl, [r6]
 800712c:	3c01      	subs	r4, #1
 800712e:	e6fa      	b.n	8006f26 <__kernel_rem_pio2+0x2ce>
 8007130:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007132:	2b02      	cmp	r3, #2
 8007134:	dc0b      	bgt.n	800714e <__kernel_rem_pio2+0x4f6>
 8007136:	2b00      	cmp	r3, #0
 8007138:	dc39      	bgt.n	80071ae <__kernel_rem_pio2+0x556>
 800713a:	d05d      	beq.n	80071f8 <__kernel_rem_pio2+0x5a0>
 800713c:	9b02      	ldr	r3, [sp, #8]
 800713e:	f003 0007 	and.w	r0, r3, #7
 8007142:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007146:	ecbd 8b02 	vpop	{d8}
 800714a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007150:	2b03      	cmp	r3, #3
 8007152:	d1f3      	bne.n	800713c <__kernel_rem_pio2+0x4e4>
 8007154:	9b05      	ldr	r3, [sp, #20]
 8007156:	9500      	str	r5, [sp, #0]
 8007158:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800715c:	eb0d 0403 	add.w	r4, sp, r3
 8007160:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007164:	46a2      	mov	sl, r4
 8007166:	9b00      	ldr	r3, [sp, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f1aa 0a08 	sub.w	sl, sl, #8
 800716e:	dc69      	bgt.n	8007244 <__kernel_rem_pio2+0x5ec>
 8007170:	46aa      	mov	sl, r5
 8007172:	f1ba 0f01 	cmp.w	sl, #1
 8007176:	f1a4 0408 	sub.w	r4, r4, #8
 800717a:	f300 8083 	bgt.w	8007284 <__kernel_rem_pio2+0x62c>
 800717e:	9c05      	ldr	r4, [sp, #20]
 8007180:	ab48      	add	r3, sp, #288	; 0x120
 8007182:	441c      	add	r4, r3
 8007184:	2000      	movs	r0, #0
 8007186:	2100      	movs	r1, #0
 8007188:	2d01      	cmp	r5, #1
 800718a:	f300 809a 	bgt.w	80072c2 <__kernel_rem_pio2+0x66a>
 800718e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007192:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007196:	f1bb 0f00 	cmp.w	fp, #0
 800719a:	f040 8098 	bne.w	80072ce <__kernel_rem_pio2+0x676>
 800719e:	9b04      	ldr	r3, [sp, #16]
 80071a0:	e9c3 7800 	strd	r7, r8, [r3]
 80071a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80071a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80071ac:	e7c6      	b.n	800713c <__kernel_rem_pio2+0x4e4>
 80071ae:	9e05      	ldr	r6, [sp, #20]
 80071b0:	ab48      	add	r3, sp, #288	; 0x120
 80071b2:	441e      	add	r6, r3
 80071b4:	462c      	mov	r4, r5
 80071b6:	2000      	movs	r0, #0
 80071b8:	2100      	movs	r1, #0
 80071ba:	2c00      	cmp	r4, #0
 80071bc:	da33      	bge.n	8007226 <__kernel_rem_pio2+0x5ce>
 80071be:	f1bb 0f00 	cmp.w	fp, #0
 80071c2:	d036      	beq.n	8007232 <__kernel_rem_pio2+0x5da>
 80071c4:	4602      	mov	r2, r0
 80071c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ca:	9c04      	ldr	r4, [sp, #16]
 80071cc:	e9c4 2300 	strd	r2, r3, [r4]
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80071d8:	f7f9 f822 	bl	8000220 <__aeabi_dsub>
 80071dc:	ae4a      	add	r6, sp, #296	; 0x128
 80071de:	2401      	movs	r4, #1
 80071e0:	42a5      	cmp	r5, r4
 80071e2:	da29      	bge.n	8007238 <__kernel_rem_pio2+0x5e0>
 80071e4:	f1bb 0f00 	cmp.w	fp, #0
 80071e8:	d002      	beq.n	80071f0 <__kernel_rem_pio2+0x598>
 80071ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071ee:	4619      	mov	r1, r3
 80071f0:	9b04      	ldr	r3, [sp, #16]
 80071f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80071f6:	e7a1      	b.n	800713c <__kernel_rem_pio2+0x4e4>
 80071f8:	9c05      	ldr	r4, [sp, #20]
 80071fa:	ab48      	add	r3, sp, #288	; 0x120
 80071fc:	441c      	add	r4, r3
 80071fe:	2000      	movs	r0, #0
 8007200:	2100      	movs	r1, #0
 8007202:	2d00      	cmp	r5, #0
 8007204:	da09      	bge.n	800721a <__kernel_rem_pio2+0x5c2>
 8007206:	f1bb 0f00 	cmp.w	fp, #0
 800720a:	d002      	beq.n	8007212 <__kernel_rem_pio2+0x5ba>
 800720c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007210:	4619      	mov	r1, r3
 8007212:	9b04      	ldr	r3, [sp, #16]
 8007214:	e9c3 0100 	strd	r0, r1, [r3]
 8007218:	e790      	b.n	800713c <__kernel_rem_pio2+0x4e4>
 800721a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800721e:	f7f9 f801 	bl	8000224 <__adddf3>
 8007222:	3d01      	subs	r5, #1
 8007224:	e7ed      	b.n	8007202 <__kernel_rem_pio2+0x5aa>
 8007226:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800722a:	f7f8 fffb 	bl	8000224 <__adddf3>
 800722e:	3c01      	subs	r4, #1
 8007230:	e7c3      	b.n	80071ba <__kernel_rem_pio2+0x562>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	e7c8      	b.n	80071ca <__kernel_rem_pio2+0x572>
 8007238:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800723c:	f7f8 fff2 	bl	8000224 <__adddf3>
 8007240:	3401      	adds	r4, #1
 8007242:	e7cd      	b.n	80071e0 <__kernel_rem_pio2+0x588>
 8007244:	e9da 8900 	ldrd	r8, r9, [sl]
 8007248:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800724c:	9b00      	ldr	r3, [sp, #0]
 800724e:	3b01      	subs	r3, #1
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	4632      	mov	r2, r6
 8007254:	463b      	mov	r3, r7
 8007256:	4640      	mov	r0, r8
 8007258:	4649      	mov	r1, r9
 800725a:	f7f8 ffe3 	bl	8000224 <__adddf3>
 800725e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4640      	mov	r0, r8
 8007268:	4649      	mov	r1, r9
 800726a:	f7f8 ffd9 	bl	8000220 <__aeabi_dsub>
 800726e:	4632      	mov	r2, r6
 8007270:	463b      	mov	r3, r7
 8007272:	f7f8 ffd7 	bl	8000224 <__adddf3>
 8007276:	ed9d 7b06 	vldr	d7, [sp, #24]
 800727a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800727e:	ed8a 7b00 	vstr	d7, [sl]
 8007282:	e770      	b.n	8007166 <__kernel_rem_pio2+0x50e>
 8007284:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007288:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800728c:	4640      	mov	r0, r8
 800728e:	4632      	mov	r2, r6
 8007290:	463b      	mov	r3, r7
 8007292:	4649      	mov	r1, r9
 8007294:	f7f8 ffc6 	bl	8000224 <__adddf3>
 8007298:	e9cd 0100 	strd	r0, r1, [sp]
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4640      	mov	r0, r8
 80072a2:	4649      	mov	r1, r9
 80072a4:	f7f8 ffbc 	bl	8000220 <__aeabi_dsub>
 80072a8:	4632      	mov	r2, r6
 80072aa:	463b      	mov	r3, r7
 80072ac:	f7f8 ffba 	bl	8000224 <__adddf3>
 80072b0:	ed9d 7b00 	vldr	d7, [sp]
 80072b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80072b8:	ed84 7b00 	vstr	d7, [r4]
 80072bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072c0:	e757      	b.n	8007172 <__kernel_rem_pio2+0x51a>
 80072c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80072c6:	f7f8 ffad 	bl	8000224 <__adddf3>
 80072ca:	3d01      	subs	r5, #1
 80072cc:	e75c      	b.n	8007188 <__kernel_rem_pio2+0x530>
 80072ce:	9b04      	ldr	r3, [sp, #16]
 80072d0:	9a04      	ldr	r2, [sp, #16]
 80072d2:	601f      	str	r7, [r3, #0]
 80072d4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80072d8:	605c      	str	r4, [r3, #4]
 80072da:	609d      	str	r5, [r3, #8]
 80072dc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072e0:	60d3      	str	r3, [r2, #12]
 80072e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072e6:	6110      	str	r0, [r2, #16]
 80072e8:	6153      	str	r3, [r2, #20]
 80072ea:	e727      	b.n	800713c <__kernel_rem_pio2+0x4e4>
 80072ec:	41700000 	.word	0x41700000
 80072f0:	3e700000 	.word	0x3e700000
 80072f4:	00000000 	.word	0x00000000

080072f8 <scalbn>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	ec55 4b10 	vmov	r4, r5, d0
 80072fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007302:	4606      	mov	r6, r0
 8007304:	462b      	mov	r3, r5
 8007306:	b999      	cbnz	r1, 8007330 <scalbn+0x38>
 8007308:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800730c:	4323      	orrs	r3, r4
 800730e:	d03f      	beq.n	8007390 <scalbn+0x98>
 8007310:	4b35      	ldr	r3, [pc, #212]	; (80073e8 <scalbn+0xf0>)
 8007312:	4629      	mov	r1, r5
 8007314:	ee10 0a10 	vmov	r0, s0
 8007318:	2200      	movs	r2, #0
 800731a:	f7f9 f939 	bl	8000590 <__aeabi_dmul>
 800731e:	4b33      	ldr	r3, [pc, #204]	; (80073ec <scalbn+0xf4>)
 8007320:	429e      	cmp	r6, r3
 8007322:	4604      	mov	r4, r0
 8007324:	460d      	mov	r5, r1
 8007326:	da10      	bge.n	800734a <scalbn+0x52>
 8007328:	a327      	add	r3, pc, #156	; (adr r3, 80073c8 <scalbn+0xd0>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	e01f      	b.n	8007370 <scalbn+0x78>
 8007330:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007334:	4291      	cmp	r1, r2
 8007336:	d10c      	bne.n	8007352 <scalbn+0x5a>
 8007338:	ee10 2a10 	vmov	r2, s0
 800733c:	4620      	mov	r0, r4
 800733e:	4629      	mov	r1, r5
 8007340:	f7f8 ff70 	bl	8000224 <__adddf3>
 8007344:	4604      	mov	r4, r0
 8007346:	460d      	mov	r5, r1
 8007348:	e022      	b.n	8007390 <scalbn+0x98>
 800734a:	460b      	mov	r3, r1
 800734c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007350:	3936      	subs	r1, #54	; 0x36
 8007352:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007356:	4296      	cmp	r6, r2
 8007358:	dd0d      	ble.n	8007376 <scalbn+0x7e>
 800735a:	2d00      	cmp	r5, #0
 800735c:	a11c      	add	r1, pc, #112	; (adr r1, 80073d0 <scalbn+0xd8>)
 800735e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007362:	da02      	bge.n	800736a <scalbn+0x72>
 8007364:	a11c      	add	r1, pc, #112	; (adr r1, 80073d8 <scalbn+0xe0>)
 8007366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800736a:	a319      	add	r3, pc, #100	; (adr r3, 80073d0 <scalbn+0xd8>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f7f9 f90e 	bl	8000590 <__aeabi_dmul>
 8007374:	e7e6      	b.n	8007344 <scalbn+0x4c>
 8007376:	1872      	adds	r2, r6, r1
 8007378:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800737c:	428a      	cmp	r2, r1
 800737e:	dcec      	bgt.n	800735a <scalbn+0x62>
 8007380:	2a00      	cmp	r2, #0
 8007382:	dd08      	ble.n	8007396 <scalbn+0x9e>
 8007384:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007388:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800738c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007390:	ec45 4b10 	vmov	d0, r4, r5
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800739a:	da08      	bge.n	80073ae <scalbn+0xb6>
 800739c:	2d00      	cmp	r5, #0
 800739e:	a10a      	add	r1, pc, #40	; (adr r1, 80073c8 <scalbn+0xd0>)
 80073a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a4:	dac0      	bge.n	8007328 <scalbn+0x30>
 80073a6:	a10e      	add	r1, pc, #56	; (adr r1, 80073e0 <scalbn+0xe8>)
 80073a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ac:	e7bc      	b.n	8007328 <scalbn+0x30>
 80073ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073b2:	3236      	adds	r2, #54	; 0x36
 80073b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80073bc:	4620      	mov	r0, r4
 80073be:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <scalbn+0xf8>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	e7d5      	b.n	8007370 <scalbn+0x78>
 80073c4:	f3af 8000 	nop.w
 80073c8:	c2f8f359 	.word	0xc2f8f359
 80073cc:	01a56e1f 	.word	0x01a56e1f
 80073d0:	8800759c 	.word	0x8800759c
 80073d4:	7e37e43c 	.word	0x7e37e43c
 80073d8:	8800759c 	.word	0x8800759c
 80073dc:	fe37e43c 	.word	0xfe37e43c
 80073e0:	c2f8f359 	.word	0xc2f8f359
 80073e4:	81a56e1f 	.word	0x81a56e1f
 80073e8:	43500000 	.word	0x43500000
 80073ec:	ffff3cb0 	.word	0xffff3cb0
 80073f0:	3c900000 	.word	0x3c900000
 80073f4:	00000000 	.word	0x00000000

080073f8 <floor>:
 80073f8:	ec51 0b10 	vmov	r0, r1, d0
 80073fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007404:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007408:	2e13      	cmp	r6, #19
 800740a:	ee10 5a10 	vmov	r5, s0
 800740e:	ee10 8a10 	vmov	r8, s0
 8007412:	460c      	mov	r4, r1
 8007414:	dc31      	bgt.n	800747a <floor+0x82>
 8007416:	2e00      	cmp	r6, #0
 8007418:	da14      	bge.n	8007444 <floor+0x4c>
 800741a:	a333      	add	r3, pc, #204	; (adr r3, 80074e8 <floor+0xf0>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f7f8 ff00 	bl	8000224 <__adddf3>
 8007424:	2200      	movs	r2, #0
 8007426:	2300      	movs	r3, #0
 8007428:	f7f9 fb42 	bl	8000ab0 <__aeabi_dcmpgt>
 800742c:	b138      	cbz	r0, 800743e <floor+0x46>
 800742e:	2c00      	cmp	r4, #0
 8007430:	da53      	bge.n	80074da <floor+0xe2>
 8007432:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007436:	4325      	orrs	r5, r4
 8007438:	d052      	beq.n	80074e0 <floor+0xe8>
 800743a:	4c2d      	ldr	r4, [pc, #180]	; (80074f0 <floor+0xf8>)
 800743c:	2500      	movs	r5, #0
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	e024      	b.n	800748e <floor+0x96>
 8007444:	4f2b      	ldr	r7, [pc, #172]	; (80074f4 <floor+0xfc>)
 8007446:	4137      	asrs	r7, r6
 8007448:	ea01 0307 	and.w	r3, r1, r7
 800744c:	4303      	orrs	r3, r0
 800744e:	d01e      	beq.n	800748e <floor+0x96>
 8007450:	a325      	add	r3, pc, #148	; (adr r3, 80074e8 <floor+0xf0>)
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f7f8 fee5 	bl	8000224 <__adddf3>
 800745a:	2200      	movs	r2, #0
 800745c:	2300      	movs	r3, #0
 800745e:	f7f9 fb27 	bl	8000ab0 <__aeabi_dcmpgt>
 8007462:	2800      	cmp	r0, #0
 8007464:	d0eb      	beq.n	800743e <floor+0x46>
 8007466:	2c00      	cmp	r4, #0
 8007468:	bfbe      	ittt	lt
 800746a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800746e:	4133      	asrlt	r3, r6
 8007470:	18e4      	addlt	r4, r4, r3
 8007472:	ea24 0407 	bic.w	r4, r4, r7
 8007476:	2500      	movs	r5, #0
 8007478:	e7e1      	b.n	800743e <floor+0x46>
 800747a:	2e33      	cmp	r6, #51	; 0x33
 800747c:	dd0b      	ble.n	8007496 <floor+0x9e>
 800747e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007482:	d104      	bne.n	800748e <floor+0x96>
 8007484:	ee10 2a10 	vmov	r2, s0
 8007488:	460b      	mov	r3, r1
 800748a:	f7f8 fecb 	bl	8000224 <__adddf3>
 800748e:	ec41 0b10 	vmov	d0, r0, r1
 8007492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007496:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800749a:	f04f 37ff 	mov.w	r7, #4294967295
 800749e:	40df      	lsrs	r7, r3
 80074a0:	4238      	tst	r0, r7
 80074a2:	d0f4      	beq.n	800748e <floor+0x96>
 80074a4:	a310      	add	r3, pc, #64	; (adr r3, 80074e8 <floor+0xf0>)
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f7f8 febb 	bl	8000224 <__adddf3>
 80074ae:	2200      	movs	r2, #0
 80074b0:	2300      	movs	r3, #0
 80074b2:	f7f9 fafd 	bl	8000ab0 <__aeabi_dcmpgt>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d0c1      	beq.n	800743e <floor+0x46>
 80074ba:	2c00      	cmp	r4, #0
 80074bc:	da0a      	bge.n	80074d4 <floor+0xdc>
 80074be:	2e14      	cmp	r6, #20
 80074c0:	d101      	bne.n	80074c6 <floor+0xce>
 80074c2:	3401      	adds	r4, #1
 80074c4:	e006      	b.n	80074d4 <floor+0xdc>
 80074c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80074ca:	2301      	movs	r3, #1
 80074cc:	40b3      	lsls	r3, r6
 80074ce:	441d      	add	r5, r3
 80074d0:	45a8      	cmp	r8, r5
 80074d2:	d8f6      	bhi.n	80074c2 <floor+0xca>
 80074d4:	ea25 0507 	bic.w	r5, r5, r7
 80074d8:	e7b1      	b.n	800743e <floor+0x46>
 80074da:	2500      	movs	r5, #0
 80074dc:	462c      	mov	r4, r5
 80074de:	e7ae      	b.n	800743e <floor+0x46>
 80074e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80074e4:	e7ab      	b.n	800743e <floor+0x46>
 80074e6:	bf00      	nop
 80074e8:	8800759c 	.word	0x8800759c
 80074ec:	7e37e43c 	.word	0x7e37e43c
 80074f0:	bff00000 	.word	0xbff00000
 80074f4:	000fffff 	.word	0x000fffff

080074f8 <memset>:
 80074f8:	4402      	add	r2, r0
 80074fa:	4603      	mov	r3, r0
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d100      	bne.n	8007502 <memset+0xa>
 8007500:	4770      	bx	lr
 8007502:	f803 1b01 	strb.w	r1, [r3], #1
 8007506:	e7f9      	b.n	80074fc <memset+0x4>

08007508 <__libc_init_array>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	4d0d      	ldr	r5, [pc, #52]	; (8007540 <__libc_init_array+0x38>)
 800750c:	4c0d      	ldr	r4, [pc, #52]	; (8007544 <__libc_init_array+0x3c>)
 800750e:	1b64      	subs	r4, r4, r5
 8007510:	10a4      	asrs	r4, r4, #2
 8007512:	2600      	movs	r6, #0
 8007514:	42a6      	cmp	r6, r4
 8007516:	d109      	bne.n	800752c <__libc_init_array+0x24>
 8007518:	4d0b      	ldr	r5, [pc, #44]	; (8007548 <__libc_init_array+0x40>)
 800751a:	4c0c      	ldr	r4, [pc, #48]	; (800754c <__libc_init_array+0x44>)
 800751c:	f000 f818 	bl	8007550 <_init>
 8007520:	1b64      	subs	r4, r4, r5
 8007522:	10a4      	asrs	r4, r4, #2
 8007524:	2600      	movs	r6, #0
 8007526:	42a6      	cmp	r6, r4
 8007528:	d105      	bne.n	8007536 <__libc_init_array+0x2e>
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007530:	4798      	blx	r3
 8007532:	3601      	adds	r6, #1
 8007534:	e7ee      	b.n	8007514 <__libc_init_array+0xc>
 8007536:	f855 3b04 	ldr.w	r3, [r5], #4
 800753a:	4798      	blx	r3
 800753c:	3601      	adds	r6, #1
 800753e:	e7f2      	b.n	8007526 <__libc_init_array+0x1e>
 8007540:	08007750 	.word	0x08007750
 8007544:	08007750 	.word	0x08007750
 8007548:	08007750 	.word	0x08007750
 800754c:	08007754 	.word	0x08007754

08007550 <_init>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr

0800755c <_fini>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr


Brushless_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08007cb0  08007cb0  00017cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e98  08007e98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e98  08007e98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e98  08007e98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e9c  08007e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000000c  08007eac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08007eac  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c40  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b5  00000000  00000000  00037cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0003ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000110b  00000000  00000000  0003c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d5d  00000000  00000000  0003d5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d02  00000000  00000000  00063308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2aac  00000000  00000000  0007c00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006308  00000000  00000000  0016eab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00174dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007c98 	.word	0x08007c98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007c98 	.word	0x08007c98

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	0000      	movs	r0, r0
	...

08000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>:
//		CurrSensDriver::ADCValues[0] = HAL_ADC_GetValue(hadc);
//	}
//	HAL_ADC_Stop_IT(hadc);
//}

double CurrSensDriver::counts_to_amps(uint32_t ADC_counts){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

	double sense_out = ( ADC_counts * MAX_ADC_READ_VOLTAGE/MAX_ADC_COUNTS);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fcbb 	bl	800049c <__aeabi_ui2d>
 8000b26:	a326      	add	r3, pc, #152	; (adr r3, 8000bc0 <_ZN14CurrSensDriver14counts_to_ampsEm+0xa8>)
 8000b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2c:	f7ff fd30 	bl	8000590 <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4610      	mov	r0, r2
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <_ZN14CurrSensDriver14counts_to_ampsEm+0xa0>)
 8000b3e:	f7ff fe51 	bl	80007e4 <__aeabi_ddiv>
 8000b42:	4602      	mov	r2, r0
 8000b44:	460b      	mov	r3, r1
 8000b46:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double shifted_voltage = sense_out - AMPLIFIER_SHIFT;
 8000b4a:	a317      	add	r3, pc, #92	; (adr r3, 8000ba8 <_ZN14CurrSensDriver14counts_to_ampsEm+0x90>)
 8000b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000b54:	f7ff fb64 	bl	8000220 <__aeabi_dsub>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double scaled_voltage = shifted_voltage/AMPLIFIER_SCALE;
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_ZN14CurrSensDriver14counts_to_ampsEm+0xa4>)
 8000b66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b6a:	f7ff fe3b 	bl	80007e4 <__aeabi_ddiv>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double current = scaled_voltage/SHUNT_RESISTANCE;
 8000b76:	a30e      	add	r3, pc, #56	; (adr r3, 8000bb0 <_ZN14CurrSensDriver14counts_to_ampsEm+0x98>)
 8000b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b80:	f7ff fe30 	bl	80007e4 <__aeabi_ddiv>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return current;
 8000b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b90:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b94:	eeb0 0a47 	vmov.f32	s0, s14
 8000b98:	eef0 0a67 	vmov.f32	s1, s15
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	66666666 	.word	0x66666666
 8000bac:	3ffa6666 	.word	0x3ffa6666
 8000bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000bb4:	3f40624d 	.word	0x3f40624d
 8000bb8:	40b00000 	.word	0x40b00000
 8000bbc:	40340000 	.word	0x40340000
 8000bc0:	66666666 	.word	0x66666666
 8000bc4:	400a6666 	.word	0x400a6666

08000bc8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>:


void CurrSensDriver::get_current_Amp(PhaseCurrents& currents){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

	uint32_t ADC_cummulative_val[3] = {0,0,0};
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i<5; i++){
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
 8000be0:	e023      	b.n	8000c2a <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0x62>
		HAL_ADC_Start_DMA(ADC_handle, CurrSensDriver::ADCValues, 3);
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xcc>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2203      	movs	r2, #3
 8000be8:	492b      	ldr	r1, [pc, #172]	; (8000c98 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xd0>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 fc6c 	bl	80024c8 <HAL_ADC_Start_DMA>
		for (uint8_t j = 0;j<3; j++){
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	75bb      	strb	r3, [r7, #22]
 8000bf4:	e013      	b.n	8000c1e <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0x56>
			ADC_cummulative_val[j] += ADCValues[j]&0xFFFFFFFF;
 8000bf6:	7dbb      	ldrb	r3, [r7, #22]
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	443b      	add	r3, r7
 8000bfe:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8000c02:	7dbb      	ldrb	r3, [r7, #22]
 8000c04:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xd0>)
 8000c06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c0a:	7dbb      	ldrb	r3, [r7, #22]
 8000c0c:	440a      	add	r2, r1
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	3318      	adds	r3, #24
 8000c12:	443b      	add	r3, r7
 8000c14:	f843 2c10 	str.w	r2, [r3, #-16]
		for (uint8_t j = 0;j<3; j++){
 8000c18:	7dbb      	ldrb	r3, [r7, #22]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	75bb      	strb	r3, [r7, #22]
 8000c1e:	7dbb      	ldrb	r3, [r7, #22]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d9e8      	bls.n	8000bf6 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0x2e>
	for (uint8_t i = 0; i<5; i++){
 8000c24:	7dfb      	ldrb	r3, [r7, #23]
 8000c26:	3301      	adds	r3, #1
 8000c28:	75fb      	strb	r3, [r7, #23]
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d9d8      	bls.n	8000be2 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0x1a>
		}
	}
	currents.iA = counts_to_amps(ADC_cummulative_val[0]/5);
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xd4>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff6c 	bl	8000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8000c40:	eeb0 7a40 	vmov.f32	s14, s0
 8000c44:	eef0 7a60 	vmov.f32	s15, s1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	ed83 7b00 	vstr	d7, [r3]
	currents.iB = counts_to_amps(ADC_cummulative_val[1]/5);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xd4>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8000c5e:	eeb0 7a40 	vmov.f32	s14, s0
 8000c62:	eef0 7a60 	vmov.f32	s15, s1
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	ed83 7b02 	vstr	d7, [r3, #8]
	currents.iC = counts_to_amps(ADC_cummulative_val[2]/5);
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE+0xd4>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff4e 	bl	8000b18 <_ZN14CurrSensDriver14counts_to_ampsEm>
 8000c7c:	eeb0 7a40 	vmov.f32	s14, s0
 8000c80:	eef0 7a60 	vmov.f32	s15, s1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	ed83 7b04 	vstr	d7, [r3, #16]
	;

}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000028 	.word	0x20000028
 8000c98:	2000002c 	.word	0x2000002c
 8000c9c:	cccccccd 	.word	0xcccccccd

08000ca0 <HAL_TIM_PeriodElapsedCallback>:
#include "hall_encoder.h"
#include "math_utils.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b092      	sub	sp, #72	; 0x48
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	// check if it gets here
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 8000ca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff8b 	bl	8000bc8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>

	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8000cb2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000cb6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8000cba:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8000cbe:	eeb0 2a45 	vmov.f32	s4, s10
 8000cc2:	eef0 2a65 	vmov.f32	s5, s11
 8000cc6:	eeb0 1a46 	vmov.f32	s2, s12
 8000cca:	eef0 1a66 	vmov.f32	s3, s13
 8000cce:	eeb0 0a47 	vmov.f32	s0, s14
 8000cd2:	eef0 0a67 	vmov.f32	s1, s15
 8000cd6:	f000 fc67 	bl	80015a8 <_Z9tf_clarkeddd>
 8000cda:	eeb0 6a40 	vmov.f32	s12, s0
 8000cde:	eef0 6a60 	vmov.f32	s13, s1
 8000ce2:	eeb0 7a41 	vmov.f32	s14, s2
 8000ce6:	eef0 7a61 	vmov.f32	s15, s3
 8000cea:	ed87 6b06 	vstr	d6, [r7, #24]
 8000cee:	ed87 7b08 	vstr	d7, [r7, #32]

	double theta_d =  HallEncoderDriver::get_thetad();
 8000cf2:	f000 f822 	bl	8000d3a <_ZN17HallEncoderDriver10get_thetadEv>
 8000cf6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	auto [curr_alpha, curr_beta] = tf_clarke(PhaseCurrents.iA, PhaseCurrents.iB, PhaseCurrents.iC);
 8000cfa:	ed97 7b06 	vldr	d7, [r7, #24]
 8000cfe:	ed97 6b08 	vldr	d6, [r7, #32]
	auto [curr_d, curr_q] = tf_park(curr_alpha, curr_beta, theta_d);
 8000d02:	ed97 2b10 	vldr	d2, [r7, #64]	; 0x40
 8000d06:	eeb0 1a46 	vmov.f32	s2, s12
 8000d0a:	eef0 1a66 	vmov.f32	s3, s13
 8000d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d12:	eef0 0a67 	vmov.f32	s1, s15
 8000d16:	f000 fbda 	bl	80014ce <_Z7tf_parkddd>
 8000d1a:	eeb0 6a40 	vmov.f32	s12, s0
 8000d1e:	eef0 6a60 	vmov.f32	s13, s1
 8000d22:	eeb0 7a41 	vmov.f32	s14, s2
 8000d26:	eef0 7a61 	vmov.f32	s15, s3
 8000d2a:	ed87 6b02 	vstr	d6, [r7, #8]
 8000d2e:	ed87 7b04 	vstr	d7, [r7, #16]



	return;
 8000d32:	bf00      	nop

}
 8000d34:	3748      	adds	r7, #72	; 0x48
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_ZN17HallEncoderDriver10get_thetadEv>:
 */
#include "hall_encoder.h"



double HallEncoderDriver::get_thetad(){
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
	return 0;
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	ec43 2b17 	vmov	d7, r2, r3
}
 8000d4a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d4e:	eef0 0a67 	vmov.f32	s1, s15
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TIM2->CCR1 = 17895697;
 8000d60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <main+0x40>)
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f000 ff11 	bl	8001b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f818 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f000 fb0a 	bl	8001388 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d74:	f000 fade 	bl	8001334 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000d78:	f000 f95c 	bl	8001034 <MX_FDCAN1_Init>
  MX_ADC1_Init();
 8000d7c:	f000 f85c 	bl	8000e38 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000d80:	f000 f99e 	bl	80010c0 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000d84:	f000 fa4e 	bl	8001224 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000d88:	f000 f8ee 	bl	8000f68 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000d8c:	f000 f9d6 	bl	800113c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // write voltage for 2 secs

  setup();
 8000d90:	f000 fb6e 	bl	8001470 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000d94:	f000 fb8c 	bl	80014b0 <loop>
 8000d98:	e7fc      	b.n	8000d94 <main+0x38>
 8000d9a:	bf00      	nop
 8000d9c:	01111111 	.word	0x01111111

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	; 0x50
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	2238      	movs	r2, #56	; 0x38
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f006 ff46 	bl	8007c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dc6:	f003 faa5 	bl	8004314 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000de4:	2308      	movs	r3, #8
 8000de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fb3f 	bl	800447c <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e04:	f000 fb2e 	bl	8001464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 fe43 	bl	8004aac <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e2c:	f000 fb1a 	bl	8001464 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f006 fef5 	bl	8007c40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e56:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e66:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e78:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e7e:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e80:	2208      	movs	r2, #8
 8000e82:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e84:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000e90:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e92:	2203      	movs	r2, #3
 8000e94:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e96:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec0:	4825      	ldr	r0, [pc, #148]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000ec2:	f001 f93f 	bl	8002144 <HAL_ADC_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ecc:	f000 faca 	bl	8001464 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481f      	ldr	r0, [pc, #124]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000edc:	f002 fa30 	bl	8003340 <HAL_ADCEx_MultiModeConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ee6:	f000 fabd 	bl	8001464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_ADC1_Init+0x124>)
 8000eec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eee:	2306      	movs	r3, #6
 8000ef0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef6:	237f      	movs	r3, #127	; 0x7f
 8000ef8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000efa:	2304      	movs	r3, #4
 8000efc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000f08:	f001 fbd0 	bl	80026ac <HAL_ADC_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f12:	f000 faa7 	bl	8001464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_ADC1_Init+0x128>)
 8000f18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000f24:	f001 fbc2 	bl	80026ac <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000f2e:	f000 fa99 	bl	8001464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_ADC1_Init+0x12c>)
 8000f34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f36:	2312      	movs	r3, #18
 8000f38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_ADC1_Init+0x120>)
 8000f40:	f001 fbb4 	bl	80026ac <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000f4a:	f000 fa8b 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3730      	adds	r7, #48	; 0x30
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000038 	.word	0x20000038
 8000f5c:	19200040 	.word	0x19200040
 8000f60:	1d500080 	.word	0x1d500080
 8000f64:	21800100 	.word	0x21800100

08000f68 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2220      	movs	r2, #32
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 fe63 	bl	8007c40 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000f7c:	4a2b      	ldr	r2, [pc, #172]	; (800102c <MX_ADC2_Init+0xc4>)
 8000f7e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000f82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f86:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fe2:	4811      	ldr	r0, [pc, #68]	; (8001028 <MX_ADC2_Init+0xc0>)
 8000fe4:	f001 f8ae 	bl	8002144 <HAL_ADC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000fee:	f000 fa39 	bl	8001464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_ADC2_Init+0xc8>)
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ffe:	237f      	movs	r3, #127	; 0x7f
 8001000:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001002:	2304      	movs	r3, #4
 8001004:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_ADC2_Init+0xc0>)
 8001010:	f001 fb4c 	bl	80026ac <HAL_ADC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800101a:	f000 fa23 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000a4 	.word	0x200000a4
 800102c:	50000100 	.word	0x50000100
 8001030:	2e300800 	.word	0x2e300800

08001034 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 800103a:	4a20      	ldr	r2, [pc, #128]	; (80010bc <MX_FDCAN1_Init+0x88>)
 800103c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001052:	2200      	movs	r2, #0
 8001054:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001058:	2200      	movs	r2, #0
 800105a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 800105e:	2200      	movs	r2, #0
 8001060:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001064:	2210      	movs	r2, #16
 8001066:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 800106a:	2201      	movs	r2, #1
 800106c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001070:	2202      	movs	r2, #2
 8001072:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001076:	2202      	movs	r2, #2
 8001078:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 800107c:	2201      	movs	r2, #1
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001082:	2201      	movs	r2, #1
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001088:	2201      	movs	r2, #1
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 800108e:	2201      	movs	r2, #1
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 800109a:	2200      	movs	r2, #0
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_FDCAN1_Init+0x84>)
 80010a6:	f002 fdd5 	bl	8003c54 <HAL_FDCAN_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80010b0:	f000 f9d8 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000170 	.word	0x20000170
 80010bc:	40006400 	.word	0x40006400

080010c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_SPI3_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <MX_SPI3_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_SPI3_Init+0x74>)
 80010cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_SPI3_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_SPI3_Init+0x74>)
 80010da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_SPI3_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_SPI3_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_SPI3_Init+0x74>)
 80010ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_SPI3_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_SPI3_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_SPI3_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_SPI3_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_SPI3_Init+0x74>)
 800110e:	2207      	movs	r2, #7
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_SPI3_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_SPI3_Init+0x74>)
 800111a:	2208      	movs	r2, #8
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_SPI3_Init+0x74>)
 8001120:	f004 f8f6 	bl	8005310 <HAL_SPI_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800112a:	f000 f99b 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001d4 	.word	0x200001d4
 8001138:	40003c00 	.word	0x40003c00

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <MX_TIM2_Init+0xe0>)
 8001170:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001174:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001176:	4b29      	ldr	r3, [pc, #164]	; (800121c <MX_TIM2_Init+0xe0>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <MX_TIM2_Init+0xe0>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7.1582788E7;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <MX_TIM2_Init+0xe0>)
 8001184:	4a26      	ldr	r2, [pc, #152]	; (8001220 <MX_TIM2_Init+0xe4>)
 8001186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <MX_TIM2_Init+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <MX_TIM2_Init+0xe0>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001194:	4821      	ldr	r0, [pc, #132]	; (800121c <MX_TIM2_Init+0xe0>)
 8001196:	f004 f966 	bl	8005466 <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011a0:	f000 f960 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ae:	4619      	mov	r1, r3
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <MX_TIM2_Init+0xe0>)
 80011b2:	f004 fd07 	bl	8005bc4 <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011bc:	f000 f952 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011c0:	4816      	ldr	r0, [pc, #88]	; (800121c <MX_TIM2_Init+0xe0>)
 80011c2:	f004 f9a7 	bl	8005514 <HAL_TIM_OC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011cc:	f000 f94a 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <MX_TIM2_Init+0xe0>)
 80011e0:	f005 fbbc 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011ea:	f000 f93b 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_TIM2_Init+0xe0>)
 8001206:	f004 fbc7 	bl	8005998 <HAL_TIM_OC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001210:	f000 f928 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3738      	adds	r7, #56	; 0x38
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000238 	.word	0x20000238
 8001220:	04444444 	.word	0x04444444

08001224 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <MX_TIM3_Init+0x108>)
 8001252:	4a37      	ldr	r2, [pc, #220]	; (8001330 <MX_TIM3_Init+0x10c>)
 8001254:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001256:	4b35      	ldr	r3, [pc, #212]	; (800132c <MX_TIM3_Init+0x108>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b33      	ldr	r3, [pc, #204]	; (800132c <MX_TIM3_Init+0x108>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001262:	4b32      	ldr	r3, [pc, #200]	; (800132c <MX_TIM3_Init+0x108>)
 8001264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001268:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <MX_TIM3_Init+0x108>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b2e      	ldr	r3, [pc, #184]	; (800132c <MX_TIM3_Init+0x108>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001276:	482d      	ldr	r0, [pc, #180]	; (800132c <MX_TIM3_Init+0x108>)
 8001278:	f004 f8f5 	bl	8005466 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001282:	f000 f8ef 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4619      	mov	r1, r3
 8001292:	4826      	ldr	r0, [pc, #152]	; (800132c <MX_TIM3_Init+0x108>)
 8001294:	f004 fc96 	bl	8005bc4 <HAL_TIM_ConfigClockSource>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800129e:	f000 f8e1 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012a2:	4822      	ldr	r0, [pc, #136]	; (800132c <MX_TIM3_Init+0x108>)
 80012a4:	f004 f997 	bl	80055d6 <HAL_TIM_IC_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80012ae:	f000 f8d9 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	481a      	ldr	r0, [pc, #104]	; (800132c <MX_TIM3_Init+0x108>)
 80012c2:	f005 fb4b 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80012cc:	f000 f8ca 	bl	8001464 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <MX_TIM3_Init+0x108>)
 80012e8:	f004 fbd0 	bl	8005a8c <HAL_TIM_IC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80012f2:	f000 f8b7 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2204      	movs	r2, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <MX_TIM3_Init+0x108>)
 80012fe:	f004 fbc5 	bl	8005a8c <HAL_TIM_IC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8001308:	f000 f8ac 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2208      	movs	r2, #8
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <MX_TIM3_Init+0x108>)
 8001314:	f004 fbba 	bl	8005a8c <HAL_TIM_IC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 800131e:	f000 f8a1 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	; 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000284 	.word	0x20000284
 8001330:	40000400 	.word	0x40000400

08001334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_DMA_Init+0x50>)
 800133c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133e:	4a11      	ldr	r2, [pc, #68]	; (8001384 <MX_DMA_Init+0x50>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6493      	str	r3, [r2, #72]	; 0x48
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_DMA_Init+0x50>)
 8001348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_DMA_Init+0x50>)
 8001354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <MX_DMA_Init+0x50>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6493      	str	r3, [r2, #72]	; 0x48
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_DMA_Init+0x50>)
 8001360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	200b      	movs	r0, #11
 8001370:	f002 f9c9 	bl	8003706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001374:	200b      	movs	r0, #11
 8001376:	f002 f9e0 	bl	800373a <HAL_NVIC_EnableIRQ>

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <MX_GPIO_Init+0xd4>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a2e      	ldr	r2, [pc, #184]	; (800145c <MX_GPIO_Init+0xd4>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <MX_GPIO_Init+0xd4>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <MX_GPIO_Init+0xd4>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <MX_GPIO_Init+0xd4>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <MX_GPIO_Init+0xd4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_GPIO_Init+0xd4>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a22      	ldr	r2, [pc, #136]	; (800145c <MX_GPIO_Init+0xd4>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_GPIO_Init+0xd4>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <MX_GPIO_Init+0xd4>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a1c      	ldr	r2, [pc, #112]	; (800145c <MX_GPIO_Init+0xd4>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_GPIO_Init+0xd4>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SHDN_GPIO_Port, CAN_SHDN_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f002 ff6c 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2147      	movs	r1, #71	; 0x47
 8001410:	4813      	ldr	r0, [pc, #76]	; (8001460 <MX_GPIO_Init+0xd8>)
 8001412:	f002 ff67 	bl	80042e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SHDN_Pin */
  GPIO_InitStruct.Pin = CAN_SHDN_Pin;
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_SHDN_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f002 fdd5 	bl	8003fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_OUTPUT_Pin H2_OUTPUT_Pin H3_OUTPUT_Pin PD6 */
  GPIO_InitStruct.Pin = H1_OUTPUT_Pin|H2_OUTPUT_Pin|H3_OUTPUT_Pin|GPIO_PIN_6;
 8001436:	2347      	movs	r3, #71	; 0x47
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_GPIO_Init+0xd8>)
 800144e:	f002 fdc7 	bl	8003fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	48000c00 	.word	0x48000c00

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <setup>:
#include "stm32g4xx_hal.h"

extern ADC_HandleTypeDef hadc1;
uint64_t ADC_count = 0;

void setup() {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

	CurrSensDriver::ADC_handle = &hadc1;
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <setup+0x34>)
 8001476:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <setup+0x38>)
 8001478:	601a      	str	r2, [r3, #0]
	HAL_ADCEx_Calibration_Start(CurrSensDriver::ADC_handle, ADC_SINGLE_ENDED);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <setup+0x34>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	217f      	movs	r1, #127	; 0x7f
 8001480:	4618      	mov	r0, r3
 8001482:	f001 fefb 	bl	800327c <HAL_ADCEx_Calibration_Start>

	// Enable the gate driver
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <setup+0x3c>)
 800148c:	f002 ff2a 	bl	80042e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	2104      	movs	r1, #4
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <setup+0x3c>)
 8001496:	f002 ff25 	bl	80042e4 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f000 fbe8 	bl	8001c70 <HAL_Delay>

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000028 	.word	0x20000028
 80014a8:	20000038 	.word	0x20000038
 80014ac:	48000c00 	.word	0x48000c00

080014b0 <loop>:

void loop() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0

//	HAL_ADC_Start_IT(CurrSensDriver::ADC_handle);
	CurrSensDriver::PhaseCurrents PhaseCurrents;
	CurrSensDriver::get_current_Amp(PhaseCurrents);
 80014b6:	463b      	mov	r3, r7
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fb85 	bl	8000bc8 <_ZN14CurrSensDriver15get_current_AmpERNS_13PhaseCurrentsE>
	HAL_Delay(1000);
 80014be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c2:	f000 fbd5 	bl	8001c70 <HAL_Delay>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_Z7tf_parkddd>:
 *      Author: Sashreek and Jonah
 */
#include "math_utils.h"
#include <cmath>

ParkOut tf_park (double ialpha, double ibeta, double theta_d){
 80014ce:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0b08 	vstr	d0, [r7, #32]
 80014da:	ed87 1b06 	vstr	d1, [r7, #24]
 80014de:	ed87 2b04 	vstr	d2, [r7, #16]
	ParkOut output;
	output.id = ialpha * cos(theta_d) + ibeta * sin(theta_d);
 80014e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80014e6:	f005 fb17 	bl	8006b18 <cos>
 80014ea:	ec51 0b10 	vmov	r0, r1, d0
 80014ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014f2:	f7ff f84d 	bl	8000590 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4690      	mov	r8, r2
 80014fc:	4699      	mov	r9, r3
 80014fe:	ed97 0b04 	vldr	d0, [r7, #16]
 8001502:	f005 fb5d 	bl	8006bc0 <sin>
 8001506:	ec51 0b10 	vmov	r0, r1, d0
 800150a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800150e:	f7ff f83f 	bl	8000590 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4640      	mov	r0, r8
 8001518:	4649      	mov	r1, r9
 800151a:	f7fe fe83 	bl	8000224 <__adddf3>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.iq = -ialpha * sin(theta_d) + ibeta * cos(theta_d);
 8001526:	6a3c      	ldr	r4, [r7, #32]
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800152e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001532:	f005 fb45 	bl	8006bc0 <sin>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7ff f827 	bl	8000590 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4614      	mov	r4, r2
 8001548:	461d      	mov	r5, r3
 800154a:	ed97 0b04 	vldr	d0, [r7, #16]
 800154e:	f005 fae3 	bl	8006b18 <cos>
 8001552:	ec51 0b10 	vmov	r0, r1, d0
 8001556:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800155a:	f7ff f819 	bl	8000590 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fe5d 	bl	8000224 <__adddf3>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 8001572:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001580:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001584:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001588:	ec41 0b16 	vmov	d6, r0, r1
 800158c:	ec43 2b17 	vmov	d7, r2, r3

}
 8001590:	eeb0 0a46 	vmov.f32	s0, s12
 8001594:	eef0 0a66 	vmov.f32	s1, s13
 8001598:	eeb0 1a47 	vmov.f32	s2, s14
 800159c:	eef0 1a67 	vmov.f32	s3, s15
 80015a0:	3748      	adds	r7, #72	; 0x48
 80015a2:	46bd      	mov	sp, r7
 80015a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080015a8 <_Z9tf_clarkeddd>:
	output.vbeta = vd * sin(theta_d) + vq * cos(theta_d);
	return output;
}

//Clarke transform
ClarkeOut tf_clarke (double ia, double ib, double ic){
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b092      	sub	sp, #72	; 0x48
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0b08 	vstr	d0, [r7, #32]
 80015b2:	ed87 1b06 	vstr	d1, [r7, #24]
 80015b6:	ed87 2b04 	vstr	d2, [r7, #16]
	ClarkeOut output;
	output.ialpha = (3.0/2.0) * ia;
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <_Z9tf_clarkeddd+0xa0>)
 80015c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015c4:	f7fe ffe4 	bl	8000590 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	output.ibeta = (sqrt(3)/2) * ib - (sqrt(3)/2) * ic;
 80015d0:	a31b      	add	r3, pc, #108	; (adr r3, 8001640 <_Z9tf_clarkeddd+0x98>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015da:	f7fe ffd9 	bl	8000590 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4614      	mov	r4, r2
 80015e4:	461d      	mov	r5, r3
 80015e6:	a316      	add	r3, pc, #88	; (adr r3, 8001640 <_Z9tf_clarkeddd+0x98>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015f0:	f7fe ffce 	bl	8000590 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4620      	mov	r0, r4
 80015fa:	4629      	mov	r1, r5
 80015fc:	f7fe fe10 	bl	8000220 <__aeabi_dsub>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	return output;
 8001608:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800160c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001616:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800161a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800161e:	ec41 0b16 	vmov	d6, r0, r1
 8001622:	ec43 2b17 	vmov	d7, r2, r3
}
 8001626:	eeb0 0a46 	vmov.f32	s0, s12
 800162a:	eef0 0a66 	vmov.f32	s1, s13
 800162e:	eeb0 1a47 	vmov.f32	s2, s14
 8001632:	eef0 1a67 	vmov.f32	s3, s15
 8001636:	3748      	adds	r7, #72	; 0x48
 8001638:	46bd      	mov	sp, r7
 800163a:	bdb0      	pop	{r4, r5, r7, pc}
 800163c:	f3af 8000 	nop.w
 8001640:	e8584caa 	.word	0xe8584caa
 8001644:	3febb67a 	.word	0x3febb67a
 8001648:	3ff80000 	.word	0x3ff80000

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_MspInit+0x44>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6613      	str	r3, [r2, #96]	; 0x60
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_MspInit+0x44>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x44>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x44>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001682:	f002 feeb 	bl	800445c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0a2      	sub	sp, #136	; 0x88
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	2254      	movs	r2, #84	; 0x54
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f006 fac3 	bl	8007c40 <memset>
  if(hadc->Instance==ADC1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c2:	f040 8083 	bne.w	80017cc <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016cc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016d0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fbcc 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80016e2:	f7ff febf 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016e6:	4b69      	ldr	r3, [pc, #420]	; (800188c <HAL_ADC_MspInit+0x1f8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a67      	ldr	r2, [pc, #412]	; (800188c <HAL_ADC_MspInit+0x1f8>)
 80016ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <HAL_ADC_MspInit+0x1f8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d10b      	bne.n	8001710 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016f8:	4b65      	ldr	r3, [pc, #404]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	4a64      	ldr	r2, [pc, #400]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 80016fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001704:	4b62      	ldr	r3, [pc, #392]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001710:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	4a5e      	ldr	r2, [pc, #376]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171c:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b59      	ldr	r3, [pc, #356]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172c:	4a58      	ldr	r2, [pc, #352]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001734:	4b56      	ldr	r3, [pc, #344]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001740:	230f      	movs	r3, #15
 8001742:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001744:	2303      	movs	r3, #3
 8001746:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001750:	4619      	mov	r1, r3
 8001752:	4850      	ldr	r0, [pc, #320]	; (8001894 <HAL_ADC_MspInit+0x200>)
 8001754:	f002 fc44 	bl	8003fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001758:	230c      	movs	r3, #12
 800175a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175c:	2303      	movs	r3, #3
 800175e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001768:	4619      	mov	r1, r3
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f002 fc37 	bl	8003fe0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001772:	4b49      	ldr	r3, [pc, #292]	; (8001898 <HAL_ADC_MspInit+0x204>)
 8001774:	4a49      	ldr	r2, [pc, #292]	; (800189c <HAL_ADC_MspInit+0x208>)
 8001776:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001778:	4b47      	ldr	r3, [pc, #284]	; (8001898 <HAL_ADC_MspInit+0x204>)
 800177a:	2205      	movs	r2, #5
 800177c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <HAL_ADC_MspInit+0x204>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001784:	4b44      	ldr	r3, [pc, #272]	; (8001898 <HAL_ADC_MspInit+0x204>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800178a:	4b43      	ldr	r3, [pc, #268]	; (8001898 <HAL_ADC_MspInit+0x204>)
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001790:	4b41      	ldr	r3, [pc, #260]	; (8001898 <HAL_ADC_MspInit+0x204>)
 8001792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001796:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <HAL_ADC_MspInit+0x204>)
 800179a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800179e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017a0:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <HAL_ADC_MspInit+0x204>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017a6:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <HAL_ADC_MspInit+0x204>)
 80017a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ae:	483a      	ldr	r0, [pc, #232]	; (8001898 <HAL_ADC_MspInit+0x204>)
 80017b0:	f001 ffde 	bl	8003770 <HAL_DMA_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 80017ba:	f7ff fe53 	bl	8001464 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a35      	ldr	r2, [pc, #212]	; (8001898 <HAL_ADC_MspInit+0x204>)
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
 80017c4:	4a34      	ldr	r2, [pc, #208]	; (8001898 <HAL_ADC_MspInit+0x204>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017ca:	e05a      	b.n	8001882 <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a33      	ldr	r2, [pc, #204]	; (80018a0 <HAL_ADC_MspInit+0x20c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d155      	bne.n	8001882 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017da:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017e0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fb44 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_ADC_MspInit+0x162>
      Error_Handler();
 80017f2:	f7ff fe37 	bl	8001464 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017f6:	4b25      	ldr	r3, [pc, #148]	; (800188c <HAL_ADC_MspInit+0x1f8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a23      	ldr	r2, [pc, #140]	; (800188c <HAL_ADC_MspInit+0x1f8>)
 80017fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_ADC_MspInit+0x1f8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10b      	bne.n	8001820 <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	4a20      	ldr	r2, [pc, #128]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 800180e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_ADC_MspInit+0x1fc>)
 8001846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001850:	2303      	movs	r3, #3
 8001852:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001854:	2303      	movs	r3, #3
 8001856:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001866:	f002 fbbb 	bl	8003fe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_TEMP_Pin;
 800186a:	2320      	movs	r3, #32
 800186c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186e:	2303      	movs	r3, #3
 8001870:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(MOTOR_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_ADC_MspInit+0x200>)
 800187e:	f002 fbaf 	bl	8003fe0 <HAL_GPIO_Init>
}
 8001882:	bf00      	nop
 8001884:	3788      	adds	r7, #136	; 0x88
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200002d0 	.word	0x200002d0
 8001890:	40021000 	.word	0x40021000
 8001894:	48000800 	.word	0x48000800
 8001898:	20000110 	.word	0x20000110
 800189c:	40020008 	.word	0x40020008
 80018a0:	50000100 	.word	0x50000100

080018a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b09e      	sub	sp, #120	; 0x78
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	2254      	movs	r2, #84	; 0x54
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f006 f9bb 	bl	8007c40 <memset>
  if(hfdcan->Instance==FDCAN1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a20      	ldr	r2, [pc, #128]	; (8001950 <HAL_FDCAN_MspInit+0xac>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d139      	bne.n	8001948 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80018d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80018da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fac5 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80018f0:	f7ff fdb8 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_FDCAN_MspInit+0xb0>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_FDCAN_MspInit+0xb0>)
 80018fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_FDCAN_MspInit+0xb0>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_FDCAN_MspInit+0xb0>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_FDCAN_MspInit+0xb0>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_FDCAN_MspInit+0xb0>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001924:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001928:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001936:	2309      	movs	r3, #9
 8001938:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001944:	f002 fb4c 	bl	8003fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3778      	adds	r7, #120	; 0x78
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40006400 	.word	0x40006400
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_SPI_MspInit+0x7c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d128      	bne.n	80019cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 8001980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001984:	6593      	str	r3, [r2, #88]	; 0x58
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_SPI_MspInit+0x80>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019bc:	2306      	movs	r3, #6
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_SPI_MspInit+0x84>)
 80019c8:	f002 fb0a 	bl	8003fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40003c00 	.word	0x40003c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	48000800 	.word	0x48000800

080019e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a00:	d114      	bne.n	8001a2c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_TIM_Base_MspInit+0xb0>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_TIM_Base_MspInit+0xb0>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_TIM_Base_MspInit+0xb0>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	201c      	movs	r0, #28
 8001a20:	f001 fe71 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a24:	201c      	movs	r0, #28
 8001a26:	f001 fe88 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a2a:	e02d      	b.n	8001a88 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_TIM_Base_MspInit+0xb4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d128      	bne.n	8001a88 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_TIM_Base_MspInit+0xb0>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_TIM_Base_MspInit+0xb0>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6593      	str	r3, [r2, #88]	; 0x58
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_TIM_Base_MspInit+0xb0>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_TIM_Base_MspInit+0xb0>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <HAL_TIM_Base_MspInit+0xb0>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_TIM_Base_MspInit+0xb0>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL1_INPUT_Pin|HALL_2_INPUT_Pin|HALL_3_INPUT_Pin;
 8001a66:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_TIM_Base_MspInit+0xb8>)
 8001a84:	f002 faac 	bl	8003fe0 <HAL_GPIO_Init>
}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40000400 	.word	0x40000400
 8001a98:	48000800 	.word	0x48000800

08001a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <NMI_Handler+0x4>

08001aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <MemManage_Handler+0x4>

08001aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae8:	f000 f8a4 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <DMA1_Channel1_IRQHandler+0x10>)
 8001af6:	f001 ff5e 	bl	80039b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000110 	.word	0x20000110

08001b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <TIM2_IRQHandler+0x10>)
 8001b0a:	f003 fdc5 	bl	8005698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000238 	.word	0x20000238

08001b18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <SystemInit+0x20>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <SystemInit+0x20>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b3c:	480d      	ldr	r0, [pc, #52]	; (8001b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b42:	490e      	ldr	r1, [pc, #56]	; (8001b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <LoopForever+0xe>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b58:	4c0b      	ldr	r4, [pc, #44]	; (8001b88 <LoopForever+0x16>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b66:	f7ff ffd7 	bl	8001b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f006 f871 	bl	8007c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b6e:	f7ff f8f5 	bl	8000d5c <main>

08001b72 <LoopForever>:

LoopForever:
    b LoopForever
 8001b72:	e7fe      	b.n	8001b72 <LoopForever>
  ldr   r0, =_estack
 8001b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b80:	08007ea0 	.word	0x08007ea0
  ldr r2, =_sbss
 8001b84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b88:	200002d8 	.word	0x200002d8

08001b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC1_2_IRQHandler>

08001b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f001 fda9 	bl	80036f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9e:	200f      	movs	r0, #15
 8001ba0:	f000 f80e 	bl	8001bc0 <HAL_InitTick>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	71fb      	strb	r3, [r7, #7]
 8001bae:	e001      	b.n	8001bb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb0:	f7ff fd4c 	bl	800164c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb4:	79fb      	ldrb	r3, [r7, #7]

}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_InitTick+0x68>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d022      	beq.n	8001c1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_InitTick+0x6c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_InitTick+0x68>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 fdb4 	bl	8003756 <HAL_SYSTICK_Config>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10f      	bne.n	8001c14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	d809      	bhi.n	8001c0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8001c02:	f001 fd80 	bl	8003706 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_InitTick+0x70>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e007      	b.n	8001c1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	e004      	b.n	8001c1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e001      	b.n	8001c1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_IncTick+0x1c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a03      	ldr	r2, [pc, #12]	; (8001c50 <HAL_IncTick+0x1c>)
 8001c44:	6013      	str	r3, [r2, #0]
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	200002d4 	.word	0x200002d4
 8001c54:	20000008 	.word	0x20000008

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	200002d4 	.word	0x200002d4

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d004      	beq.n	8001c94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_Delay+0x40>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c94:	bf00      	nop
 8001c96:	f7ff ffdf 	bl	8001c58 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d8f7      	bhi.n	8001c96 <HAL_Delay+0x26>
  {
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000008 	.word	0x20000008

08001cb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3360      	adds	r3, #96	; 0x60
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <LL_ADC_SetOffset+0x44>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	03fff000 	.word	0x03fff000

08001d64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3360      	adds	r3, #96	; 0x60
 8001d72:	461a      	mov	r2, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3360      	adds	r3, #96	; 0x60
 8001da0:	461a      	mov	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dba:	bf00      	nop
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b087      	sub	sp, #28
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3360      	adds	r3, #96	; 0x60
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3360      	adds	r3, #96	; 0x60
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	615a      	str	r2, [r3, #20]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b087      	sub	sp, #28
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3330      	adds	r3, #48	; 0x30
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	4413      	add	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	211f      	movs	r1, #31
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	f003 011f 	and.w	r1, r3, #31
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b087      	sub	sp, #28
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3314      	adds	r3, #20
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	0e5b      	lsrs	r3, r3, #25
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	4413      	add	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	0d1b      	lsrs	r3, r3, #20
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2107      	movs	r1, #7
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	0d1b      	lsrs	r3, r3, #20
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d10a      	bne.n	8001f56 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001f54:	e00a      	b.n	8001f6c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	407f0000 	.word	0x407f0000

08001f7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 031f 	and.w	r3, r3, #31
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6093      	str	r3, [r2, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fd0:	d101      	bne.n	8001fd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002020:	d101      	bne.n	8002026 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800206c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002070:	f043 0202 	orr.w	r2, r3, #2
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <LL_ADC_IsEnabled+0x18>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <LL_ADC_IsEnabled+0x1a>
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d101      	bne.n	80020c2 <LL_ADC_IsDisableOngoing+0x18>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <LL_ADC_IsDisableOngoing+0x1a>
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e4:	f043 0204 	orr.w	r2, r3, #4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b04      	cmp	r3, #4
 800210a:	d101      	bne.n	8002110 <LL_ADC_REG_IsConversionOngoing+0x18>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b08      	cmp	r3, #8
 8002130:	d101      	bne.n	8002136 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1af      	b.n	80024be <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fa91 	bl	8001694 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff19 	bl	8001fbc <LL_ADC_IsDeepPowerDownEnabled>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff feff 	bl	8001f98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff34 	bl	800200c <LL_ADC_IsInternalRegulatorEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d115      	bne.n	80021d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff18 	bl	8001fe4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021b4:	4b9f      	ldr	r3, [pc, #636]	; (8002434 <HAL_ADC_Init+0x2f0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	4a9f      	ldr	r2, [pc, #636]	; (8002438 <HAL_ADC_Init+0x2f4>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	3301      	adds	r3, #1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021c8:	e002      	b.n	80021d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f9      	bne.n	80021ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff16 	bl	800200c <LL_ADC_IsInternalRegulatorEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff76 	bl	80020f8 <LL_ADC_REG_IsConversionOngoing>
 800220c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8148 	bne.w	80024ac <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 8144 	bne.w	80024ac <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800222c:	f043 0202 	orr.w	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff23 	bl	8002084 <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d141      	bne.n	80022c8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800224c:	d004      	beq.n	8002258 <HAL_ADC_Init+0x114>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7a      	ldr	r2, [pc, #488]	; (800243c <HAL_ADC_Init+0x2f8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d10f      	bne.n	8002278 <HAL_ADC_Init+0x134>
 8002258:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800225c:	f7ff ff12 	bl	8002084 <LL_ADC_IsEnabled>
 8002260:	4604      	mov	r4, r0
 8002262:	4876      	ldr	r0, [pc, #472]	; (800243c <HAL_ADC_Init+0x2f8>)
 8002264:	f7ff ff0e 	bl	8002084 <LL_ADC_IsEnabled>
 8002268:	4603      	mov	r3, r0
 800226a:	4323      	orrs	r3, r4
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e012      	b.n	800229e <HAL_ADC_Init+0x15a>
 8002278:	4871      	ldr	r0, [pc, #452]	; (8002440 <HAL_ADC_Init+0x2fc>)
 800227a:	f7ff ff03 	bl	8002084 <LL_ADC_IsEnabled>
 800227e:	4604      	mov	r4, r0
 8002280:	4870      	ldr	r0, [pc, #448]	; (8002444 <HAL_ADC_Init+0x300>)
 8002282:	f7ff feff 	bl	8002084 <LL_ADC_IsEnabled>
 8002286:	4603      	mov	r3, r0
 8002288:	431c      	orrs	r4, r3
 800228a:	486f      	ldr	r0, [pc, #444]	; (8002448 <HAL_ADC_Init+0x304>)
 800228c:	f7ff fefa 	bl	8002084 <LL_ADC_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	4323      	orrs	r3, r4
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022aa:	d004      	beq.n	80022b6 <HAL_ADC_Init+0x172>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a62      	ldr	r2, [pc, #392]	; (800243c <HAL_ADC_Init+0x2f8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Init+0x176>
 80022b6:	4a65      	ldr	r2, [pc, #404]	; (800244c <HAL_ADC_Init+0x308>)
 80022b8:	e000      	b.n	80022bc <HAL_ADC_Init+0x178>
 80022ba:	4a65      	ldr	r2, [pc, #404]	; (8002450 <HAL_ADC_Init+0x30c>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f7ff fcf6 	bl	8001cb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7f5b      	ldrb	r3, [r3, #29]
 80022cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d106      	bne.n	8002304 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	045b      	lsls	r3, r3, #17
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_ADC_Init+0x310>)
 8002328:	4013      	ands	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	430b      	orrs	r3, r1
 8002332:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fed2 	bl	80020f8 <LL_ADC_REG_IsConversionOngoing>
 8002354:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fedf 	bl	800211e <LL_ADC_INJ_IsConversionOngoing>
 8002360:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d17f      	bne.n	8002468 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d17c      	bne.n	8002468 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002372:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800237a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800238a:	f023 0302 	bic.w	r3, r3, #2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	430b      	orrs	r3, r1
 8002396:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6911      	ldr	r1, [r2, #16]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80023ce:	e013      	b.n	80023f8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d12a      	bne.n	8002458 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002418:	4311      	orrs	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800241e:	4311      	orrs	r1, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002424:	430a      	orrs	r2, r1
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	e019      	b.n	8002468 <HAL_ADC_Init+0x324>
 8002434:	20000000 	.word	0x20000000
 8002438:	053e2d63 	.word	0x053e2d63
 800243c:	50000100 	.word	0x50000100
 8002440:	50000400 	.word	0x50000400
 8002444:	50000500 	.word	0x50000500
 8002448:	50000600 	.word	0x50000600
 800244c:	50000300 	.word	0x50000300
 8002450:	50000700 	.word	0x50000700
 8002454:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d10c      	bne.n	800248a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f023 010f 	bic.w	r1, r3, #15
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	1e5a      	subs	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
 8002488:	e007      	b.n	800249a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 020f 	bic.w	r2, r2, #15
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80024aa:	e007      	b.n	80024bc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	f043 0210 	orr.w	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	bf00      	nop

080024c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024dc:	d004      	beq.n	80024e8 <HAL_ADC_Start_DMA+0x20>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a5a      	ldr	r2, [pc, #360]	; (800264c <HAL_ADC_Start_DMA+0x184>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_Start_DMA+0x24>
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_ADC_Start_DMA+0x188>)
 80024ea:	e000      	b.n	80024ee <HAL_ADC_Start_DMA+0x26>
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <HAL_ADC_Start_DMA+0x18c>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fd44 	bl	8001f7c <LL_ADC_GetMultimode>
 80024f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fdfc 	bl	80020f8 <LL_ADC_REG_IsConversionOngoing>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 809b 	bne.w	800263e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Start_DMA+0x4e>
 8002512:	2302      	movs	r3, #2
 8002514:	e096      	b.n	8002644 <HAL_ADC_Start_DMA+0x17c>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_ADC_Start_DMA+0x190>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d008      	beq.n	800253a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d002      	beq.n	800253a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	2b09      	cmp	r3, #9
 8002538:	d17a      	bne.n	8002630 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fcf6 	bl	8002f2c <ADC_Enable>
 8002540:	4603      	mov	r3, r0
 8002542:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d16d      	bne.n	8002626 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002552:	f023 0301 	bic.w	r3, r3, #1
 8002556:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a3a      	ldr	r2, [pc, #232]	; (800264c <HAL_ADC_Start_DMA+0x184>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d009      	beq.n	800257c <HAL_ADC_Start_DMA+0xb4>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a3b      	ldr	r2, [pc, #236]	; (800265c <HAL_ADC_Start_DMA+0x194>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d002      	beq.n	8002578 <HAL_ADC_Start_DMA+0xb0>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	e003      	b.n	8002580 <HAL_ADC_Start_DMA+0xb8>
 8002578:	4b39      	ldr	r3, [pc, #228]	; (8002660 <HAL_ADC_Start_DMA+0x198>)
 800257a:	e001      	b.n	8002580 <HAL_ADC_Start_DMA+0xb8>
 800257c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	4293      	cmp	r3, r2
 8002586:	d002      	beq.n	800258e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	f023 0206 	bic.w	r2, r3, #6
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	661a      	str	r2, [r3, #96]	; 0x60
 80025b2:	e002      	b.n	80025ba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	4a29      	ldr	r2, [pc, #164]	; (8002664 <HAL_ADC_Start_DMA+0x19c>)
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	4a28      	ldr	r2, [pc, #160]	; (8002668 <HAL_ADC_Start_DMA+0x1a0>)
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	4a27      	ldr	r2, [pc, #156]	; (800266c <HAL_ADC_Start_DMA+0x1a4>)
 80025d0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	221c      	movs	r2, #28
 80025d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0210 	orr.w	r2, r2, #16
 80025f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3340      	adds	r3, #64	; 0x40
 800260c:	4619      	mov	r1, r3
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f001 f955 	bl	80038c0 <HAL_DMA_Start_IT>
 8002616:	4603      	mov	r3, r0
 8002618:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fd56 	bl	80020d0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002624:	e00d      	b.n	8002642 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800262e:	e008      	b.n	8002642 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800263c:	e001      	b.n	8002642 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	50000100 	.word	0x50000100
 8002650:	50000300 	.word	0x50000300
 8002654:	50000700 	.word	0x50000700
 8002658:	50000600 	.word	0x50000600
 800265c:	50000500 	.word	0x50000500
 8002660:	50000400 	.word	0x50000400
 8002664:	080030af 	.word	0x080030af
 8002668:	08003187 	.word	0x08003187
 800266c:	080031a3 	.word	0x080031a3

08002670 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0b6      	sub	sp, #216	; 0xd8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x24>
 80026ca:	2302      	movs	r3, #2
 80026cc:	f000 bc13 	b.w	8002ef6 <HAL_ADC_ConfigChannel+0x84a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fd0b 	bl	80020f8 <LL_ADC_REG_IsConversionOngoing>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 83f3 	bne.w	8002ed0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f7ff fbc1 	bl	8001e7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fcf9 	bl	80020f8 <LL_ADC_REG_IsConversionOngoing>
 8002706:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fd05 	bl	800211e <LL_ADC_INJ_IsConversionOngoing>
 8002714:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002718:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800271c:	2b00      	cmp	r3, #0
 800271e:	f040 81d9 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002722:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 81d4 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002734:	d10f      	bne.n	8002756 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	4619      	mov	r1, r3
 8002742:	f7ff fbc8 	bl	8001ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fb6f 	bl	8001e32 <LL_ADC_SetSamplingTimeCommonConfig>
 8002754:	e00e      	b.n	8002774 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	461a      	mov	r2, r3
 8002764:	f7ff fbb7 	bl	8001ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fb5f 	bl	8001e32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	08db      	lsrs	r3, r3, #3
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d022      	beq.n	80027dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6919      	ldr	r1, [r3, #16]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027a6:	f7ff fab9 	bl	8001d1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6919      	ldr	r1, [r3, #16]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f7ff fb05 	bl	8001dc6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6919      	ldr	r1, [r3, #16]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	7f1b      	ldrb	r3, [r3, #28]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d102      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x126>
 80027cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d0:	e000      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x128>
 80027d2:	2300      	movs	r3, #0
 80027d4:	461a      	mov	r2, r3
 80027d6:	f7ff fb11 	bl	8001dfc <LL_ADC_SetOffsetSaturation>
 80027da:	e17b      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fabe 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10a      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x15c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fab3 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	0e9b      	lsrs	r3, r3, #26
 8002802:	f003 021f 	and.w	r2, r3, #31
 8002806:	e01e      	b.n	8002846 <HAL_ADC_ConfigChannel+0x19a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff faa8 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800282a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800282e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002836:	2320      	movs	r3, #32
 8002838:	e004      	b.n	8002844 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800283a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_ADC_ConfigChannel+0x1b2>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	e018      	b.n	8002890 <HAL_ADC_ConfigChannel+0x1e4>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800287a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e004      	b.n	8002890 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002890:	429a      	cmp	r2, r3
 8002892:	d106      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fa77 	bl	8001d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2101      	movs	r1, #1
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fa5b 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x222>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2101      	movs	r1, #1
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fa50 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	e01e      	b.n	800290c <HAL_ADC_ConfigChannel+0x260>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2101      	movs	r1, #1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fa45 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80028fc:	2320      	movs	r3, #32
 80028fe:	e004      	b.n	800290a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002900:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x278>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	e018      	b.n	8002956 <HAL_ADC_ConfigChannel+0x2aa>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002938:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800293c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e004      	b.n	8002956 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800294c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002956:	429a      	cmp	r2, r3
 8002958:	d106      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2200      	movs	r2, #0
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fa14 	bl	8001d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2102      	movs	r1, #2
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f9f8 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x2e8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2102      	movs	r1, #2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff f9ed 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	f003 021f 	and.w	r2, r3, #31
 8002992:	e01e      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x326>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2102      	movs	r1, #2
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff f9e2 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e004      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80029c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x33e>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	e016      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x36c>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e004      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d106      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2102      	movs	r1, #2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f9b3 	bl	8001d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2103      	movs	r1, #3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff f997 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x3aa>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2103      	movs	r1, #3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f98c 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	e017      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x3da>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2103      	movs	r1, #3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff f981 	bl	8001d64 <LL_ADC_GetOffsetChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e003      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x3f2>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	e011      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x416>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d106      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	2103      	movs	r1, #3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f95e 	bl	8001d90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fad3 	bl	8002084 <LL_ADC_IsEnabled>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f040 813d 	bne.w	8002d60 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f7ff fa1a 	bl	8001f2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4aa2      	ldr	r2, [pc, #648]	; (8002d88 <HAL_ADC_ConfigChannel+0x6dc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	f040 812e 	bne.w	8002d60 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x480>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2b09      	cmp	r3, #9
 8002b22:	bf94      	ite	ls
 8002b24:	2301      	movls	r3, #1
 8002b26:	2300      	movhi	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e019      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x4b4>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b3c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e003      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002b48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2b09      	cmp	r3, #9
 8002b58:	bf94      	ite	ls
 8002b5a:	2301      	movls	r3, #1
 8002b5c:	2300      	movhi	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d079      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d107      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x4d4>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	3301      	adds	r3, #1
 8002b78:	069b      	lsls	r3, r3, #26
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	e015      	b.n	8002bac <HAL_ADC_ConfigChannel+0x500>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b90:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	069b      	lsls	r3, r3, #26
 8002ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x520>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	e017      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x550>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e003      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	ea42 0103 	orr.w	r1, r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x576>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	3301      	adds	r3, #1
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	051b      	lsls	r3, r3, #20
 8002c20:	e018      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x5a8>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e003      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c54:	430b      	orrs	r3, r1
 8002c56:	e07e      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x5c8>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	069b      	lsls	r3, r3, #26
 8002c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c72:	e015      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x5f4>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	069b      	lsls	r3, r3, #26
 8002c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x614>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	e017      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x644>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	61fb      	str	r3, [r7, #28]
  return result;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e003      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	ea42 0103 	orr.w	r1, r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x670>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	3301      	adds	r3, #1
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	3b1e      	subs	r3, #30
 8002d14:	051b      	lsls	r3, r3, #20
 8002d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	e01b      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x6a8>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	613b      	str	r3, [r7, #16]
  return result;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d34:	2320      	movs	r3, #32
 8002d36:	e003      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f003 021f 	and.w	r2, r3, #31
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b1e      	subs	r3, #30
 8002d4e:	051b      	lsls	r3, r3, #20
 8002d50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d54:	430b      	orrs	r3, r1
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	6892      	ldr	r2, [r2, #8]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f7ff f8bb 	bl	8001ed6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_ADC_ConfigChannel+0x6e0>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80be 	beq.w	8002eea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d76:	d004      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x6d6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_ADC_ConfigChannel+0x6e4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x6ec>
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_ADC_ConfigChannel+0x6e8>)
 8002d84:	e009      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x6ee>
 8002d86:	bf00      	nop
 8002d88:	407f0000 	.word	0x407f0000
 8002d8c:	80080000 	.word	0x80080000
 8002d90:	50000100 	.word	0x50000100
 8002d94:	50000300 	.word	0x50000300
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_ADC_ConfigChannel+0x854>)
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe ffb0 	bl	8001d00 <LL_ADC_GetCommonPathInternalCh>
 8002da0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_ADC_ConfigChannel+0x858>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d004      	beq.n	8002db8 <HAL_ADC_ConfigChannel+0x70c>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a55      	ldr	r2, [pc, #340]	; (8002f08 <HAL_ADC_ConfigChannel+0x85c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d13a      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002db8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d134      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dcc:	d005      	beq.n	8002dda <HAL_ADC_ConfigChannel+0x72e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a4e      	ldr	r2, [pc, #312]	; (8002f0c <HAL_ADC_ConfigChannel+0x860>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	f040 8085 	bne.w	8002ee4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de2:	d004      	beq.n	8002dee <HAL_ADC_ConfigChannel+0x742>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a49      	ldr	r2, [pc, #292]	; (8002f10 <HAL_ADC_ConfigChannel+0x864>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x746>
 8002dee:	4a49      	ldr	r2, [pc, #292]	; (8002f14 <HAL_ADC_ConfigChannel+0x868>)
 8002df0:	e000      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x748>
 8002df2:	4a43      	ldr	r2, [pc, #268]	; (8002f00 <HAL_ADC_ConfigChannel+0x854>)
 8002df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fe ff6b 	bl	8001cda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e04:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <HAL_ADC_ConfigChannel+0x86c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	4a44      	ldr	r2, [pc, #272]	; (8002f1c <HAL_ADC_ConfigChannel+0x870>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e1e:	e002      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f9      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e2c:	e05a      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a3b      	ldr	r2, [pc, #236]	; (8002f20 <HAL_ADC_ConfigChannel+0x874>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d125      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x7d8>
 8002e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d11f      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a31      	ldr	r2, [pc, #196]	; (8002f10 <HAL_ADC_ConfigChannel+0x864>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d104      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x7ac>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a34      	ldr	r2, [pc, #208]	; (8002f24 <HAL_ADC_ConfigChannel+0x878>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d047      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e60:	d004      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x7c0>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <HAL_ADC_ConfigChannel+0x864>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x7c4>
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <HAL_ADC_ConfigChannel+0x868>)
 8002e6e:	e000      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x7c6>
 8002e70:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <HAL_ADC_ConfigChannel+0x854>)
 8002e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	f7fe ff2c 	bl	8001cda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e82:	e031      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <HAL_ADC_ConfigChannel+0x87c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d12d      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d127      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_ADC_ConfigChannel+0x864>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eac:	d004      	beq.n	8002eb8 <HAL_ADC_ConfigChannel+0x80c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <HAL_ADC_ConfigChannel+0x864>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x810>
 8002eb8:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <HAL_ADC_ConfigChannel+0x868>)
 8002eba:	e000      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x812>
 8002ebc:	4a10      	ldr	r2, [pc, #64]	; (8002f00 <HAL_ADC_ConfigChannel+0x854>)
 8002ebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f7fe ff06 	bl	8001cda <LL_ADC_SetCommonPathInternalCh>
 8002ece:	e00c      	b.n	8002eea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ee2:	e002      	b.n	8002eea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ee8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ef2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	37d8      	adds	r7, #216	; 0xd8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	50000700 	.word	0x50000700
 8002f04:	c3210000 	.word	0xc3210000
 8002f08:	90c00010 	.word	0x90c00010
 8002f0c:	50000600 	.word	0x50000600
 8002f10:	50000100 	.word	0x50000100
 8002f14:	50000300 	.word	0x50000300
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	053e2d63 	.word	0x053e2d63
 8002f20:	c7520000 	.word	0xc7520000
 8002f24:	50000500 	.word	0x50000500
 8002f28:	cb840000 	.word	0xcb840000

08002f2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f8a3 	bl	8002084 <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d14d      	bne.n	8002fe0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <ADC_Enable+0xc0>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	f043 0210 	orr.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e039      	b.n	8002fe2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f85e 	bl	8002034 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f78:	f7fe fe6e 	bl	8001c58 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f7e:	e028      	b.n	8002fd2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f87d 	bl	8002084 <LL_ADC_IsEnabled>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d104      	bne.n	8002f9a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f84d 	bl	8002034 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f9a:	f7fe fe5d 	bl	8001c58 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d914      	bls.n	8002fd2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d00d      	beq.n	8002fd2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	f043 0210 	orr.w	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e007      	b.n	8002fe2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d1cf      	bne.n	8002f80 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	8000003f 	.word	0x8000003f

08002ff0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff f854 	bl	80020aa <LL_ADC_IsDisableOngoing>
 8003002:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f83b 	bl	8002084 <LL_ADC_IsEnabled>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d047      	beq.n	80030a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d144      	bne.n	80030a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030d 	and.w	r3, r3, #13
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10c      	bne.n	8003042 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f815 	bl	800205c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2203      	movs	r2, #3
 8003038:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800303a:	f7fe fe0d 	bl	8001c58 <HAL_GetTick>
 800303e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003040:	e029      	b.n	8003096 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	f043 0210 	orr.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e023      	b.n	80030a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800305e:	f7fe fdfb 	bl	8001c58 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d914      	bls.n	8003096 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307e:	f043 0210 	orr.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e007      	b.n	80030a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1dc      	bne.n	800305e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d14b      	bne.n	8003160 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d021      	beq.n	8003126 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe feb6 	bl	8001e58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d032      	beq.n	8003158 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d12b      	bne.n	8003158 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11f      	bne.n	8003158 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	65da      	str	r2, [r3, #92]	; 0x5c
 8003124:	e018      	b.n	8003158 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff fa89 	bl	8002670 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800315e:	e00e      	b.n	800317e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff fa93 	bl	8002698 <HAL_ADC_ErrorCallback>
}
 8003172:	e004      	b.n	800317e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fa75 	bl	8002684 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c0:	f043 0204 	orr.w	r2, r3, #4
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff fa65 	bl	8002698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <LL_ADC_IsEnabled>:
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <LL_ADC_IsEnabled+0x18>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <LL_ADC_IsEnabled+0x1a>
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_StartCalibration>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800320e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003218:	4313      	orrs	r3, r2
 800321a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	609a      	str	r2, [r3, #8]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_ADC_IsCalibrationOnGoing>:
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800323e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003242:	d101      	bne.n	8003248 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_ADC_REG_IsConversionOngoing>:
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d101      	bne.n	800326e <LL_ADC_REG_IsConversionOngoing+0x18>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_ADCEx_Calibration_Start+0x1c>
 8003294:	2302      	movs	r3, #2
 8003296:	e04d      	b.n	8003334 <HAL_ADCEx_Calibration_Start+0xb8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff fea5 	bl	8002ff0 <ADC_Disable>
 80032a6:	4603      	mov	r3, r0
 80032a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d136      	bne.n	800331e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032b8:	f023 0302 	bic.w	r3, r3, #2
 80032bc:	f043 0202 	orr.w	r2, r3, #2
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff96 	bl	80031fc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032d0:	e014      	b.n	80032fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3301      	adds	r3, #1
 80032d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4a18      	ldr	r2, [pc, #96]	; (800333c <HAL_ADCEx_Calibration_Start+0xc0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d90d      	bls.n	80032fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	f023 0312 	bic.w	r3, r3, #18
 80032e8:	f043 0210 	orr.w	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e01b      	b.n	8003334 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff94 	bl	800322e <LL_ADC_IsCalibrationOnGoing>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e2      	bne.n	80032d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	f023 0303 	bic.w	r3, r3, #3
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c
 800331c:	e005      	b.n	800332a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003322:	f043 0210 	orr.w	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	0004de01 	.word	0x0004de01

08003340 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b0a1      	sub	sp, #132	; 0x84
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800335a:	2302      	movs	r3, #2
 800335c:	e0e7      	b.n	800352e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003366:	2300      	movs	r3, #0
 8003368:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800336a:	2300      	movs	r3, #0
 800336c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003376:	d102      	bne.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	e009      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6e      	ldr	r2, [pc, #440]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d102      	bne.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003388:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	e001      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0be      	b.n	800352e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff4f 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 80033b8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff49 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 80a0 	bne.w	800350c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 809c 	bne.w	800350c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033dc:	d004      	beq.n	80033e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a55      	ldr	r2, [pc, #340]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80033e8:	4b56      	ldr	r3, [pc, #344]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80033ea:	e000      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80033ec:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80033ee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d04b      	beq.n	8003490 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800340a:	035b      	lsls	r3, r3, #13
 800340c:	430b      	orrs	r3, r1
 800340e:	431a      	orrs	r2, r3
 8003410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003412:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800341c:	d004      	beq.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a45      	ldr	r2, [pc, #276]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10f      	bne.n	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003428:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800342c:	f7ff fed3 	bl	80031d6 <LL_ADC_IsEnabled>
 8003430:	4604      	mov	r4, r0
 8003432:	4841      	ldr	r0, [pc, #260]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003434:	f7ff fecf 	bl	80031d6 <LL_ADC_IsEnabled>
 8003438:	4603      	mov	r3, r0
 800343a:	4323      	orrs	r3, r4
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e012      	b.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003448:	483c      	ldr	r0, [pc, #240]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800344a:	f7ff fec4 	bl	80031d6 <LL_ADC_IsEnabled>
 800344e:	4604      	mov	r4, r0
 8003450:	483b      	ldr	r0, [pc, #236]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003452:	f7ff fec0 	bl	80031d6 <LL_ADC_IsEnabled>
 8003456:	4603      	mov	r3, r0
 8003458:	431c      	orrs	r4, r3
 800345a:	483c      	ldr	r0, [pc, #240]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800345c:	f7ff febb 	bl	80031d6 <LL_ADC_IsEnabled>
 8003460:	4603      	mov	r3, r0
 8003462:	4323      	orrs	r3, r4
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d056      	beq.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800347a:	f023 030f 	bic.w	r3, r3, #15
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	6892      	ldr	r2, [r2, #8]
 8003486:	430a      	orrs	r2, r1
 8003488:	431a      	orrs	r2, r3
 800348a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800348e:	e047      	b.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a4:	d004      	beq.n	80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a23      	ldr	r2, [pc, #140]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10f      	bne.n	80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80034b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034b4:	f7ff fe8f 	bl	80031d6 <LL_ADC_IsEnabled>
 80034b8:	4604      	mov	r4, r0
 80034ba:	481f      	ldr	r0, [pc, #124]	; (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034bc:	f7ff fe8b 	bl	80031d6 <LL_ADC_IsEnabled>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4323      	orrs	r3, r4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e012      	b.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034d0:	481a      	ldr	r0, [pc, #104]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034d2:	f7ff fe80 	bl	80031d6 <LL_ADC_IsEnabled>
 80034d6:	4604      	mov	r4, r0
 80034d8:	4819      	ldr	r0, [pc, #100]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034da:	f7ff fe7c 	bl	80031d6 <LL_ADC_IsEnabled>
 80034de:	4603      	mov	r3, r0
 80034e0:	431c      	orrs	r4, r3
 80034e2:	481a      	ldr	r0, [pc, #104]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034e4:	f7ff fe77 	bl	80031d6 <LL_ADC_IsEnabled>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4323      	orrs	r3, r4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d012      	beq.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003502:	f023 030f 	bic.w	r3, r3, #15
 8003506:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003508:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800350a:	e009      	b.n	8003520 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800351e:	e000      	b.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003520:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800352a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800352e:	4618      	mov	r0, r3
 8003530:	3784      	adds	r7, #132	; 0x84
 8003532:	46bd      	mov	sp, r7
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	bf00      	nop
 8003538:	50000100 	.word	0x50000100
 800353c:	50000400 	.word	0x50000400
 8003540:	50000500 	.word	0x50000500
 8003544:	50000300 	.word	0x50000300
 8003548:	50000700 	.word	0x50000700
 800354c:	50000600 	.word	0x50000600

08003550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003582:	4a04      	ldr	r2, [pc, #16]	; (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	60d3      	str	r3, [r2, #12]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <__NVIC_GetPriorityGrouping+0x18>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	f003 0307 	and.w	r3, r3, #7
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	db0b      	blt.n	80035de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	f003 021f 	and.w	r2, r3, #31
 80035cc:	4907      	ldr	r1, [pc, #28]	; (80035ec <__NVIC_EnableIRQ+0x38>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2001      	movs	r0, #1
 80035d6:	fa00 f202 	lsl.w	r2, r0, r2
 80035da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	; (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	; (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf28      	it	cs
 8003662:	2304      	movcs	r3, #4
 8003664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3304      	adds	r3, #4
 800366a:	2b06      	cmp	r3, #6
 800366c:	d902      	bls.n	8003674 <NVIC_EncodePriority+0x30>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b03      	subs	r3, #3
 8003672:	e000      	b.n	8003676 <NVIC_EncodePriority+0x32>
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	f04f 32ff 	mov.w	r2, #4294967295
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368c:	f04f 31ff 	mov.w	r1, #4294967295
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43d9      	mvns	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	4313      	orrs	r3, r2
         );
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	d301      	bcc.n	80036c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036be:	2301      	movs	r3, #1
 80036c0:	e00f      	b.n	80036e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <SysTick_Config+0x40>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ca:	210f      	movs	r1, #15
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	f7ff ff8e 	bl	80035f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <SysTick_Config+0x40>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SysTick_Config+0x40>)
 80036dc:	2207      	movs	r2, #7
 80036de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff29 	bl	8003550 <__NVIC_SetPriorityGrouping>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003714:	f7ff ff40 	bl	8003598 <__NVIC_GetPriorityGrouping>
 8003718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7ff ff90 	bl	8003644 <NVIC_EncodePriority>
 8003724:	4602      	mov	r2, r0
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff5f 	bl	80035f0 <__NVIC_SetPriority>
}
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff33 	bl	80035b4 <__NVIC_EnableIRQ>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ffa4 	bl	80036ac <SysTick_Config>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e08d      	b.n	800389e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_DMA_Init+0x138>)
 800378a:	429a      	cmp	r2, r3
 800378c:	d80f      	bhi.n	80037ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	4b45      	ldr	r3, [pc, #276]	; (80038ac <HAL_DMA_Init+0x13c>)
 8003796:	4413      	add	r3, r2
 8003798:	4a45      	ldr	r2, [pc, #276]	; (80038b0 <HAL_DMA_Init+0x140>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a42      	ldr	r2, [pc, #264]	; (80038b4 <HAL_DMA_Init+0x144>)
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
 80037ac:	e00e      	b.n	80037cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b40      	ldr	r3, [pc, #256]	; (80038b8 <HAL_DMA_Init+0x148>)
 80037b6:	4413      	add	r3, r2
 80037b8:	4a3d      	ldr	r2, [pc, #244]	; (80038b0 <HAL_DMA_Init+0x140>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a3c      	ldr	r2, [pc, #240]	; (80038bc <HAL_DMA_Init+0x14c>)
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f9b6 	bl	8003b90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800382c:	d102      	bne.n	8003834 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003848:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d010      	beq.n	8003874 <HAL_DMA_Init+0x104>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d80c      	bhi.n	8003874 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9d6 	bl	8003c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	e008      	b.n	8003886 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40020407 	.word	0x40020407
 80038ac:	bffdfff8 	.word	0xbffdfff8
 80038b0:	cccccccd 	.word	0xcccccccd
 80038b4:	40020000 	.word	0x40020000
 80038b8:	bffdfbf8 	.word	0xbffdfbf8
 80038bc:	40020400 	.word	0x40020400

080038c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_DMA_Start_IT+0x20>
 80038dc:	2302      	movs	r3, #2
 80038de:	e066      	b.n	80039ae <HAL_DMA_Start_IT+0xee>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d155      	bne.n	80039a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f8fb 	bl	8003b14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 020e 	orr.w	r2, r2, #14
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e00f      	b.n	8003958 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 020a 	orr.w	r2, r2, #10
 8003956:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003974:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e005      	b.n	80039ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
 80039aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2204      	movs	r2, #4
 80039d8:	409a      	lsls	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d026      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x7a>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d021      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d107      	bne.n	8003a0a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0204 	bic.w	r2, r2, #4
 8003a08:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f003 021f 	and.w	r2, r3, #31
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2104      	movs	r1, #4
 8003a18:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d071      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a2e:	e06c      	b.n	8003b0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2202      	movs	r2, #2
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d02e      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d029      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 020a 	bic.w	r2, r2, #10
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2102      	movs	r1, #2
 8003a82:	fa01 f202 	lsl.w	r2, r1, r2
 8003a86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d038      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003aa0:	e033      	b.n	8003b0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2208      	movs	r2, #8
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d02a      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d025      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 020e 	bic.w	r2, r2, #14
 8003ace:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	f003 021f 	and.w	r2, r3, #31
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	2101      	movs	r1, #1
 8003ade:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
}
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f003 021f 	and.w	r2, r3, #31
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d108      	bne.n	8003b74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b72:	e007      	b.n	8003b84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	60da      	str	r2, [r3, #12]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d802      	bhi.n	8003baa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ba4:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e001      	b.n	8003bae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	3b08      	subs	r3, #8
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	009a      	lsls	r2, r3, #2
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bda:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2201      	movs	r2, #1
 8003be4:	409a      	lsls	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40020407 	.word	0x40020407
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	40020820 	.word	0x40020820
 8003c04:	cccccccd 	.word	0xcccccccd
 8003c08:	40020880 	.word	0x40020880

08003c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	461a      	mov	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c2e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	2201      	movs	r2, #1
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	1000823f 	.word	0x1000823f
 8003c50:	40020940 	.word	0x40020940

08003c54 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e147      	b.n	8003ef6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fe12 	bl	80018a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0210 	bic.w	r2, r2, #16
 8003c8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c90:	f7fd ffe2 	bl	8001c58 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003c96:	e012      	b.n	8003cbe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003c98:	f7fd ffde 	bl	8001c58 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	d90b      	bls.n	8003cbe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e11b      	b.n	8003ef6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d0e5      	beq.n	8003c98 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cdc:	f7fd ffbc 	bl	8001c58 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ce2:	e012      	b.n	8003d0a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ce4:	f7fd ffb8 	bl	8001c58 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b0a      	cmp	r3, #10
 8003cf0:	d90b      	bls.n	8003d0a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2203      	movs	r2, #3
 8003d02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0f5      	b.n	8003ef6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0e5      	beq.n	8003ce4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0202 	orr.w	r2, r2, #2
 8003d26:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a74      	ldr	r2, [pc, #464]	; (8003f00 <HAL_FDCAN_Init+0x2ac>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d103      	bne.n	8003d3a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003d32:	4a74      	ldr	r2, [pc, #464]	; (8003f04 <HAL_FDCAN_Init+0x2b0>)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7c1b      	ldrb	r3, [r3, #16]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d108      	bne.n	8003d54 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d50:	619a      	str	r2, [r3, #24]
 8003d52:	e007      	b.n	8003d64 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d62:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	7c5b      	ldrb	r3, [r3, #17]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d108      	bne.n	8003d7e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d7a:	619a      	str	r2, [r3, #24]
 8003d7c:	e007      	b.n	8003d8e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7c9b      	ldrb	r3, [r3, #18]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d108      	bne.n	8003da8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003da4:	619a      	str	r2, [r3, #24]
 8003da6:	e007      	b.n	8003db8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003db6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003ddc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0210 	bic.w	r2, r2, #16
 8003dec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d108      	bne.n	8003e08 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0204 	orr.w	r2, r2, #4
 8003e04:	619a      	str	r2, [r3, #24]
 8003e06:	e02c      	b.n	8003e62 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d028      	beq.n	8003e62 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d01c      	beq.n	8003e52 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e26:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0210 	orr.w	r2, r2, #16
 8003e36:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d110      	bne.n	8003e62 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0220 	orr.w	r2, r2, #32
 8003e4e:	619a      	str	r2, [r3, #24]
 8003e50:	e007      	b.n	8003e62 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0220 	orr.w	r2, r2, #32
 8003e60:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e72:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e7a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e8a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e8c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e96:	d115      	bne.n	8003ec4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ea6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	3b01      	subs	r3, #1
 8003eae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003eb0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ec0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ec2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f814 	bl	8003f08 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40006400 	.word	0x40006400
 8003f04:	40006500 	.word	0x40006500

08003f08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003f10:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003f12:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2f      	ldr	r2, [pc, #188]	; (8003fd8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d103      	bne.n	8003f26 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003f24:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d103      	bne.n	8003f38 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8003f36:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f46:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4e:	041a      	lsls	r2, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	061a      	lsls	r2, r3, #24
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e005      	b.n	8003fba <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d3f3      	bcc.n	8003fae <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	4000a400 	.word	0x4000a400
 8003fd8:	40006800 	.word	0x40006800
 8003fdc:	40006c00 	.word	0x40006c00

08003fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fee:	e15a      	b.n	80042a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 814c 	beq.w	80042a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d005      	beq.n	8004020 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800401c:	2b02      	cmp	r3, #2
 800401e:	d130      	bne.n	8004082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2203      	movs	r2, #3
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004056:	2201      	movs	r2, #1
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4013      	ands	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 0201 	and.w	r2, r3, #1
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b03      	cmp	r3, #3
 800408c:	d017      	beq.n	80040be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	2203      	movs	r2, #3
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d123      	bne.n	8004112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	08da      	lsrs	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3208      	adds	r2, #8
 80040d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	220f      	movs	r2, #15
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	08da      	lsrs	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3208      	adds	r2, #8
 800410c:	6939      	ldr	r1, [r7, #16]
 800410e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	2203      	movs	r2, #3
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0203 	and.w	r2, r3, #3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80a6 	beq.w	80042a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004154:	4b5b      	ldr	r3, [pc, #364]	; (80042c4 <HAL_GPIO_Init+0x2e4>)
 8004156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004158:	4a5a      	ldr	r2, [pc, #360]	; (80042c4 <HAL_GPIO_Init+0x2e4>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	6613      	str	r3, [r2, #96]	; 0x60
 8004160:	4b58      	ldr	r3, [pc, #352]	; (80042c4 <HAL_GPIO_Init+0x2e4>)
 8004162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800416c:	4a56      	ldr	r2, [pc, #344]	; (80042c8 <HAL_GPIO_Init+0x2e8>)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	3302      	adds	r3, #2
 8004174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	220f      	movs	r2, #15
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004196:	d01f      	beq.n	80041d8 <HAL_GPIO_Init+0x1f8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a4c      	ldr	r2, [pc, #304]	; (80042cc <HAL_GPIO_Init+0x2ec>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d019      	beq.n	80041d4 <HAL_GPIO_Init+0x1f4>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a4b      	ldr	r2, [pc, #300]	; (80042d0 <HAL_GPIO_Init+0x2f0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <HAL_GPIO_Init+0x1f0>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a4a      	ldr	r2, [pc, #296]	; (80042d4 <HAL_GPIO_Init+0x2f4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00d      	beq.n	80041cc <HAL_GPIO_Init+0x1ec>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a49      	ldr	r2, [pc, #292]	; (80042d8 <HAL_GPIO_Init+0x2f8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d007      	beq.n	80041c8 <HAL_GPIO_Init+0x1e8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a48      	ldr	r2, [pc, #288]	; (80042dc <HAL_GPIO_Init+0x2fc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_GPIO_Init+0x1e4>
 80041c0:	2305      	movs	r3, #5
 80041c2:	e00a      	b.n	80041da <HAL_GPIO_Init+0x1fa>
 80041c4:	2306      	movs	r3, #6
 80041c6:	e008      	b.n	80041da <HAL_GPIO_Init+0x1fa>
 80041c8:	2304      	movs	r3, #4
 80041ca:	e006      	b.n	80041da <HAL_GPIO_Init+0x1fa>
 80041cc:	2303      	movs	r3, #3
 80041ce:	e004      	b.n	80041da <HAL_GPIO_Init+0x1fa>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e002      	b.n	80041da <HAL_GPIO_Init+0x1fa>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <HAL_GPIO_Init+0x1fa>
 80041d8:	2300      	movs	r3, #0
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	f002 0203 	and.w	r2, r2, #3
 80041e0:	0092      	lsls	r2, r2, #2
 80041e2:	4093      	lsls	r3, r2
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041ea:	4937      	ldr	r1, [pc, #220]	; (80042c8 <HAL_GPIO_Init+0x2e8>)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	3302      	adds	r3, #2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041f8:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <HAL_GPIO_Init+0x300>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	43db      	mvns	r3, r3
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800421c:	4a30      	ldr	r2, [pc, #192]	; (80042e0 <HAL_GPIO_Init+0x300>)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004222:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <HAL_GPIO_Init+0x300>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	43db      	mvns	r3, r3
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4013      	ands	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004246:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <HAL_GPIO_Init+0x300>)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800424c:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_GPIO_Init+0x300>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	43db      	mvns	r3, r3
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4013      	ands	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HAL_GPIO_Init+0x300>)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004276:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_GPIO_Init+0x300>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	43db      	mvns	r3, r3
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4013      	ands	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800429a:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <HAL_GPIO_Init+0x300>)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	3301      	adds	r3, #1
 80042a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f47f ae9d 	bne.w	8003ff0 <HAL_GPIO_Init+0x10>
  }
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40010000 	.word	0x40010000
 80042cc:	48000400 	.word	0x48000400
 80042d0:	48000800 	.word	0x48000800
 80042d4:	48000c00 	.word	0x48000c00
 80042d8:	48001000 	.word	0x48001000
 80042dc:	48001400 	.word	0x48001400
 80042e0:	40010400 	.word	0x40010400

080042e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
 80042f0:	4613      	mov	r3, r2
 80042f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042f4:	787b      	ldrb	r3, [r7, #1]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004300:	e002      	b.n	8004308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d141      	bne.n	80043a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004322:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d131      	bne.n	8004394 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004330:	4b47      	ldr	r3, [pc, #284]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004336:	4a46      	ldr	r2, [pc, #280]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004340:	4b43      	ldr	r3, [pc, #268]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004348:	4a41      	ldr	r2, [pc, #260]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004350:	4b40      	ldr	r3, [pc, #256]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2232      	movs	r2, #50	; 0x32
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	4a3f      	ldr	r2, [pc, #252]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	0c9b      	lsrs	r3, r3, #18
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004366:	e002      	b.n	800436e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3b01      	subs	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800436e:	4b38      	ldr	r3, [pc, #224]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d102      	bne.n	8004382 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f2      	bne.n	8004368 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004382:	4b33      	ldr	r3, [pc, #204]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	d158      	bne.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e057      	b.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004394:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439a:	4a2d      	ldr	r2, [pc, #180]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043a4:	e04d      	b.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ac:	d141      	bne.n	8004432 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d131      	bne.n	8004420 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c2:	4a23      	ldr	r2, [pc, #140]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043cc:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043d4:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043dc:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2232      	movs	r2, #50	; 0x32
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	0c9b      	lsrs	r3, r3, #18
 80043ee:	3301      	adds	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f2:	e002      	b.n	80043fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d102      	bne.n	800440e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f2      	bne.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441a:	d112      	bne.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e011      	b.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004430:	e007      	b.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800443a:	4a05      	ldr	r2, [pc, #20]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004440:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40007000 	.word	0x40007000
 8004454:	20000000 	.word	0x20000000
 8004458:	431bde83 	.word	0x431bde83

0800445c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800446a:	6093      	str	r3, [r2, #8]
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40007000 	.word	0x40007000

0800447c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e306      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d075      	beq.n	8004586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449a:	4b97      	ldr	r3, [pc, #604]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a4:	4b94      	ldr	r3, [pc, #592]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	d102      	bne.n	80044ba <HAL_RCC_OscConfig+0x3e>
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d002      	beq.n	80044c0 <HAL_RCC_OscConfig+0x44>
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d10b      	bne.n	80044d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c0:	4b8d      	ldr	r3, [pc, #564]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d05b      	beq.n	8004584 <HAL_RCC_OscConfig+0x108>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d157      	bne.n	8004584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e2e1      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e0:	d106      	bne.n	80044f0 <HAL_RCC_OscConfig+0x74>
 80044e2:	4b85      	ldr	r3, [pc, #532]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a84      	ldr	r2, [pc, #528]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e01d      	b.n	800452c <HAL_RCC_OscConfig+0xb0>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x98>
 80044fa:	4b7f      	ldr	r3, [pc, #508]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a7e      	ldr	r2, [pc, #504]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b7c      	ldr	r3, [pc, #496]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7b      	ldr	r2, [pc, #492]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e00b      	b.n	800452c <HAL_RCC_OscConfig+0xb0>
 8004514:	4b78      	ldr	r3, [pc, #480]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a77      	ldr	r2, [pc, #476]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 800451a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	4b75      	ldr	r3, [pc, #468]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a74      	ldr	r2, [pc, #464]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800452a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd fb90 	bl	8001c58 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800453c:	f7fd fb8c 	bl	8001c58 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e2a6      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454e:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0xc0>
 800455a:	e014      	b.n	8004586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fb7c 	bl	8001c58 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004564:	f7fd fb78 	bl	8001c58 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e292      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004576:	4b60      	ldr	r3, [pc, #384]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0xe8>
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d075      	beq.n	800467e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004592:	4b59      	ldr	r3, [pc, #356]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800459c:	4b56      	ldr	r3, [pc, #344]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	d102      	bne.n	80045b2 <HAL_RCC_OscConfig+0x136>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d002      	beq.n	80045b8 <HAL_RCC_OscConfig+0x13c>
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d11f      	bne.n	80045f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b8:	4b4f      	ldr	r3, [pc, #316]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_OscConfig+0x154>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e265      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	4946      	ldr	r1, [pc, #280]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045e4:	4b45      	ldr	r3, [pc, #276]	; (80046fc <HAL_RCC_OscConfig+0x280>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fd fae9 	bl	8001bc0 <HAL_InitTick>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d043      	beq.n	800467c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e251      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d023      	beq.n	8004648 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004600:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a3c      	ldr	r2, [pc, #240]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd fb24 	bl	8001c58 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004614:	f7fd fb20 	bl	8001c58 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e23a      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004626:	4b34      	ldr	r3, [pc, #208]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	061b      	lsls	r3, r3, #24
 8004640:	492d      	ldr	r1, [pc, #180]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	604b      	str	r3, [r1, #4]
 8004646:	e01a      	b.n	800467e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004648:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2a      	ldr	r2, [pc, #168]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 800464e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fd fb00 	bl	8001c58 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465c:	f7fd fafc 	bl	8001c58 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e216      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800466e:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x1e0>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d041      	beq.n	800470e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01c      	beq.n	80046cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004692:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 8004694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004698:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a2:	f7fd fad9 	bl	8001c58 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046aa:	f7fd fad5 	bl	8001c58 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e1ef      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80046be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ef      	beq.n	80046aa <HAL_RCC_OscConfig+0x22e>
 80046ca:	e020      	b.n	800470e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <HAL_RCC_OscConfig+0x27c>)
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046dc:	f7fd fabc 	bl	8001c58 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e2:	e00d      	b.n	8004700 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fd fab8 	bl	8001c58 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d906      	bls.n	8004700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e1d2      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004700:	4b8c      	ldr	r3, [pc, #560]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 8004702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1ea      	bne.n	80046e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80a6 	beq.w	8004868 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471c:	2300      	movs	r3, #0
 800471e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004720:	4b84      	ldr	r3, [pc, #528]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_OscConfig+0x2b4>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x2b6>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	4b7f      	ldr	r3, [pc, #508]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	4a7e      	ldr	r2, [pc, #504]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6593      	str	r3, [r2, #88]	; 0x58
 8004742:	4b7c      	ldr	r3, [pc, #496]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800474e:	2301      	movs	r3, #1
 8004750:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004752:	4b79      	ldr	r3, [pc, #484]	; (8004938 <HAL_RCC_OscConfig+0x4bc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d118      	bne.n	8004790 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800475e:	4b76      	ldr	r3, [pc, #472]	; (8004938 <HAL_RCC_OscConfig+0x4bc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a75      	ldr	r2, [pc, #468]	; (8004938 <HAL_RCC_OscConfig+0x4bc>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476a:	f7fd fa75 	bl	8001c58 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004772:	f7fd fa71 	bl	8001c58 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e18b      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004784:	4b6c      	ldr	r3, [pc, #432]	; (8004938 <HAL_RCC_OscConfig+0x4bc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d108      	bne.n	80047aa <HAL_RCC_OscConfig+0x32e>
 8004798:	4b66      	ldr	r3, [pc, #408]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	4a65      	ldr	r2, [pc, #404]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047a8:	e024      	b.n	80047f4 <HAL_RCC_OscConfig+0x378>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d110      	bne.n	80047d4 <HAL_RCC_OscConfig+0x358>
 80047b2:	4b60      	ldr	r3, [pc, #384]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	4a5e      	ldr	r2, [pc, #376]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047c2:	4b5c      	ldr	r3, [pc, #368]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c8:	4a5a      	ldr	r2, [pc, #360]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d2:	e00f      	b.n	80047f4 <HAL_RCC_OscConfig+0x378>
 80047d4:	4b57      	ldr	r3, [pc, #348]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	4a56      	ldr	r2, [pc, #344]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e4:	4b53      	ldr	r3, [pc, #332]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ea:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80047ec:	f023 0304 	bic.w	r3, r3, #4
 80047f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d016      	beq.n	800482a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fd fa2c 	bl	8001c58 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004802:	e00a      	b.n	800481a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fd fa28 	bl	8001c58 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e140      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481a:	4b46      	ldr	r3, [pc, #280]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ed      	beq.n	8004804 <HAL_RCC_OscConfig+0x388>
 8004828:	e015      	b.n	8004856 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482a:	f7fd fa15 	bl	8001c58 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004830:	e00a      	b.n	8004848 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004832:	f7fd fa11 	bl	8001c58 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004840:	4293      	cmp	r3, r2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e129      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004848:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ed      	bne.n	8004832 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004856:	7ffb      	ldrb	r3, [r7, #31]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d105      	bne.n	8004868 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	4a34      	ldr	r2, [pc, #208]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004866:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d03c      	beq.n	80048ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01c      	beq.n	80048b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800487c:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 800487e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004882:	4a2c      	ldr	r2, [pc, #176]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fd f9e4 	bl	8001c58 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004894:	f7fd f9e0 	bl	8001c58 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0fa      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048a6:	4b23      	ldr	r3, [pc, #140]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80048a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0ef      	beq.n	8004894 <HAL_RCC_OscConfig+0x418>
 80048b4:	e01b      	b.n	80048ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048b6:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80048b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048bc:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c6:	f7fd f9c7 	bl	8001c58 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ce:	f7fd f9c3 	bl	8001c58 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e0dd      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048e0:	4b14      	ldr	r3, [pc, #80]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80048e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1ef      	bne.n	80048ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 80d1 	beq.w	8004a9a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 030c 	and.w	r3, r3, #12
 8004900:	2b0c      	cmp	r3, #12
 8004902:	f000 808b 	beq.w	8004a1c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d15e      	bne.n	80049cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a08      	ldr	r2, [pc, #32]	; (8004934 <HAL_RCC_OscConfig+0x4b8>)
 8004914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fd f99d 	bl	8001c58 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004920:	e00c      	b.n	800493c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004922:	f7fd f999 	bl	8001c58 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d905      	bls.n	800493c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e0b3      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
 8004934:	40021000 	.word	0x40021000
 8004938:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800493c:	4b59      	ldr	r3, [pc, #356]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1ec      	bne.n	8004922 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004948:	4b56      	ldr	r3, [pc, #344]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	4b56      	ldr	r3, [pc, #344]	; (8004aa8 <HAL_RCC_OscConfig+0x62c>)
 800494e:	4013      	ands	r3, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6a11      	ldr	r1, [r2, #32]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004958:	3a01      	subs	r2, #1
 800495a:	0112      	lsls	r2, r2, #4
 800495c:	4311      	orrs	r1, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004962:	0212      	lsls	r2, r2, #8
 8004964:	4311      	orrs	r1, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800496a:	0852      	lsrs	r2, r2, #1
 800496c:	3a01      	subs	r2, #1
 800496e:	0552      	lsls	r2, r2, #21
 8004970:	4311      	orrs	r1, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004976:	0852      	lsrs	r2, r2, #1
 8004978:	3a01      	subs	r2, #1
 800497a:	0652      	lsls	r2, r2, #25
 800497c:	4311      	orrs	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004982:	06d2      	lsls	r2, r2, #27
 8004984:	430a      	orrs	r2, r1
 8004986:	4947      	ldr	r1, [pc, #284]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 8004988:	4313      	orrs	r3, r2
 800498a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498c:	4b45      	ldr	r3, [pc, #276]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a44      	ldr	r2, [pc, #272]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 8004992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004996:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004998:	4b42      	ldr	r3, [pc, #264]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a41      	ldr	r2, [pc, #260]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fd f958 	bl	8001c58 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fd f954 	bl	8001c58 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e06e      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049be:	4b39      	ldr	r3, [pc, #228]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x530>
 80049ca:	e066      	b.n	8004a9a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049cc:	4b35      	ldr	r3, [pc, #212]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a34      	ldr	r2, [pc, #208]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 80049d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80049d8:	4b32      	ldr	r3, [pc, #200]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a31      	ldr	r2, [pc, #196]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049e4:	4b2f      	ldr	r3, [pc, #188]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a2e      	ldr	r2, [pc, #184]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 80049ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fd f930 	bl	8001c58 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fc:	f7fd f92c 	bl	8001c58 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e046      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0e:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x580>
 8004a1a:	e03e      	b.n	8004a9a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e039      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a28:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_RCC_OscConfig+0x628>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0203 	and.w	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d12c      	bne.n	8004a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	3b01      	subs	r3, #1
 8004a48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d123      	bne.n	8004a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d11b      	bne.n	8004a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d113      	bne.n	8004a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d109      	bne.n	8004a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	019f800c 	.word	0x019f800c

08004aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e11e      	b.n	8004d02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b91      	ldr	r3, [pc, #580]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d910      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b8e      	ldr	r3, [pc, #568]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 020f 	bic.w	r2, r3, #15
 8004ada:	498c      	ldr	r1, [pc, #560]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae2:	4b8a      	ldr	r3, [pc, #552]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e106      	b.n	8004d02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d073      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d129      	bne.n	8004b5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b08:	4b81      	ldr	r3, [pc, #516]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0f4      	b.n	8004d02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b18:	f000 f966 	bl	8004de8 <RCC_GetSysClockFreqFromPLLSource>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4a7c      	ldr	r2, [pc, #496]	; (8004d14 <HAL_RCC_ClockConfig+0x268>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d93f      	bls.n	8004ba6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b26:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d033      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d12f      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b46:	4b72      	ldr	r3, [pc, #456]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b4e:	4a70      	ldr	r2, [pc, #448]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	e024      	b.n	8004ba6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d107      	bne.n	8004b74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b64:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0c6      	b.n	8004d02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b74:	4b66      	ldr	r3, [pc, #408]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0be      	b.n	8004d02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b84:	f000 f8ce 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004b88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4a61      	ldr	r2, [pc, #388]	; (8004d14 <HAL_RCC_ClockConfig+0x268>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d909      	bls.n	8004ba6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b92:	4b5f      	ldr	r3, [pc, #380]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b9a:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ba6:	4b5a      	ldr	r3, [pc, #360]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f023 0203 	bic.w	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4957      	ldr	r1, [pc, #348]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb8:	f7fd f84e 	bl	8001c58 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc0:	f7fd f84a 	bl	8001c58 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e095      	b.n	8004d02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	4b4e      	ldr	r3, [pc, #312]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 020c 	and.w	r2, r3, #12
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d1eb      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d023      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c00:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4a42      	ldr	r2, [pc, #264]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c18:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c20:	4a3b      	ldr	r2, [pc, #236]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004c22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4936      	ldr	r1, [pc, #216]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	d105      	bne.n	8004c4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c42:	4b33      	ldr	r3, [pc, #204]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a32      	ldr	r2, [pc, #200]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c4e:	4b2f      	ldr	r3, [pc, #188]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d21d      	bcs.n	8004c98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f023 020f 	bic.w	r2, r3, #15
 8004c64:	4929      	ldr	r1, [pc, #164]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c6c:	f7fc fff4 	bl	8001c58 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c74:	f7fc fff0 	bl	8001c58 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e03b      	b.n	8004d02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <HAL_RCC_ClockConfig+0x260>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1ed      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4917      	ldr	r1, [pc, #92]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	490f      	ldr	r1, [pc, #60]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cd6:	f000 f825 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <HAL_RCC_ClockConfig+0x264>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	490c      	ldr	r1, [pc, #48]	; (8004d18 <HAL_RCC_ClockConfig+0x26c>)
 8004ce8:	5ccb      	ldrb	r3, [r1, r3]
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_RCC_ClockConfig+0x270>)
 8004cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <HAL_RCC_ClockConfig+0x274>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fc ff60 	bl	8001bc0 <HAL_InitTick>
 8004d00:	4603      	mov	r3, r0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40022000 	.word	0x40022000
 8004d10:	40021000 	.word	0x40021000
 8004d14:	04c4b400 	.word	0x04c4b400
 8004d18:	08007cb0 	.word	0x08007cb0
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	20000004 	.word	0x20000004

08004d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d2a:	4b2c      	ldr	r3, [pc, #176]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d36:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e047      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d3c:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d102      	bne.n	8004d4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d48:	4b26      	ldr	r3, [pc, #152]	; (8004de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	e03e      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d4e:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d136      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d64:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d10c      	bne.n	8004d92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d78:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	4a16      	ldr	r2, [pc, #88]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d82:	68d2      	ldr	r2, [r2, #12]
 8004d84:	0a12      	lsrs	r2, r2, #8
 8004d86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	617b      	str	r3, [r7, #20]
      break;
 8004d90:	e00c      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d92:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	4a10      	ldr	r2, [pc, #64]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d9c:	68d2      	ldr	r2, [r2, #12]
 8004d9e:	0a12      	lsrs	r2, r2, #8
 8004da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	617b      	str	r3, [r7, #20]
      break;
 8004daa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	0e5b      	lsrs	r3, r3, #25
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	3301      	adds	r3, #1
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e001      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004dcc:	693b      	ldr	r3, [r7, #16]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	00f42400 	.word	0x00f42400
 8004de4:	007a1200 	.word	0x007a1200

08004de8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dee:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df8:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d10c      	bne.n	8004e26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e0c:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e16:	68d2      	ldr	r2, [r2, #12]
 8004e18:	0a12      	lsrs	r2, r2, #8
 8004e1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	617b      	str	r3, [r7, #20]
    break;
 8004e24:	e00c      	b.n	8004e40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e26:	4a12      	ldr	r2, [pc, #72]	; (8004e70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	4a0e      	ldr	r2, [pc, #56]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e30:	68d2      	ldr	r2, [r2, #12]
 8004e32:	0a12      	lsrs	r2, r2, #8
 8004e34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e38:	fb02 f303 	mul.w	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
    break;
 8004e3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	0e5b      	lsrs	r3, r3, #25
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e5a:	687b      	ldr	r3, [r7, #4]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	007a1200 	.word	0x007a1200
 8004e70:	00f42400 	.word	0x00f42400

08004e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e80:	2300      	movs	r3, #0
 8004e82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8098 	beq.w	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e92:	2300      	movs	r3, #0
 8004e94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10d      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	4b40      	ldr	r3, [pc, #256]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	4a3f      	ldr	r2, [pc, #252]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eac:	6593      	str	r3, [r2, #88]	; 0x58
 8004eae:	4b3d      	ldr	r3, [pc, #244]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ebe:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a39      	ldr	r2, [pc, #228]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eca:	f7fc fec5 	bl	8001c58 <HAL_GetTick>
 8004ece:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed0:	e009      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed2:	f7fc fec1 	bl	8001c58 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d902      	bls.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	74fb      	strb	r3, [r7, #19]
        break;
 8004ee4:	e005      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee6:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ef      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ef2:	7cfb      	ldrb	r3, [r7, #19]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d159      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01e      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d019      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f14:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f20:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f30:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	4a1b      	ldr	r2, [pc, #108]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fc fe81 	bl	8001c58 <HAL_GetTick>
 8004f56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f58:	e00b      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5a:	f7fc fe7d 	bl	8001c58 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d902      	bls.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f70:	e006      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ec      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f9e:	7cfb      	ldrb	r3, [r7, #19]
 8004fa0:	74bb      	strb	r3, [r7, #18]
 8004fa2:	e005      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb0:	7c7b      	ldrb	r3, [r7, #17]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4ba7      	ldr	r3, [pc, #668]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	4aa6      	ldr	r2, [pc, #664]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fce:	4ba1      	ldr	r3, [pc, #644]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	f023 0203 	bic.w	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	499d      	ldr	r1, [pc, #628]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff0:	4b98      	ldr	r3, [pc, #608]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f023 020c 	bic.w	r2, r3, #12
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4995      	ldr	r1, [pc, #596]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005012:	4b90      	ldr	r3, [pc, #576]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	498c      	ldr	r1, [pc, #560]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005034:	4b87      	ldr	r3, [pc, #540]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	4984      	ldr	r1, [pc, #528]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005056:	4b7f      	ldr	r3, [pc, #508]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	497b      	ldr	r1, [pc, #492]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005078:	4b76      	ldr	r3, [pc, #472]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	4973      	ldr	r1, [pc, #460]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509a:	4b6e      	ldr	r3, [pc, #440]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	496a      	ldr	r1, [pc, #424]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050bc:	4b65      	ldr	r3, [pc, #404]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	4962      	ldr	r1, [pc, #392]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050de:	4b5d      	ldr	r3, [pc, #372]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	4959      	ldr	r1, [pc, #356]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005100:	4b54      	ldr	r3, [pc, #336]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005106:	f023 0203 	bic.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	4951      	ldr	r1, [pc, #324]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005122:	4b4c      	ldr	r3, [pc, #304]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	4948      	ldr	r1, [pc, #288]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005140:	2b00      	cmp	r3, #0
 8005142:	d015      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005144:	4b43      	ldr	r3, [pc, #268]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4940      	ldr	r1, [pc, #256]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005162:	d105      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005164:	4b3b      	ldr	r3, [pc, #236]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4a3a      	ldr	r2, [pc, #232]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800516e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005178:	2b00      	cmp	r3, #0
 800517a:	d015      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800517c:	4b35      	ldr	r3, [pc, #212]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518a:	4932      	ldr	r1, [pc, #200]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800519a:	d105      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800519c:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d015      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051b4:	4b27      	ldr	r3, [pc, #156]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	4924      	ldr	r1, [pc, #144]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051d2:	d105      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d4:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d015      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	4916      	ldr	r1, [pc, #88]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520a:	d105      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a10      	ldr	r2, [pc, #64]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005216:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d019      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	4908      	ldr	r1, [pc, #32]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005242:	d109      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005244:	4b03      	ldr	r3, [pc, #12]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4a02      	ldr	r2, [pc, #8]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800524e:	60d3      	str	r3, [r2, #12]
 8005250:	e002      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005264:	4b29      	ldr	r3, [pc, #164]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	4926      	ldr	r1, [pc, #152]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005282:	d105      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005284:	4b21      	ldr	r3, [pc, #132]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a20      	ldr	r2, [pc, #128]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800528a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d015      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052aa:	4918      	ldr	r1, [pc, #96]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ba:	d105      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052bc:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4a12      	ldr	r2, [pc, #72]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d015      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052d4:	4b0d      	ldr	r3, [pc, #52]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e2:	490a      	ldr	r1, [pc, #40]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052f2:	d105      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a04      	ldr	r2, [pc, #16]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005300:	7cbb      	ldrb	r3, [r7, #18]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000

08005310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e09d      	b.n	800545e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d108      	bne.n	800533c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005332:	d009      	beq.n	8005348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	61da      	str	r2, [r3, #28]
 800533a:	e005      	b.n	8005348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fc faf8 	bl	8001958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005388:	d902      	bls.n	8005390 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e002      	b.n	8005396 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005394:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800539e:	d007      	beq.n	80053b0 <HAL_SPI_Init+0xa0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	ea42 0103 	orr.w	r1, r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	f003 0204 	and.w	r2, r3, #4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800542c:	ea42 0103 	orr.w	r1, r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800544c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e049      	b.n	800550c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fc faa7 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f000 fcc1 	bl	8005e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e049      	b.n	80055ba <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f841 	bl	80055c2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f000 fc6a 	bl	8005e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e049      	b.n	800567c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f841 	bl	8005684 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f000 fc09 	bl	8005e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d122      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d11b      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0202 	mvn.w	r2, #2
 80056c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fb88 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 80056e0:	e005      	b.n	80056ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fb7a 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fb8b 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d122      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b04      	cmp	r3, #4
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0204 	mvn.w	r2, #4
 8005718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fb5e 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 8005734:	e005      	b.n	8005742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fb50 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fb61 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b08      	cmp	r3, #8
 8005754:	d122      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b08      	cmp	r3, #8
 8005762:	d11b      	bne.n	800579c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0208 	mvn.w	r2, #8
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2204      	movs	r2, #4
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fb34 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fb26 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fb37 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0210 	mvn.w	r2, #16
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2208      	movs	r2, #8
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fb0a 	bl	8005df0 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fafc 	bl	8005ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fb0d 	bl	8005e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10e      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d107      	bne.n	800581c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0201 	mvn.w	r2, #1
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fb fa42 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005826:	2b80      	cmp	r3, #128	; 0x80
 8005828:	d10e      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d107      	bne.n	8005848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 f92a 	bl	8006a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005856:	d10e      	bne.n	8005876 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d107      	bne.n	8005876 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f91d 	bl	8006ab0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d10e      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d107      	bne.n	80058a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800589a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fabb 	bl	8005e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d10e      	bne.n	80058ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f06f 0220 	mvn.w	r2, #32
 80058c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 f8dd 	bl	8006a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058dc:	d10f      	bne.n	80058fe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ec:	d107      	bne.n	80058fe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80058f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 f8e3 	bl	8006ac4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800590c:	d10f      	bne.n	800592e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800591c:	d107      	bne.n	800592e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 f8d5 	bl	8006ad8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800593c:	d10f      	bne.n	800595e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800594c:	d107      	bne.n	800595e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 f8c7 	bl	8006aec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800596c:	d10f      	bne.n	800598e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005978:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800597c:	d107      	bne.n	800598e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 f8b9 	bl	8006b00 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e066      	b.n	8005a84 <HAL_TIM_OC_ConfigChannel+0xec>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b14      	cmp	r3, #20
 80059c2:	d857      	bhi.n	8005a74 <HAL_TIM_OC_ConfigChannel+0xdc>
 80059c4:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	08005a75 	.word	0x08005a75
 80059d4:	08005a75 	.word	0x08005a75
 80059d8:	08005a75 	.word	0x08005a75
 80059dc:	08005a2f 	.word	0x08005a2f
 80059e0:	08005a75 	.word	0x08005a75
 80059e4:	08005a75 	.word	0x08005a75
 80059e8:	08005a75 	.word	0x08005a75
 80059ec:	08005a3d 	.word	0x08005a3d
 80059f0:	08005a75 	.word	0x08005a75
 80059f4:	08005a75 	.word	0x08005a75
 80059f8:	08005a75 	.word	0x08005a75
 80059fc:	08005a4b 	.word	0x08005a4b
 8005a00:	08005a75 	.word	0x08005a75
 8005a04:	08005a75 	.word	0x08005a75
 8005a08:	08005a75 	.word	0x08005a75
 8005a0c:	08005a59 	.word	0x08005a59
 8005a10:	08005a75 	.word	0x08005a75
 8005a14:	08005a75 	.word	0x08005a75
 8005a18:	08005a75 	.word	0x08005a75
 8005a1c:	08005a67 	.word	0x08005a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 faa8 	bl	8005f7c <TIM_OC1_SetConfig>
      break;
 8005a2c:	e025      	b.n	8005a7a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fb3b 	bl	80060b0 <TIM_OC2_SetConfig>
      break;
 8005a3a:	e01e      	b.n	8005a7a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fbc8 	bl	80061d8 <TIM_OC3_SetConfig>
      break;
 8005a48:	e017      	b.n	8005a7a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fc53 	bl	80062fc <TIM_OC4_SetConfig>
      break;
 8005a56:	e010      	b.n	8005a7a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fce0 	bl	8006424 <TIM_OC5_SetConfig>
      break;
 8005a64:	e009      	b.n	8005a7a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fd43 	bl	80064f8 <TIM_OC6_SetConfig>
      break;
 8005a72:	e002      	b.n	8005a7a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	75fb      	strb	r3, [r7, #23]
      break;
 8005a78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_TIM_IC_ConfigChannel+0x1e>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e088      	b.n	8005bbc <HAL_TIM_IC_ConfigChannel+0x130>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f000 fd82 	bl	80065d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 020c 	bic.w	r2, r2, #12
 8005ada:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	619a      	str	r2, [r3, #24]
 8005aee:	e060      	b.n	8005bb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d11c      	bne.n	8005b30 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6819      	ldr	r1, [r3, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f000 fe06 	bl	8006716 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6999      	ldr	r1, [r3, #24]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	021a      	lsls	r2, r3, #8
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	619a      	str	r2, [r3, #24]
 8005b2e:	e040      	b.n	8005bb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d11b      	bne.n	8005b6e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6819      	ldr	r1, [r3, #0]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f000 fe53 	bl	80067f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 020c 	bic.w	r2, r2, #12
 8005b58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69d9      	ldr	r1, [r3, #28]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	61da      	str	r2, [r3, #28]
 8005b6c:	e021      	b.n	8005bb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b0c      	cmp	r3, #12
 8005b72:	d11c      	bne.n	8005bae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6819      	ldr	r1, [r3, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f000 fe70 	bl	8006868 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69d9      	ldr	r1, [r3, #28]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	61da      	str	r2, [r3, #28]
 8005bac:	e001      	b.n	8005bb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e0ee      	b.n	8005dbe <HAL_TIM_ConfigClockSource+0x1fa>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005bfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a6b      	ldr	r2, [pc, #428]	; (8005dc8 <HAL_TIM_ConfigClockSource+0x204>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f000 80b9 	beq.w	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c20:	4a69      	ldr	r2, [pc, #420]	; (8005dc8 <HAL_TIM_ConfigClockSource+0x204>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	f200 80be 	bhi.w	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c28:	4a68      	ldr	r2, [pc, #416]	; (8005dcc <HAL_TIM_ConfigClockSource+0x208>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	f000 80b1 	beq.w	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c30:	4a66      	ldr	r2, [pc, #408]	; (8005dcc <HAL_TIM_ConfigClockSource+0x208>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f200 80b6 	bhi.w	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c38:	4a65      	ldr	r2, [pc, #404]	; (8005dd0 <HAL_TIM_ConfigClockSource+0x20c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	f000 80a9 	beq.w	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c40:	4a63      	ldr	r2, [pc, #396]	; (8005dd0 <HAL_TIM_ConfigClockSource+0x20c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f200 80ae 	bhi.w	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c48:	4a62      	ldr	r2, [pc, #392]	; (8005dd4 <HAL_TIM_ConfigClockSource+0x210>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	f000 80a1 	beq.w	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c50:	4a60      	ldr	r2, [pc, #384]	; (8005dd4 <HAL_TIM_ConfigClockSource+0x210>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	f200 80a6 	bhi.w	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c58:	4a5f      	ldr	r2, [pc, #380]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x214>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	f000 8099 	beq.w	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c60:	4a5d      	ldr	r2, [pc, #372]	; (8005dd8 <HAL_TIM_ConfigClockSource+0x214>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	f200 809e 	bhi.w	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c6c:	f000 8091 	beq.w	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c74:	f200 8096 	bhi.w	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c7c:	f000 8089 	beq.w	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c84:	f200 808e 	bhi.w	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8c:	d03e      	beq.n	8005d0c <HAL_TIM_ConfigClockSource+0x148>
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c92:	f200 8087 	bhi.w	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9a:	f000 8086 	beq.w	8005daa <HAL_TIM_ConfigClockSource+0x1e6>
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca2:	d87f      	bhi.n	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005ca4:	2b70      	cmp	r3, #112	; 0x70
 8005ca6:	d01a      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x11a>
 8005ca8:	2b70      	cmp	r3, #112	; 0x70
 8005caa:	d87b      	bhi.n	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cac:	2b60      	cmp	r3, #96	; 0x60
 8005cae:	d050      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x18e>
 8005cb0:	2b60      	cmp	r3, #96	; 0x60
 8005cb2:	d877      	bhi.n	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cb4:	2b50      	cmp	r3, #80	; 0x50
 8005cb6:	d03c      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x16e>
 8005cb8:	2b50      	cmp	r3, #80	; 0x50
 8005cba:	d873      	bhi.n	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d058      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x1ae>
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d86f      	bhi.n	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cc4:	2b30      	cmp	r3, #48	; 0x30
 8005cc6:	d064      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005cc8:	2b30      	cmp	r3, #48	; 0x30
 8005cca:	d86b      	bhi.n	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d060      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d867      	bhi.n	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d05c      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d05a      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x1ce>
 8005cdc:	e062      	b.n	8005da4 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	6899      	ldr	r1, [r3, #8]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f000 fe15 	bl	800691c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	609a      	str	r2, [r3, #8]
      break;
 8005d0a:	e04f      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	6899      	ldr	r1, [r3, #8]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f000 fdfe 	bl	800691c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d2e:	609a      	str	r2, [r3, #8]
      break;
 8005d30:	e03c      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 fcba 	bl	80066b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2150      	movs	r1, #80	; 0x50
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fdc9 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 8005d50:	e02c      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 fd16 	bl	8006790 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2160      	movs	r1, #96	; 0x60
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fdb9 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e01c      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f000 fc9a 	bl	80066b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2140      	movs	r1, #64	; 0x40
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fda9 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 8005d90:	e00c      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f000 fda0 	bl	80068e2 <TIM_ITRx_SetConfig>
      break;
 8005da2:	e003      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	73fb      	strb	r3, [r7, #15]
      break;
 8005da8:	e000      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8005daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	00100070 	.word	0x00100070
 8005dcc:	00100050 	.word	0x00100050
 8005dd0:	00100040 	.word	0x00100040
 8005dd4:	00100030 	.word	0x00100030
 8005dd8:	00100020 	.word	0x00100020

08005ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a46      	ldr	r2, [pc, #280]	; (8005f58 <TIM_Base_SetConfig+0x12c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d017      	beq.n	8005e74 <TIM_Base_SetConfig+0x48>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4a:	d013      	beq.n	8005e74 <TIM_Base_SetConfig+0x48>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a43      	ldr	r2, [pc, #268]	; (8005f5c <TIM_Base_SetConfig+0x130>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00f      	beq.n	8005e74 <TIM_Base_SetConfig+0x48>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a42      	ldr	r2, [pc, #264]	; (8005f60 <TIM_Base_SetConfig+0x134>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00b      	beq.n	8005e74 <TIM_Base_SetConfig+0x48>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a41      	ldr	r2, [pc, #260]	; (8005f64 <TIM_Base_SetConfig+0x138>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d007      	beq.n	8005e74 <TIM_Base_SetConfig+0x48>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a40      	ldr	r2, [pc, #256]	; (8005f68 <TIM_Base_SetConfig+0x13c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_Base_SetConfig+0x48>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a3f      	ldr	r2, [pc, #252]	; (8005f6c <TIM_Base_SetConfig+0x140>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d108      	bne.n	8005e86 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a33      	ldr	r2, [pc, #204]	; (8005f58 <TIM_Base_SetConfig+0x12c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d023      	beq.n	8005ed6 <TIM_Base_SetConfig+0xaa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d01f      	beq.n	8005ed6 <TIM_Base_SetConfig+0xaa>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a30      	ldr	r2, [pc, #192]	; (8005f5c <TIM_Base_SetConfig+0x130>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d01b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xaa>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a2f      	ldr	r2, [pc, #188]	; (8005f60 <TIM_Base_SetConfig+0x134>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d017      	beq.n	8005ed6 <TIM_Base_SetConfig+0xaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2e      	ldr	r2, [pc, #184]	; (8005f64 <TIM_Base_SetConfig+0x138>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <TIM_Base_SetConfig+0xaa>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a2d      	ldr	r2, [pc, #180]	; (8005f68 <TIM_Base_SetConfig+0x13c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00f      	beq.n	8005ed6 <TIM_Base_SetConfig+0xaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a2d      	ldr	r2, [pc, #180]	; (8005f70 <TIM_Base_SetConfig+0x144>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_Base_SetConfig+0xaa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a2c      	ldr	r2, [pc, #176]	; (8005f74 <TIM_Base_SetConfig+0x148>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d007      	beq.n	8005ed6 <TIM_Base_SetConfig+0xaa>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a2b      	ldr	r2, [pc, #172]	; (8005f78 <TIM_Base_SetConfig+0x14c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_Base_SetConfig+0xaa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <TIM_Base_SetConfig+0x140>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d108      	bne.n	8005ee8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a12      	ldr	r2, [pc, #72]	; (8005f58 <TIM_Base_SetConfig+0x12c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <TIM_Base_SetConfig+0x110>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a14      	ldr	r2, [pc, #80]	; (8005f68 <TIM_Base_SetConfig+0x13c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00f      	beq.n	8005f3c <TIM_Base_SetConfig+0x110>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <TIM_Base_SetConfig+0x144>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <TIM_Base_SetConfig+0x110>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a13      	ldr	r2, [pc, #76]	; (8005f74 <TIM_Base_SetConfig+0x148>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_Base_SetConfig+0x110>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a12      	ldr	r2, [pc, #72]	; (8005f78 <TIM_Base_SetConfig+0x14c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_Base_SetConfig+0x110>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a0d      	ldr	r2, [pc, #52]	; (8005f6c <TIM_Base_SetConfig+0x140>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d103      	bne.n	8005f44 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	615a      	str	r2, [r3, #20]
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40013400 	.word	0x40013400
 8005f6c:	40015000 	.word	0x40015000
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800

08005f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 0302 	bic.w	r3, r3, #2
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a30      	ldr	r2, [pc, #192]	; (8006098 <TIM_OC1_SetConfig+0x11c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <TIM_OC1_SetConfig+0x88>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a2f      	ldr	r2, [pc, #188]	; (800609c <TIM_OC1_SetConfig+0x120>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00f      	beq.n	8006004 <TIM_OC1_SetConfig+0x88>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a2e      	ldr	r2, [pc, #184]	; (80060a0 <TIM_OC1_SetConfig+0x124>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00b      	beq.n	8006004 <TIM_OC1_SetConfig+0x88>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a2d      	ldr	r2, [pc, #180]	; (80060a4 <TIM_OC1_SetConfig+0x128>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_OC1_SetConfig+0x88>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <TIM_OC1_SetConfig+0x12c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_OC1_SetConfig+0x88>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a2b      	ldr	r2, [pc, #172]	; (80060ac <TIM_OC1_SetConfig+0x130>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d10c      	bne.n	800601e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f023 0308 	bic.w	r3, r3, #8
 800600a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <TIM_OC1_SetConfig+0x11c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <TIM_OC1_SetConfig+0xd2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a1c      	ldr	r2, [pc, #112]	; (800609c <TIM_OC1_SetConfig+0x120>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00f      	beq.n	800604e <TIM_OC1_SetConfig+0xd2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a1b      	ldr	r2, [pc, #108]	; (80060a0 <TIM_OC1_SetConfig+0x124>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00b      	beq.n	800604e <TIM_OC1_SetConfig+0xd2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a1a      	ldr	r2, [pc, #104]	; (80060a4 <TIM_OC1_SetConfig+0x128>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_OC1_SetConfig+0xd2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a19      	ldr	r2, [pc, #100]	; (80060a8 <TIM_OC1_SetConfig+0x12c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC1_SetConfig+0xd2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a18      	ldr	r2, [pc, #96]	; (80060ac <TIM_OC1_SetConfig+0x130>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d111      	bne.n	8006072 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800605c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40013400 	.word	0x40013400
 80060a0:	40014000 	.word	0x40014000
 80060a4:	40014400 	.word	0x40014400
 80060a8:	40014800 	.word	0x40014800
 80060ac:	40015000 	.word	0x40015000

080060b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f023 0210 	bic.w	r2, r3, #16
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0320 	bic.w	r3, r3, #32
 80060fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a2c      	ldr	r2, [pc, #176]	; (80061c0 <TIM_OC2_SetConfig+0x110>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d007      	beq.n	8006124 <TIM_OC2_SetConfig+0x74>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a2b      	ldr	r2, [pc, #172]	; (80061c4 <TIM_OC2_SetConfig+0x114>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_OC2_SetConfig+0x74>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a2a      	ldr	r2, [pc, #168]	; (80061c8 <TIM_OC2_SetConfig+0x118>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d10d      	bne.n	8006140 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800612a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <TIM_OC2_SetConfig+0x110>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <TIM_OC2_SetConfig+0xc0>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <TIM_OC2_SetConfig+0x114>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00f      	beq.n	8006170 <TIM_OC2_SetConfig+0xc0>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <TIM_OC2_SetConfig+0x11c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00b      	beq.n	8006170 <TIM_OC2_SetConfig+0xc0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <TIM_OC2_SetConfig+0x120>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <TIM_OC2_SetConfig+0xc0>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a1c      	ldr	r2, [pc, #112]	; (80061d4 <TIM_OC2_SetConfig+0x124>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_OC2_SetConfig+0xc0>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a17      	ldr	r2, [pc, #92]	; (80061c8 <TIM_OC2_SetConfig+0x118>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d113      	bne.n	8006198 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800617e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40013400 	.word	0x40013400
 80061c8:	40015000 	.word	0x40015000
 80061cc:	40014000 	.word	0x40014000
 80061d0:	40014400 	.word	0x40014400
 80061d4:	40014800 	.word	0x40014800

080061d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2b      	ldr	r2, [pc, #172]	; (80062e4 <TIM_OC3_SetConfig+0x10c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d007      	beq.n	800624a <TIM_OC3_SetConfig+0x72>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2a      	ldr	r2, [pc, #168]	; (80062e8 <TIM_OC3_SetConfig+0x110>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d003      	beq.n	800624a <TIM_OC3_SetConfig+0x72>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a29      	ldr	r2, [pc, #164]	; (80062ec <TIM_OC3_SetConfig+0x114>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d10d      	bne.n	8006266 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a1e      	ldr	r2, [pc, #120]	; (80062e4 <TIM_OC3_SetConfig+0x10c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <TIM_OC3_SetConfig+0xbe>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <TIM_OC3_SetConfig+0x110>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00f      	beq.n	8006296 <TIM_OC3_SetConfig+0xbe>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <TIM_OC3_SetConfig+0x118>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00b      	beq.n	8006296 <TIM_OC3_SetConfig+0xbe>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <TIM_OC3_SetConfig+0x11c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <TIM_OC3_SetConfig+0xbe>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1b      	ldr	r2, [pc, #108]	; (80062f8 <TIM_OC3_SetConfig+0x120>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_OC3_SetConfig+0xbe>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a16      	ldr	r2, [pc, #88]	; (80062ec <TIM_OC3_SetConfig+0x114>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d113      	bne.n	80062be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800629c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	621a      	str	r2, [r3, #32]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40015000 	.word	0x40015000
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800

080062fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800634a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	031b      	lsls	r3, r3, #12
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a2c      	ldr	r2, [pc, #176]	; (800640c <TIM_OC4_SetConfig+0x110>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d007      	beq.n	8006370 <TIM_OC4_SetConfig+0x74>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a2b      	ldr	r2, [pc, #172]	; (8006410 <TIM_OC4_SetConfig+0x114>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_OC4_SetConfig+0x74>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a2a      	ldr	r2, [pc, #168]	; (8006414 <TIM_OC4_SetConfig+0x118>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10d      	bne.n	800638c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	031b      	lsls	r3, r3, #12
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a1f      	ldr	r2, [pc, #124]	; (800640c <TIM_OC4_SetConfig+0x110>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <TIM_OC4_SetConfig+0xc0>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <TIM_OC4_SetConfig+0x114>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00f      	beq.n	80063bc <TIM_OC4_SetConfig+0xc0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <TIM_OC4_SetConfig+0x11c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00b      	beq.n	80063bc <TIM_OC4_SetConfig+0xc0>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a1d      	ldr	r2, [pc, #116]	; (800641c <TIM_OC4_SetConfig+0x120>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <TIM_OC4_SetConfig+0xc0>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a1c      	ldr	r2, [pc, #112]	; (8006420 <TIM_OC4_SetConfig+0x124>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_OC4_SetConfig+0xc0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a17      	ldr	r2, [pc, #92]	; (8006414 <TIM_OC4_SetConfig+0x118>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d113      	bne.n	80063e4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	019b      	lsls	r3, r3, #6
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	019b      	lsls	r3, r3, #6
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	621a      	str	r2, [r3, #32]
}
 80063fe:	bf00      	nop
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40013400 	.word	0x40013400
 8006414:	40015000 	.word	0x40015000
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400
 8006420:	40014800 	.word	0x40014800

08006424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006468:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a19      	ldr	r2, [pc, #100]	; (80064e0 <TIM_OC5_SetConfig+0xbc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <TIM_OC5_SetConfig+0x82>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a18      	ldr	r2, [pc, #96]	; (80064e4 <TIM_OC5_SetConfig+0xc0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00f      	beq.n	80064a6 <TIM_OC5_SetConfig+0x82>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <TIM_OC5_SetConfig+0xc4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00b      	beq.n	80064a6 <TIM_OC5_SetConfig+0x82>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a16      	ldr	r2, [pc, #88]	; (80064ec <TIM_OC5_SetConfig+0xc8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <TIM_OC5_SetConfig+0x82>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a15      	ldr	r2, [pc, #84]	; (80064f0 <TIM_OC5_SetConfig+0xcc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_OC5_SetConfig+0x82>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a14      	ldr	r2, [pc, #80]	; (80064f4 <TIM_OC5_SetConfig+0xd0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d109      	bne.n	80064ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	621a      	str	r2, [r3, #32]
}
 80064d4:	bf00      	nop
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40013400 	.word	0x40013400
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40014400 	.word	0x40014400
 80064f0:	40014800 	.word	0x40014800
 80064f4:	40015000 	.word	0x40015000

080064f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800653e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	051b      	lsls	r3, r3, #20
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a1a      	ldr	r2, [pc, #104]	; (80065b8 <TIM_OC6_SetConfig+0xc0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d013      	beq.n	800657c <TIM_OC6_SetConfig+0x84>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a19      	ldr	r2, [pc, #100]	; (80065bc <TIM_OC6_SetConfig+0xc4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00f      	beq.n	800657c <TIM_OC6_SetConfig+0x84>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <TIM_OC6_SetConfig+0xc8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00b      	beq.n	800657c <TIM_OC6_SetConfig+0x84>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a17      	ldr	r2, [pc, #92]	; (80065c4 <TIM_OC6_SetConfig+0xcc>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_OC6_SetConfig+0x84>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <TIM_OC6_SetConfig+0xd0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC6_SetConfig+0x84>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a15      	ldr	r2, [pc, #84]	; (80065cc <TIM_OC6_SetConfig+0xd4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d109      	bne.n	8006590 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40013400 	.word	0x40013400
 80065c0:	40014000 	.word	0x40014000
 80065c4:	40014400 	.word	0x40014400
 80065c8:	40014800 	.word	0x40014800
 80065cc:	40015000 	.word	0x40015000

080065d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f023 0201 	bic.w	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4a28      	ldr	r2, [pc, #160]	; (800669c <TIM_TI1_SetConfig+0xcc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01b      	beq.n	8006636 <TIM_TI1_SetConfig+0x66>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006604:	d017      	beq.n	8006636 <TIM_TI1_SetConfig+0x66>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <TIM_TI1_SetConfig+0xd0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <TIM_TI1_SetConfig+0x66>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a24      	ldr	r2, [pc, #144]	; (80066a4 <TIM_TI1_SetConfig+0xd4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00f      	beq.n	8006636 <TIM_TI1_SetConfig+0x66>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a23      	ldr	r2, [pc, #140]	; (80066a8 <TIM_TI1_SetConfig+0xd8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00b      	beq.n	8006636 <TIM_TI1_SetConfig+0x66>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a22      	ldr	r2, [pc, #136]	; (80066ac <TIM_TI1_SetConfig+0xdc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <TIM_TI1_SetConfig+0x66>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a21      	ldr	r2, [pc, #132]	; (80066b0 <TIM_TI1_SetConfig+0xe0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d003      	beq.n	8006636 <TIM_TI1_SetConfig+0x66>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <TIM_TI1_SetConfig+0xe4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d101      	bne.n	800663a <TIM_TI1_SetConfig+0x6a>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <TIM_TI1_SetConfig+0x6c>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f023 0303 	bic.w	r3, r3, #3
 8006646:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	e003      	b.n	800665a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	b2db      	uxtb	r3, r3
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f023 030a 	bic.w	r3, r3, #10
 8006674:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f003 030a 	and.w	r3, r3, #10
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	621a      	str	r2, [r3, #32]
}
 800668e:	bf00      	nop
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800
 80066a8:	40000c00 	.word	0x40000c00
 80066ac:	40013400 	.word	0x40013400
 80066b0:	40014000 	.word	0x40014000
 80066b4:	40015000 	.word	0x40015000

080066b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f023 0201 	bic.w	r2, r3, #1
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 030a 	bic.w	r3, r3, #10
 80066f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006716:	b480      	push	{r7}
 8006718:	b087      	sub	sp, #28
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f023 0210 	bic.w	r2, r3, #16
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006742:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006754:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	031b      	lsls	r3, r3, #12
 800675a:	b29b      	uxth	r3, r3
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006768:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	621a      	str	r2, [r3, #32]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	f023 0210 	bic.w	r2, r3, #16
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	031b      	lsls	r3, r3, #12
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	621a      	str	r2, [r3, #32]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 0303 	bic.w	r3, r3, #3
 800681c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800682c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	b2db      	uxtb	r3, r3
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006840:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	621a      	str	r2, [r3, #32]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006894:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	031b      	lsls	r3, r3, #12
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80068ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	031b      	lsls	r3, r3, #12
 80068c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80068f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	f043 0307 	orr.w	r3, r3, #7
 8006908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	609a      	str	r2, [r3, #8]
}
 8006910:	bf00      	nop
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	021a      	lsls	r2, r3, #8
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	431a      	orrs	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4313      	orrs	r3, r2
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	609a      	str	r2, [r3, #8]
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006970:	2302      	movs	r3, #2
 8006972:	e074      	b.n	8006a5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a34      	ldr	r2, [pc, #208]	; (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a33      	ldr	r2, [pc, #204]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a31      	ldr	r2, [pc, #196]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d108      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a21      	ldr	r2, [pc, #132]	; (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d022      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f4:	d01d      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d018      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1d      	ldr	r2, [pc, #116]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d013      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00e      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d009      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a18      	ldr	r2, [pc, #96]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d004      	beq.n	8006a32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a11      	ldr	r2, [pc, #68]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d10c      	bne.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40015000 	.word	0x40015000
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800
 8006a80:	40000c00 	.word	0x40000c00
 8006a84:	40014000 	.word	0x40014000

08006a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	0000      	movs	r0, r0
	...

08006b18 <cos>:
 8006b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b1a:	ec53 2b10 	vmov	r2, r3, d0
 8006b1e:	4826      	ldr	r0, [pc, #152]	; (8006bb8 <cos+0xa0>)
 8006b20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b24:	4281      	cmp	r1, r0
 8006b26:	dc06      	bgt.n	8006b36 <cos+0x1e>
 8006b28:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006bb0 <cos+0x98>
 8006b2c:	b005      	add	sp, #20
 8006b2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b32:	f000 b89d 	b.w	8006c70 <__kernel_cos>
 8006b36:	4821      	ldr	r0, [pc, #132]	; (8006bbc <cos+0xa4>)
 8006b38:	4281      	cmp	r1, r0
 8006b3a:	dd09      	ble.n	8006b50 <cos+0x38>
 8006b3c:	ee10 0a10 	vmov	r0, s0
 8006b40:	4619      	mov	r1, r3
 8006b42:	f7f9 fb6d 	bl	8000220 <__aeabi_dsub>
 8006b46:	ec41 0b10 	vmov	d0, r0, r1
 8006b4a:	b005      	add	sp, #20
 8006b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b50:	4668      	mov	r0, sp
 8006b52:	f000 fa15 	bl	8006f80 <__ieee754_rem_pio2>
 8006b56:	f000 0003 	and.w	r0, r0, #3
 8006b5a:	2801      	cmp	r0, #1
 8006b5c:	d00b      	beq.n	8006b76 <cos+0x5e>
 8006b5e:	2802      	cmp	r0, #2
 8006b60:	d016      	beq.n	8006b90 <cos+0x78>
 8006b62:	b9e0      	cbnz	r0, 8006b9e <cos+0x86>
 8006b64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b68:	ed9d 0b00 	vldr	d0, [sp]
 8006b6c:	f000 f880 	bl	8006c70 <__kernel_cos>
 8006b70:	ec51 0b10 	vmov	r0, r1, d0
 8006b74:	e7e7      	b.n	8006b46 <cos+0x2e>
 8006b76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b7a:	ed9d 0b00 	vldr	d0, [sp]
 8006b7e:	f000 f93f 	bl	8006e00 <__kernel_sin>
 8006b82:	ec53 2b10 	vmov	r2, r3, d0
 8006b86:	ee10 0a10 	vmov	r0, s0
 8006b8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b8e:	e7da      	b.n	8006b46 <cos+0x2e>
 8006b90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b94:	ed9d 0b00 	vldr	d0, [sp]
 8006b98:	f000 f86a 	bl	8006c70 <__kernel_cos>
 8006b9c:	e7f1      	b.n	8006b82 <cos+0x6a>
 8006b9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ba2:	ed9d 0b00 	vldr	d0, [sp]
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	f000 f92a 	bl	8006e00 <__kernel_sin>
 8006bac:	e7e0      	b.n	8006b70 <cos+0x58>
 8006bae:	bf00      	nop
	...
 8006bb8:	3fe921fb 	.word	0x3fe921fb
 8006bbc:	7fefffff 	.word	0x7fefffff

08006bc0 <sin>:
 8006bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bc2:	ec53 2b10 	vmov	r2, r3, d0
 8006bc6:	4828      	ldr	r0, [pc, #160]	; (8006c68 <sin+0xa8>)
 8006bc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006bcc:	4281      	cmp	r1, r0
 8006bce:	dc07      	bgt.n	8006be0 <sin+0x20>
 8006bd0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006c60 <sin+0xa0>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	b005      	add	sp, #20
 8006bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bdc:	f000 b910 	b.w	8006e00 <__kernel_sin>
 8006be0:	4822      	ldr	r0, [pc, #136]	; (8006c6c <sin+0xac>)
 8006be2:	4281      	cmp	r1, r0
 8006be4:	dd09      	ble.n	8006bfa <sin+0x3a>
 8006be6:	ee10 0a10 	vmov	r0, s0
 8006bea:	4619      	mov	r1, r3
 8006bec:	f7f9 fb18 	bl	8000220 <__aeabi_dsub>
 8006bf0:	ec41 0b10 	vmov	d0, r0, r1
 8006bf4:	b005      	add	sp, #20
 8006bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bfa:	4668      	mov	r0, sp
 8006bfc:	f000 f9c0 	bl	8006f80 <__ieee754_rem_pio2>
 8006c00:	f000 0003 	and.w	r0, r0, #3
 8006c04:	2801      	cmp	r0, #1
 8006c06:	d00c      	beq.n	8006c22 <sin+0x62>
 8006c08:	2802      	cmp	r0, #2
 8006c0a:	d011      	beq.n	8006c30 <sin+0x70>
 8006c0c:	b9f0      	cbnz	r0, 8006c4c <sin+0x8c>
 8006c0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c12:	ed9d 0b00 	vldr	d0, [sp]
 8006c16:	2001      	movs	r0, #1
 8006c18:	f000 f8f2 	bl	8006e00 <__kernel_sin>
 8006c1c:	ec51 0b10 	vmov	r0, r1, d0
 8006c20:	e7e6      	b.n	8006bf0 <sin+0x30>
 8006c22:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c26:	ed9d 0b00 	vldr	d0, [sp]
 8006c2a:	f000 f821 	bl	8006c70 <__kernel_cos>
 8006c2e:	e7f5      	b.n	8006c1c <sin+0x5c>
 8006c30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c34:	ed9d 0b00 	vldr	d0, [sp]
 8006c38:	2001      	movs	r0, #1
 8006c3a:	f000 f8e1 	bl	8006e00 <__kernel_sin>
 8006c3e:	ec53 2b10 	vmov	r2, r3, d0
 8006c42:	ee10 0a10 	vmov	r0, s0
 8006c46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006c4a:	e7d1      	b.n	8006bf0 <sin+0x30>
 8006c4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c50:	ed9d 0b00 	vldr	d0, [sp]
 8006c54:	f000 f80c 	bl	8006c70 <__kernel_cos>
 8006c58:	e7f1      	b.n	8006c3e <sin+0x7e>
 8006c5a:	bf00      	nop
 8006c5c:	f3af 8000 	nop.w
	...
 8006c68:	3fe921fb 	.word	0x3fe921fb
 8006c6c:	7fefffff 	.word	0x7fefffff

08006c70 <__kernel_cos>:
 8006c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	ec57 6b10 	vmov	r6, r7, d0
 8006c78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006c7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006c80:	ed8d 1b00 	vstr	d1, [sp]
 8006c84:	da07      	bge.n	8006c96 <__kernel_cos+0x26>
 8006c86:	ee10 0a10 	vmov	r0, s0
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f7f9 ff1a 	bl	8000ac4 <__aeabi_d2iz>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	f000 8088 	beq.w	8006da6 <__kernel_cos+0x136>
 8006c96:	4632      	mov	r2, r6
 8006c98:	463b      	mov	r3, r7
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 fc77 	bl	8000590 <__aeabi_dmul>
 8006ca2:	4b51      	ldr	r3, [pc, #324]	; (8006de8 <__kernel_cos+0x178>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	460d      	mov	r5, r1
 8006caa:	f7f9 fc71 	bl	8000590 <__aeabi_dmul>
 8006cae:	a340      	add	r3, pc, #256	; (adr r3, 8006db0 <__kernel_cos+0x140>)
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	468b      	mov	fp, r1
 8006cb8:	4620      	mov	r0, r4
 8006cba:	4629      	mov	r1, r5
 8006cbc:	f7f9 fc68 	bl	8000590 <__aeabi_dmul>
 8006cc0:	a33d      	add	r3, pc, #244	; (adr r3, 8006db8 <__kernel_cos+0x148>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 faad 	bl	8000224 <__adddf3>
 8006cca:	4622      	mov	r2, r4
 8006ccc:	462b      	mov	r3, r5
 8006cce:	f7f9 fc5f 	bl	8000590 <__aeabi_dmul>
 8006cd2:	a33b      	add	r3, pc, #236	; (adr r3, 8006dc0 <__kernel_cos+0x150>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f7f9 faa2 	bl	8000220 <__aeabi_dsub>
 8006cdc:	4622      	mov	r2, r4
 8006cde:	462b      	mov	r3, r5
 8006ce0:	f7f9 fc56 	bl	8000590 <__aeabi_dmul>
 8006ce4:	a338      	add	r3, pc, #224	; (adr r3, 8006dc8 <__kernel_cos+0x158>)
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f7f9 fa9b 	bl	8000224 <__adddf3>
 8006cee:	4622      	mov	r2, r4
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	f7f9 fc4d 	bl	8000590 <__aeabi_dmul>
 8006cf6:	a336      	add	r3, pc, #216	; (adr r3, 8006dd0 <__kernel_cos+0x160>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f7f9 fa90 	bl	8000220 <__aeabi_dsub>
 8006d00:	4622      	mov	r2, r4
 8006d02:	462b      	mov	r3, r5
 8006d04:	f7f9 fc44 	bl	8000590 <__aeabi_dmul>
 8006d08:	a333      	add	r3, pc, #204	; (adr r3, 8006dd8 <__kernel_cos+0x168>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fa89 	bl	8000224 <__adddf3>
 8006d12:	4622      	mov	r2, r4
 8006d14:	462b      	mov	r3, r5
 8006d16:	f7f9 fc3b 	bl	8000590 <__aeabi_dmul>
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	f7f9 fc37 	bl	8000590 <__aeabi_dmul>
 8006d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d26:	4604      	mov	r4, r0
 8006d28:	460d      	mov	r5, r1
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	4639      	mov	r1, r7
 8006d2e:	f7f9 fc2f 	bl	8000590 <__aeabi_dmul>
 8006d32:	460b      	mov	r3, r1
 8006d34:	4602      	mov	r2, r0
 8006d36:	4629      	mov	r1, r5
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7f9 fa71 	bl	8000220 <__aeabi_dsub>
 8006d3e:	4b2b      	ldr	r3, [pc, #172]	; (8006dec <__kernel_cos+0x17c>)
 8006d40:	4598      	cmp	r8, r3
 8006d42:	4606      	mov	r6, r0
 8006d44:	460f      	mov	r7, r1
 8006d46:	dc10      	bgt.n	8006d6a <__kernel_cos+0xfa>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	4659      	mov	r1, fp
 8006d50:	f7f9 fa66 	bl	8000220 <__aeabi_dsub>
 8006d54:	460b      	mov	r3, r1
 8006d56:	4926      	ldr	r1, [pc, #152]	; (8006df0 <__kernel_cos+0x180>)
 8006d58:	4602      	mov	r2, r0
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f7f9 fa60 	bl	8000220 <__aeabi_dsub>
 8006d60:	ec41 0b10 	vmov	d0, r0, r1
 8006d64:	b003      	add	sp, #12
 8006d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6a:	4b22      	ldr	r3, [pc, #136]	; (8006df4 <__kernel_cos+0x184>)
 8006d6c:	4920      	ldr	r1, [pc, #128]	; (8006df0 <__kernel_cos+0x180>)
 8006d6e:	4598      	cmp	r8, r3
 8006d70:	bfcc      	ite	gt
 8006d72:	4d21      	ldrgt	r5, [pc, #132]	; (8006df8 <__kernel_cos+0x188>)
 8006d74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006d78:	2400      	movs	r4, #0
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	2000      	movs	r0, #0
 8006d80:	f7f9 fa4e 	bl	8000220 <__aeabi_dsub>
 8006d84:	4622      	mov	r2, r4
 8006d86:	4680      	mov	r8, r0
 8006d88:	4689      	mov	r9, r1
 8006d8a:	462b      	mov	r3, r5
 8006d8c:	4650      	mov	r0, sl
 8006d8e:	4659      	mov	r1, fp
 8006d90:	f7f9 fa46 	bl	8000220 <__aeabi_dsub>
 8006d94:	4632      	mov	r2, r6
 8006d96:	463b      	mov	r3, r7
 8006d98:	f7f9 fa42 	bl	8000220 <__aeabi_dsub>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4640      	mov	r0, r8
 8006da2:	4649      	mov	r1, r9
 8006da4:	e7da      	b.n	8006d5c <__kernel_cos+0xec>
 8006da6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006de0 <__kernel_cos+0x170>
 8006daa:	e7db      	b.n	8006d64 <__kernel_cos+0xf4>
 8006dac:	f3af 8000 	nop.w
 8006db0:	be8838d4 	.word	0xbe8838d4
 8006db4:	bda8fae9 	.word	0xbda8fae9
 8006db8:	bdb4b1c4 	.word	0xbdb4b1c4
 8006dbc:	3e21ee9e 	.word	0x3e21ee9e
 8006dc0:	809c52ad 	.word	0x809c52ad
 8006dc4:	3e927e4f 	.word	0x3e927e4f
 8006dc8:	19cb1590 	.word	0x19cb1590
 8006dcc:	3efa01a0 	.word	0x3efa01a0
 8006dd0:	16c15177 	.word	0x16c15177
 8006dd4:	3f56c16c 	.word	0x3f56c16c
 8006dd8:	5555554c 	.word	0x5555554c
 8006ddc:	3fa55555 	.word	0x3fa55555
 8006de0:	00000000 	.word	0x00000000
 8006de4:	3ff00000 	.word	0x3ff00000
 8006de8:	3fe00000 	.word	0x3fe00000
 8006dec:	3fd33332 	.word	0x3fd33332
 8006df0:	3ff00000 	.word	0x3ff00000
 8006df4:	3fe90000 	.word	0x3fe90000
 8006df8:	3fd20000 	.word	0x3fd20000
 8006dfc:	00000000 	.word	0x00000000

08006e00 <__kernel_sin>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	ed2d 8b04 	vpush	{d8-d9}
 8006e08:	eeb0 8a41 	vmov.f32	s16, s2
 8006e0c:	eef0 8a61 	vmov.f32	s17, s3
 8006e10:	ec55 4b10 	vmov	r4, r5, d0
 8006e14:	b083      	sub	sp, #12
 8006e16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006e1e:	9001      	str	r0, [sp, #4]
 8006e20:	da06      	bge.n	8006e30 <__kernel_sin+0x30>
 8006e22:	ee10 0a10 	vmov	r0, s0
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7f9 fe4c 	bl	8000ac4 <__aeabi_d2iz>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d051      	beq.n	8006ed4 <__kernel_sin+0xd4>
 8006e30:	4622      	mov	r2, r4
 8006e32:	462b      	mov	r3, r5
 8006e34:	4620      	mov	r0, r4
 8006e36:	4629      	mov	r1, r5
 8006e38:	f7f9 fbaa 	bl	8000590 <__aeabi_dmul>
 8006e3c:	4682      	mov	sl, r0
 8006e3e:	468b      	mov	fp, r1
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4620      	mov	r0, r4
 8006e46:	4629      	mov	r1, r5
 8006e48:	f7f9 fba2 	bl	8000590 <__aeabi_dmul>
 8006e4c:	a341      	add	r3, pc, #260	; (adr r3, 8006f54 <__kernel_sin+0x154>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	4680      	mov	r8, r0
 8006e54:	4689      	mov	r9, r1
 8006e56:	4650      	mov	r0, sl
 8006e58:	4659      	mov	r1, fp
 8006e5a:	f7f9 fb99 	bl	8000590 <__aeabi_dmul>
 8006e5e:	a33f      	add	r3, pc, #252	; (adr r3, 8006f5c <__kernel_sin+0x15c>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f7f9 f9dc 	bl	8000220 <__aeabi_dsub>
 8006e68:	4652      	mov	r2, sl
 8006e6a:	465b      	mov	r3, fp
 8006e6c:	f7f9 fb90 	bl	8000590 <__aeabi_dmul>
 8006e70:	a33c      	add	r3, pc, #240	; (adr r3, 8006f64 <__kernel_sin+0x164>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f7f9 f9d5 	bl	8000224 <__adddf3>
 8006e7a:	4652      	mov	r2, sl
 8006e7c:	465b      	mov	r3, fp
 8006e7e:	f7f9 fb87 	bl	8000590 <__aeabi_dmul>
 8006e82:	a33a      	add	r3, pc, #232	; (adr r3, 8006f6c <__kernel_sin+0x16c>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f7f9 f9ca 	bl	8000220 <__aeabi_dsub>
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	465b      	mov	r3, fp
 8006e90:	f7f9 fb7e 	bl	8000590 <__aeabi_dmul>
 8006e94:	a337      	add	r3, pc, #220	; (adr r3, 8006f74 <__kernel_sin+0x174>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f7f9 f9c3 	bl	8000224 <__adddf3>
 8006e9e:	9b01      	ldr	r3, [sp, #4]
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460f      	mov	r7, r1
 8006ea4:	b9eb      	cbnz	r3, 8006ee2 <__kernel_sin+0xe2>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4659      	mov	r1, fp
 8006eae:	f7f9 fb6f 	bl	8000590 <__aeabi_dmul>
 8006eb2:	a325      	add	r3, pc, #148	; (adr r3, 8006f48 <__kernel_sin+0x148>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 f9b2 	bl	8000220 <__aeabi_dsub>
 8006ebc:	4642      	mov	r2, r8
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	f7f9 fb66 	bl	8000590 <__aeabi_dmul>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4620      	mov	r0, r4
 8006eca:	4629      	mov	r1, r5
 8006ecc:	f7f9 f9aa 	bl	8000224 <__adddf3>
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	ec45 4b10 	vmov	d0, r4, r5
 8006ed8:	b003      	add	sp, #12
 8006eda:	ecbd 8b04 	vpop	{d8-d9}
 8006ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee2:	4b1b      	ldr	r3, [pc, #108]	; (8006f50 <__kernel_sin+0x150>)
 8006ee4:	ec51 0b18 	vmov	r0, r1, d8
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f7f9 fb51 	bl	8000590 <__aeabi_dmul>
 8006eee:	4632      	mov	r2, r6
 8006ef0:	ec41 0b19 	vmov	d9, r0, r1
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 fb49 	bl	8000590 <__aeabi_dmul>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	ec51 0b19 	vmov	r0, r1, d9
 8006f06:	f7f9 f98b 	bl	8000220 <__aeabi_dsub>
 8006f0a:	4652      	mov	r2, sl
 8006f0c:	465b      	mov	r3, fp
 8006f0e:	f7f9 fb3f 	bl	8000590 <__aeabi_dmul>
 8006f12:	ec53 2b18 	vmov	r2, r3, d8
 8006f16:	f7f9 f983 	bl	8000220 <__aeabi_dsub>
 8006f1a:	a30b      	add	r3, pc, #44	; (adr r3, 8006f48 <__kernel_sin+0x148>)
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	4606      	mov	r6, r0
 8006f22:	460f      	mov	r7, r1
 8006f24:	4640      	mov	r0, r8
 8006f26:	4649      	mov	r1, r9
 8006f28:	f7f9 fb32 	bl	8000590 <__aeabi_dmul>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4630      	mov	r0, r6
 8006f32:	4639      	mov	r1, r7
 8006f34:	f7f9 f976 	bl	8000224 <__adddf3>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	4629      	mov	r1, r5
 8006f40:	f7f9 f96e 	bl	8000220 <__aeabi_dsub>
 8006f44:	e7c4      	b.n	8006ed0 <__kernel_sin+0xd0>
 8006f46:	bf00      	nop
 8006f48:	55555549 	.word	0x55555549
 8006f4c:	3fc55555 	.word	0x3fc55555
 8006f50:	3fe00000 	.word	0x3fe00000
 8006f54:	5acfd57c 	.word	0x5acfd57c
 8006f58:	3de5d93a 	.word	0x3de5d93a
 8006f5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006f60:	3e5ae5e6 	.word	0x3e5ae5e6
 8006f64:	57b1fe7d 	.word	0x57b1fe7d
 8006f68:	3ec71de3 	.word	0x3ec71de3
 8006f6c:	19c161d5 	.word	0x19c161d5
 8006f70:	3f2a01a0 	.word	0x3f2a01a0
 8006f74:	1110f8a6 	.word	0x1110f8a6
 8006f78:	3f811111 	.word	0x3f811111
 8006f7c:	00000000 	.word	0x00000000

08006f80 <__ieee754_rem_pio2>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	ed2d 8b02 	vpush	{d8}
 8006f88:	ec55 4b10 	vmov	r4, r5, d0
 8006f8c:	4bca      	ldr	r3, [pc, #808]	; (80072b8 <__ieee754_rem_pio2+0x338>)
 8006f8e:	b08b      	sub	sp, #44	; 0x2c
 8006f90:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006f94:	4598      	cmp	r8, r3
 8006f96:	4682      	mov	sl, r0
 8006f98:	9502      	str	r5, [sp, #8]
 8006f9a:	dc08      	bgt.n	8006fae <__ieee754_rem_pio2+0x2e>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	ed80 0b00 	vstr	d0, [r0]
 8006fa4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006fa8:	f04f 0b00 	mov.w	fp, #0
 8006fac:	e028      	b.n	8007000 <__ieee754_rem_pio2+0x80>
 8006fae:	4bc3      	ldr	r3, [pc, #780]	; (80072bc <__ieee754_rem_pio2+0x33c>)
 8006fb0:	4598      	cmp	r8, r3
 8006fb2:	dc78      	bgt.n	80070a6 <__ieee754_rem_pio2+0x126>
 8006fb4:	9b02      	ldr	r3, [sp, #8]
 8006fb6:	4ec2      	ldr	r6, [pc, #776]	; (80072c0 <__ieee754_rem_pio2+0x340>)
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	ee10 0a10 	vmov	r0, s0
 8006fbe:	a3b0      	add	r3, pc, #704	; (adr r3, 8007280 <__ieee754_rem_pio2+0x300>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	dd39      	ble.n	800703c <__ieee754_rem_pio2+0xbc>
 8006fc8:	f7f9 f92a 	bl	8000220 <__aeabi_dsub>
 8006fcc:	45b0      	cmp	r8, r6
 8006fce:	4604      	mov	r4, r0
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	d01b      	beq.n	800700c <__ieee754_rem_pio2+0x8c>
 8006fd4:	a3ac      	add	r3, pc, #688	; (adr r3, 8007288 <__ieee754_rem_pio2+0x308>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 f921 	bl	8000220 <__aeabi_dsub>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	e9ca 2300 	strd	r2, r3, [sl]
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	4629      	mov	r1, r5
 8006fea:	f7f9 f919 	bl	8000220 <__aeabi_dsub>
 8006fee:	a3a6      	add	r3, pc, #664	; (adr r3, 8007288 <__ieee754_rem_pio2+0x308>)
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	f7f9 f914 	bl	8000220 <__aeabi_dsub>
 8006ff8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ffc:	f04f 0b01 	mov.w	fp, #1
 8007000:	4658      	mov	r0, fp
 8007002:	b00b      	add	sp, #44	; 0x2c
 8007004:	ecbd 8b02 	vpop	{d8}
 8007008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007290 <__ieee754_rem_pio2+0x310>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	f7f9 f905 	bl	8000220 <__aeabi_dsub>
 8007016:	a3a0      	add	r3, pc, #640	; (adr r3, 8007298 <__ieee754_rem_pio2+0x318>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	4604      	mov	r4, r0
 800701e:	460d      	mov	r5, r1
 8007020:	f7f9 f8fe 	bl	8000220 <__aeabi_dsub>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	e9ca 2300 	strd	r2, r3, [sl]
 800702c:	4620      	mov	r0, r4
 800702e:	4629      	mov	r1, r5
 8007030:	f7f9 f8f6 	bl	8000220 <__aeabi_dsub>
 8007034:	a398      	add	r3, pc, #608	; (adr r3, 8007298 <__ieee754_rem_pio2+0x318>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	e7db      	b.n	8006ff4 <__ieee754_rem_pio2+0x74>
 800703c:	f7f9 f8f2 	bl	8000224 <__adddf3>
 8007040:	45b0      	cmp	r8, r6
 8007042:	4604      	mov	r4, r0
 8007044:	460d      	mov	r5, r1
 8007046:	d016      	beq.n	8007076 <__ieee754_rem_pio2+0xf6>
 8007048:	a38f      	add	r3, pc, #572	; (adr r3, 8007288 <__ieee754_rem_pio2+0x308>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	f7f9 f8e9 	bl	8000224 <__adddf3>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	e9ca 2300 	strd	r2, r3, [sl]
 800705a:	4620      	mov	r0, r4
 800705c:	4629      	mov	r1, r5
 800705e:	f7f9 f8df 	bl	8000220 <__aeabi_dsub>
 8007062:	a389      	add	r3, pc, #548	; (adr r3, 8007288 <__ieee754_rem_pio2+0x308>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	f7f9 f8dc 	bl	8000224 <__adddf3>
 800706c:	f04f 3bff 	mov.w	fp, #4294967295
 8007070:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007074:	e7c4      	b.n	8007000 <__ieee754_rem_pio2+0x80>
 8007076:	a386      	add	r3, pc, #536	; (adr r3, 8007290 <__ieee754_rem_pio2+0x310>)
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f7f9 f8d2 	bl	8000224 <__adddf3>
 8007080:	a385      	add	r3, pc, #532	; (adr r3, 8007298 <__ieee754_rem_pio2+0x318>)
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	4604      	mov	r4, r0
 8007088:	460d      	mov	r5, r1
 800708a:	f7f9 f8cb 	bl	8000224 <__adddf3>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	e9ca 2300 	strd	r2, r3, [sl]
 8007096:	4620      	mov	r0, r4
 8007098:	4629      	mov	r1, r5
 800709a:	f7f9 f8c1 	bl	8000220 <__aeabi_dsub>
 800709e:	a37e      	add	r3, pc, #504	; (adr r3, 8007298 <__ieee754_rem_pio2+0x318>)
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	e7e0      	b.n	8007068 <__ieee754_rem_pio2+0xe8>
 80070a6:	4b87      	ldr	r3, [pc, #540]	; (80072c4 <__ieee754_rem_pio2+0x344>)
 80070a8:	4598      	cmp	r8, r3
 80070aa:	f300 80d8 	bgt.w	800725e <__ieee754_rem_pio2+0x2de>
 80070ae:	f000 f96d 	bl	800738c <fabs>
 80070b2:	ec55 4b10 	vmov	r4, r5, d0
 80070b6:	ee10 0a10 	vmov	r0, s0
 80070ba:	a379      	add	r3, pc, #484	; (adr r3, 80072a0 <__ieee754_rem_pio2+0x320>)
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 fa65 	bl	8000590 <__aeabi_dmul>
 80070c6:	4b80      	ldr	r3, [pc, #512]	; (80072c8 <__ieee754_rem_pio2+0x348>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	f7f9 f8ab 	bl	8000224 <__adddf3>
 80070ce:	f7f9 fcf9 	bl	8000ac4 <__aeabi_d2iz>
 80070d2:	4683      	mov	fp, r0
 80070d4:	f7f9 f9f2 	bl	80004bc <__aeabi_i2d>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	ec43 2b18 	vmov	d8, r2, r3
 80070e0:	a367      	add	r3, pc, #412	; (adr r3, 8007280 <__ieee754_rem_pio2+0x300>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 fa53 	bl	8000590 <__aeabi_dmul>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7f9 f895 	bl	8000220 <__aeabi_dsub>
 80070f6:	a364      	add	r3, pc, #400	; (adr r3, 8007288 <__ieee754_rem_pio2+0x308>)
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	4606      	mov	r6, r0
 80070fe:	460f      	mov	r7, r1
 8007100:	ec51 0b18 	vmov	r0, r1, d8
 8007104:	f7f9 fa44 	bl	8000590 <__aeabi_dmul>
 8007108:	f1bb 0f1f 	cmp.w	fp, #31
 800710c:	4604      	mov	r4, r0
 800710e:	460d      	mov	r5, r1
 8007110:	dc0d      	bgt.n	800712e <__ieee754_rem_pio2+0x1ae>
 8007112:	4b6e      	ldr	r3, [pc, #440]	; (80072cc <__ieee754_rem_pio2+0x34c>)
 8007114:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	4543      	cmp	r3, r8
 800711e:	d006      	beq.n	800712e <__ieee754_rem_pio2+0x1ae>
 8007120:	4622      	mov	r2, r4
 8007122:	462b      	mov	r3, r5
 8007124:	4630      	mov	r0, r6
 8007126:	4639      	mov	r1, r7
 8007128:	f7f9 f87a 	bl	8000220 <__aeabi_dsub>
 800712c:	e00e      	b.n	800714c <__ieee754_rem_pio2+0x1cc>
 800712e:	462b      	mov	r3, r5
 8007130:	4622      	mov	r2, r4
 8007132:	4630      	mov	r0, r6
 8007134:	4639      	mov	r1, r7
 8007136:	f7f9 f873 	bl	8000220 <__aeabi_dsub>
 800713a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800713e:	9303      	str	r3, [sp, #12]
 8007140:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007144:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007148:	2b10      	cmp	r3, #16
 800714a:	dc02      	bgt.n	8007152 <__ieee754_rem_pio2+0x1d2>
 800714c:	e9ca 0100 	strd	r0, r1, [sl]
 8007150:	e039      	b.n	80071c6 <__ieee754_rem_pio2+0x246>
 8007152:	a34f      	add	r3, pc, #316	; (adr r3, 8007290 <__ieee754_rem_pio2+0x310>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	ec51 0b18 	vmov	r0, r1, d8
 800715c:	f7f9 fa18 	bl	8000590 <__aeabi_dmul>
 8007160:	4604      	mov	r4, r0
 8007162:	460d      	mov	r5, r1
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4630      	mov	r0, r6
 800716a:	4639      	mov	r1, r7
 800716c:	f7f9 f858 	bl	8000220 <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4680      	mov	r8, r0
 8007176:	4689      	mov	r9, r1
 8007178:	4630      	mov	r0, r6
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 f850 	bl	8000220 <__aeabi_dsub>
 8007180:	4622      	mov	r2, r4
 8007182:	462b      	mov	r3, r5
 8007184:	f7f9 f84c 	bl	8000220 <__aeabi_dsub>
 8007188:	a343      	add	r3, pc, #268	; (adr r3, 8007298 <__ieee754_rem_pio2+0x318>)
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	4604      	mov	r4, r0
 8007190:	460d      	mov	r5, r1
 8007192:	ec51 0b18 	vmov	r0, r1, d8
 8007196:	f7f9 f9fb 	bl	8000590 <__aeabi_dmul>
 800719a:	4622      	mov	r2, r4
 800719c:	462b      	mov	r3, r5
 800719e:	f7f9 f83f 	bl	8000220 <__aeabi_dsub>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4604      	mov	r4, r0
 80071a8:	460d      	mov	r5, r1
 80071aa:	4640      	mov	r0, r8
 80071ac:	4649      	mov	r1, r9
 80071ae:	f7f9 f837 	bl	8000220 <__aeabi_dsub>
 80071b2:	9a03      	ldr	r2, [sp, #12]
 80071b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b31      	cmp	r3, #49	; 0x31
 80071bc:	dc24      	bgt.n	8007208 <__ieee754_rem_pio2+0x288>
 80071be:	e9ca 0100 	strd	r0, r1, [sl]
 80071c2:	4646      	mov	r6, r8
 80071c4:	464f      	mov	r7, r9
 80071c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80071ca:	4630      	mov	r0, r6
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 f825 	bl	8000220 <__aeabi_dsub>
 80071d6:	462b      	mov	r3, r5
 80071d8:	4622      	mov	r2, r4
 80071da:	f7f9 f821 	bl	8000220 <__aeabi_dsub>
 80071de:	9b02      	ldr	r3, [sp, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071e6:	f6bf af0b 	bge.w	8007000 <__ieee754_rem_pio2+0x80>
 80071ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071ee:	f8ca 3004 	str.w	r3, [sl, #4]
 80071f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071f6:	f8ca 8000 	str.w	r8, [sl]
 80071fa:	f8ca 0008 	str.w	r0, [sl, #8]
 80071fe:	f8ca 300c 	str.w	r3, [sl, #12]
 8007202:	f1cb 0b00 	rsb	fp, fp, #0
 8007206:	e6fb      	b.n	8007000 <__ieee754_rem_pio2+0x80>
 8007208:	a327      	add	r3, pc, #156	; (adr r3, 80072a8 <__ieee754_rem_pio2+0x328>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	ec51 0b18 	vmov	r0, r1, d8
 8007212:	f7f9 f9bd 	bl	8000590 <__aeabi_dmul>
 8007216:	4604      	mov	r4, r0
 8007218:	460d      	mov	r5, r1
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4640      	mov	r0, r8
 8007220:	4649      	mov	r1, r9
 8007222:	f7f8 fffd 	bl	8000220 <__aeabi_dsub>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4606      	mov	r6, r0
 800722c:	460f      	mov	r7, r1
 800722e:	4640      	mov	r0, r8
 8007230:	4649      	mov	r1, r9
 8007232:	f7f8 fff5 	bl	8000220 <__aeabi_dsub>
 8007236:	4622      	mov	r2, r4
 8007238:	462b      	mov	r3, r5
 800723a:	f7f8 fff1 	bl	8000220 <__aeabi_dsub>
 800723e:	a31c      	add	r3, pc, #112	; (adr r3, 80072b0 <__ieee754_rem_pio2+0x330>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	4604      	mov	r4, r0
 8007246:	460d      	mov	r5, r1
 8007248:	ec51 0b18 	vmov	r0, r1, d8
 800724c:	f7f9 f9a0 	bl	8000590 <__aeabi_dmul>
 8007250:	4622      	mov	r2, r4
 8007252:	462b      	mov	r3, r5
 8007254:	f7f8 ffe4 	bl	8000220 <__aeabi_dsub>
 8007258:	4604      	mov	r4, r0
 800725a:	460d      	mov	r5, r1
 800725c:	e760      	b.n	8007120 <__ieee754_rem_pio2+0x1a0>
 800725e:	4b1c      	ldr	r3, [pc, #112]	; (80072d0 <__ieee754_rem_pio2+0x350>)
 8007260:	4598      	cmp	r8, r3
 8007262:	dd37      	ble.n	80072d4 <__ieee754_rem_pio2+0x354>
 8007264:	ee10 2a10 	vmov	r2, s0
 8007268:	462b      	mov	r3, r5
 800726a:	4620      	mov	r0, r4
 800726c:	4629      	mov	r1, r5
 800726e:	f7f8 ffd7 	bl	8000220 <__aeabi_dsub>
 8007272:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007276:	e9ca 0100 	strd	r0, r1, [sl]
 800727a:	e695      	b.n	8006fa8 <__ieee754_rem_pio2+0x28>
 800727c:	f3af 8000 	nop.w
 8007280:	54400000 	.word	0x54400000
 8007284:	3ff921fb 	.word	0x3ff921fb
 8007288:	1a626331 	.word	0x1a626331
 800728c:	3dd0b461 	.word	0x3dd0b461
 8007290:	1a600000 	.word	0x1a600000
 8007294:	3dd0b461 	.word	0x3dd0b461
 8007298:	2e037073 	.word	0x2e037073
 800729c:	3ba3198a 	.word	0x3ba3198a
 80072a0:	6dc9c883 	.word	0x6dc9c883
 80072a4:	3fe45f30 	.word	0x3fe45f30
 80072a8:	2e000000 	.word	0x2e000000
 80072ac:	3ba3198a 	.word	0x3ba3198a
 80072b0:	252049c1 	.word	0x252049c1
 80072b4:	397b839a 	.word	0x397b839a
 80072b8:	3fe921fb 	.word	0x3fe921fb
 80072bc:	4002d97b 	.word	0x4002d97b
 80072c0:	3ff921fb 	.word	0x3ff921fb
 80072c4:	413921fb 	.word	0x413921fb
 80072c8:	3fe00000 	.word	0x3fe00000
 80072cc:	08007cc0 	.word	0x08007cc0
 80072d0:	7fefffff 	.word	0x7fefffff
 80072d4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80072d8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80072dc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80072e0:	4620      	mov	r0, r4
 80072e2:	460d      	mov	r5, r1
 80072e4:	f7f9 fbee 	bl	8000ac4 <__aeabi_d2iz>
 80072e8:	f7f9 f8e8 	bl	80004bc <__aeabi_i2d>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4620      	mov	r0, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072f8:	f7f8 ff92 	bl	8000220 <__aeabi_dsub>
 80072fc:	4b21      	ldr	r3, [pc, #132]	; (8007384 <__ieee754_rem_pio2+0x404>)
 80072fe:	2200      	movs	r2, #0
 8007300:	f7f9 f946 	bl	8000590 <__aeabi_dmul>
 8007304:	460d      	mov	r5, r1
 8007306:	4604      	mov	r4, r0
 8007308:	f7f9 fbdc 	bl	8000ac4 <__aeabi_d2iz>
 800730c:	f7f9 f8d6 	bl	80004bc <__aeabi_i2d>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800731c:	f7f8 ff80 	bl	8000220 <__aeabi_dsub>
 8007320:	4b18      	ldr	r3, [pc, #96]	; (8007384 <__ieee754_rem_pio2+0x404>)
 8007322:	2200      	movs	r2, #0
 8007324:	f7f9 f934 	bl	8000590 <__aeabi_dmul>
 8007328:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800732c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007330:	2703      	movs	r7, #3
 8007332:	2400      	movs	r4, #0
 8007334:	2500      	movs	r5, #0
 8007336:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800733a:	4622      	mov	r2, r4
 800733c:	462b      	mov	r3, r5
 800733e:	46b9      	mov	r9, r7
 8007340:	3f01      	subs	r7, #1
 8007342:	f7f9 fb8d 	bl	8000a60 <__aeabi_dcmpeq>
 8007346:	2800      	cmp	r0, #0
 8007348:	d1f5      	bne.n	8007336 <__ieee754_rem_pio2+0x3b6>
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <__ieee754_rem_pio2+0x408>)
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	2302      	movs	r3, #2
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	4632      	mov	r2, r6
 8007354:	464b      	mov	r3, r9
 8007356:	4651      	mov	r1, sl
 8007358:	a804      	add	r0, sp, #16
 800735a:	f000 f821 	bl	80073a0 <__kernel_rem_pio2>
 800735e:	9b02      	ldr	r3, [sp, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	4683      	mov	fp, r0
 8007364:	f6bf ae4c 	bge.w	8007000 <__ieee754_rem_pio2+0x80>
 8007368:	e9da 2100 	ldrd	r2, r1, [sl]
 800736c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007370:	e9ca 2300 	strd	r2, r3, [sl]
 8007374:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800737c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007380:	e73f      	b.n	8007202 <__ieee754_rem_pio2+0x282>
 8007382:	bf00      	nop
 8007384:	41700000 	.word	0x41700000
 8007388:	08007d40 	.word	0x08007d40

0800738c <fabs>:
 800738c:	ec51 0b10 	vmov	r0, r1, d0
 8007390:	ee10 2a10 	vmov	r2, s0
 8007394:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007398:	ec43 2b10 	vmov	d0, r2, r3
 800739c:	4770      	bx	lr
	...

080073a0 <__kernel_rem_pio2>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	ed2d 8b02 	vpush	{d8}
 80073a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80073ac:	f112 0f14 	cmn.w	r2, #20
 80073b0:	9306      	str	r3, [sp, #24]
 80073b2:	9104      	str	r1, [sp, #16]
 80073b4:	4bc2      	ldr	r3, [pc, #776]	; (80076c0 <__kernel_rem_pio2+0x320>)
 80073b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80073b8:	9009      	str	r0, [sp, #36]	; 0x24
 80073ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	9b06      	ldr	r3, [sp, #24]
 80073c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80073c6:	bfa8      	it	ge
 80073c8:	1ed4      	subge	r4, r2, #3
 80073ca:	9305      	str	r3, [sp, #20]
 80073cc:	bfb2      	itee	lt
 80073ce:	2400      	movlt	r4, #0
 80073d0:	2318      	movge	r3, #24
 80073d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80073d6:	f06f 0317 	mvn.w	r3, #23
 80073da:	fb04 3303 	mla	r3, r4, r3, r3
 80073de:	eb03 0a02 	add.w	sl, r3, r2
 80073e2:	9b00      	ldr	r3, [sp, #0]
 80073e4:	9a05      	ldr	r2, [sp, #20]
 80073e6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80076b0 <__kernel_rem_pio2+0x310>
 80073ea:	eb03 0802 	add.w	r8, r3, r2
 80073ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80073f0:	1aa7      	subs	r7, r4, r2
 80073f2:	ae20      	add	r6, sp, #128	; 0x80
 80073f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80073f8:	2500      	movs	r5, #0
 80073fa:	4545      	cmp	r5, r8
 80073fc:	dd13      	ble.n	8007426 <__kernel_rem_pio2+0x86>
 80073fe:	9b06      	ldr	r3, [sp, #24]
 8007400:	aa20      	add	r2, sp, #128	; 0x80
 8007402:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007406:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	9b00      	ldr	r3, [sp, #0]
 8007410:	4598      	cmp	r8, r3
 8007412:	dc31      	bgt.n	8007478 <__kernel_rem_pio2+0xd8>
 8007414:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80076b0 <__kernel_rem_pio2+0x310>
 8007418:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800741c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007420:	462f      	mov	r7, r5
 8007422:	2600      	movs	r6, #0
 8007424:	e01b      	b.n	800745e <__kernel_rem_pio2+0xbe>
 8007426:	42ef      	cmn	r7, r5
 8007428:	d407      	bmi.n	800743a <__kernel_rem_pio2+0x9a>
 800742a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800742e:	f7f9 f845 	bl	80004bc <__aeabi_i2d>
 8007432:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007436:	3501      	adds	r5, #1
 8007438:	e7df      	b.n	80073fa <__kernel_rem_pio2+0x5a>
 800743a:	ec51 0b18 	vmov	r0, r1, d8
 800743e:	e7f8      	b.n	8007432 <__kernel_rem_pio2+0x92>
 8007440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007444:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007448:	f7f9 f8a2 	bl	8000590 <__aeabi_dmul>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007454:	f7f8 fee6 	bl	8000224 <__adddf3>
 8007458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800745c:	3601      	adds	r6, #1
 800745e:	9b05      	ldr	r3, [sp, #20]
 8007460:	429e      	cmp	r6, r3
 8007462:	f1a7 0708 	sub.w	r7, r7, #8
 8007466:	ddeb      	ble.n	8007440 <__kernel_rem_pio2+0xa0>
 8007468:	ed9d 7b02 	vldr	d7, [sp, #8]
 800746c:	f108 0801 	add.w	r8, r8, #1
 8007470:	ecab 7b02 	vstmia	fp!, {d7}
 8007474:	3508      	adds	r5, #8
 8007476:	e7ca      	b.n	800740e <__kernel_rem_pio2+0x6e>
 8007478:	9b00      	ldr	r3, [sp, #0]
 800747a:	aa0c      	add	r2, sp, #48	; 0x30
 800747c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007480:	930b      	str	r3, [sp, #44]	; 0x2c
 8007482:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007484:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007488:	9c00      	ldr	r4, [sp, #0]
 800748a:	930a      	str	r3, [sp, #40]	; 0x28
 800748c:	00e3      	lsls	r3, r4, #3
 800748e:	9308      	str	r3, [sp, #32]
 8007490:	ab98      	add	r3, sp, #608	; 0x260
 8007492:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007496:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800749a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800749e:	ab70      	add	r3, sp, #448	; 0x1c0
 80074a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80074a4:	46c3      	mov	fp, r8
 80074a6:	46a1      	mov	r9, r4
 80074a8:	f1b9 0f00 	cmp.w	r9, #0
 80074ac:	f1a5 0508 	sub.w	r5, r5, #8
 80074b0:	dc77      	bgt.n	80075a2 <__kernel_rem_pio2+0x202>
 80074b2:	ec47 6b10 	vmov	d0, r6, r7
 80074b6:	4650      	mov	r0, sl
 80074b8:	f000 fac2 	bl	8007a40 <scalbn>
 80074bc:	ec57 6b10 	vmov	r6, r7, d0
 80074c0:	2200      	movs	r2, #0
 80074c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80074c6:	ee10 0a10 	vmov	r0, s0
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f9 f860 	bl	8000590 <__aeabi_dmul>
 80074d0:	ec41 0b10 	vmov	d0, r0, r1
 80074d4:	f000 fb34 	bl	8007b40 <floor>
 80074d8:	4b7a      	ldr	r3, [pc, #488]	; (80076c4 <__kernel_rem_pio2+0x324>)
 80074da:	ec51 0b10 	vmov	r0, r1, d0
 80074de:	2200      	movs	r2, #0
 80074e0:	f7f9 f856 	bl	8000590 <__aeabi_dmul>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f8 fe98 	bl	8000220 <__aeabi_dsub>
 80074f0:	460f      	mov	r7, r1
 80074f2:	4606      	mov	r6, r0
 80074f4:	f7f9 fae6 	bl	8000ac4 <__aeabi_d2iz>
 80074f8:	9002      	str	r0, [sp, #8]
 80074fa:	f7f8 ffdf 	bl	80004bc <__aeabi_i2d>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4630      	mov	r0, r6
 8007504:	4639      	mov	r1, r7
 8007506:	f7f8 fe8b 	bl	8000220 <__aeabi_dsub>
 800750a:	f1ba 0f00 	cmp.w	sl, #0
 800750e:	4606      	mov	r6, r0
 8007510:	460f      	mov	r7, r1
 8007512:	dd6d      	ble.n	80075f0 <__kernel_rem_pio2+0x250>
 8007514:	1e61      	subs	r1, r4, #1
 8007516:	ab0c      	add	r3, sp, #48	; 0x30
 8007518:	9d02      	ldr	r5, [sp, #8]
 800751a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800751e:	f1ca 0018 	rsb	r0, sl, #24
 8007522:	fa43 f200 	asr.w	r2, r3, r0
 8007526:	4415      	add	r5, r2
 8007528:	4082      	lsls	r2, r0
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	aa0c      	add	r2, sp, #48	; 0x30
 800752e:	9502      	str	r5, [sp, #8]
 8007530:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007534:	f1ca 0217 	rsb	r2, sl, #23
 8007538:	fa43 fb02 	asr.w	fp, r3, r2
 800753c:	f1bb 0f00 	cmp.w	fp, #0
 8007540:	dd65      	ble.n	800760e <__kernel_rem_pio2+0x26e>
 8007542:	9b02      	ldr	r3, [sp, #8]
 8007544:	2200      	movs	r2, #0
 8007546:	3301      	adds	r3, #1
 8007548:	9302      	str	r3, [sp, #8]
 800754a:	4615      	mov	r5, r2
 800754c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007550:	4294      	cmp	r4, r2
 8007552:	f300 809f 	bgt.w	8007694 <__kernel_rem_pio2+0x2f4>
 8007556:	f1ba 0f00 	cmp.w	sl, #0
 800755a:	dd07      	ble.n	800756c <__kernel_rem_pio2+0x1cc>
 800755c:	f1ba 0f01 	cmp.w	sl, #1
 8007560:	f000 80c1 	beq.w	80076e6 <__kernel_rem_pio2+0x346>
 8007564:	f1ba 0f02 	cmp.w	sl, #2
 8007568:	f000 80c7 	beq.w	80076fa <__kernel_rem_pio2+0x35a>
 800756c:	f1bb 0f02 	cmp.w	fp, #2
 8007570:	d14d      	bne.n	800760e <__kernel_rem_pio2+0x26e>
 8007572:	4632      	mov	r2, r6
 8007574:	463b      	mov	r3, r7
 8007576:	4954      	ldr	r1, [pc, #336]	; (80076c8 <__kernel_rem_pio2+0x328>)
 8007578:	2000      	movs	r0, #0
 800757a:	f7f8 fe51 	bl	8000220 <__aeabi_dsub>
 800757e:	4606      	mov	r6, r0
 8007580:	460f      	mov	r7, r1
 8007582:	2d00      	cmp	r5, #0
 8007584:	d043      	beq.n	800760e <__kernel_rem_pio2+0x26e>
 8007586:	4650      	mov	r0, sl
 8007588:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80076b8 <__kernel_rem_pio2+0x318>
 800758c:	f000 fa58 	bl	8007a40 <scalbn>
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	ec53 2b10 	vmov	r2, r3, d0
 8007598:	f7f8 fe42 	bl	8000220 <__aeabi_dsub>
 800759c:	4606      	mov	r6, r0
 800759e:	460f      	mov	r7, r1
 80075a0:	e035      	b.n	800760e <__kernel_rem_pio2+0x26e>
 80075a2:	4b4a      	ldr	r3, [pc, #296]	; (80076cc <__kernel_rem_pio2+0x32c>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	4630      	mov	r0, r6
 80075a8:	4639      	mov	r1, r7
 80075aa:	f7f8 fff1 	bl	8000590 <__aeabi_dmul>
 80075ae:	f7f9 fa89 	bl	8000ac4 <__aeabi_d2iz>
 80075b2:	f7f8 ff83 	bl	80004bc <__aeabi_i2d>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	ec43 2b18 	vmov	d8, r2, r3
 80075be:	4b44      	ldr	r3, [pc, #272]	; (80076d0 <__kernel_rem_pio2+0x330>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	f7f8 ffe5 	bl	8000590 <__aeabi_dmul>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4630      	mov	r0, r6
 80075cc:	4639      	mov	r1, r7
 80075ce:	f7f8 fe27 	bl	8000220 <__aeabi_dsub>
 80075d2:	f7f9 fa77 	bl	8000ac4 <__aeabi_d2iz>
 80075d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075da:	f84b 0b04 	str.w	r0, [fp], #4
 80075de:	ec51 0b18 	vmov	r0, r1, d8
 80075e2:	f7f8 fe1f 	bl	8000224 <__adddf3>
 80075e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80075ea:	4606      	mov	r6, r0
 80075ec:	460f      	mov	r7, r1
 80075ee:	e75b      	b.n	80074a8 <__kernel_rem_pio2+0x108>
 80075f0:	d106      	bne.n	8007600 <__kernel_rem_pio2+0x260>
 80075f2:	1e63      	subs	r3, r4, #1
 80075f4:	aa0c      	add	r2, sp, #48	; 0x30
 80075f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80075fe:	e79d      	b.n	800753c <__kernel_rem_pio2+0x19c>
 8007600:	4b34      	ldr	r3, [pc, #208]	; (80076d4 <__kernel_rem_pio2+0x334>)
 8007602:	2200      	movs	r2, #0
 8007604:	f7f9 fa4a 	bl	8000a9c <__aeabi_dcmpge>
 8007608:	2800      	cmp	r0, #0
 800760a:	d140      	bne.n	800768e <__kernel_rem_pio2+0x2ee>
 800760c:	4683      	mov	fp, r0
 800760e:	2200      	movs	r2, #0
 8007610:	2300      	movs	r3, #0
 8007612:	4630      	mov	r0, r6
 8007614:	4639      	mov	r1, r7
 8007616:	f7f9 fa23 	bl	8000a60 <__aeabi_dcmpeq>
 800761a:	2800      	cmp	r0, #0
 800761c:	f000 80c1 	beq.w	80077a2 <__kernel_rem_pio2+0x402>
 8007620:	1e65      	subs	r5, r4, #1
 8007622:	462b      	mov	r3, r5
 8007624:	2200      	movs	r2, #0
 8007626:	9900      	ldr	r1, [sp, #0]
 8007628:	428b      	cmp	r3, r1
 800762a:	da6d      	bge.n	8007708 <__kernel_rem_pio2+0x368>
 800762c:	2a00      	cmp	r2, #0
 800762e:	f000 808a 	beq.w	8007746 <__kernel_rem_pio2+0x3a6>
 8007632:	ab0c      	add	r3, sp, #48	; 0x30
 8007634:	f1aa 0a18 	sub.w	sl, sl, #24
 8007638:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 80ae 	beq.w	800779e <__kernel_rem_pio2+0x3fe>
 8007642:	4650      	mov	r0, sl
 8007644:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80076b8 <__kernel_rem_pio2+0x318>
 8007648:	f000 f9fa 	bl	8007a40 <scalbn>
 800764c:	1c6b      	adds	r3, r5, #1
 800764e:	00da      	lsls	r2, r3, #3
 8007650:	9205      	str	r2, [sp, #20]
 8007652:	ec57 6b10 	vmov	r6, r7, d0
 8007656:	aa70      	add	r2, sp, #448	; 0x1c0
 8007658:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80076cc <__kernel_rem_pio2+0x32c>
 800765c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007660:	462c      	mov	r4, r5
 8007662:	f04f 0800 	mov.w	r8, #0
 8007666:	2c00      	cmp	r4, #0
 8007668:	f280 80d4 	bge.w	8007814 <__kernel_rem_pio2+0x474>
 800766c:	462c      	mov	r4, r5
 800766e:	2c00      	cmp	r4, #0
 8007670:	f2c0 8102 	blt.w	8007878 <__kernel_rem_pio2+0x4d8>
 8007674:	4b18      	ldr	r3, [pc, #96]	; (80076d8 <__kernel_rem_pio2+0x338>)
 8007676:	461e      	mov	r6, r3
 8007678:	ab70      	add	r3, sp, #448	; 0x1c0
 800767a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800767e:	1b2b      	subs	r3, r5, r4
 8007680:	f04f 0900 	mov.w	r9, #0
 8007684:	f04f 0a00 	mov.w	sl, #0
 8007688:	2700      	movs	r7, #0
 800768a:	9306      	str	r3, [sp, #24]
 800768c:	e0e6      	b.n	800785c <__kernel_rem_pio2+0x4bc>
 800768e:	f04f 0b02 	mov.w	fp, #2
 8007692:	e756      	b.n	8007542 <__kernel_rem_pio2+0x1a2>
 8007694:	f8d8 3000 	ldr.w	r3, [r8]
 8007698:	bb05      	cbnz	r5, 80076dc <__kernel_rem_pio2+0x33c>
 800769a:	b123      	cbz	r3, 80076a6 <__kernel_rem_pio2+0x306>
 800769c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80076a0:	f8c8 3000 	str.w	r3, [r8]
 80076a4:	2301      	movs	r3, #1
 80076a6:	3201      	adds	r2, #1
 80076a8:	f108 0804 	add.w	r8, r8, #4
 80076ac:	461d      	mov	r5, r3
 80076ae:	e74f      	b.n	8007550 <__kernel_rem_pio2+0x1b0>
	...
 80076bc:	3ff00000 	.word	0x3ff00000
 80076c0:	08007e88 	.word	0x08007e88
 80076c4:	40200000 	.word	0x40200000
 80076c8:	3ff00000 	.word	0x3ff00000
 80076cc:	3e700000 	.word	0x3e700000
 80076d0:	41700000 	.word	0x41700000
 80076d4:	3fe00000 	.word	0x3fe00000
 80076d8:	08007e48 	.word	0x08007e48
 80076dc:	1acb      	subs	r3, r1, r3
 80076de:	f8c8 3000 	str.w	r3, [r8]
 80076e2:	462b      	mov	r3, r5
 80076e4:	e7df      	b.n	80076a6 <__kernel_rem_pio2+0x306>
 80076e6:	1e62      	subs	r2, r4, #1
 80076e8:	ab0c      	add	r3, sp, #48	; 0x30
 80076ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80076f2:	a90c      	add	r1, sp, #48	; 0x30
 80076f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80076f8:	e738      	b.n	800756c <__kernel_rem_pio2+0x1cc>
 80076fa:	1e62      	subs	r2, r4, #1
 80076fc:	ab0c      	add	r3, sp, #48	; 0x30
 80076fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007702:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007706:	e7f4      	b.n	80076f2 <__kernel_rem_pio2+0x352>
 8007708:	a90c      	add	r1, sp, #48	; 0x30
 800770a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800770e:	3b01      	subs	r3, #1
 8007710:	430a      	orrs	r2, r1
 8007712:	e788      	b.n	8007626 <__kernel_rem_pio2+0x286>
 8007714:	3301      	adds	r3, #1
 8007716:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800771a:	2900      	cmp	r1, #0
 800771c:	d0fa      	beq.n	8007714 <__kernel_rem_pio2+0x374>
 800771e:	9a08      	ldr	r2, [sp, #32]
 8007720:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8007724:	446a      	add	r2, sp
 8007726:	3a98      	subs	r2, #152	; 0x98
 8007728:	9208      	str	r2, [sp, #32]
 800772a:	9a06      	ldr	r2, [sp, #24]
 800772c:	a920      	add	r1, sp, #128	; 0x80
 800772e:	18a2      	adds	r2, r4, r2
 8007730:	18e3      	adds	r3, r4, r3
 8007732:	f104 0801 	add.w	r8, r4, #1
 8007736:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800773a:	9302      	str	r3, [sp, #8]
 800773c:	9b02      	ldr	r3, [sp, #8]
 800773e:	4543      	cmp	r3, r8
 8007740:	da04      	bge.n	800774c <__kernel_rem_pio2+0x3ac>
 8007742:	461c      	mov	r4, r3
 8007744:	e6a2      	b.n	800748c <__kernel_rem_pio2+0xec>
 8007746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007748:	2301      	movs	r3, #1
 800774a:	e7e4      	b.n	8007716 <__kernel_rem_pio2+0x376>
 800774c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800774e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007752:	f7f8 feb3 	bl	80004bc <__aeabi_i2d>
 8007756:	e8e5 0102 	strd	r0, r1, [r5], #8
 800775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775c:	46ab      	mov	fp, r5
 800775e:	461c      	mov	r4, r3
 8007760:	f04f 0900 	mov.w	r9, #0
 8007764:	2600      	movs	r6, #0
 8007766:	2700      	movs	r7, #0
 8007768:	9b05      	ldr	r3, [sp, #20]
 800776a:	4599      	cmp	r9, r3
 800776c:	dd06      	ble.n	800777c <__kernel_rem_pio2+0x3dc>
 800776e:	9b08      	ldr	r3, [sp, #32]
 8007770:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007774:	f108 0801 	add.w	r8, r8, #1
 8007778:	9308      	str	r3, [sp, #32]
 800777a:	e7df      	b.n	800773c <__kernel_rem_pio2+0x39c>
 800777c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007780:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007784:	f7f8 ff04 	bl	8000590 <__aeabi_dmul>
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	4630      	mov	r0, r6
 800778e:	4639      	mov	r1, r7
 8007790:	f7f8 fd48 	bl	8000224 <__adddf3>
 8007794:	f109 0901 	add.w	r9, r9, #1
 8007798:	4606      	mov	r6, r0
 800779a:	460f      	mov	r7, r1
 800779c:	e7e4      	b.n	8007768 <__kernel_rem_pio2+0x3c8>
 800779e:	3d01      	subs	r5, #1
 80077a0:	e747      	b.n	8007632 <__kernel_rem_pio2+0x292>
 80077a2:	ec47 6b10 	vmov	d0, r6, r7
 80077a6:	f1ca 0000 	rsb	r0, sl, #0
 80077aa:	f000 f949 	bl	8007a40 <scalbn>
 80077ae:	ec57 6b10 	vmov	r6, r7, d0
 80077b2:	4ba0      	ldr	r3, [pc, #640]	; (8007a34 <__kernel_rem_pio2+0x694>)
 80077b4:	ee10 0a10 	vmov	r0, s0
 80077b8:	2200      	movs	r2, #0
 80077ba:	4639      	mov	r1, r7
 80077bc:	f7f9 f96e 	bl	8000a9c <__aeabi_dcmpge>
 80077c0:	b1f8      	cbz	r0, 8007802 <__kernel_rem_pio2+0x462>
 80077c2:	4b9d      	ldr	r3, [pc, #628]	; (8007a38 <__kernel_rem_pio2+0x698>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	4630      	mov	r0, r6
 80077c8:	4639      	mov	r1, r7
 80077ca:	f7f8 fee1 	bl	8000590 <__aeabi_dmul>
 80077ce:	f7f9 f979 	bl	8000ac4 <__aeabi_d2iz>
 80077d2:	4680      	mov	r8, r0
 80077d4:	f7f8 fe72 	bl	80004bc <__aeabi_i2d>
 80077d8:	4b96      	ldr	r3, [pc, #600]	; (8007a34 <__kernel_rem_pio2+0x694>)
 80077da:	2200      	movs	r2, #0
 80077dc:	f7f8 fed8 	bl	8000590 <__aeabi_dmul>
 80077e0:	460b      	mov	r3, r1
 80077e2:	4602      	mov	r2, r0
 80077e4:	4639      	mov	r1, r7
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7f8 fd1a 	bl	8000220 <__aeabi_dsub>
 80077ec:	f7f9 f96a 	bl	8000ac4 <__aeabi_d2iz>
 80077f0:	1c65      	adds	r5, r4, #1
 80077f2:	ab0c      	add	r3, sp, #48	; 0x30
 80077f4:	f10a 0a18 	add.w	sl, sl, #24
 80077f8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80077fc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007800:	e71f      	b.n	8007642 <__kernel_rem_pio2+0x2a2>
 8007802:	4630      	mov	r0, r6
 8007804:	4639      	mov	r1, r7
 8007806:	f7f9 f95d 	bl	8000ac4 <__aeabi_d2iz>
 800780a:	ab0c      	add	r3, sp, #48	; 0x30
 800780c:	4625      	mov	r5, r4
 800780e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007812:	e716      	b.n	8007642 <__kernel_rem_pio2+0x2a2>
 8007814:	ab0c      	add	r3, sp, #48	; 0x30
 8007816:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800781a:	f7f8 fe4f 	bl	80004bc <__aeabi_i2d>
 800781e:	4632      	mov	r2, r6
 8007820:	463b      	mov	r3, r7
 8007822:	f7f8 feb5 	bl	8000590 <__aeabi_dmul>
 8007826:	4642      	mov	r2, r8
 8007828:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800782c:	464b      	mov	r3, r9
 800782e:	4630      	mov	r0, r6
 8007830:	4639      	mov	r1, r7
 8007832:	f7f8 fead 	bl	8000590 <__aeabi_dmul>
 8007836:	3c01      	subs	r4, #1
 8007838:	4606      	mov	r6, r0
 800783a:	460f      	mov	r7, r1
 800783c:	e713      	b.n	8007666 <__kernel_rem_pio2+0x2c6>
 800783e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007842:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007846:	f7f8 fea3 	bl	8000590 <__aeabi_dmul>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4648      	mov	r0, r9
 8007850:	4651      	mov	r1, sl
 8007852:	f7f8 fce7 	bl	8000224 <__adddf3>
 8007856:	3701      	adds	r7, #1
 8007858:	4681      	mov	r9, r0
 800785a:	468a      	mov	sl, r1
 800785c:	9b00      	ldr	r3, [sp, #0]
 800785e:	429f      	cmp	r7, r3
 8007860:	dc02      	bgt.n	8007868 <__kernel_rem_pio2+0x4c8>
 8007862:	9b06      	ldr	r3, [sp, #24]
 8007864:	429f      	cmp	r7, r3
 8007866:	ddea      	ble.n	800783e <__kernel_rem_pio2+0x49e>
 8007868:	9a06      	ldr	r2, [sp, #24]
 800786a:	ab48      	add	r3, sp, #288	; 0x120
 800786c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007870:	e9c6 9a00 	strd	r9, sl, [r6]
 8007874:	3c01      	subs	r4, #1
 8007876:	e6fa      	b.n	800766e <__kernel_rem_pio2+0x2ce>
 8007878:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800787a:	2b02      	cmp	r3, #2
 800787c:	dc0b      	bgt.n	8007896 <__kernel_rem_pio2+0x4f6>
 800787e:	2b00      	cmp	r3, #0
 8007880:	dc39      	bgt.n	80078f6 <__kernel_rem_pio2+0x556>
 8007882:	d05d      	beq.n	8007940 <__kernel_rem_pio2+0x5a0>
 8007884:	9b02      	ldr	r3, [sp, #8]
 8007886:	f003 0007 	and.w	r0, r3, #7
 800788a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800788e:	ecbd 8b02 	vpop	{d8}
 8007892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007896:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007898:	2b03      	cmp	r3, #3
 800789a:	d1f3      	bne.n	8007884 <__kernel_rem_pio2+0x4e4>
 800789c:	9b05      	ldr	r3, [sp, #20]
 800789e:	9500      	str	r5, [sp, #0]
 80078a0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80078a4:	eb0d 0403 	add.w	r4, sp, r3
 80078a8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80078ac:	46a2      	mov	sl, r4
 80078ae:	9b00      	ldr	r3, [sp, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f1aa 0a08 	sub.w	sl, sl, #8
 80078b6:	dc69      	bgt.n	800798c <__kernel_rem_pio2+0x5ec>
 80078b8:	46aa      	mov	sl, r5
 80078ba:	f1ba 0f01 	cmp.w	sl, #1
 80078be:	f1a4 0408 	sub.w	r4, r4, #8
 80078c2:	f300 8083 	bgt.w	80079cc <__kernel_rem_pio2+0x62c>
 80078c6:	9c05      	ldr	r4, [sp, #20]
 80078c8:	ab48      	add	r3, sp, #288	; 0x120
 80078ca:	441c      	add	r4, r3
 80078cc:	2000      	movs	r0, #0
 80078ce:	2100      	movs	r1, #0
 80078d0:	2d01      	cmp	r5, #1
 80078d2:	f300 809a 	bgt.w	8007a0a <__kernel_rem_pio2+0x66a>
 80078d6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80078da:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80078de:	f1bb 0f00 	cmp.w	fp, #0
 80078e2:	f040 8098 	bne.w	8007a16 <__kernel_rem_pio2+0x676>
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	e9c3 7800 	strd	r7, r8, [r3]
 80078ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80078f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80078f4:	e7c6      	b.n	8007884 <__kernel_rem_pio2+0x4e4>
 80078f6:	9e05      	ldr	r6, [sp, #20]
 80078f8:	ab48      	add	r3, sp, #288	; 0x120
 80078fa:	441e      	add	r6, r3
 80078fc:	462c      	mov	r4, r5
 80078fe:	2000      	movs	r0, #0
 8007900:	2100      	movs	r1, #0
 8007902:	2c00      	cmp	r4, #0
 8007904:	da33      	bge.n	800796e <__kernel_rem_pio2+0x5ce>
 8007906:	f1bb 0f00 	cmp.w	fp, #0
 800790a:	d036      	beq.n	800797a <__kernel_rem_pio2+0x5da>
 800790c:	4602      	mov	r2, r0
 800790e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007912:	9c04      	ldr	r4, [sp, #16]
 8007914:	e9c4 2300 	strd	r2, r3, [r4]
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007920:	f7f8 fc7e 	bl	8000220 <__aeabi_dsub>
 8007924:	ae4a      	add	r6, sp, #296	; 0x128
 8007926:	2401      	movs	r4, #1
 8007928:	42a5      	cmp	r5, r4
 800792a:	da29      	bge.n	8007980 <__kernel_rem_pio2+0x5e0>
 800792c:	f1bb 0f00 	cmp.w	fp, #0
 8007930:	d002      	beq.n	8007938 <__kernel_rem_pio2+0x598>
 8007932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007936:	4619      	mov	r1, r3
 8007938:	9b04      	ldr	r3, [sp, #16]
 800793a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800793e:	e7a1      	b.n	8007884 <__kernel_rem_pio2+0x4e4>
 8007940:	9c05      	ldr	r4, [sp, #20]
 8007942:	ab48      	add	r3, sp, #288	; 0x120
 8007944:	441c      	add	r4, r3
 8007946:	2000      	movs	r0, #0
 8007948:	2100      	movs	r1, #0
 800794a:	2d00      	cmp	r5, #0
 800794c:	da09      	bge.n	8007962 <__kernel_rem_pio2+0x5c2>
 800794e:	f1bb 0f00 	cmp.w	fp, #0
 8007952:	d002      	beq.n	800795a <__kernel_rem_pio2+0x5ba>
 8007954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007958:	4619      	mov	r1, r3
 800795a:	9b04      	ldr	r3, [sp, #16]
 800795c:	e9c3 0100 	strd	r0, r1, [r3]
 8007960:	e790      	b.n	8007884 <__kernel_rem_pio2+0x4e4>
 8007962:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007966:	f7f8 fc5d 	bl	8000224 <__adddf3>
 800796a:	3d01      	subs	r5, #1
 800796c:	e7ed      	b.n	800794a <__kernel_rem_pio2+0x5aa>
 800796e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007972:	f7f8 fc57 	bl	8000224 <__adddf3>
 8007976:	3c01      	subs	r4, #1
 8007978:	e7c3      	b.n	8007902 <__kernel_rem_pio2+0x562>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	e7c8      	b.n	8007912 <__kernel_rem_pio2+0x572>
 8007980:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007984:	f7f8 fc4e 	bl	8000224 <__adddf3>
 8007988:	3401      	adds	r4, #1
 800798a:	e7cd      	b.n	8007928 <__kernel_rem_pio2+0x588>
 800798c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007990:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007994:	9b00      	ldr	r3, [sp, #0]
 8007996:	3b01      	subs	r3, #1
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	4632      	mov	r2, r6
 800799c:	463b      	mov	r3, r7
 800799e:	4640      	mov	r0, r8
 80079a0:	4649      	mov	r1, r9
 80079a2:	f7f8 fc3f 	bl	8000224 <__adddf3>
 80079a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4640      	mov	r0, r8
 80079b0:	4649      	mov	r1, r9
 80079b2:	f7f8 fc35 	bl	8000220 <__aeabi_dsub>
 80079b6:	4632      	mov	r2, r6
 80079b8:	463b      	mov	r3, r7
 80079ba:	f7f8 fc33 	bl	8000224 <__adddf3>
 80079be:	ed9d 7b06 	vldr	d7, [sp, #24]
 80079c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079c6:	ed8a 7b00 	vstr	d7, [sl]
 80079ca:	e770      	b.n	80078ae <__kernel_rem_pio2+0x50e>
 80079cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80079d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80079d4:	4640      	mov	r0, r8
 80079d6:	4632      	mov	r2, r6
 80079d8:	463b      	mov	r3, r7
 80079da:	4649      	mov	r1, r9
 80079dc:	f7f8 fc22 	bl	8000224 <__adddf3>
 80079e0:	e9cd 0100 	strd	r0, r1, [sp]
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4640      	mov	r0, r8
 80079ea:	4649      	mov	r1, r9
 80079ec:	f7f8 fc18 	bl	8000220 <__aeabi_dsub>
 80079f0:	4632      	mov	r2, r6
 80079f2:	463b      	mov	r3, r7
 80079f4:	f7f8 fc16 	bl	8000224 <__adddf3>
 80079f8:	ed9d 7b00 	vldr	d7, [sp]
 80079fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a00:	ed84 7b00 	vstr	d7, [r4]
 8007a04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a08:	e757      	b.n	80078ba <__kernel_rem_pio2+0x51a>
 8007a0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a0e:	f7f8 fc09 	bl	8000224 <__adddf3>
 8007a12:	3d01      	subs	r5, #1
 8007a14:	e75c      	b.n	80078d0 <__kernel_rem_pio2+0x530>
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	9a04      	ldr	r2, [sp, #16]
 8007a1a:	601f      	str	r7, [r3, #0]
 8007a1c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007a20:	605c      	str	r4, [r3, #4]
 8007a22:	609d      	str	r5, [r3, #8]
 8007a24:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007a28:	60d3      	str	r3, [r2, #12]
 8007a2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a2e:	6110      	str	r0, [r2, #16]
 8007a30:	6153      	str	r3, [r2, #20]
 8007a32:	e727      	b.n	8007884 <__kernel_rem_pio2+0x4e4>
 8007a34:	41700000 	.word	0x41700000
 8007a38:	3e700000 	.word	0x3e700000
 8007a3c:	00000000 	.word	0x00000000

08007a40 <scalbn>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	ec55 4b10 	vmov	r4, r5, d0
 8007a46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	b999      	cbnz	r1, 8007a78 <scalbn+0x38>
 8007a50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a54:	4323      	orrs	r3, r4
 8007a56:	d03f      	beq.n	8007ad8 <scalbn+0x98>
 8007a58:	4b35      	ldr	r3, [pc, #212]	; (8007b30 <scalbn+0xf0>)
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	ee10 0a10 	vmov	r0, s0
 8007a60:	2200      	movs	r2, #0
 8007a62:	f7f8 fd95 	bl	8000590 <__aeabi_dmul>
 8007a66:	4b33      	ldr	r3, [pc, #204]	; (8007b34 <scalbn+0xf4>)
 8007a68:	429e      	cmp	r6, r3
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	da10      	bge.n	8007a92 <scalbn+0x52>
 8007a70:	a327      	add	r3, pc, #156	; (adr r3, 8007b10 <scalbn+0xd0>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	e01f      	b.n	8007ab8 <scalbn+0x78>
 8007a78:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007a7c:	4291      	cmp	r1, r2
 8007a7e:	d10c      	bne.n	8007a9a <scalbn+0x5a>
 8007a80:	ee10 2a10 	vmov	r2, s0
 8007a84:	4620      	mov	r0, r4
 8007a86:	4629      	mov	r1, r5
 8007a88:	f7f8 fbcc 	bl	8000224 <__adddf3>
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	460d      	mov	r5, r1
 8007a90:	e022      	b.n	8007ad8 <scalbn+0x98>
 8007a92:	460b      	mov	r3, r1
 8007a94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007a98:	3936      	subs	r1, #54	; 0x36
 8007a9a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007a9e:	4296      	cmp	r6, r2
 8007aa0:	dd0d      	ble.n	8007abe <scalbn+0x7e>
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	a11c      	add	r1, pc, #112	; (adr r1, 8007b18 <scalbn+0xd8>)
 8007aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aaa:	da02      	bge.n	8007ab2 <scalbn+0x72>
 8007aac:	a11c      	add	r1, pc, #112	; (adr r1, 8007b20 <scalbn+0xe0>)
 8007aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab2:	a319      	add	r3, pc, #100	; (adr r3, 8007b18 <scalbn+0xd8>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fd6a 	bl	8000590 <__aeabi_dmul>
 8007abc:	e7e6      	b.n	8007a8c <scalbn+0x4c>
 8007abe:	1872      	adds	r2, r6, r1
 8007ac0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007ac4:	428a      	cmp	r2, r1
 8007ac6:	dcec      	bgt.n	8007aa2 <scalbn+0x62>
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	dd08      	ble.n	8007ade <scalbn+0x9e>
 8007acc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ad0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ad4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ad8:	ec45 4b10 	vmov	d0, r4, r5
 8007adc:	bd70      	pop	{r4, r5, r6, pc}
 8007ade:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007ae2:	da08      	bge.n	8007af6 <scalbn+0xb6>
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	a10a      	add	r1, pc, #40	; (adr r1, 8007b10 <scalbn+0xd0>)
 8007ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aec:	dac0      	bge.n	8007a70 <scalbn+0x30>
 8007aee:	a10e      	add	r1, pc, #56	; (adr r1, 8007b28 <scalbn+0xe8>)
 8007af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af4:	e7bc      	b.n	8007a70 <scalbn+0x30>
 8007af6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007afa:	3236      	adds	r2, #54	; 0x36
 8007afc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007b04:	4620      	mov	r0, r4
 8007b06:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <scalbn+0xf8>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	e7d5      	b.n	8007ab8 <scalbn+0x78>
 8007b0c:	f3af 8000 	nop.w
 8007b10:	c2f8f359 	.word	0xc2f8f359
 8007b14:	01a56e1f 	.word	0x01a56e1f
 8007b18:	8800759c 	.word	0x8800759c
 8007b1c:	7e37e43c 	.word	0x7e37e43c
 8007b20:	8800759c 	.word	0x8800759c
 8007b24:	fe37e43c 	.word	0xfe37e43c
 8007b28:	c2f8f359 	.word	0xc2f8f359
 8007b2c:	81a56e1f 	.word	0x81a56e1f
 8007b30:	43500000 	.word	0x43500000
 8007b34:	ffff3cb0 	.word	0xffff3cb0
 8007b38:	3c900000 	.word	0x3c900000
 8007b3c:	00000000 	.word	0x00000000

08007b40 <floor>:
 8007b40:	ec51 0b10 	vmov	r0, r1, d0
 8007b44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007b50:	2e13      	cmp	r6, #19
 8007b52:	ee10 5a10 	vmov	r5, s0
 8007b56:	ee10 8a10 	vmov	r8, s0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	dc31      	bgt.n	8007bc2 <floor+0x82>
 8007b5e:	2e00      	cmp	r6, #0
 8007b60:	da14      	bge.n	8007b8c <floor+0x4c>
 8007b62:	a333      	add	r3, pc, #204	; (adr r3, 8007c30 <floor+0xf0>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f7f8 fb5c 	bl	8000224 <__adddf3>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f7f8 ff9e 	bl	8000ab0 <__aeabi_dcmpgt>
 8007b74:	b138      	cbz	r0, 8007b86 <floor+0x46>
 8007b76:	2c00      	cmp	r4, #0
 8007b78:	da53      	bge.n	8007c22 <floor+0xe2>
 8007b7a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007b7e:	4325      	orrs	r5, r4
 8007b80:	d052      	beq.n	8007c28 <floor+0xe8>
 8007b82:	4c2d      	ldr	r4, [pc, #180]	; (8007c38 <floor+0xf8>)
 8007b84:	2500      	movs	r5, #0
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	e024      	b.n	8007bd6 <floor+0x96>
 8007b8c:	4f2b      	ldr	r7, [pc, #172]	; (8007c3c <floor+0xfc>)
 8007b8e:	4137      	asrs	r7, r6
 8007b90:	ea01 0307 	and.w	r3, r1, r7
 8007b94:	4303      	orrs	r3, r0
 8007b96:	d01e      	beq.n	8007bd6 <floor+0x96>
 8007b98:	a325      	add	r3, pc, #148	; (adr r3, 8007c30 <floor+0xf0>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f7f8 fb41 	bl	8000224 <__adddf3>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f7f8 ff83 	bl	8000ab0 <__aeabi_dcmpgt>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d0eb      	beq.n	8007b86 <floor+0x46>
 8007bae:	2c00      	cmp	r4, #0
 8007bb0:	bfbe      	ittt	lt
 8007bb2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007bb6:	4133      	asrlt	r3, r6
 8007bb8:	18e4      	addlt	r4, r4, r3
 8007bba:	ea24 0407 	bic.w	r4, r4, r7
 8007bbe:	2500      	movs	r5, #0
 8007bc0:	e7e1      	b.n	8007b86 <floor+0x46>
 8007bc2:	2e33      	cmp	r6, #51	; 0x33
 8007bc4:	dd0b      	ble.n	8007bde <floor+0x9e>
 8007bc6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007bca:	d104      	bne.n	8007bd6 <floor+0x96>
 8007bcc:	ee10 2a10 	vmov	r2, s0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	f7f8 fb27 	bl	8000224 <__adddf3>
 8007bd6:	ec41 0b10 	vmov	d0, r0, r1
 8007bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bde:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007be2:	f04f 37ff 	mov.w	r7, #4294967295
 8007be6:	40df      	lsrs	r7, r3
 8007be8:	4238      	tst	r0, r7
 8007bea:	d0f4      	beq.n	8007bd6 <floor+0x96>
 8007bec:	a310      	add	r3, pc, #64	; (adr r3, 8007c30 <floor+0xf0>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 fb17 	bl	8000224 <__adddf3>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f7f8 ff59 	bl	8000ab0 <__aeabi_dcmpgt>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d0c1      	beq.n	8007b86 <floor+0x46>
 8007c02:	2c00      	cmp	r4, #0
 8007c04:	da0a      	bge.n	8007c1c <floor+0xdc>
 8007c06:	2e14      	cmp	r6, #20
 8007c08:	d101      	bne.n	8007c0e <floor+0xce>
 8007c0a:	3401      	adds	r4, #1
 8007c0c:	e006      	b.n	8007c1c <floor+0xdc>
 8007c0e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007c12:	2301      	movs	r3, #1
 8007c14:	40b3      	lsls	r3, r6
 8007c16:	441d      	add	r5, r3
 8007c18:	45a8      	cmp	r8, r5
 8007c1a:	d8f6      	bhi.n	8007c0a <floor+0xca>
 8007c1c:	ea25 0507 	bic.w	r5, r5, r7
 8007c20:	e7b1      	b.n	8007b86 <floor+0x46>
 8007c22:	2500      	movs	r5, #0
 8007c24:	462c      	mov	r4, r5
 8007c26:	e7ae      	b.n	8007b86 <floor+0x46>
 8007c28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007c2c:	e7ab      	b.n	8007b86 <floor+0x46>
 8007c2e:	bf00      	nop
 8007c30:	8800759c 	.word	0x8800759c
 8007c34:	7e37e43c 	.word	0x7e37e43c
 8007c38:	bff00000 	.word	0xbff00000
 8007c3c:	000fffff 	.word	0x000fffff

08007c40 <memset>:
 8007c40:	4402      	add	r2, r0
 8007c42:	4603      	mov	r3, r0
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d100      	bne.n	8007c4a <memset+0xa>
 8007c48:	4770      	bx	lr
 8007c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c4e:	e7f9      	b.n	8007c44 <memset+0x4>

08007c50 <__libc_init_array>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	4d0d      	ldr	r5, [pc, #52]	; (8007c88 <__libc_init_array+0x38>)
 8007c54:	4c0d      	ldr	r4, [pc, #52]	; (8007c8c <__libc_init_array+0x3c>)
 8007c56:	1b64      	subs	r4, r4, r5
 8007c58:	10a4      	asrs	r4, r4, #2
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	42a6      	cmp	r6, r4
 8007c5e:	d109      	bne.n	8007c74 <__libc_init_array+0x24>
 8007c60:	4d0b      	ldr	r5, [pc, #44]	; (8007c90 <__libc_init_array+0x40>)
 8007c62:	4c0c      	ldr	r4, [pc, #48]	; (8007c94 <__libc_init_array+0x44>)
 8007c64:	f000 f818 	bl	8007c98 <_init>
 8007c68:	1b64      	subs	r4, r4, r5
 8007c6a:	10a4      	asrs	r4, r4, #2
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	42a6      	cmp	r6, r4
 8007c70:	d105      	bne.n	8007c7e <__libc_init_array+0x2e>
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c78:	4798      	blx	r3
 8007c7a:	3601      	adds	r6, #1
 8007c7c:	e7ee      	b.n	8007c5c <__libc_init_array+0xc>
 8007c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c82:	4798      	blx	r3
 8007c84:	3601      	adds	r6, #1
 8007c86:	e7f2      	b.n	8007c6e <__libc_init_array+0x1e>
 8007c88:	08007e98 	.word	0x08007e98
 8007c8c:	08007e98 	.word	0x08007e98
 8007c90:	08007e98 	.word	0x08007e98
 8007c94:	08007e9c 	.word	0x08007e9c

08007c98 <_init>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr

08007ca4 <_fini>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr
